{"nodes":[{"pos":[2831,2837],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[4719,4736],"content":"CompareTo(Double)","needQuote":true,"nodes":[{"content":"CompareTo(Double)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number to compare.","pos":[5563,5620],"source":"\\n<p>A double-precision floating-point number to compare."},{"content":"&lt;/p&gt;\\n","pos":[5621,5627],"source":" </p>\\n"},{"pos":[7313,7327],"content":"Equals(Double)","needQuote":true,"nodes":[{"content":"Equals(Double)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; is equal to this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8235,8347],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8914,8928],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance.","pos":[9581,9626],"source":"\\n<p>An object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[9627,9633],"source":" </p>\\n"},{"pos":[10355,10368],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[11021,11066],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[11426,11444],"content":"IsInfinity(Double)","needQuote":true,"nodes":[{"content":"IsInfinity(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number.","pos":[12246,12292],"source":"\\n<p>A double-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[12293,12299],"source":" </p>\\n"},{"pos":[13379,13392],"content":"IsNaN(Double)","needQuote":true,"nodes":[{"content":"IsNaN(Double)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number.","pos":[14380,14426],"source":"\\n<p>A double-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[14427,14433],"source":" </p>\\n"},{"pos":[15079,15105],"content":"IsNegativeInfinity(Double)","needQuote":true,"nodes":[{"content":"IsNegativeInfinity(Double)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number.","pos":[15867,15913],"source":"\\n<p>A double-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[15914,15920],"source":" </p>\\n"},{"pos":[16937,16963],"content":"IsPositiveInfinity(Double)","needQuote":true,"nodes":[{"content":"IsPositiveInfinity(Double)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number.","pos":[17725,17771],"source":"\\n<p>A double-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[17772,17778],"source":" </p>\\n"},{"pos":[18816,18840],"content":"Equality(Double, Double)","needQuote":true,"nodes":[{"content":"Equality(Double, Double)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[19676,19708],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[19709,19715],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[19779,19818],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19879,19995],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20372,20399],"content":"GreaterThan(Double, Double)","needQuote":true,"nodes":[{"content":"GreaterThan(Double, Double)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[21339,21377],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[21441,21480],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21541,21659],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22060,22094],"content":"GreaterThanOrEqual(Double, Double)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Double, Double)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[23064,23102],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[23166,23205],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23266,23396],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23780,23806],"content":"Inequality(Double, Double)","needQuote":true,"nodes":[{"content":"Inequality(Double, Double)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[24651,24689],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[24753,24792],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24853,24973],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25343,25367],"content":"LessThan(Double, Double)","needQuote":true,"nodes":[{"content":"LessThan(Double, Double)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[26300,26338],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[26402,26441],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26502,26617],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27006,27037],"content":"LessThanOrEqual(Double, Double)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Double, Double)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[27998,28036],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[28100,28139],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28200,28327],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28642,28655],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[29318,29366],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[29367,29373],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29433,29559],"source":"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29678,29721],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29722,29728],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a number in a valid format.","pos":[29821,29885],"source":"\\n<p>\\n<em>s</em> does not represent a number in a valid format."},{"content":"&lt;/p&gt;\\n","pos":[29886,29892],"source":" </p>\\n"},{"pos":[30850,30877],"content":"Parse(String, NumberStyles)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[31639,31687],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[31688,31694],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32231,32357],"source":"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32476,32519],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32520,32526],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a number in a valid format.","pos":[32619,32683],"source":"\\n<p>\\n<em>s</em> does not represent a number in a valid format."},{"content":"&lt;/p&gt;\\n","pos":[32684,32690],"source":" </p>\\n"},{"pos":[34137,34181],"content":"Parse(String, NumberStyles, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles, IFormatProvider)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[35050,35098],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[35099,35105],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[35641,35727],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[35728,35734],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35794,35920],"source":"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36039,36082],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36083,36089],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a numeric value.","pos":[36182,36235],"source":"\\n<p>\\n<em>s</em> does not represent a numeric value."},{"content":"&lt;/p&gt;\\n","pos":[36236,36242],"source":" </p>\\n"},{"pos":[37464,37494],"content":"Parse(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[38275,38323],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[38324,38330],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[38406,38492],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[38493,38499],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38559,38685],"source":"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38804,38847],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38848,38854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a number in a valid format.","pos":[38947,39011],"source":"\\n<p>\\n<em>s</em> does not represent a number in a valid format."},{"content":"&lt;/p&gt;\\n","pos":[39012,39018],"source":" </p>\\n"},{"pos":[39974,40003],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[41118,41144],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[42228,42267],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[43130,43167],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of the current instance is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43228,43347],"source":"\\n<p>\\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[43897,43933],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[44775,44812],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[45541,45577],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[46432,46469],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.","pos":[46527,46565],"source":"\\n<p>This conversion is not supported."},{"content":"No value is returned.&lt;/p&gt;\\n","pos":[46566,46593],"source":" No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[46710,46734],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[47284,47324],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[48201,48238],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.","pos":[48300,48338],"source":"\\n<p>This conversion is not supported."},{"content":"No value is returned.&lt;/p&gt;\\n","pos":[48339,48366],"source":" No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[48483,48507],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[49070,49109],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[49975,50012],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[50765,50803],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[51661,51698],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the current instance, unchanged.&lt;/p&gt;\\n","pos":[51758,51814],"source":"\\n<p>The value of the current instance, unchanged.</p>\\n"},{"pos":[52363,52400],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[53250,53287],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[54026,54063],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[54913,54950],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[55689,55726],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[56574,56611],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[57350,57387],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[58237,58274],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[59016,59054],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[59911,59948],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[60725,60767],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The value of the current instance, converted to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n","pos":[62103,62176],"source":"\\n<p>The value of the current instance, converted to <em>type</em>.</p>\\n"},{"pos":[62750,62788],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.","pos":[63646,63677],"source":"\\n<p>This parameter is ignored."},{"content":"&lt;/p&gt;\\n","pos":[63678,63684],"source":" </p>\\n"},{"pos":[64431,64469],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.","pos":[65327,65358],"source":"\\n<p>This parameter is ignored."},{"content":"&lt;/p&gt;\\n","pos":[65361,65367],"source":"   </p>\\n"},{"pos":[66114,66152],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[67008,67045],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[67646,67656],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the value of this instance.&lt;/p&gt;\\n","pos":[68344,68411],"source":"\\n<p>The string representation of the value of this instance.</p>\\n"},{"pos":[68949,68974],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[69806,69875],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[69876,69882],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69942,70043],"source":"\\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\\n"},{"pos":[70573,70589],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A numeric format string.&lt;/p&gt;\\n","pos":[71351,71386],"source":"\\n<p>A numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt;.&lt;/p&gt;\\n","pos":[71446,71545],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[71652,71686],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[71687,71693],"source":" </p>\\n"},{"pos":[72157,72190],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A numeric format string.&lt;/p&gt;\\n","pos":[73070,73105],"source":"\\n<p>A numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[73181,73250],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[73251,73257],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73317,73438],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\\n"},{"pos":[73980,74008],"content":"TryParse(String, out Double)","needQuote":true,"nodes":[{"content":"TryParse(String, out Double)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A string containing a number to convert.","pos":[74813,74858],"source":"\\n<p>A string containing a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[74859,74865],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[75704,75815],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[76706,76765],"content":"TryParse(String, NumberStyles, IFormatProvider, out Double)","needQuote":true,"nodes":[{"content":"TryParse(String, NumberStyles, IFormatProvider, out Double)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;A string containing a number to convert.","pos":[77776,77821],"source":"\\n<p>A string containing a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[77822,77828],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79638,79749],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[80853,80861],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[81793,81801],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[82727,82734],"content":"Epsilon","needQuote":true,"nodes":[{"content":"Epsilon","pos":[0,7]}]},{"pos":[83700,83716],"content":"NegativeInfinity","needQuote":true,"nodes":[{"content":"NegativeInfinity","pos":[0,16]}]},{"pos":[84923,84939],"content":"PositiveInfinity","needQuote":true,"nodes":[{"content":"PositiveInfinity","pos":[0,16]}]},{"pos":[86105,86108],"content":"NaN","needQuote":true,"nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[86938,86944],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[87080,87091],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[87286,87305],"content":"IComparable<Double>","needQuote":true,"nodes":[{"content":"IComparable&lt;Double&gt;","pos":[0,19],"source":"IComparable<Double>"}]},{"pos":[87493,87504],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[87548,87549],"content":"<","needQuote":true,"nodes":[]},{"pos":[87599,87605],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[87738,87749],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[87794,87797]},{"pos":[87854,87860],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[87920,87921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88137,88149],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[88345,88363],"content":"IEquatable<Double>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Double&gt;","pos":[0,18],"source":"IEquatable<Double>"}]},{"pos":[88547,88557],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[88600,88601],"content":"<","needQuote":true,"nodes":[]},{"pos":[88651,88657],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[88789,88799],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[88843,88846]},{"pos":[88903,88909],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[88969,88970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89183,89195],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[89400,89422],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[89570,89576],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89643,89644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89694,89700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[89761,89762]},{"pos":[89817,89823],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89883,89884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89981,89987],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[90054,90055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90105,90111],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90172,90173]},{"pos":[90228,90234],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90294,90295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90540,90571],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[90737,90752],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[90828,90829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90879,90885],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90946,90947]},{"pos":[91002,91008],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91068,91069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91175,91190],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[91266,91267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91317,91323],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91384,91385]},{"pos":[91440,91446],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91506,91507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91733,91742],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[91835,91842],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[91910,91911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91938,91939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92008,92015],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[92083,92084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92111,92112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92255,92269],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[92428,92439],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[92483,92484],"content":"<","needQuote":true,"nodes":[]},{"pos":[92511,92512],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[92612,92623],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[92668,92671]},{"pos":[92705,92706],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[92733,92734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92910,92923],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[93078,93088],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[93131,93132],"content":"<","needQuote":true,"nodes":[]},{"pos":[93159,93160],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[93259,93269],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[93313,93316]},{"pos":[93350,93351],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[93378,93379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93563,93569],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93815,93832],"content":"CompareTo(Double)","needQuote":true,"nodes":[{"content":"CompareTo(Double)","pos":[0,17]}]},{"pos":[94050,94059],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[94128,94129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94179,94185],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[94245,94246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94328,94337],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[94409,94410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94460,94466],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[94526,94527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94798,94804],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[94948,94953],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95099,95111],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[95281,95290],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[95347,95348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95375,95376],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[95403,95404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95486,95495],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[95555,95556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95583,95584],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[95611,95612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95931,95945],"content":"Equals(Double)","needQuote":true,"nodes":[{"content":"Equals(Double)","pos":[0,14]}]},{"pos":[96151,96157],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96222,96223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96273,96279],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[96339,96340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96418,96424],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96492,96493],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96543,96549],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[96609,96610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96870,96877],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[97025,97034],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[97192,97198],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97251,97252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97279,97280],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[97307,97308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97386,97392],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97448,97449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97476,97477],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[97504,97505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97754,97768],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[97893,97899],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97948,97949],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97999,98005],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98065,98066],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98152,98158],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[98207,98208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98258,98264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98324,98325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98506,98515],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[98694,98707],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[98814,98825],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[98879,98880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98907,98908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98984,98995],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[99049,99050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99077,99078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99245,99251],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[99430,99442],"content":"NumberStyles","needQuote":true,"nodes":[{"content":"NumberStyles","pos":[0,12]}]},{"pos":[99623,99643],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[99825,99840],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[100053,100070],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[100205,100214],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[100268,100269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100319,100325],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100385,100386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100477,100486],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[100540,100541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100591,100597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100657,100658],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100877,100890],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[101003,101014],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[101071,101072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101099,101100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101179,101190],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[101247,101248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101275,101276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101451,101459],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[101663,101689],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[101844,101853],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[101908,101909],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101968,101983],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[102031,102032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102133,102142],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[102197,102198],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102257,102272],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[102320,102321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102579,102602],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[102751,102757],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[102809,102810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102869,102884],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[102932,102933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103031,103037],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[103089,103090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103149,103164],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[103212,103213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103413,103417],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[103606,103629],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[103778,103784],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[103836,103837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103896,103911],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[103959,103960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104058,104064],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[104116,104117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104176,104191],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[104239,104240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104440,104444],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[104637,104664],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[104821,104831],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[104887,104888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104947,104962],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[105010,105011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105113,105123],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[105179,105180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105239,105254],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[105302,105303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105515,105523],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[105727,105753],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[105908,105917],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[105972,105973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106032,106047],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[106095,106096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106197,106206],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[106261,106262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106321,106336],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[106384,106385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106594,106601],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[106801,106826],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[106979,106987],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[107041,107042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107101,107116],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[107164,107165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107265,107273],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[107327,107328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107387,107402],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[107450,107451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107708,107732],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[107883,107890],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[107943,107944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108003,108018],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[108066,108067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108166,108173],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[108226,108227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108286,108301],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[108349,108350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108553,108558],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[108751,108775],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[108926,108933],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[108986,108987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109046,109061],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[109109,109110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109209,109216],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[109269,109270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109329,109344],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[109392,109393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109648,109672],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[109823,109830],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[109883,109884],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109943,109958],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[110006,110007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110106,110113],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[110166,110167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110226,110241],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[110289,110290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110493,110498],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[110691,110715],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[110866,110873],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[110926,110927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110986,111001],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[111049,111050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111149,111156],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[111209,111210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111269,111284],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[111332,111333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111536,111541],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[111735,111760],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[111913,111921],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[111975,111976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112035,112050],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[112098,112099],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112199,112207],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[112261,112262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112321,112336],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[112384,112385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112591,112597],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[112804,112833],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[113007,113013],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[113065,113066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113114,113118],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[113156,113157]},{"pos":[113221,113236],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[113284,113285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113395,113401],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[113453,113454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113502,113506],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[113544,113545]},{"pos":[113609,113624],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[113672,113673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113891,113895],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[114086,114111],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[114264,114272],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[114326,114327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114386,114401],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[114449,114450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114550,114558],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[114612,114613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114672,114687],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[114735,114736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114942,114948],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[115145,115170],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[115323,115331],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[115385,115386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115445,115460],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[115508,115509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115609,115617],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[115671,115672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115731,115746],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[115794,115795],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116001,116007],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[116204,116229],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[116382,116390],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[116444,116445],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116504,116519],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[116567,116568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116668,116676],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[116730,116731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116790,116805],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[116853,116854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117060,117066],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[117233,117243],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[117344,117352],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[117403,117404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117431,117432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117505,117513],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[117564,117565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117592,117593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117806,117831],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[117984,117992],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[118046,118047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118106,118121],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[118169,118170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118270,118278],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[118332,118333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118392,118407],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[118455,118456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118727,118760],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[118942,118950],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[119004,119005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119055,119061],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[119122,119123]},{"pos":[119187,119202],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[119250,119251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119365,119373],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[119427,119428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119478,119484],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[119545,119546]},{"pos":[119610,119625],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[119673,119674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119900,119921],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[120120,120135],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[120301,120318],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[120507,120524],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[120699,120719],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Double\n  commentId: T:System.Double\n  id: Double\n  parent: System\n  children:\n  - System.Double.CompareTo(System.Double)\n  - System.Double.Epsilon\n  - System.Double.Equals(System.Double)\n  - System.Double.Equals(System.Object)\n  - System.Double.GetHashCode\n  - System.Double.IsInfinity(System.Double)\n  - System.Double.IsNaN(System.Double)\n  - System.Double.IsNegativeInfinity(System.Double)\n  - System.Double.IsPositiveInfinity(System.Double)\n  - System.Double.MaxValue\n  - System.Double.MinValue\n  - System.Double.NaN\n  - System.Double.NegativeInfinity\n  - System.Double.op_Equality(System.Double,System.Double)\n  - System.Double.op_GreaterThan(System.Double,System.Double)\n  - System.Double.op_GreaterThanOrEqual(System.Double,System.Double)\n  - System.Double.op_Inequality(System.Double,System.Double)\n  - System.Double.op_LessThan(System.Double,System.Double)\n  - System.Double.op_LessThanOrEqual(System.Double,System.Double)\n  - System.Double.Parse(System.String)\n  - System.Double.Parse(System.String,System.Globalization.NumberStyles)\n  - System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  - System.Double.Parse(System.String,System.IFormatProvider)\n  - System.Double.PositiveInfinity\n  - System.Double.System#IComparable#CompareTo(System.Object)\n  - System.Double.System#IConvertible#GetTypeCode\n  - System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.Double.ToString\n  - System.Double.ToString(System.IFormatProvider)\n  - System.Double.ToString(System.String)\n  - System.Double.ToString(System.String,System.IFormatProvider)\n  - System.Double.TryParse(System.String,System.Double@)\n  - System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)\n  langs:\n  - csharp\n  - vb\n  name: Double\n  fullName: System.Double\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Double\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 22\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [StructLayout(LayoutKind.Sequential)]\n\n      [ComVisible(true)]\n\n      public struct Double : IComparable, IFormattable, IConvertible, IComparable<double>, IEquatable<double>\n    content.vb: >-\n      <Serializable>\n\n      <StructLayout(LayoutKind.Sequential)>\n\n      <ComVisible(True)>\n\n      Public Structure Double\n          Implements IComparable, IFormattable, IConvertible, IComparable(Of Double), IEquatable(Of Double)\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  - type: System.Single\n    commentId: T:System.Single\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Double}\n  - System.IConvertible\n  - System.IEquatable{System.Double}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Double\n- uid: System.Double.CompareTo(System.Double)\n  commentId: M:System.Double.CompareTo(System.Double)\n  id: CompareTo(System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Double)\n  fullName: System.Double.CompareTo(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 122\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public int CompareTo(double value)\n    content.vb: Public Function CompareTo(value As Double) As Integer\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\\n<p>Return Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>This instance is not a number (<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) and <em>value</em> is a number. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>.</p>\\n<p>-or- </p>\\n<p>Both this instance and <em>value</em> are not a number (<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>), <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>This instance is a number and <em>value</em> is not a number (<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Double.Equals(System.Object)\n    commentId: M:System.Double.Equals(System.Object)\n  implements:\n  - System.IComparable{System.Double}.CompareTo(System.Double)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Double.CompareTo(Double)\n- uid: System.Double.Equals(System.Double)\n  commentId: M:System.Double.Equals(System.Double)\n  id: Equals(System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Equals(Double)\n  fullName: System.Double.Equals(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 178\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance and a specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represent the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(double obj)\n    content.vb: Public Function Equals(obj As Double) As Boolean\n    parameters:\n    - id: obj\n      type: System.Double\n      description: \"\\n<p>A <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare to this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.Equals(System.Object)\n    commentId: M:System.Double.Equals(System.Object)\n  - type: System.Double.CompareTo(System.Double)\n    commentId: M:System.Double.CompareTo(System.Double)\n  implements:\n  - System.IEquatable{System.Double}.Equals(System.Double)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Double.Equals(Double)\n- uid: System.Double.Equals(System.Object)\n  commentId: M:System.Double.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Double.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 136\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.Double.CompareTo(System.Object)\n    commentId: M:System.Double.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Double.Equals(Object)\n- uid: System.Double.GetHashCode\n  commentId: M:System.Double.GetHashCode\n  id: GetHashCode\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Double.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 189\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Double.GetHashCode()\n- uid: System.Double.IsInfinity(System.Double)\n  commentId: M:System.Double.IsInfinity(System.Double)\n  id: IsInfinity(System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IsInfinity(Double)\n  fullName: System.Double.IsInfinity(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsInfinity\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 45\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the specified number evaluates to negative or positive infinity </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool IsInfinity(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function IsInfinity(d As Double) As Boolean\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d</em> evaluates to <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.IsPositiveInfinity(System.Double)\n    commentId: M:System.Double.IsPositiveInfinity(System.Double)\n  - type: System.Double.IsNegativeInfinity(System.Double)\n    commentId: M:System.Double.IsNegativeInfinity(System.Double)\n  - type: System.Double.PositiveInfinity\n    commentId: F:System.Double.PositiveInfinity\n  - type: System.Double.NegativeInfinity\n    commentId: F:System.Double.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.IsInfinity(Double)\n- uid: System.Double.IsNaN(System.Double)\n  commentId: M:System.Double.IsNaN(System.Double)\n  id: IsNaN(System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IsNaN(Double)\n  fullName: System.Double.IsNaN(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNaN\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the specified value is not a number (<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool IsNaN(double d)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function IsNaN(d As Double) As Boolean\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d</em> evaluates to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.NaN\n    commentId: F:System.Double.NaN\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.IsNaN(Double)\n- uid: System.Double.IsNegativeInfinity(System.Double)\n  commentId: M:System.Double.IsNegativeInfinity(System.Double)\n  id: IsNegativeInfinity(System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IsNegativeInfinity(Double)\n  fullName: System.Double.IsNegativeInfinity(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNegativeInfinity\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the specified number evaluates to negative infinity.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool IsNegativeInfinity(double d)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Function IsNegativeInfinity(d As Double) As Boolean\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d</em> evaluates to <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.IsInfinity(System.Double)\n    commentId: M:System.Double.IsInfinity(System.Double)\n  - type: System.Double.IsPositiveInfinity(System.Double)\n    commentId: M:System.Double.IsPositiveInfinity(System.Double)\n  - type: System.Double.PositiveInfinity\n    commentId: F:System.Double.PositiveInfinity\n  - type: System.Double.NegativeInfinity\n    commentId: F:System.Double.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.IsNegativeInfinity(Double)\n- uid: System.Double.IsPositiveInfinity(System.Double)\n  commentId: M:System.Double.IsPositiveInfinity(System.Double)\n  id: IsPositiveInfinity(System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IsPositiveInfinity(Double)\n  fullName: System.Double.IsPositiveInfinity(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPositiveInfinity\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 52\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the specified number evaluates to positive infinity.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool IsPositiveInfinity(double d)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Function IsPositiveInfinity(d As Double) As Boolean\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d</em> evaluates to <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.IsInfinity(System.Double)\n    commentId: M:System.Double.IsInfinity(System.Double)\n  - type: System.Double.IsNegativeInfinity(System.Double)\n    commentId: M:System.Double.IsNegativeInfinity(System.Double)\n  - type: System.Double.PositiveInfinity\n    commentId: F:System.Double.PositiveInfinity\n  - type: System.Double.NegativeInfinity\n    commentId: F:System.Double.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.IsPositiveInfinity(Double)\n- uid: System.Double.op_Equality(System.Double,System.Double)\n  commentId: M:System.Double.op_Equality(System.Double,System.Double)\n  id: op_Equality(System.Double,System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Equality(Double, Double)\n  fullName: System.Double.Equality(System.Double, System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 148\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether two specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator ==(double left, double right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator =(left As Double, right As Double) As Boolean\n    parameters:\n    - id: left\n      type: System.Double\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: right\n      type: System.Double\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.Equality(Double, Double)\n- uid: System.Double.op_GreaterThan(System.Double,System.Double)\n  commentId: M:System.Double.op_GreaterThan(System.Double,System.Double)\n  id: op_GreaterThan(System.Double,System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Double, Double)\n  fullName: System.Double.GreaterThan(System.Double, System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThan\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 163\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than another specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator>(double left, double right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator>(left As Double, right As Double) As Boolean\n    parameters:\n    - id: left\n      type: System.Double\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Double\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.GreaterThan(Double, Double)\n- uid: System.Double.op_GreaterThanOrEqual(System.Double,System.Double)\n  commentId: M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)\n  id: op_GreaterThanOrEqual(System.Double,System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Double, Double)\n  fullName: System.Double.GreaterThanOrEqual(System.Double, System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThanOrEqual\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 173\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than or equal to another specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator >=(double left, double right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator >=(left As Double, right As Double) As Boolean\n    parameters:\n    - id: left\n      type: System.Double\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Double\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.GreaterThanOrEqual(Double, Double)\n- uid: System.Double.op_Inequality(System.Double,System.Double)\n  commentId: M:System.Double.op_Inequality(System.Double,System.Double)\n  id: op_Inequality(System.Double,System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Double, Double)\n  fullName: System.Double.Inequality(System.Double, System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 153\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether two specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are not equal.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator !=(double left, double right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator <>(left As Double, right As Double) As Boolean\n    parameters:\n    - id: left\n      type: System.Double\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Double\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.Inequality(Double, Double)\n- uid: System.Double.op_LessThan(System.Double,System.Double)\n  commentId: M:System.Double.op_LessThan(System.Double,System.Double)\n  id: op_LessThan(System.Double,System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Double, Double)\n  fullName: System.Double.LessThan(System.Double, System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThan\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 158\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than another specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator <(double left, double right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator <(left As Double, right As Double) As Boolean\n    parameters:\n    - id: left\n      type: System.Double\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Double\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.LessThan(Double, Double)\n- uid: System.Double.op_LessThanOrEqual(System.Double,System.Double)\n  commentId: M:System.Double.op_LessThanOrEqual(System.Double,System.Double)\n  id: op_LessThanOrEqual(System.Double,System.Double)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Double, Double)\n  fullName: System.Double.LessThanOrEqual(System.Double, System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThanOrEqual\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than or equal to another specified <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator <=(double left, double right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator <=(left As Double, right As Double) As Boolean\n    parameters:\n    - id: left\n      type: System.Double\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Double\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.LessThanOrEqual(Double, Double)\n- uid: System.Double.Parse(System.String)\n  commentId: M:System.Double.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Double.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 224\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its double-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static double Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a number in a valid format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double.ToString\n    commentId: M:System.Double.ToString\n  - type: System.Double.TryParse(System.String,System.Double@)\n    commentId: M:System.Double.TryParse(System.String,System.Double@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.Parse(String)\n- uid: System.Double.Parse(System.String,System.Globalization.NumberStyles)\n  commentId: M:System.Double.Parse(System.String,System.Globalization.NumberStyles)\n  id: Parse(System.String,System.Globalization.NumberStyles)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles)\n  fullName: System.Double.Parse(System.String, System.Globalization.NumberStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 228\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static double Parse(string s, NumberStyles style)\n    content.vb: Public Shared Function Parse(s As String, style As NumberStyles) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicate the style elements that can be present in <em>s</em>. A typical value to specify is a combination of <xref href=\\\"System.Globalization.NumberStyles.Float\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined with <xref href=\\\"System.Globalization.NumberStyles.AllowThousands\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a number in a valid format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Double.ToString\n    commentId: M:System.Double.ToString\n  - type: System.Double.TryParse(System.String,System.Double@)\n    commentId: M:System.Double.TryParse(System.String,System.Double@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.Parse(String, NumberStyles)\n- uid: System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  commentId: M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles, IFormatProvider)\n  fullName: System.Double.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 237\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static double Parse(string s, NumberStyles style, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, style As NumberStyles, provider As IFormatProvider) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicate the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Float\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined with <xref href=\\\"System.Globalization.NumberStyles.AllowThousands\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a numeric value. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> is the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double.ToString\n    commentId: M:System.Double.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.Parse(String, NumberStyles, IFormatProvider)\n- uid: System.Double.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.Double.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider)\n  fullName: System.Double.Parse(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 233\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static double Parse(string s, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a number in a valid format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double.ToString\n    commentId: M:System.Double.ToString\n  - type: System.Double.TryParse(System.String,System.Double@)\n    commentId: M:System.Double.TryParse(System.String,System.Double@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Double.Parse(String, IFormatProvider)\n- uid: System.Double.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Double.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Double.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 764\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Double.IComparable.CompareTo(Object)\n  nameWithType.vb: Double.System.IComparable.CompareTo(Object)\n- uid: System.Double.System#IConvertible#GetTypeCode\n  commentId: M:System.Double.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.Double.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 765\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: Double.IConvertible.GetTypeCode()\n  nameWithType.vb: Double.System.IConvertible.GetTypeCode()\n- uid: System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 292\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToBoolean(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: Double.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 307\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: Double.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 297\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>This conversion is not supported. No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: Double.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 357\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>This conversion is not supported. No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: Double.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 352\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDecimal(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: Double.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 347\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDouble(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the current instance, unchanged.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: Double.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 312\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: Double.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 322\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: Double.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 332\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: Double.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 302\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: Double.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 342\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSingle(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: Double.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 362\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to which to convert this <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation that supplies culture-specific information about the format of the returned value.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the current instance, converted to <em>type</em>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: Double.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 317\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: Double.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 327\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.   </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: Double.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.Double.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 337\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: Double.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: Double.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.Double.ToString\n  commentId: M:System.Double.ToString\n  id: ToString\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Double.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 200\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Double.Parse(System.String)\n    commentId: M:System.Double.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Double.ToString()\n- uid: System.Double.ToString(System.IFormatProvider)\n  commentId: M:System.Double.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.Double.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 212\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(IFormatProvider provider)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(provider As IFormatProvider) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\\n\"\n  seealso:\n  - type: System.Double.Parse(System.String)\n    commentId: M:System.Double.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Double.ToString(IFormatProvider)\n- uid: System.Double.ToString(System.String)\n  commentId: M:System.Double.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Double.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 206\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A numeric format string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n\"\n  seealso:\n  - type: System.Double.Parse(System.String)\n    commentId: M:System.Double.Parse(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Double.ToString(String)\n- uid: System.Double.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Double.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Double.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 218\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format, IFormatProvider provider)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String, provider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A numeric format string.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  seealso:\n  - type: System.Double.Parse(System.String)\n    commentId: M:System.Double.Parse(System.String)\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Double.ToString(String, IFormatProvider)\n- uid: System.Double.TryParse(System.String,System.Double@)\n  commentId: M:System.Double.TryParse(System.String,System.Double@)\n  id: TryParse(System.String,System.Double@)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out Double)\n  fullName: System.Double.TryParse(System.String, out System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 254\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, out double result)\n    content.vb: Public Shared Function TryParse(s As String, ByRef result As Double) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string containing a number to convert. </p>\\n\"\n    - id: result\n      type: System.Double\n      description: \"\\n<p>When this method returns, contains the double-precision floating-point number equivalent of the <em>s</em> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong>  or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, is not a number in a valid format, or represents a number less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.Parse(System.String)\n    commentId: M:System.Double.Parse(System.String)\n  - type: System.Double.ToString\n    commentId: M:System.Double.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Double.TryParse(System.String, ByRef System.Double)\n  name.vb: TryParse(String, ByRef Double)\n  nameWithType: Double.TryParse(String, out Double)\n  nameWithType.vb: Double.TryParse(String, ByRef Double)\n- uid: System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)\n  commentId: M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)\n  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, NumberStyles, IFormatProvider, out Double)\n  fullName: System.Double.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 258\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out double result)\n    content.vb: Public Shared Function TryParse(s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string containing a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that indicates the permitted format of <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Float\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined with <xref href=\\\"System.Globalization.NumberStyles.AllowThousands\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    - id: result\n      type: System.Double\n      description: \"\\n<p>When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <em>s</em>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, is not in a format compliant with <em>style</em>, represents a number less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or if <em>style</em> is not a valid combination of <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.Double.ToString\n    commentId: M:System.Double.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Double.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Double)\n  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef Double)\n  nameWithType: Double.TryParse(String, NumberStyles, IFormatProvider, out Double)\n  nameWithType.vb: Double.TryParse(String, NumberStyles, IFormatProvider, ByRef Double)\n- uid: System.Double.MinValue\n  commentId: F:System.Double.MinValue\n  id: MinValue\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Double.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinValue\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest possible value of a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant.</p>\\n\"\n  syntax:\n    content: public const double MinValue = -1.7976931348623157E+308\n    content.vb: Public Const MinValue As Double = -1.7976931348623157E+308\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Double.MinValue\n- uid: System.Double.MaxValue\n  commentId: F:System.Double.MaxValue\n  id: MaxValue\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Double.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxValue\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the largest possible value of a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant.</p>\\n\"\n  syntax:\n    content: public const double MaxValue = 1.7976931348623157E+308\n    content.vb: Public Const MaxValue As Double = 1.7976931348623157E+308\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Double.MaxValue\n- uid: System.Double.Epsilon\n  commentId: F:System.Double.Epsilon\n  id: Epsilon\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: Epsilon\n  fullName: System.Double.Epsilon\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Epsilon\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 38\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest positive <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that is greater than zero. This field is constant.</p>\\n\"\n  syntax:\n    content: public const double Epsilon = 4.94065645841247E-324\n    content.vb: Public Const Epsilon As Double = 4.94065645841247E-324\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Double.Epsilon\n- uid: System.Double.NegativeInfinity\n  commentId: F:System.Double.NegativeInfinity\n  id: NegativeInfinity\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: NegativeInfinity\n  fullName: System.Double.NegativeInfinity\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NegativeInfinity\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents negative infinity. This field is constant.</p>\\n\"\n  syntax:\n    content: public const double NegativeInfinity = -Infinity\n    content.vb: Public Const NegativeInfinity As Double = -Infinity\n    return:\n      type: System.Double\n  seealso:\n  - type: System.Double.IsNegativeInfinity(System.Double)\n    commentId: M:System.Double.IsNegativeInfinity(System.Double)\n  - type: System.Double.IsInfinity(System.Double)\n    commentId: M:System.Double.IsInfinity(System.Double)\n  - type: System.Double.PositiveInfinity\n    commentId: F:System.Double.PositiveInfinity\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Double.NegativeInfinity\n- uid: System.Double.PositiveInfinity\n  commentId: F:System.Double.PositiveInfinity\n  id: PositiveInfinity\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: PositiveInfinity\n  fullName: System.Double.PositiveInfinity\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PositiveInfinity\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents positive infinity. This field is constant.</p>\\n\"\n  syntax:\n    content: public const double PositiveInfinity = Infinity\n    content.vb: Public Const PositiveInfinity As Double = Infinity\n    return:\n      type: System.Double\n  seealso:\n  - type: System.Double.IsPositiveInfinity(System.Double)\n    commentId: M:System.Double.IsPositiveInfinity(System.Double)\n  - type: System.Double.IsInfinity(System.Double)\n    commentId: M:System.Double.IsInfinity(System.Double)\n  - type: System.Double.NegativeInfinity\n    commentId: F:System.Double.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Double.PositiveInfinity\n- uid: System.Double.NaN\n  commentId: F:System.Double.NaN\n  id: NaN\n  parent: System.Double\n  langs:\n  - csharp\n  - vb\n  name: NaN\n  fullName: System.Double.NaN\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Double.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NaN\n    path: src/mscorlib/src/System/Double.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a value that is not a number (<strong>NaN</strong>). This field is constant.</p>\\n\"\n  syntax:\n    content: public const double NaN = NaN\n    content.vb: Public Const NaN As Double = NaN\n    return:\n      type: System.Double\n  seealso:\n  - type: System.Double.IsNaN(System.Double)\n    commentId: M:System.Double.IsNaN(System.Double)\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Double.NaN\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.Double}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<Double>\n  fullName: System.IComparable<System.Double>\n  fullname.vb: System.IComparable(Of System.Double)\n  name.vb: IComparable(Of Double)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Double>\n  nameWithType.vb: IComparable(Of Double)\n  commentId: T:System.IComparable{System.Double}\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IEquatable{System.Double}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Double>\n  fullName: System.IEquatable<System.Double>\n  fullname.vb: System.IEquatable(Of System.Double)\n  name.vb: IEquatable(Of Double)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Double>\n  nameWithType.vb: IEquatable(Of Double)\n  commentId: T:System.IEquatable{System.Double}\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IComparable{System.Double}.CompareTo(System.Double)\n  parent: System.IComparable{System.Double}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(Double)\n  fullName: System.IComparable<System.Double>.CompareTo(System.Double)\n  fullname.vb: System.IComparable(Of System.Double).CompareTo(System.Double)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Double>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Double).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Double>.CompareTo(Double)\n  nameWithType.vb: IComparable(Of Double).CompareTo(Double)\n  commentId: M:System.IComparable{System.Double}.CompareTo(System.Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.IEquatable{System.Double}.Equals(System.Double)\n  parent: System.IEquatable{System.Double}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Double)\n  fullName: System.IEquatable<System.Double>.Equals(System.Double)\n  fullname.vb: System.IEquatable(Of System.Double).Equals(System.Double)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Double>.Equals\n  - name: (\n    fullName: (\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Double).Equals\n  - name: (\n    fullName: (\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Double>.Equals(Double)\n  nameWithType.vb: IEquatable(Of Double).Equals(Double)\n  commentId: M:System.IEquatable{System.Double}.Equals(System.Double)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Globalization.NumberStyles\n  parent: System.Globalization\n  isExternal: false\n  name: NumberStyles\n  fullName: System.Globalization.NumberStyles\n  nameWithType: NumberStyles\n  commentId: T:System.Globalization.NumberStyles\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}