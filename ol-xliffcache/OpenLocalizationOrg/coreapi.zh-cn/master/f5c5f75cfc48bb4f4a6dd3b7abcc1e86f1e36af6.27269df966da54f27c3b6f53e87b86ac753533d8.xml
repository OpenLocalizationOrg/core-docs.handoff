{"nodes":[{"pos":[343,361],"content":"ParallelLoopResult","needQuote":true,"nodes":[{"content":"ParallelLoopResult","pos":[0,18]}]},{"pos":[1974,1985],"content":"IsCompleted","needQuote":true,"nodes":[{"content":"IsCompleted","pos":[0,11]}]},{"content":"\\n&lt;p&gt;true if the loop ran to completion; otherwise false;&lt;/p&gt;\\n","pos":[2803,2866],"source":"\\n<p>true if the loop ran to completion; otherwise false;</p>\\n"},{"pos":[3256,3276],"content":"LowestBreakIteration","needQuote":true,"nodes":[{"content":"LowestBreakIteration","pos":[0,20]}]},{"content":"\\n&lt;p&gt;Returns an integer that represents the lowest iteration from which the Break statement was called.&lt;/p&gt;\\n","pos":[4164,4273],"source":"\\n<p>Returns an integer that represents the lowest iteration from which the Break statement was called.</p>\\n"},{"pos":[4480,4502],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[4715,4729],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[4854,4860],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[4909,4910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4960,4966],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5026,5027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5113,5119],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5168,5169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5219,5225],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5285,5286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5489,5502],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[5609,5620],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[5674,5675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5702,5703],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5779,5790],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[5844,5845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5872,5873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6062,6072],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6173,6181],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6232,6233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6260,6261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6334,6342],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6393,6394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6421,6422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6625,6647],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[6795,6801],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6868,6869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6919,6925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[6986,6987]},{"pos":[7042,7048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7108,7109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7206,7212],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7279,7280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7330,7336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7397,7398]},{"pos":[7453,7459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7519,7520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7765,7796],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[7962,7977],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8053,8054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8104,8110],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8171,8172]},{"pos":[8227,8233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8293,8294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8400,8415],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8491,8492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8542,8548],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8609,8610]},{"pos":[8665,8671],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8731,8732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8958,8967],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9060,9067],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9135,9136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9163,9164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9233,9240],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9308,9309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9336,9337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9493,9502],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[9656,9662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9783,9789],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[9921,9928],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10104,10119],"content":"Nullable<Int64>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int64&gt;","pos":[0,15],"source":"Nullable<Int64>"}]},{"pos":[10292,10300],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[10362,10363],"content":"<","needQuote":true,"nodes":[]},{"pos":[10412,10417],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[10546,10554],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[10617,10620]},{"pos":[10676,10681],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[10740,10741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10943,10954],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[11101,11109],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[11150,11151],"content":"<","needQuote":true,"nodes":[]},{"pos":[11178,11179],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[11276,11284],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[11326,11329]},{"pos":[11363,11364],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[11391,11392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Threading.Tasks.ParallelLoopResult\n  commentId: T:System.Threading.Tasks.ParallelLoopResult\n  id: ParallelLoopResult\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  - System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  langs:\n  - csharp\n  - vb\n  name: ParallelLoopResult\n  fullName: System.Threading.Tasks.ParallelLoopResult\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParallelLoopResult\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 616\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides completion status on the execution of a <xref href=\\\"System.Threading.Tasks.Parallel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> loop.</p>\\n\"\n  syntax:\n    content: public struct ParallelLoopResult\n    content.vb: Public Structure ParallelLoopResult\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: ParallelLoopResult\n- uid: System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  commentId: P:System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  id: IsCompleted\n  parent: System.Threading.Tasks.ParallelLoopResult\n  langs:\n  - csharp\n  - vb\n  name: IsCompleted\n  fullName: System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsCompleted\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 625\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.</p>\\n\"\n  syntax:\n    content: public bool IsCompleted { get; }\n    content.vb: Public ReadOnly Property IsCompleted As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the loop ran to completion; otherwise false;</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParallelLoopResult.IsCompleted\n- uid: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  commentId: P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  id: LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopResult\n  langs:\n  - csharp\n  - vb\n  name: LowestBreakIteration\n  fullName: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LowestBreakIteration\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 636\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the index of the lowest iteration from which <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Break\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was called.</p>\\n\"\n  syntax:\n    content: public long ? LowestBreakIteration { get; }\n    content.vb: Public ReadOnly Property LowestBreakIteration As Long?\n    parameters: []\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>Returns an integer that represents the lowest iteration from which the Break statement was called.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParallelLoopResult.LowestBreakIteration\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Nullable{System.Int64}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  fullname.vb: System.Nullable(Of System.Int64)\n  name.vb: Nullable(Of Int64)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Nullable<Int64>\n  nameWithType.vb: Nullable(Of Int64)\n  commentId: T:System.Nullable{System.Int64}\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n  commentId: T:System.Nullable`1\n"}