{"nodes":[{"pos":[953,973],"content":"MediaTypeHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue","pos":[0,20]}]},{"pos":[2288,2330],"content":"MediaTypeHeaderValue(MediaTypeHeaderValue)","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue(MediaTypeHeaderValue)","pos":[0,42]}]},{"pos":[3789,3817],"content":"MediaTypeHeaderValue(String)","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The source represented as a string to initialize the new instance.","pos":[4608,4679],"source":"\\n<p>The source represented as a string to initialize the new instance."},{"content":"&lt;/p&gt;\\n","pos":[4680,4686],"source":" </p>\\n"},{"pos":[5044,5051],"content":"CharSet","needQuote":true,"nodes":[{"content":"CharSet","pos":[0,7]}]},{"pos":[6161,6170],"content":"MediaType","needQuote":true,"nodes":[{"content":"MediaType","pos":[0,9]}]},{"pos":[7313,7323],"content":"Parameters","needQuote":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[8690,8704],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[9586,9643],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[10421,10434],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11765,11778],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents media type header value information.&lt;/p&gt;\\n","pos":[12581,12653],"source":"\\n<p>A string that represents media type header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[13113,13178],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid media type header value information.&lt;/p&gt;\\n","pos":[13271,13348],"source":"\\n<p>\\n<em>input</em> is not valid media type header value information.</p>\\n"},{"pos":[13716,13726],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15211,15253],"content":"TryParse(String, out MediaTypeHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out MediaTypeHeaderValue)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[16186,16220],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[17340,17363],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[17545,17551],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17738,17760],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17908,17914],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17981,17982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18032,18038],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18099,18100]},{"pos":[18155,18161],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18221,18222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18319,18325],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18392,18393],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18443,18449],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18510,18511]},{"pos":[18566,18572],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18632,18633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18878,18909],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[19075,19090],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19166,19167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19217,19223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19284,19285]},{"pos":[19340,19346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19406,19407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19513,19528],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19604,19605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19655,19661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19722,19723]},{"pos":[19778,19784],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19844,19845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20071,20080],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20173,20180],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20248,20249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20276,20277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20346,20353],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20421,20422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20449,20450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20625,20642],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20751,20766],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20842,20843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20870,20871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20948,20963],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21039,21040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21067,21068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21213,21219],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21398,21418],"content":"MediaTypeHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue","pos":[0,20]}]},{"pos":[21639,21645],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21916,21949],"content":"ICollection<NameValueHeaderValue>","needQuote":true,"nodes":[{"content":"ICollection&lt;NameValueHeaderValue&gt;","pos":[0,33],"source":"ICollection<NameValueHeaderValue>"}]},{"pos":[22273,22284],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[22369,22370],"content":"<","needQuote":true,"nodes":[]},{"pos":[22451,22471],"content":"NameValueHeaderValue","needQuote":true,"nodes":[{"content":"NameValueHeaderValue","pos":[0,20]}]},{"pos":[22634,22645],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[22731,22734]},{"pos":[22822,22842],"content":"NameValueHeaderValue","needQuote":true,"nodes":[{"content":"NameValueHeaderValue","pos":[0,20]}]},{"pos":[22912,22913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23212,23226],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[23445,23456],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[23520,23521],"content":"<","needQuote":true,"nodes":[]},{"pos":[23548,23549],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23669,23680],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[23745,23748]},{"pos":[23782,23783],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23810,23811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24014,24040],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[24259,24273],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24392,24398],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24465,24466],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24516,24522],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24582,24583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24666,24672],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24739,24740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24790,24796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24856,24857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25030,25037],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25203,25216],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25317,25328],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25400,25401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25428,25429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25502,25513],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25585,25586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25613,25614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25774,25779],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25936,25946],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26041,26049],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26118,26119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26146,26147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26217,26225],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26294,26295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26322,26323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26476,26497],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[26696,26711],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue\n  commentId: T:System.Net.Http.Headers.MediaTypeHeaderValue\n  id: MediaTypeHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)\n  - System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)\n  - System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  - System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  - System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  - System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  - System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  - System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  langs:\n  - csharp\n  - vb\n  name: MediaTypeHeaderValue\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MediaTypeHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 436\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents a media type used in a Content-Type header as defined in the RFC 2616.</p>\\n\"\n  syntax:\n    content: public class MediaTypeHeaderValue\n    content.vb: Public Class MediaTypeHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: MediaTypeHeaderValue\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)\n  id: '#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)'\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MediaTypeHeaderValue(MediaTypeHeaderValue)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.MediaTypeHeaderValue(System.Net.Http.Headers.MediaTypeHeaderValue)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 438\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected MediaTypeHeaderValue(MediaTypeHeaderValue source)\n    content.vb: Protected Sub New(source As MediaTypeHeaderValue)\n    parameters:\n    - id: source\n      type: System.Net.Http.Headers.MediaTypeHeaderValue\n      description: \"\\n<p> A <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to initialize the new instance.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: MediaTypeHeaderValue.MediaTypeHeaderValue(MediaTypeHeaderValue)\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MediaTypeHeaderValue(String)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.MediaTypeHeaderValue(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 439\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public MediaTypeHeaderValue(string mediaType)\n    content.vb: Public Sub New(mediaType As String)\n    parameters:\n    - id: mediaType\n      type: System.String\n      description: \"\\n<p>The source represented as a string to initialize the new instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MediaTypeHeaderValue.MediaTypeHeaderValue(String)\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  commentId: P:System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  id: CharSet\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: CharSet\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CharSet\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 440\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets or sets the character set.</p>\\n\"\n  syntax:\n    content: public string CharSet { get; set; }\n    content.vb: Public Property CharSet As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The character set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: MediaTypeHeaderValue.CharSet\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  commentId: P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  id: MediaType\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MediaType\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MediaType\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 441\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets or sets the media-type header value.</p>\\n\"\n  syntax:\n    content: public string MediaType { get; set; }\n    content.vb: Public Property MediaType As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The media-type header value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: MediaTypeHeaderValue.MediaType\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  commentId: P:System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  id: Parameters\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parameters\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parameters\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 442\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets or sets the media-type header value parameters.</p>\\n\"\n  syntax:\n    content: public ICollection<NameValueHeaderValue> Parameters { get; }\n    content.vb: Public ReadOnly Property Parameters As ICollection(Of NameValueHeaderValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The media-type header value parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MediaTypeHeaderValue.Parameters\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 443\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MediaTypeHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 444\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for an <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MediaTypeHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 445\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static MediaTypeHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As MediaTypeHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents media type header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.MediaTypeHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid media type header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MediaTypeHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 446\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MediaTypeHeaderValue.ToString()\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out MediaTypeHeaderValue)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String, out System.Net.Http.Headers.MediaTypeHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 447\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out MediaTypeHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As MediaTypeHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.MediaTypeHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.MediaTypeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.MediaTypeHeaderValue)\n  name.vb: TryParse(String, ByRef MediaTypeHeaderValue)\n  nameWithType: MediaTypeHeaderValue.TryParse(String, out MediaTypeHeaderValue)\n  nameWithType.vb: MediaTypeHeaderValue.TryParse(String, ByRef MediaTypeHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: MediaTypeHeaderValue\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue\n  commentId: T:System.Net.Http.Headers.MediaTypeHeaderValue\n  nameWithType: MediaTypeHeaderValue\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<NameValueHeaderValue>\n  fullName: System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.Http.Headers.NameValueHeaderValue)\n  name.vb: ICollection(Of NameValueHeaderValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.Headers.NameValueHeaderValue\n    name: NameValueHeaderValue\n    fullName: System.Net.Http.Headers.NameValueHeaderValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.Headers.NameValueHeaderValue\n    name: NameValueHeaderValue\n    fullName: System.Net.Http.Headers.NameValueHeaderValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n  nameWithType: ICollection<NameValueHeaderValue>\n  nameWithType.vb: ICollection(Of NameValueHeaderValue)\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection`1\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}