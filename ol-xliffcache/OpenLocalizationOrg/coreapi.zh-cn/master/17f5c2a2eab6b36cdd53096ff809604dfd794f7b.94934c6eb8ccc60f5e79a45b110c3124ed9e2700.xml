{"nodes":[{"pos":[3848,3855],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[5409,5410],"content":"X","needQuote":true,"nodes":[{"content":"X","pos":[0,1]}]},{"pos":[6197,6198],"content":"Y","needQuote":true,"nodes":[{"content":"Y","pos":[0,1]}]},{"pos":[6985,6986],"content":"Z","needQuote":true,"nodes":[{"content":"Z","pos":[0,1]}]},{"pos":[7904,7928],"content":"Vector3(Vector2, Single)","needQuote":true,"nodes":[{"content":"Vector3(Vector2, Single)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The vector with two elements.","pos":[8848,8882],"source":"\\n<p>The vector with two elements."},{"content":"&lt;/p&gt;\\n","pos":[8883,8889],"source":" </p>\\n"},{"pos":[9410,9425],"content":"Vector3(Single)","needQuote":true,"nodes":[{"content":"Vector3(Single)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to assign to all three elements.","pos":[10189,10236],"source":"\\n<p>The value to assign to all three elements."},{"content":"&lt;/p&gt;\\n","pos":[10237,10243],"source":" </p>\\n"},{"pos":[10637,10668],"content":"Vector3(Single, Single, Single)","needQuote":true,"nodes":[{"content":"Vector3(Single, Single, Single)","pos":[0,31]}]},{"pos":[12193,12196],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"content":"\\n&lt;p&gt;A vector whose three elements are equal to one (that is, it returns the vector &lt;code&gt;(1,1,1)&lt;/code&gt;.","pos":[12869,12974],"source":"\\n<p>A vector whose three elements are equal to one (that is, it returns the vector <code>(1,1,1)</code>."},{"content":"&lt;/p&gt;\\n","pos":[12975,12981],"source":" </p>\\n"},{"pos":[13275,13280],"content":"UnitX","needQuote":true,"nodes":[{"content":"UnitX","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The vector &lt;code&gt;(1,0,0)&lt;/code&gt;.&lt;/p&gt;\\n","pos":[13937,13980],"source":"\\n<p>The vector <code>(1,0,0)</code>.</p>\\n"},{"pos":[14276,14281],"content":"UnitY","needQuote":true,"nodes":[{"content":"UnitY","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The vector &lt;code&gt;(0,1,0)&lt;/code&gt;..&lt;/p&gt;\\n","pos":[14938,14982],"source":"\\n<p>The vector <code>(0,1,0)</code>..</p>\\n"},{"pos":[15278,15283],"content":"UnitZ","needQuote":true,"nodes":[{"content":"UnitZ","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The vector &lt;code&gt;(0,0,1)&lt;/code&gt;.","pos":[15940,15977],"source":"\\n<p>The vector <code>(0,0,1)</code>."},{"content":"&lt;/p&gt;\\n","pos":[15978,15984],"source":" </p>\\n"},{"pos":[16277,16281],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A vector whose three elements are equal to zero (that is, it returns the vector &lt;code&gt;(0,0,0)&lt;/code&gt;.","pos":[16960,17066],"source":"\\n<p>A vector whose three elements are equal to zero (that is, it returns the vector <code>(0,0,0)</code>."},{"content":"&lt;/p&gt;\\n","pos":[17067,17073],"source":" </p>\\n"},{"pos":[17437,17449],"content":"Abs(Vector3)","needQuote":true,"nodes":[{"content":"Abs(Vector3)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A vector.","pos":[18213,18227],"source":"\\n<p>A vector."},{"content":"&lt;/p&gt;\\n","pos":[18228,18234],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The absolute value vector.","pos":[18304,18335],"source":"\\n<p>The absolute value vector."},{"content":"&lt;/p&gt;\\n","pos":[18336,18342],"source":" </p>\\n"},{"pos":[18765,18786],"content":"Add(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Add(Vector3, Vector3)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector to add.","pos":[19532,19561],"source":"\\n<p>The first vector to add."},{"content":"&lt;/p&gt;\\n","pos":[19562,19568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to add.","pos":[19642,19672],"source":"\\n<p>The second vector to add."},{"content":"&lt;/p&gt;\\n","pos":[19673,19679],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The summed vector.","pos":[19749,19772],"source":"\\n<p>The summed vector."},{"content":"&lt;/p&gt;\\n","pos":[19773,19779],"source":" </p>\\n"},{"pos":[20289,20321],"content":"Clamp(Vector3, Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Clamp(Vector3, Vector3, Vector3)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The vector to restrict.","pos":[21162,21190],"source":"\\n<p>The vector to restrict."},{"content":"&lt;/p&gt;\\n","pos":[21191,21197],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minimum value.","pos":[21269,21292],"source":"\\n<p>The minimum value."},{"content":"&lt;/p&gt;\\n","pos":[21293,21299],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum value.","pos":[21371,21394],"source":"\\n<p>The maximum value."},{"content":"&lt;/p&gt;\\n","pos":[21395,21401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The restricted vector.","pos":[21471,21498],"source":"\\n<p>The restricted vector."},{"content":"&lt;/p&gt;\\n","pos":[21499,21505],"source":" </p>\\n"},{"pos":[21861,21877],"content":"CopyTo(Single[])","needQuote":true,"nodes":[{"content":"CopyTo(Single[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The destination array.","pos":[22561,22588],"source":"\\n<p>The destination array."},{"content":"&lt;/p&gt;\\n","pos":[22589,22595],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22714,22761],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22762,22768],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the current instance is greater than in the array.","pos":[22865,22946],"source":"\\n<p>The number of elements in the current instance is greater than in the array."},{"content":"&lt;/p&gt;\\n","pos":[22947,22953],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[23042,23090],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[23582,23605],"content":"CopyTo(Single[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Single[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The destination array.&lt;/p&gt;\\n","pos":[24371,24404],"source":"\\n<p>The destination array.</p>\\n"},{"content":"\\n&lt;p&gt;The index at which to copy the first element of the vector.","pos":[24467,24531],"source":"\\n<p>The index at which to copy the first element of the vector."},{"content":"&lt;/p&gt;\\n","pos":[24532,24538],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24657,24704],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24705,24711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the current instance is greater than in the array.","pos":[24808,24889],"source":"\\n<p>The number of elements in the current instance is greater than in the array."},{"content":"&lt;/p&gt;\\n","pos":[24890,24896],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than or equal to the array length.","pos":[25013,25137],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than or equal to the array length."},{"content":"&lt;/p&gt;\\n","pos":[25138,25144],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[25233,25281],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[25862,25885],"content":"Cross(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Cross(Vector3, Vector3)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[26668,26690],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[26691,26697],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[26773,26796],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[26797,26803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cross product.","pos":[26873,26896],"source":"\\n<p>The cross product."},{"content":"&lt;/p&gt;\\n","pos":[26897,26903],"source":" </p>\\n"},{"pos":[27352,27378],"content":"Distance(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Distance(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first point.","pos":[28184,28205],"source":"\\n<p>The first point."},{"content":"&lt;/p&gt;\\n","pos":[28206,28212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second point.","pos":[28287,28309],"source":"\\n<p>The second point."},{"content":"&lt;/p&gt;\\n","pos":[28310,28316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The distance.","pos":[28376,28394],"source":"\\n<p>The distance."},{"content":"&lt;/p&gt;\\n","pos":[28395,28401],"source":" </p>\\n"},{"pos":[28874,28907],"content":"DistanceSquared(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"DistanceSquared(Vector3, Vector3)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The first point.","pos":[29748,29769],"source":"\\n<p>The first point."},{"content":"&lt;/p&gt;\\n","pos":[29770,29776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second point.","pos":[29851,29873],"source":"\\n<p>The second point."},{"content":"&lt;/p&gt;\\n","pos":[29874,29880],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The distance squared.","pos":[29940,29966],"source":"\\n<p>The distance squared."},{"content":"&lt;/p&gt;\\n","pos":[29967,29973],"source":" </p>\\n"},{"pos":[30426,30450],"content":"Divide(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Divide(Vector3, Vector3)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[31221,31243],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[31244,31250],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[31324,31347],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[31348,31354],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector resulting from the division.","pos":[31424,31468],"source":"\\n<p>The vector resulting from the division."},{"content":"&lt;/p&gt;\\n","pos":[31469,31475],"source":" </p>\\n"},{"pos":[31889,31912],"content":"Divide(Vector3, Single)","needQuote":true,"nodes":[{"content":"Divide(Vector3, Single)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[32692,32708],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[32709,32715],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[32781,32803],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[32804,32810],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector that results from the division.","pos":[32880,32927],"source":"\\n<p>The vector that results from the division."},{"content":"&lt;/p&gt;\\n","pos":[32928,32934],"source":" </p>\\n"},{"pos":[33368,33389],"content":"Dot(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Dot(Vector3, Vector3)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[34158,34180],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[34181,34187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[34263,34286],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[34287,34293],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The dot product.","pos":[34353,34374],"source":"\\n<p>The dot product."},{"content":"&lt;/p&gt;\\n","pos":[34375,34381],"source":" </p>\\n"},{"pos":[34750,34765],"content":"Equals(Vector3)","needQuote":true,"nodes":[{"content":"Equals(Vector3)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The other vector.","pos":[35507,35529],"source":"\\n<p>The other vector."},{"content":"&lt;/p&gt;\\n","pos":[35530,35536],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two vectors are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[35597,35690],"source":"\\n<p>\\n<strong>true</strong> if the two vectors are equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35691,35697],"source":" </p>\\n"},{"pos":[36101,36115],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[36851,36904],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[36905,36911],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance and &lt;em&gt;obj&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;.","pos":[36972,37104],"source":"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>."},{"content":"If &lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, the method returns &lt;strong&gt;false&lt;/strong&gt;.","pos":[37105,37189],"source":" If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37190,37196],"source":" </p>\\n"},{"pos":[37556,37569],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code.","pos":[38222,38241],"source":"\\n<p>The hash code."},{"content":"&lt;/p&gt;\\n","pos":[38242,38248],"source":" </p>\\n"},{"pos":[38582,38590],"content":"Length()","needQuote":true,"nodes":[{"content":"Length()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The vector's length.","pos":[39207,39232],"source":"\\n<p>The vector's length."},{"content":"&lt;/p&gt;\\n","pos":[39233,39239],"source":" </p>\\n"},{"pos":[39633,39648],"content":"LengthSquared()","needQuote":true,"nodes":[{"content":"LengthSquared()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The vector's length squared.","pos":[40293,40326],"source":"\\n<p>The vector's length squared."},{"content":"&lt;/p&gt;\\n","pos":[40327,40333],"source":" </p>\\n"},{"pos":[40882,40912],"content":"Lerp(Vector3, Vector3, Single)","needQuote":true,"nodes":[{"content":"Lerp(Vector3, Vector3, Single)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[41772,41794],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[41795,41801],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[41876,41899],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[41900,41906],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A value between 0 and 1 that indicates the weight of &lt;em&gt;value2&lt;/em&gt;.","pos":[41971,42045],"source":"\\n<p>A value between 0 and 1 that indicates the weight of <em>value2</em>."},{"content":"&lt;/p&gt;\\n","pos":[42046,42052],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interpolated vector.","pos":[42122,42151],"source":"\\n<p>The interpolated vector."},{"content":"&lt;/p&gt;\\n","pos":[42152,42158],"source":" </p>\\n"},{"pos":[42599,42620],"content":"Max(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Max(Vector3, Vector3)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[43453,43475],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[43476,43482],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[43557,43580],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[43581,43587],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximized vector.","pos":[43657,43683],"source":"\\n<p>The maximized vector."},{"content":"&lt;/p&gt;\\n","pos":[43684,43690],"source":" </p>\\n"},{"pos":[44122,44143],"content":"Min(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Min(Vector3, Vector3)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[44976,44998],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[44999,45005],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[45080,45103],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[45104,45110],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minimized vector.","pos":[45180,45206],"source":"\\n<p>The minimized vector."},{"content":"&lt;/p&gt;\\n","pos":[45207,45213],"source":" </p>\\n"},{"pos":[45660,45686],"content":"Multiply(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Multiply(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[46458,46480],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[46481,46487],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[46561,46584],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[46585,46591],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The product vector.","pos":[46661,46685],"source":"\\n<p>The product vector."},{"content":"&lt;/p&gt;\\n","pos":[46686,46692],"source":" </p>\\n"},{"pos":[47114,47139],"content":"Multiply(Vector3, Single)","needQuote":true,"nodes":[{"content":"Multiply(Vector3, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector to multiply.","pos":[47908,47936],"source":"\\n<p>The vector to multiply."},{"content":"&lt;/p&gt;\\n","pos":[47937,47943],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[48007,48029],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[48030,48036],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[48106,48129],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[48130,48136],"source":" </p>\\n"},{"pos":[48557,48582],"content":"Multiply(Single, Vector3)","needQuote":true,"nodes":[{"content":"Multiply(Single, Vector3)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The scaled value.","pos":[49346,49368],"source":"\\n<p>The scaled value."},{"content":"&lt;/p&gt;\\n","pos":[49369,49375],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector.","pos":[49449,49465],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[49466,49472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[49542,49565],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[49566,49572],"source":" </p>\\n"},{"pos":[49945,49960],"content":"Negate(Vector3)","needQuote":true,"nodes":[{"content":"Negate(Vector3)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The vector to negate.","pos":[50664,50690],"source":"\\n<p>The vector to negate."},{"content":"&lt;/p&gt;\\n","pos":[50691,50697],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The negated vector.","pos":[50767,50791],"source":"\\n<p>The negated vector."},{"content":"&lt;/p&gt;\\n","pos":[50792,50798],"source":" </p>\\n"},{"pos":[51170,51188],"content":"Normalize(Vector3)","needQuote":true,"nodes":[{"content":"Normalize(Vector3)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The vector to normalize.","pos":[51968,51997],"source":"\\n<p>The vector to normalize."},{"content":"&lt;/p&gt;\\n","pos":[51998,52004],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The normalized vector.","pos":[52074,52101],"source":"\\n<p>The normalized vector."},{"content":"&lt;/p&gt;\\n","pos":[52102,52108],"source":" </p>\\n"},{"pos":[52561,52587],"content":"Addition(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Addition(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector to add.","pos":[53353,53382],"source":"\\n<p>The first vector to add."},{"content":"&lt;/p&gt;\\n","pos":[53383,53389],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to add.","pos":[53463,53493],"source":"\\n<p>The second vector to add."},{"content":"&lt;/p&gt;\\n","pos":[53494,53500],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The summed vector.","pos":[53570,53593],"source":"\\n<p>The summed vector."},{"content":"&lt;/p&gt;\\n","pos":[53594,53600],"source":" </p>\\n"},{"pos":[54061,54087],"content":"Division(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Division(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[54866,54888],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[54889,54895],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[54969,54992],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[54993,54999],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector that results from dividing &lt;em&gt;left&lt;/em&gt; by &lt;em&gt;right&lt;/em&gt;.","pos":[55069,55144],"source":"\\n<p>The vector that results from dividing <em>left</em> by <em>right</em>."},{"content":"&lt;/p&gt;\\n","pos":[55145,55151],"source":" </p>\\n"},{"pos":[55582,55607],"content":"Division(Vector3, Single)","needQuote":true,"nodes":[{"content":"Division(Vector3, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[56398,56414],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[56415,56421],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[56486,56508],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[56509,56515],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of the division.","pos":[56585,56617],"source":"\\n<p>The result of the division."},{"content":"&lt;/p&gt;\\n","pos":[56618,56624],"source":" </p>\\n"},{"pos":[57084,57110],"content":"Equality(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Equality(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector to compare.","pos":[57944,57977],"source":"\\n<p>The first vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[57978,57984],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to compare.","pos":[58058,58092],"source":"\\n<p>The second vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[58093,58099],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58160,58276],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[58743,58771],"content":"Inequality(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Inequality(Vector3, Vector3)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first vector to compare.","pos":[59590,59623],"source":"\\n<p>The first vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[59624,59630],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to compare.","pos":[59704,59738],"source":"\\n<p>The second vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[59739,59745],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[59806,59920],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[59921,59927],"source":" </p>\\n"},{"pos":[60390,60416],"content":"Multiply(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Multiply(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[61188,61210],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[61211,61217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[61291,61314],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[61315,61321],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The product vector.","pos":[61391,61415],"source":"\\n<p>The product vector."},{"content":"&lt;/p&gt;\\n","pos":[61416,61422],"source":" </p>\\n"},{"pos":[61853,61878],"content":"Multiply(Vector3, Single)","needQuote":true,"nodes":[{"content":"Multiply(Vector3, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[62666,62682],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[62683,62689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[62753,62775],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[62776,62782],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[62852,62875],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[62876,62882],"source":" </p>\\n"},{"pos":[63312,63337],"content":"Multiply(Single, Vector3)","needQuote":true,"nodes":[{"content":"Multiply(Single, Vector3)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[64105,64121],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[64122,64128],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[64202,64224],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[64225,64231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[64301,64324],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[64325,64331],"source":" </p>\\n"},{"pos":[64800,64829],"content":"Subtraction(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Subtraction(Vector3, Vector3)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[65618,65640],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[65641,65647],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[65721,65744],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[65745,65751],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector that results from subtracting &lt;em&gt;right&lt;/em&gt; from &lt;em&gt;left&lt;/em&gt;.","pos":[65821,65901],"source":"\\n<p>The vector that results from subtracting <em>right</em> from <em>left</em>."},{"content":"&lt;/p&gt;\\n","pos":[65902,65908],"source":" </p>\\n"},{"pos":[66315,66337],"content":"UnaryNegation(Vector3)","needQuote":true,"nodes":[{"content":"UnaryNegation(Vector3)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The vector to negate.","pos":[67061,67087],"source":"\\n<p>The vector to negate."},{"content":"&lt;/p&gt;\\n","pos":[67088,67094],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The negated vector.","pos":[67164,67188],"source":"\\n<p>The negated vector."},{"content":"&lt;/p&gt;\\n","pos":[67189,67195],"source":" </p>\\n"},{"pos":[67640,67665],"content":"Reflect(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Reflect(Vector3, Vector3)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The source vector.","pos":[68488,68511],"source":"\\n<p>The source vector."},{"content":"&lt;/p&gt;\\n","pos":[68512,68518],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The normal of the surface being reflected off.","pos":[68593,68644],"source":"\\n<p>The normal of the surface being reflected off."},{"content":"&lt;/p&gt;\\n","pos":[68645,68651],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The reflected vector.","pos":[68721,68747],"source":"\\n<p>The reflected vector."},{"content":"&lt;/p&gt;\\n","pos":[68748,68754],"source":" </p>\\n"},{"pos":[69139,69158],"content":"SquareRoot(Vector3)","needQuote":true,"nodes":[{"content":"SquareRoot(Vector3)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A vector.","pos":[69943,69957],"source":"\\n<p>A vector."},{"content":"&lt;/p&gt;\\n","pos":[69958,69964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The square root vector.","pos":[70034,70062],"source":"\\n<p>The square root vector."},{"content":"&lt;/p&gt;\\n","pos":[70063,70069],"source":" </p>\\n"},{"pos":[70514,70540],"content":"Subtract(Vector3, Vector3)","needQuote":true,"nodes":[{"content":"Subtract(Vector3, Vector3)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[71323,71345],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[71346,71352],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[71426,71449],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[71450,71456],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The difference vector.","pos":[71526,71553],"source":"\\n<p>The difference vector."},{"content":"&lt;/p&gt;\\n","pos":[71554,71560],"source":" </p>\\n"},{"pos":[71865,71875],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the current instance.","pos":[72562,72617],"source":"\\n<p>The string representation of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[72618,72624],"source":" </p>\\n"},{"pos":[73003,73019],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string that defines the format of individual elements.&lt;/p&gt;\\n","pos":[73791,73892],"source":"\\n<p>A standard or custom numeric format string that defines the format of individual elements.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance.","pos":[73952,74007],"source":"\\n<p>The string representation of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[74008,74014],"source":" </p>\\n"},{"pos":[74401,74434],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string that defines the format of individual elements.","pos":[75368,75463],"source":"\\n<p>A standard or custom numeric format string that defines the format of individual elements."},{"content":"&lt;/p&gt;\\n","pos":[75464,75470],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A format provider that supplies culture-specific formatting information.","pos":[75552,75629],"source":"\\n<p>A format provider that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[75630,75636],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance.","pos":[75696,75751],"source":"\\n<p>The string representation of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[75752,75758],"source":" </p>\\n"},{"pos":[76289,76318],"content":"Transform(Vector3, Matrix4x4)","needQuote":true,"nodes":[{"content":"Transform(Vector3, Matrix4x4)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The vector to transform.","pos":[77128,77157],"source":"\\n<p>The vector to transform."},{"content":"&lt;/p&gt;\\n","pos":[77158,77164],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformation matrix.","pos":[77241,77272],"source":"\\n<p>The transformation matrix."},{"content":"&lt;/p&gt;\\n","pos":[77273,77279],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[77349,77377],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[77378,77384],"source":" </p>\\n"},{"pos":[77851,77881],"content":"Transform(Vector3, Quaternion)","needQuote":true,"nodes":[{"content":"Transform(Vector3, Quaternion)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The vector to rotate.","pos":[78706,78732],"source":"\\n<p>The vector to rotate."},{"content":"&lt;/p&gt;\\n","pos":[78733,78739],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The rotation to apply.","pos":[78819,78846],"source":"\\n<p>The rotation to apply."},{"content":"&lt;/p&gt;\\n","pos":[78847,78853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[78923,78951],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[78952,78958],"source":" </p>\\n"},{"pos":[79441,79476],"content":"TransformNormal(Vector3, Matrix4x4)","needQuote":true,"nodes":[{"content":"TransformNormal(Vector3, Matrix4x4)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The source vector.","pos":[80309,80332],"source":"\\n<p>The source vector."},{"content":"&lt;/p&gt;\\n","pos":[80333,80339],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The matrix.","pos":[80416,80432],"source":"\\n<p>The matrix."},{"content":"&lt;/p&gt;\\n","pos":[80433,80439],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[80509,80537],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[80538,80544],"source":" </p>\\n"},{"pos":[80749,80764],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[80965,80984],"content":"IEquatable<Vector3>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Vector3&gt;","pos":[0,19],"source":"IEquatable<Vector3>"}]},{"pos":[81189,81199],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[81263,81264],"content":"<","needQuote":true,"nodes":[]},{"pos":[81324,81331],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[81452,81462],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[81527,81530]},{"pos":[81597,81604],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[81653,81654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81879,81891],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[82096,82118],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[82266,82272],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[82339,82340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82390,82396],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[82457,82458]},{"pos":[82513,82519],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82579,82580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82677,82683],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[82750,82751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82801,82807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[82868,82869]},{"pos":[82924,82930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82990,82991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83236,83267],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[83433,83448],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[83524,83525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83575,83581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[83642,83643]},{"pos":[83698,83704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83764,83765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83871,83886],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[83962,83963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84013,84019],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[84080,84081]},{"pos":[84136,84142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84202,84203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84429,84438],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[84531,84538],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[84606,84607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84634,84635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84704,84711],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[84779,84780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84807,84808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84950,84963],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[85118,85128],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[85171,85172],"content":"<","needQuote":true,"nodes":[]},{"pos":[85199,85200],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[85299,85309],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[85353,85356]},{"pos":[85390,85391],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[85418,85419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85579,85585],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[85716,85722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85867,85873],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[86037,86044],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[86229,86236],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[86367,86375],"content":"Single[]","needQuote":true,"nodes":[{"content":"Single[]","pos":[0,8]}]},{"pos":[86503,86509],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"content":"[]","pos":[86570,86572]},{"pos":[86637,86643],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[86703,86705],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[86841,86846],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87110,87125],"content":"Equals(Vector3)","needQuote":true,"nodes":[{"content":"Equals(Vector3)","pos":[0,15]}]},{"pos":[87371,87377],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87473,87474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87534,87541],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[87590,87591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87669,87675],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87774,87775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87835,87842],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[87891,87892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88176,88183],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[88331,88340],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[88498,88504],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88557,88558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88585,88586],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[88613,88614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88692,88698],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88754,88755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88782,88783],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[88810,88811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89060,89074],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[89199,89205],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89254,89255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89305,89311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89371,89372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89458,89464],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89513,89514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89564,89570],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89630,89631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89812,89821],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[90000,90013],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[90120,90131],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[90185,90186],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90213,90214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90290,90301],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[90355,90356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90383,90384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90573,90583],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[90684,90692],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[90743,90744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90771,90772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90845,90853],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[90904,90905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90932,90933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91094,91100],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[91310,91343],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[91525,91533],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[91587,91588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91638,91644],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[91705,91706]},{"pos":[91770,91785],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[91833,91834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91948,91956],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[92010,92011],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92061,92067],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[92128,92129]},{"pos":[92193,92208],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[92256,92257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92494,92509],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[92702,92711],"content":"Matrix4x4","needQuote":true,"nodes":[{"content":"Matrix4x4","pos":[0,9]}]},{"pos":[92905,92915],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[93088,93109],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[93310,93327],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[93495,93508],"content":"RankException","needQuote":true,"nodes":[{"content":"RankException","pos":[0,13]}]},{"pos":[93678,93705],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Numerics.Vector3\n  commentId: T:System.Numerics.Vector3\n  id: Vector3\n  parent: System.Numerics\n  children:\n  - System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector3.#ctor(System.Single)\n  - System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)\n  - System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.CopyTo(System.Single[])\n  - System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)\n  - System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Equals(System.Object)\n  - System.Numerics.Vector3.GetHashCode\n  - System.Numerics.Vector3.Length\n  - System.Numerics.Vector3.LengthSquared\n  - System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)\n  - System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  - System.Numerics.Vector3.One\n  - System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  - System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Vector3.ToString\n  - System.Numerics.Vector3.ToString(System.String)\n  - System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  - System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector3.UnitX\n  - System.Numerics.Vector3.UnitY\n  - System.Numerics.Vector3.UnitZ\n  - System.Numerics.Vector3.X\n  - System.Numerics.Vector3.Y\n  - System.Numerics.Vector3.Z\n  - System.Numerics.Vector3.Zero\n  langs:\n  - csharp\n  - vb\n  name: Vector3\n  fullName: System.Numerics.Vector3\n  type: Struct\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Vector3\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 369\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Represents a vector with three  single-precision floating-point values. </p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Vector3 : IEquatable<Vector3>, IFormattable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Vector3\n          Implements IEquatable(Of Vector3), IFormattable\n  implements:\n  - System.IEquatable{System.Numerics.Vector3}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Vector3\n- uid: System.Numerics.Vector3.X\n  commentId: F:System.Numerics.Vector3.X\n  id: X\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: X\n  fullName: System.Numerics.Vector3.X\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 372\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The X component of the vector. </p>\\n\"\n  syntax:\n    content: public float X\n    content.vb: Public X As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.X\n- uid: System.Numerics.Vector3.Y\n  commentId: F:System.Numerics.Vector3.Y\n  id: Y\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Y\n  fullName: System.Numerics.Vector3.Y\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Y\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 373\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The Y component of the vector. </p>\\n\"\n  syntax:\n    content: public float Y\n    content.vb: Public Y As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Y\n- uid: System.Numerics.Vector3.Z\n  commentId: F:System.Numerics.Vector3.Z\n  id: Z\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Z\n  fullName: System.Numerics.Vector3.Z\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Z\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 374\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The Z component of the vector. </p>\\n\"\n  syntax:\n    content: public float Z\n    content.vb: Public Z As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Z\n- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)\n  commentId: M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)\n  id: '#ctor(System.Numerics.Vector2,System.Single)'\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Vector3(Vector2, Single)\n  fullName: System.Numerics.Vector3.Vector3(System.Numerics.Vector2, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 375\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a   new <xref href=\\\"System.Numerics.Vector3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the specified <xref href=\\\"System.Numerics.Vector2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the specified value. </p>\\n\"\n  syntax:\n    content: public Vector3(Vector2 value, float z)\n    content.vb: Public Sub New(value As Vector2, z As Single)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector with two elements. </p>\\n\"\n    - id: z\n      type: System.Single\n      description: \"\\n<p>The additional value to assign to the <xref href=\\\"System.Numerics.Vector3.Z\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Vector3(Vector2, Single)\n- uid: System.Numerics.Vector3.#ctor(System.Single)\n  commentId: M:System.Numerics.Vector3.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Vector3(Single)\n  fullName: System.Numerics.Vector3.Vector3(System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 376\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Numerics.Vector3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object whose three elements have the same value.</p>\\n\"\n  syntax:\n    content: public Vector3(float value)\n    content.vb: Public Sub New(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to assign to all three elements. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Vector3(Single)\n- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)\n  commentId: M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single)'\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Vector3(Single, Single, Single)\n  fullName: System.Numerics.Vector3.Vector3(System.Single, System.Single, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 377\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a vector whose elements have the specified values. </p>\\n\"\n  syntax:\n    content: public Vector3(float x, float y, float z)\n    content.vb: Public Sub New(x As Single, y As Single, z As Single)\n    parameters:\n    - id: x\n      type: System.Single\n      description: \"\\n<p>The value to assign to the <xref href=\\\"System.Numerics.Vector3.X\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. </p>\\n\"\n    - id: y\n      type: System.Single\n      description: \"\\n<p>The value to assign to the <xref href=\\\"System.Numerics.Vector3.Y\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. </p>\\n\"\n    - id: z\n      type: System.Single\n      description: \"\\n<p>The value to assign to the <xref href=\\\"System.Numerics.Vector3.Z\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Vector3(Single, Single, Single)\n- uid: System.Numerics.Vector3.One\n  commentId: P:System.Numerics.Vector3.One\n  id: One\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: One\n  fullName: System.Numerics.Vector3.One\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: One\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 378\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a vector whose 3 elements are equal to one.</p>\\n\"\n  syntax:\n    content: public static Vector3 One { get; }\n    content.vb: Public Shared ReadOnly Property One As Vector3\n    parameters: []\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>A vector whose three elements are equal to one (that is, it returns the vector <code>(1,1,1)</code>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector3.One\n- uid: System.Numerics.Vector3.UnitX\n  commentId: P:System.Numerics.Vector3.UnitX\n  id: UnitX\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: UnitX\n  fullName: System.Numerics.Vector3.UnitX\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnitX\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 379\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the vector (1,0,0).</p>\\n\"\n  syntax:\n    content: public static Vector3 UnitX { get; }\n    content.vb: Public Shared ReadOnly Property UnitX As Vector3\n    parameters: []\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector <code>(1,0,0)</code>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector3.UnitX\n- uid: System.Numerics.Vector3.UnitY\n  commentId: P:System.Numerics.Vector3.UnitY\n  id: UnitY\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: UnitY\n  fullName: System.Numerics.Vector3.UnitY\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnitY\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 380\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the vector (0,1,0).</p>\\n\"\n  syntax:\n    content: public static Vector3 UnitY { get; }\n    content.vb: Public Shared ReadOnly Property UnitY As Vector3\n    parameters: []\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector <code>(0,1,0)</code>..</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector3.UnitY\n- uid: System.Numerics.Vector3.UnitZ\n  commentId: P:System.Numerics.Vector3.UnitZ\n  id: UnitZ\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: UnitZ\n  fullName: System.Numerics.Vector3.UnitZ\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnitZ\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 381\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the vector (0,0,1).</p>\\n\"\n  syntax:\n    content: public static Vector3 UnitZ { get; }\n    content.vb: Public Shared ReadOnly Property UnitZ As Vector3\n    parameters: []\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector <code>(0,0,1)</code>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector3.UnitZ\n- uid: System.Numerics.Vector3.Zero\n  commentId: P:System.Numerics.Vector3.Zero\n  id: Zero\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Numerics.Vector3.Zero\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 382\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a vector whose 3 elements are equal to zero. </p>\\n\"\n  syntax:\n    content: public static Vector3 Zero { get; }\n    content.vb: Public Shared ReadOnly Property Zero As Vector3\n    parameters: []\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>A vector whose three elements are equal to zero (that is, it returns the vector <code>(0,0,0)</code>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector3.Zero\n- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  id: Abs(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Abs(Vector3)\n  fullName: System.Numerics.Vector3.Abs(System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Abs\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 383\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the absolute values of each of the specified vector's elements. </p>\\n\"\n  syntax:\n    content: public static Vector3 Abs(Vector3 value)\n    content.vb: Public Shared Function Abs(value As Vector3) As Vector3\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>A vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The absolute value vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Abs(Vector3)\n- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Add(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Add(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Add(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 384\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector3 Add(Vector3 left, Vector3 right)\n    content.vb: Public Shared Function Add(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector to add. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector to add. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The summed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Add(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Clamp(Vector3, Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Clamp(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clamp\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 385\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Restricts a vector between a minimum and a maximum value. </p>\\n\"\n  syntax:\n    content: public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max)\n    content.vb: Public Shared Function Clamp(value1 As Vector3, min As Vector3, max As Vector3) As Vector3\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to restrict. </p>\\n\"\n    - id: min\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The minimum value. </p>\\n\"\n    - id: max\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The maximum value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The restricted vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Clamp(Vector3, Vector3, Vector3)\n- uid: System.Numerics.Vector3.CopyTo(System.Single[])\n  commentId: M:System.Numerics.Vector3.CopyTo(System.Single[])\n  id: CopyTo(System.Single[])\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Single[])\n  fullName: System.Numerics.Vector3.CopyTo(System.Single[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 386\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Copies the elements of the vector to a specified array. </p>\\n\"\n  syntax:\n    content: public void CopyTo(float[] array)\n    content.vb: Public Sub CopyTo(array As Single())\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The destination array. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the current instance is greater than in the array. </p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector3.CopyTo(System.Single())\n  name.vb: CopyTo(Single())\n  nameWithType: Vector3.CopyTo(Single[])\n  nameWithType.vb: Vector3.CopyTo(Single())\n- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)\n  commentId: M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)\n  id: CopyTo(System.Single[],System.Int32)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Single[], Int32)\n  fullName: System.Numerics.Vector3.CopyTo(System.Single[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 387\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Copies the elements of the vector to a specified array starting at a specified index position. </p>\\n\"\n  syntax:\n    content: public void CopyTo(float[] array, int index)\n    content.vb: Public Sub CopyTo(array As Single(), index As Integer)\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The destination array.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index at which to copy the first element of the vector. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the current instance is greater than in the array. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than or equal to the array length. </p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector3.CopyTo(System.Single(), System.Int32)\n  name.vb: CopyTo(Single(), Int32)\n  nameWithType: Vector3.CopyTo(Single[], Int32)\n  nameWithType.vb: Vector3.CopyTo(Single(), Int32)\n- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Cross(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Cross(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Cross(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cross\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 388\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Computes the cross product of two vectors. </p>\\n\"\n  syntax:\n    content: public static Vector3 Cross(Vector3 vector1, Vector3 vector2)\n    content.vb: Public Shared Function Cross(vector1 As Vector3, vector2 As Vector3) As Vector3\n    parameters:\n    - id: vector1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: vector2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The cross product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Cross(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Distance(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Distance(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Distance(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distance\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 389\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Computes the Euclidean distance between the two given points. </p>\\n\"\n  syntax:\n    content: public static float Distance(Vector3 value1, Vector3 value2)\n    content.vb: Public Shared Function Distance(value1 As Vector3, value2 As Vector3) As Single\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first point. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second point. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The distance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Distance(Vector3, Vector3)\n- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: DistanceSquared(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DistanceSquared\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 390\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the Euclidean distance squared between two specified points. </p>\\n\"\n  syntax:\n    content: public static float DistanceSquared(Vector3 value1, Vector3 value2)\n    content.vb: Public Shared Function DistanceSquared(value1 As Vector3, value2 As Vector3) As Single\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first point. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second point. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The distance squared. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.DistanceSquared(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Divide(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Divide(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Divide(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 391\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the first vector by the second. </p>\\n\"\n  syntax:\n    content: public static Vector3 Divide(Vector3 left, Vector3 right)\n    content.vb: Public Shared Function Divide(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector resulting from the division. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Divide(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)\n  id: Divide(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Divide(Vector3, Single)\n  fullName: System.Numerics.Vector3.Divide(System.Numerics.Vector3, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 392\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the specified vector by a specified scalar value. </p>\\n\"\n  syntax:\n    content: public static Vector3 Divide(Vector3 left, float divisor)\n    content.vb: Public Shared Function Divide(left As Vector3, divisor As Single) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: divisor\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector that results from the division. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Divide(Vector3, Single)\n- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Dot(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Dot(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Dot(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 393\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the dot product of two vectors. </p>\\n\"\n  syntax:\n    content: public static float Dot(Vector3 vector1, Vector3 vector2)\n    content.vb: Public Shared Function Dot(vector1 As Vector3, vector2 As Vector3) As Single\n    parameters:\n    - id: vector1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: vector2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The dot product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Dot(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  id: Equals(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector3)\n  fullName: System.Numerics.Vector3.Equals(System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 394\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and another vector are equal. </p>\\n\"\n  syntax:\n    content: public bool Equals(Vector3 other)\n    content.vb: Public Function Equals(other As Vector3) As Boolean\n    parameters:\n    - id: other\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The other vector. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two vectors are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  implements:\n  - System.IEquatable{System.Numerics.Vector3}.Equals(System.Numerics.Vector3)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Equals(Vector3)\n- uid: System.Numerics.Vector3.Equals(System.Object)\n  commentId: M:System.Numerics.Vector3.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Numerics.Vector3.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 395\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and a specified object are equal.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>. If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Vector3.Equals(Object)\n- uid: System.Numerics.Vector3.GetHashCode\n  commentId: M:System.Numerics.Vector3.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Numerics.Vector3.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 396\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hash code for this instance. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code. </p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Vector3.GetHashCode()\n- uid: System.Numerics.Vector3.Length\n  commentId: M:System.Numerics.Vector3.Length\n  id: Length\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Length()\n  fullName: System.Numerics.Vector3.Length()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 397\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the length of this vector object. </p>\\n\"\n  syntax:\n    content: public float Length()\n    content.vb: Public Function Length As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The vector's length. </p>\\n\"\n  seealso:\n  - type: System.Numerics.Vector3.LengthSquared\n    commentId: M:System.Numerics.Vector3.LengthSquared\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.Length()\n- uid: System.Numerics.Vector3.LengthSquared\n  commentId: M:System.Numerics.Vector3.LengthSquared\n  id: LengthSquared\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: LengthSquared()\n  fullName: System.Numerics.Vector3.LengthSquared()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LengthSquared\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 398\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the length of the vector squared. </p>\\n\"\n  syntax:\n    content: public float LengthSquared()\n    content.vb: Public Function LengthSquared As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The vector's length squared. </p>\\n\"\n  seealso:\n  - type: System.Numerics.Vector3.Length\n    commentId: M:System.Numerics.Vector3.Length\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.LengthSquared()\n- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  id: Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Lerp(Vector3, Vector3, Single)\n  fullName: System.Numerics.Vector3.Lerp(System.Numerics.Vector3, System.Numerics.Vector3, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lerp\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 399\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs a linear interpolation between two vectors based on the given weighting. </p>\\n\"\n  syntax:\n    content: public static Vector3 Lerp(Vector3 value1, Vector3 value2, float amount)\n    content.vb: Public Shared Function Lerp(value1 As Vector3, value2 As Vector3, amount As Single) As Vector3\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    - id: amount\n      type: System.Single\n      description: \"\\n<p>A value between 0 and 1 that indicates the weight of <em>value2</em>. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The interpolated vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Lerp(Vector3, Vector3, Single)\n- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Max(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Max(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Max(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 400\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.</p>\\n\"\n  syntax:\n    content: public static Vector3 Max(Vector3 value1, Vector3 value2)\n    content.vb: Public Shared Function Max(value1 As Vector3, value2 As Vector3) As Vector3\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The maximized vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Max(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Min(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Min(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Min(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 401\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.</p>\\n\"\n  syntax:\n    content: public static Vector3 Min(Vector3 value1, Vector3 value2)\n    content.vb: Public Shared Function Min(value1 As Vector3, value2 As Vector3) As Vector3\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The minimized vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Min(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Multiply(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 402\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector3 Multiply(Vector3 left, Vector3 right)\n    content.vb: Public Shared Function Multiply(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The product vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Multiply(Vector3, Vector3)\n- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)\n  id: Multiply(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector3, Single)\n  fullName: System.Numerics.Vector3.Multiply(System.Numerics.Vector3, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 403\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies a vector by a specified scalar. </p>\\n\"\n  syntax:\n    content: public static Vector3 Multiply(Vector3 left, float right)\n    content.vb: Public Shared Function Multiply(left As Vector3, right As Single) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to multiply. </p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Multiply(Vector3, Single)\n- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)\n  id: Multiply(System.Single,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Single, Vector3)\n  fullName: System.Numerics.Vector3.Multiply(System.Single, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 404\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies a scalar value by a specified vector.</p>\\n\"\n  syntax:\n    content: public static Vector3 Multiply(float left, Vector3 right)\n    content.vb: Public Shared Function Multiply(left As Single, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The scaled value. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Multiply(Single, Vector3)\n- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  id: Negate(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Negate(Vector3)\n  fullName: System.Numerics.Vector3.Negate(System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 405\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Negates a specified vector. </p>\\n\"\n  syntax:\n    content: public static Vector3 Negate(Vector3 value)\n    content.vb: Public Shared Function Negate(value As Vector3) As Vector3\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to negate. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The negated vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Negate(Vector3)\n- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  id: Normalize(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Normalize(Vector3)\n  fullName: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Normalize\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 406\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector with the same direction as the specified vector, but with a length of one. </p>\\n\"\n  syntax:\n    content: public static Vector3 Normalize(Vector3 value)\n    content.vb: Public Shared Function Normalize(value As Vector3) As Vector3\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to normalize. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The normalized vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Normalize(Vector3)\n- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Addition(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Addition(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 407\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator +(Vector3 left, Vector3 right)\n    content.vb: Public Shared Operator +(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector to add. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector to add. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The summed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Addition(Vector3, Vector3)\n- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Division(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Division(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Division(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 408\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the first vector by the second. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator /(Vector3 left, Vector3 right)\n    content.vb: Public Shared Operator /(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector that results from dividing <em>left</em> by <em>right</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Division(Vector3, Vector3)\n- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)\n  id: op_Division(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Division(Vector3, Single)\n  fullName: System.Numerics.Vector3.Division(System.Numerics.Vector3, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 409\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the specified vector by a specified scalar value.</p>\\n\"\n  syntax:\n    content: public static Vector3 operator /(Vector3 value1, float value2)\n    content.vb: Public Shared Operator /(value1 As Vector3, value2 As Single) As Vector3\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: value2\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The result of the division. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Division(Vector3, Single)\n- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Equality(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Equality(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 410\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether each pair of elements in two specified vectors is equal.  </p>\\n\"\n  syntax:\n    content: public static bool operator ==(Vector3 left, Vector3 right)\n    content.vb: Public Shared Operator =(left As Vector3, right As Vector3) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector to compare. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Equality(Vector3, Vector3)\n- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Inequality(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 411\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two specified vectors are not equal.  </p>\\n\"\n  syntax:\n    content: public static bool operator !=(Vector3 left, Vector3 right)\n    content.vb: Public Shared Operator <>(left As Vector3, right As Vector3) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector to compare. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Inequality(Vector3, Vector3)\n- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Multiply(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 412\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator *(Vector3 left, Vector3 right)\n    content.vb: Public Shared Operator *(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The product vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Multiply(Vector3, Vector3)\n- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)\n  id: op_Multiply(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector3, Single)\n  fullName: System.Numerics.Vector3.Multiply(System.Numerics.Vector3, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 413\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiples the specified vector by the specified scalar value. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator *(Vector3 left, float right)\n    content.vb: Public Shared Operator *(left As Vector3, right As Single) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Multiply(Vector3, Single)\n- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)\n  id: op_Multiply(System.Single,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Single, Vector3)\n  fullName: System.Numerics.Vector3.Multiply(System.Single, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 414\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiples the scalar value by the specified vector. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator *(float left, Vector3 right)\n    content.vb: Public Shared Operator *(left As Single, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Multiply(Single, Vector3)\n- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Subtraction(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 415\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts the second vector from the first. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator -(Vector3 left, Vector3 right)\n    content.vb: Public Shared Operator -(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector that results from subtracting <em>right</em> from <em>left</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Subtraction(Vector3, Vector3)\n- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)\n  id: op_UnaryNegation(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(Vector3)\n  fullName: System.Numerics.Vector3.UnaryNegation(System.Numerics.Vector3)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 416\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Negates the specified vector. </p>\\n\"\n  syntax:\n    content: public static Vector3 operator -(Vector3 value)\n    content.vb: Public Shared Operator -(value As Vector3) As Vector3\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to negate. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The negated vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.UnaryNegation(Vector3)\n- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Reflect(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Reflect(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Reflect(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reflect\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 417\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the reflection of a vector off a surface that has the specified normal. </p>\\n\"\n  syntax:\n    content: public static Vector3 Reflect(Vector3 vector, Vector3 normal)\n    content.vb: Public Shared Function Reflect(vector As Vector3, normal As Vector3) As Vector3\n    parameters:\n    - id: vector\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The source vector. </p>\\n\"\n    - id: normal\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The normal of the surface being reflected off. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The reflected vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Reflect(Vector3, Vector3)\n- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  id: SquareRoot(System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: SquareRoot(Vector3)\n  fullName: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SquareRoot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 418\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the square root of each of a specified vector's elements.</p>\\n\"\n  syntax:\n    content: public static Vector3 SquareRoot(Vector3 value)\n    content.vb: Public Shared Function SquareRoot(value As Vector3) As Vector3\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>A vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The square root vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.SquareRoot(Vector3)\n- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  id: Subtract(System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Vector3, Vector3)\n  fullName: System.Numerics.Vector3.Subtract(System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 419\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts the second vector from the first. </p>\\n\"\n  syntax:\n    content: public static Vector3 Subtract(Vector3 left, Vector3 right)\n    content.vb: Public Shared Function Subtract(left As Vector3, right As Vector3) As Vector3\n    parameters:\n    - id: left\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The difference vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Subtract(Vector3, Vector3)\n- uid: System.Numerics.Vector3.ToString\n  commentId: M:System.Numerics.Vector3.ToString\n  id: ToString\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Numerics.Vector3.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 420\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of the current instance using default formatting. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance. </p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Vector3.ToString()\n- uid: System.Numerics.Vector3.ToString(System.String)\n  commentId: M:System.Numerics.Vector3.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Numerics.Vector3.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 421\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of the current instance using the specified format string to format individual elements. </p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string that defines the format of individual elements.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.ToString(String)\n- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Numerics.Vector3.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 422\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</p>\\n\"\n  syntax:\n    content: public string ToString(string format, IFormatProvider formatProvider)\n    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string that defines the format of individual elements. </p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>A format provider that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance. </p>\\n\"\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector3.ToString(String, IFormatProvider)\n- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  commentId: M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  id: Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Transform(Vector3, Matrix4x4)\n  fullName: System.Numerics.Vector3.Transform(System.Numerics.Vector3, System.Numerics.Matrix4x4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 423\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector by a specified 4x4 matrix. </p>\\n\"\n  syntax:\n    content: public static Vector3 Transform(Vector3 position, Matrix4x4 matrix)\n    content.vb: Public Shared Function Transform(position As Vector3, matrix As Matrix4x4) As Vector3\n    parameters:\n    - id: position\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to transform. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: \"\\n<p>The transformation matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Transform(Vector3, Matrix4x4)\n- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  id: Transform(System.Numerics.Vector3,System.Numerics.Quaternion)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: Transform(Vector3, Quaternion)\n  fullName: System.Numerics.Vector3.Transform(System.Numerics.Vector3, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 424\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector by the specified Quaternion rotation value. </p>\\n\"\n  syntax:\n    content: public static Vector3 Transform(Vector3 value, Quaternion rotation)\n    content.vb: Public Shared Function Transform(value As Vector3, rotation As Quaternion) As Vector3\n    parameters:\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to rotate. </p>\\n\"\n    - id: rotation\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The rotation to apply. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.Transform(Vector3, Quaternion)\n- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  commentId: M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  id: TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector3\n  langs:\n  - csharp\n  - vb\n  name: TransformNormal(Vector3, Matrix4x4)\n  fullName: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3, System.Numerics.Matrix4x4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransformNormal\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 425\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector normal by the given 4x4 matrix. </p>\\n\"\n  syntax:\n    content: public static Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix)\n    content.vb: Public Shared Function TransformNormal(normal As Vector3, matrix As Matrix4x4) As Vector3\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The source vector. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: \"\\n<p>The matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector3.TransformNormal(Vector3, Matrix4x4)\nreferences:\n- uid: System.Numerics\n  isExternal: false\n  name: System.Numerics\n  fullName: System.Numerics\n  commentId: N:System.Numerics\n  nameWithType: System.Numerics\n- uid: System.IEquatable{System.Numerics.Vector3}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Vector3>\n  fullName: System.IEquatable<System.Numerics.Vector3>\n  fullname.vb: System.IEquatable(Of System.Numerics.Vector3)\n  name.vb: IEquatable(Of Vector3)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.Vector3\n    name: Vector3\n    fullName: System.Numerics.Vector3\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.Vector3\n    name: Vector3\n    fullName: System.Numerics.Vector3\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Numerics.Vector3}\n  nameWithType: IEquatable<Vector3>\n  nameWithType.vb: IEquatable(Of Vector3)\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  commentId: T:System.IFormattable\n  nameWithType: IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Numerics.Vector2\n  parent: System.Numerics\n  isExternal: false\n  name: Vector2\n  fullName: System.Numerics.Vector2\n  commentId: T:System.Numerics.Vector2\n  nameWithType: Vector2\n- uid: System.Numerics.Vector3\n  parent: System.Numerics\n  isExternal: false\n  name: Vector3\n  fullName: System.Numerics.Vector3\n  commentId: T:System.Numerics.Vector3\n  nameWithType: Vector3\n- uid: System.Single[]\n  name: Single[]\n  fullName: System.Single[]\n  fullname.vb: System.Single()\n  name.vb: Single()\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Single[]\n  nameWithType.vb: Single()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.IEquatable{System.Numerics.Vector3}.Equals(System.Numerics.Vector3)\n  parent: System.IEquatable{System.Numerics.Vector3}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Vector3)\n  fullName: System.IEquatable<System.Numerics.Vector3>.Equals(System.Numerics.Vector3)\n  fullname.vb: System.IEquatable(Of System.Numerics.Vector3).Equals(System.Numerics.Vector3)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Numerics.Vector3>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Vector3\n    name: Vector3\n    fullName: System.Numerics.Vector3\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Numerics.Vector3).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Vector3\n    name: Vector3\n    fullName: System.Numerics.Vector3\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Numerics.Vector3}.Equals(System.Numerics.Vector3)\n  nameWithType: IEquatable<Vector3>.Equals(Vector3)\n  nameWithType.vb: IEquatable(Of Vector3).Equals(Vector3)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  commentId: T:System.IFormatProvider\n  nameWithType: IFormatProvider\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n  commentId: T:System.Numerics.Matrix4x4\n  nameWithType: Matrix4x4\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  fullName: System.Numerics.Quaternion\n  commentId: T:System.Numerics.Quaternion\n  nameWithType: Quaternion\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.RankException\n  isExternal: false\n  name: RankException\n  fullName: System.RankException\n  nameWithType: RankException\n  commentId: T:System.RankException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}