{"nodes":[{"pos":[499,516],"content":"LinkedListNode<T>","needQuote":true,"nodes":[{"content":"LinkedListNode&lt;T&gt;","pos":[0,17],"source":"LinkedListNode<T>"}]},{"content":"\\n&lt;p&gt;Specifies the element type of the linked list.&lt;/p&gt;\\n","pos":[1315,1372],"source":"\\n<p>Specifies the element type of the linked list.</p>\\n"},{"pos":[2215,2232],"content":"LinkedListNode(T)","needQuote":true,"nodes":[{"content":"LinkedListNode(T)","pos":[0,17]}]},{"pos":[3670,3674],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"pos":[5459,5463],"content":"Next","needQuote":true,"nodes":[{"content":"Next","pos":[0,4]}]},{"pos":[7184,7192],"content":"Previous","needQuote":true,"nodes":[{"content":"Previous","pos":[0,8]}]},{"pos":[8942,8947],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The value contained in the node.&lt;/p&gt;\\n","pos":[9614,9657],"source":"\\n<p>The value contained in the node.</p>\\n"},{"pos":[9962,9988],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[10179,10185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10345,10355],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10450,10458],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10527,10528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10555,10556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10626,10634],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10703,10704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10731,10732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10915,10929],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11048,11054],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11121,11122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11172,11178],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11238,11239],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11322,11328],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11395,11396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11446,11452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11512,11513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11727,11749],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11897,11903],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11970,11971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12021,12027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12088,12089]},{"pos":[12144,12150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12210,12211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12308,12314],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12381,12382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12432,12438],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12499,12500]},{"pos":[12555,12561],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12621,12622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12867,12898],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13064,13079],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13155,13156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13206,13212],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13273,13274]},{"pos":[13329,13335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13395,13396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13502,13517],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13593,13594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13644,13650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13711,13712]},{"pos":[13767,13773],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13833,13834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14064,14077],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14178,14189],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14261,14262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14289,14290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14363,14374],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14446,14447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14474,14475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14650,14659],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14752,14759],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14827,14828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14855,14856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14925,14932],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15000,15001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15028,15029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15204,15221],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15330,15345],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15421,15422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15449,15450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15527,15542],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15618,15619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15646,15647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15792,15798],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15900,15901],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15990,15991],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[16173,16186],"content":"LinkedList<T>","needQuote":true,"nodes":[{"content":"LinkedList&lt;T&gt;","pos":[0,13],"source":"LinkedList<T>"}]},{"pos":[16401,16411],"content":"LinkedList","needQuote":true,"nodes":[{"content":"LinkedList","pos":[0,10]}]},{"pos":[16474,16475],"content":"<","needQuote":true,"nodes":[]},{"pos":[16502,16503],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[16622,16632],"content":"LinkedList","needQuote":true,"nodes":[{"content":"LinkedList","pos":[0,10]}]},{"content":"(Of","pos":[16696,16699]},{"pos":[16733,16734],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[16761,16762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16977,16990],"content":"LinkedList<T>","needQuote":true,"nodes":[{"content":"LinkedList&lt;T&gt;","pos":[0,13],"source":"LinkedList<T>"}]},{"pos":[17205,17215],"content":"LinkedList","needQuote":true,"nodes":[{"content":"LinkedList","pos":[0,10]}]},{"pos":[17278,17279],"content":"<","needQuote":true,"nodes":[]},{"pos":[17306,17307],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17426,17436],"content":"LinkedList","needQuote":true,"nodes":[{"content":"LinkedList","pos":[0,10]}]},{"content":"(Of","pos":[17500,17503]},{"pos":[17537,17538],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17565,17566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17820,17837],"content":"LinkedListNode<T>","needQuote":true,"nodes":[{"content":"LinkedListNode&lt;T&gt;","pos":[0,17],"source":"LinkedListNode<T>"}]},{"pos":[18068,18082],"content":"LinkedListNode","needQuote":true,"nodes":[{"content":"LinkedListNode","pos":[0,14]}]},{"pos":[18149,18150],"content":"<","needQuote":true,"nodes":[]},{"pos":[18177,18178],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18301,18315],"content":"LinkedListNode","needQuote":true,"nodes":[{"content":"LinkedListNode","pos":[0,14]}]},{"content":"(Of","pos":[18383,18386]},{"pos":[18420,18421],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18448,18449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Collections.Generic.LinkedListNode`1\n  commentId: T:System.Collections.Generic.LinkedListNode`1\n  id: LinkedListNode`1\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.LinkedListNode`1.#ctor(`0)\n  - System.Collections.Generic.LinkedListNode`1.List\n  - System.Collections.Generic.LinkedListNode`1.Next\n  - System.Collections.Generic.LinkedListNode`1.Previous\n  - System.Collections.Generic.LinkedListNode`1.Value\n  langs:\n  - csharp\n  - vb\n  name: LinkedListNode<T>\n  fullName: System.Collections.Generic.LinkedListNode<T>\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LinkedListNode\n    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n    startLine: 552\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Represents a node in a <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public sealed class LinkedListNode<T>\n    content.vb: Public NotInheritable Class LinkedListNode(Of T)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>Specifies the element type of the linked list.</p>\\n\"\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  fullName.vb: System.Collections.Generic.LinkedListNode(Of T)\n  name.vb: LinkedListNode(Of T)\n  nameWithType: LinkedListNode<T>\n  nameWithType.vb: LinkedListNode(Of T)\n- uid: System.Collections.Generic.LinkedListNode`1.#ctor(`0)\n  commentId: M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: System.Collections.Generic.LinkedListNode`1\n  langs:\n  - csharp\n  - vb\n  name: LinkedListNode(T)\n  fullName: System.Collections.Generic.LinkedListNode<T>.LinkedListNode(T)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n    startLine: 559\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Generic.LinkedListNode`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, containing the specified value.</p>\\n\"\n  syntax:\n    content: public LinkedListNode(T value)\n    content.vb: Public Sub New(value As T)\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The value to contain in the <xref href=\\\"System.Collections.Generic.LinkedListNode`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.LinkedListNode(Of T).LinkedListNode(T)\n  nameWithType: LinkedListNode<T>.LinkedListNode(T)\n  nameWithType.vb: LinkedListNode(Of T).LinkedListNode(T)\n- uid: System.Collections.Generic.LinkedListNode`1.List\n  commentId: P:System.Collections.Generic.LinkedListNode`1.List\n  id: List\n  parent: System.Collections.Generic.LinkedListNode`1\n  langs:\n  - csharp\n  - vb\n  name: List\n  fullName: System.Collections.Generic.LinkedListNode<T>.List\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: List\n    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n    startLine: 570\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Collections.Generic.LinkedListNode`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to.</p>\\n\"\n  syntax:\n    content: public LinkedList<T> List { get; }\n    content.vb: Public ReadOnly Property List As LinkedList(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.LinkedList{{T}}\n      description: \"\\n<p>A reference to the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Collections.Generic.LinkedListNode`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to, or <strong>null</strong> if the <xref href=\\\"System.Collections.Generic.LinkedListNode`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not linked.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.LinkedListNode(Of T).List\n  nameWithType: LinkedListNode<T>.List\n  nameWithType.vb: LinkedListNode(Of T).List\n- uid: System.Collections.Generic.LinkedListNode`1.Next\n  commentId: P:System.Collections.Generic.LinkedListNode`1.Next\n  id: Next\n  parent: System.Collections.Generic.LinkedListNode`1\n  langs:\n  - csharp\n  - vb\n  name: Next\n  fullName: System.Collections.Generic.LinkedListNode<T>.Next\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Next\n    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n    startLine: 575\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the next node in the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public LinkedListNode<T> Next { get; }\n    content.vb: Public ReadOnly Property Next As LinkedListNode(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.LinkedListNode`1\n      description: \"\\n<p>A reference to the next node in the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>null</strong> if the current node is the last element (<xref href=\\\"System.Collections.Generic.LinkedList`1.Last\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) of the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.LinkedListNode(Of T).Next\n  nameWithType: LinkedListNode<T>.Next\n  nameWithType.vb: LinkedListNode(Of T).Next\n- uid: System.Collections.Generic.LinkedListNode`1.Previous\n  commentId: P:System.Collections.Generic.LinkedListNode`1.Previous\n  id: Previous\n  parent: System.Collections.Generic.LinkedListNode`1\n  langs:\n  - csharp\n  - vb\n  name: Previous\n  fullName: System.Collections.Generic.LinkedListNode<T>.Previous\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Previous\n    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n    startLine: 580\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the previous node in the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public LinkedListNode<T> Previous { get; }\n    content.vb: Public ReadOnly Property Previous As LinkedListNode(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.LinkedListNode`1\n      description: \"\\n<p>A reference to the previous node in the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>null</strong> if the current node is the first element (<xref href=\\\"System.Collections.Generic.LinkedList`1.First\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) of the <xref href=\\\"System.Collections.Generic.LinkedList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.LinkedListNode(Of T).Previous\n  nameWithType: LinkedListNode<T>.Previous\n  nameWithType.vb: LinkedListNode(Of T).Previous\n- uid: System.Collections.Generic.LinkedListNode`1.Value\n  commentId: P:System.Collections.Generic.LinkedListNode`1.Value\n  id: Value\n  parent: System.Collections.Generic.LinkedListNode`1\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Collections.Generic.LinkedListNode<T>.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs\n    startLine: 585\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the value contained in the node.</p>\\n\"\n  syntax:\n    content: public T Value { get; set; }\n    content.vb: Public Property Value As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>The value contained in the node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.LinkedListNode(Of T).Value\n  nameWithType: LinkedListNode<T>.Value\n  nameWithType.vb: LinkedListNode(Of T).Value\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.LinkedList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.LinkedList`1\n  name: LinkedList<T>\n  fullName: System.Collections.Generic.LinkedList<T>\n  fullname.vb: System.Collections.Generic.LinkedList(Of T)\n  name.vb: LinkedList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.LinkedList`1\n    name: LinkedList\n    fullName: System.Collections.Generic.LinkedList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.LinkedList`1\n    name: LinkedList\n    fullName: System.Collections.Generic.LinkedList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: LinkedList<T>\n  nameWithType.vb: LinkedList(Of T)\n  commentId: T:System.Collections.Generic.LinkedList{`0}\n- uid: System.Collections.Generic.LinkedList`1\n  isExternal: false\n  name: LinkedList<T>\n  fullName: System.Collections.Generic.LinkedList<T>\n  fullname.vb: System.Collections.Generic.LinkedList(Of T)\n  name.vb: LinkedList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.LinkedList`1\n    name: LinkedList\n    fullName: System.Collections.Generic.LinkedList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.LinkedList`1\n    name: LinkedList\n    fullName: System.Collections.Generic.LinkedList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: LinkedList<T>\n  nameWithType.vb: LinkedList(Of T)\n  commentId: T:System.Collections.Generic.LinkedList`1\n- uid: System.Collections.Generic.LinkedListNode`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: LinkedListNode<T>\n  fullName: System.Collections.Generic.LinkedListNode<T>\n  fullname.vb: System.Collections.Generic.LinkedListNode(Of T)\n  name.vb: LinkedListNode(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.LinkedListNode`1\n    name: LinkedListNode\n    fullName: System.Collections.Generic.LinkedListNode\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.LinkedListNode`1\n    name: LinkedListNode\n    fullName: System.Collections.Generic.LinkedListNode\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: LinkedListNode<T>\n  nameWithType.vb: LinkedListNode(Of T)\n  commentId: T:System.Collections.Generic.LinkedListNode`1\n"}