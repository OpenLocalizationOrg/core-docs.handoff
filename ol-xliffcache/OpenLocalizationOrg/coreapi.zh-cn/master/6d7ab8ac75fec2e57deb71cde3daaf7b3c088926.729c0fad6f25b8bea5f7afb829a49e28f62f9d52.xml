{"nodes":[{"pos":[2711,2721],"content":"XmlConvert","needQuote":true,"nodes":[{"content":"XmlConvert","pos":[0,10]}]},{"pos":[4090,4108],"content":"DecodeName(String)","needQuote":true,"nodes":[{"content":"DecodeName(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The name to be transformed.","pos":[5050,5082],"source":"\\n<p>The name to be transformed."},{"content":"&lt;/p&gt;\\n","pos":[5083,5089],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decoded name.&lt;/p&gt;\\n","pos":[5149,5177],"source":"\\n<p>The decoded name.</p>\\n"},{"pos":[5537,5560],"content":"EncodeLocalName(String)","needQuote":true,"nodes":[{"content":"EncodeLocalName(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The name to be encoded.","pos":[6281,6309],"source":"\\n<p>The name to be encoded."},{"content":"&lt;/p&gt;\\n","pos":[6310,6316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encoded name.&lt;/p&gt;\\n","pos":[6376,6404],"source":"\\n<p>The encoded name.</p>\\n"},{"pos":[7011,7029],"content":"EncodeName(String)","needQuote":true,"nodes":[{"content":"EncodeName(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A name to be translated.","pos":[7724,7753],"source":"\\n<p>A name to be translated."},{"content":"&lt;/p&gt;\\n","pos":[7754,7760],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Returns the name with any invalid characters replaced by an escape string.&lt;/p&gt;\\n","pos":[7820,7905],"source":"\\n<p>Returns the name with any invalid characters replaced by an escape string.</p>\\n"},{"pos":[8526,8547],"content":"EncodeNmToken(String)","needQuote":true,"nodes":[{"content":"EncodeNmToken(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The name to be encoded.","pos":[9278,9306],"source":"\\n<p>The name to be encoded."},{"content":"&lt;/p&gt;\\n","pos":[9307,9313],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encoded name.&lt;/p&gt;\\n","pos":[9373,9401],"source":"\\n<p>The encoded name.</p>\\n"},{"pos":[9746,9763],"content":"ToBoolean(String)","needQuote":true,"nodes":[{"content":"ToBoolean(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[10584,10611],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[10612,10618],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Boolean&lt;/strong&gt; value, that is, &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10679,10781],"source":"\\n<p>A <strong>Boolean</strong> value, that is, <strong>true</strong> or <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10900,10943],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10944,10950],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a &lt;strong&gt;Boolean&lt;/strong&gt; value.","pos":[11043,11113],"source":"\\n<p>\\n<em>s</em> does not represent a <strong>Boolean</strong> value."},{"content":"&lt;/p&gt;\\n","pos":[11114,11120],"source":" </p>\\n"},{"pos":[11452,11466],"content":"ToByte(String)","needQuote":true,"nodes":[{"content":"ToByte(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[12269,12296],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[12297,12303],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Byte&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[12361,12421],"source":"\\n<p>A <strong>Byte</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12540,12583],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12584,12590],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[12683,12730],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[12731,12737],"source":" </p>\\n"},{"pos":[13396,13410],"content":"ToChar(String)","needQuote":true,"nodes":[{"content":"ToChar(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The string containing a single character to convert.","pos":[14213,14270],"source":"\\n<p>The string containing a single character to convert."},{"content":"&lt;/p&gt;\\n","pos":[14271,14277],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Char&lt;/strong&gt; representing the single character.&lt;/p&gt;\\n","pos":[14335,14404],"source":"\\n<p>A <strong>Char</strong> representing the single character.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;s&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14523,14591],"source":"\\n<p>The value of the <em>s</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14592,14598],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter contains more than one character.","pos":[14691,14754],"source":"\\n<p>The <em>s</em> parameter contains more than one character."},{"content":"&lt;/p&gt;\\n","pos":[14755,14761],"source":" </p>\\n"},{"pos":[15222,15270],"content":"ToDateTime(String, XmlDateTimeSerializationMode)","needQuote":true,"nodes":[{"content":"ToDateTime(String, XmlDateTimeSerializationMode)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17171,17220],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;dateTimeOption&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17325,17395],"source":"\\n<p>The <em>dateTimeOption</em> value is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is an empty string or is not in a valid format.&lt;/p&gt;\\n","pos":[17488,17559],"source":"\\n<p>\\n<em>s</em> is an empty string or is not in a valid format.</p>\\n"},{"pos":[17952,17976],"content":"ToDateTimeOffset(String)","needQuote":true,"nodes":[{"content":"ToDateTimeOffset(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The string to convert.&lt;/p&gt;\\n&lt;p&gt;Note   The string must conform to a subset of the W3C Recommendation for the XML dateTime type.","pos":[18858,18989],"source":"\\n<p>The string to convert.</p>\\n<p>Note   The string must conform to a subset of the W3C Recommendation for the XML dateTime type."},{"content":"For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.&lt;/p&gt;\\n","pos":[18990,19064],"source":" For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19382,19425],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19426,19432],"source":" </p>\\n"},{"pos":[20529,20561],"content":"ToDateTimeOffset(String, String)","needQuote":true,"nodes":[{"content":"ToDateTimeOffset(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The string to convert.&lt;/p&gt;\\n","pos":[21491,21524],"source":"\\n<p>The string to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The format from which &lt;em&gt;s&lt;/em&gt; is converted.","pos":[21589,21640],"source":"\\n<p>The format from which <em>s</em> is converted."},{"content":"The format parameter can be any subset of the W3C Recommendation for the XML dateTime type.","pos":[21641,21732]},{"content":"(For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string &lt;em&gt;s&lt;/em&gt; is validated against this format.&lt;/p&gt;\\n","pos":[21733,21865],"source":" (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <em>s</em> is validated against this format.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22183,22226],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22227,22233],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is an empty string or is not in the specified format.&lt;/p&gt;\\n","pos":[22326,22422],"source":"\\n<p>\\n<em>s</em> or <em>format</em> is an empty string or is not in the specified format.</p>\\n"},{"pos":[22847,22881],"content":"ToDateTimeOffset(String, String[])","needQuote":true,"nodes":[{"content":"ToDateTimeOffset(String, String[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The string to convert.&lt;/p&gt;\\n","pos":[23819,23852],"source":"\\n<p>The string to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An array of formats from which &lt;em&gt;s&lt;/em&gt; can be converted.","pos":[23920,23984],"source":"\\n<p>An array of formats from which <em>s</em> can be converted."},{"content":"Each format in &lt;em&gt;formats&lt;/em&gt; can be any subset of the W3C Recommendation for the XML dateTime type.","pos":[23985,24087],"source":" Each format in <em>formats</em> can be any subset of the W3C Recommendation for the XML dateTime type."},{"content":"(For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string &lt;em&gt;s&lt;/em&gt; is validated against one of these formats.&lt;/p&gt;\\n","pos":[24088,24229],"source":" (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <em>s</em> is validated against one of these formats.</p>\\n"},{"pos":[24983,25000],"content":"ToDecimal(String)","needQuote":true,"nodes":[{"content":"ToDecimal(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[25824,25851],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[25852,25858],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Decimal&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[25919,25982],"source":"\\n<p>A <strong>Decimal</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26101,26144],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26145,26151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[26244,26291],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[26292,26298],"source":" </p>\\n"},{"pos":[26972,26988],"content":"ToDouble(String)","needQuote":true,"nodes":[{"content":"ToDouble(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[27805,27832],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[27833,27839],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Double&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[27899,27961],"source":"\\n<p>A <strong>Double</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28080,28123],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28124,28130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[28223,28270],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[28271,28277],"source":" </p>\\n"},{"pos":[29131,29145],"content":"ToGuid(String)","needQuote":true,"nodes":[{"content":"ToGuid(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[29948,29975],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[29976,29982],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Guid&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[30040,30100],"source":"\\n<p>A <strong>Guid</strong> equivalent of the string.</p>\\n"},{"pos":[30432,30447],"content":"ToInt16(String)","needQuote":true,"nodes":[{"content":"ToInt16(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[31257,31284],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[31285,31291],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;Int16&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[31350,31412],"source":"\\n<p>An <strong>Int16</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[31531,31574],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[31575,31581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[31674,31721],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[31722,31728],"source":" </p>\\n"},{"pos":[32393,32408],"content":"ToInt32(String)","needQuote":true,"nodes":[{"content":"ToInt32(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[33218,33245],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[33246,33252],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;Int32&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[33311,33373],"source":"\\n<p>An <strong>Int32</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33492,33535],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33536,33542],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[33635,33682],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[33683,33689],"source":" </p>\\n"},{"pos":[34354,34369],"content":"ToInt64(String)","needQuote":true,"nodes":[{"content":"ToInt64(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[35177,35204],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[35205,35211],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;Int64&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[35270,35332],"source":"\\n<p>An <strong>Int64</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35451,35494],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35495,35501],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[35594,35641],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[35642,35648],"source":" </p>\\n"},{"pos":[36313,36328],"content":"ToSByte(String)","needQuote":true,"nodes":[{"content":"ToSByte(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[37214,37241],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[37242,37248],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;SByte&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[37307,37369],"source":"\\n<p>An <strong>SByte</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[37488,37531],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37532,37538],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[37631,37678],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[37679,37685],"source":" </p>\\n"},{"pos":[38528,38544],"content":"ToSingle(String)","needQuote":true,"nodes":[{"content":"ToSingle(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[39360,39387],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[39388,39394],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Single&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[39454,39516],"source":"\\n<p>A <strong>Single</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[39635,39678],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[39679,39685],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[39778,39825],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[39826,39832],"source":" </p>\\n"},{"pos":[40695,40712],"content":"ToString(Boolean)","needQuote":true,"nodes":[{"content":"ToString(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[41532,41558],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[41559,41565],"source":" </p>\\n"},{"pos":[42056,42070],"content":"ToString(Byte)","needQuote":true,"nodes":[{"content":"ToString(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[42878,42904],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[42905,42911],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Byte&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42971,43035],"source":"\\n<p>A string representation of the <strong>Byte</strong>.</p>\\n"},{"pos":[43364,43378],"content":"ToString(Char)","needQuote":true,"nodes":[{"content":"ToString(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[44186,44212],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[44213,44219],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Char&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44279,44343],"source":"\\n<p>A string representation of the <strong>Char</strong>.</p>\\n"},{"pos":[44804,44852],"content":"ToString(DateTime, XmlDateTimeSerializationMode)","needQuote":true,"nodes":[{"content":"ToString(DateTime, XmlDateTimeSerializationMode)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;dateTimeOption&lt;/em&gt; value is not valid.&lt;/p&gt;\\n","pos":[46730,46788],"source":"\\n<p>The <em>dateTimeOption</em> value is not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; or &lt;em&gt;dateTimeOption&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46893,46981],"source":"\\n<p>The <em>value</em> or <em>dateTimeOption</em> value is <strong>null</strong>.</p>\\n"},{"pos":[47374,47398],"content":"ToString(DateTimeOffset)","needQuote":true,"nodes":[{"content":"ToString(DateTimeOffset)","pos":[0,24]}]},{"pos":[49049,49081],"content":"ToString(DateTimeOffset, String)","needQuote":true,"nodes":[{"content":"ToString(DateTimeOffset, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The format to which &lt;em&gt;s&lt;/em&gt; is converted.","pos":[50198,50247],"source":"\\n<p>The format to which <em>s</em> is converted."},{"content":"The format parameter can be any subset of the W3C Recommendation for the XML dateTime type.","pos":[50248,50339]},{"content":"(For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)&lt;/p&gt;\\n","pos":[50340,50416],"source":" (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)</p>\\n"},{"pos":[51056,51073],"content":"ToString(Decimal)","needQuote":true,"nodes":[{"content":"ToString(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[51896,51922],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[51923,51929],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Decimal&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51989,52056],"source":"\\n<p>A string representation of the <strong>Decimal</strong>.</p>\\n"},{"pos":[52394,52410],"content":"ToString(Double)","needQuote":true,"nodes":[{"content":"ToString(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[53229,53255],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[53256,53262],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Double&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[53322,53388],"source":"\\n<p>A string representation of the <strong>Double</strong>.</p>\\n"},{"pos":[53908,53922],"content":"ToString(Guid)","needQuote":true,"nodes":[{"content":"ToString(Guid)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[54731,54757],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[54758,54764],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Guid&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54824,54888],"source":"\\n<p>A string representation of the <strong>Guid</strong>.</p>\\n"},{"pos":[55220,55235],"content":"ToString(Int16)","needQuote":true,"nodes":[{"content":"ToString(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[56049,56075],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[56076,56082],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Int16&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56142,56207],"source":"\\n<p>A string representation of the <strong>Int16</strong>.</p>\\n"},{"pos":[56540,56555],"content":"ToString(Int32)","needQuote":true,"nodes":[{"content":"ToString(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[57369,57395],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[57396,57402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Int32&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57462,57527],"source":"\\n<p>A string representation of the <strong>Int32</strong>.</p>\\n"},{"pos":[57860,57875],"content":"ToString(Int64)","needQuote":true,"nodes":[{"content":"ToString(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[58687,58713],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[58714,58720],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Int64&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58780,58845],"source":"\\n<p>A string representation of the <strong>Int64</strong>.</p>\\n"},{"pos":[59178,59193],"content":"ToString(SByte)","needQuote":true,"nodes":[{"content":"ToString(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[60083,60109],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[60110,60116],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;SByte&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60176,60241],"source":"\\n<p>A string representation of the <strong>SByte</strong>.</p>\\n"},{"pos":[60752,60768],"content":"ToString(Single)","needQuote":true,"nodes":[{"content":"ToString(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[61586,61612],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[61613,61619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;Single&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61679,61745],"source":"\\n<p>A string representation of the <strong>Single</strong>.</p>\\n"},{"pos":[62277,62295],"content":"ToString(TimeSpan)","needQuote":true,"nodes":[{"content":"ToString(TimeSpan)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[63124,63150],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[63151,63157],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;TimeSpan&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63217,63285],"source":"\\n<p>A string representation of the <strong>TimeSpan</strong>.</p>\\n"},{"pos":[63624,63640],"content":"ToString(UInt16)","needQuote":true,"nodes":[{"content":"ToString(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[64535,64561],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[64562,64568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;UInt16&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64628,64694],"source":"\\n<p>A string representation of the <strong>UInt16</strong>.</p>\\n"},{"pos":[65206,65222],"content":"ToString(UInt32)","needQuote":true,"nodes":[{"content":"ToString(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[66117,66143],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[66144,66150],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;UInt32&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[66210,66276],"source":"\\n<p>A string representation of the <strong>UInt32</strong>.</p>\\n"},{"pos":[66788,66804],"content":"ToString(UInt64)","needQuote":true,"nodes":[{"content":"ToString(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[67697,67723],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[67724,67730],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of the &lt;strong&gt;UInt64&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[67790,67856],"source":"\\n<p>A string representation of the <strong>UInt64</strong>.</p>\\n"},{"pos":[68374,68392],"content":"ToTimeSpan(String)","needQuote":true,"nodes":[{"content":"ToTimeSpan(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[69224,69251],"source":"\\n<p>The string to convert."},{"content":"The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.&lt;/p&gt;\\n","pos":[69252,69357],"source":" The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.</p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;TimeSpan&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[69419,69483],"source":"\\n<p>A <strong>TimeSpan</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in correct format to represent a &lt;strong&gt;TimeSpan&lt;/strong&gt; value.","pos":[69590,69680],"source":"\\n<p>\\n<em>s</em> is not in correct format to represent a <strong>TimeSpan</strong> value."},{"content":"&lt;/p&gt;\\n","pos":[69681,69687],"source":" </p>\\n"},{"pos":[70026,70042],"content":"ToUInt16(String)","needQuote":true,"nodes":[{"content":"ToUInt16(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[70936,70963],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[70964,70970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;UInt16&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[71030,71092],"source":"\\n<p>A <strong>UInt16</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[71211,71254],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[71255,71261],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[71354,71401],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[71402,71408],"source":" </p>\\n"},{"pos":[72254,72270],"content":"ToUInt32(String)","needQuote":true,"nodes":[{"content":"ToUInt32(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[73164,73191],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[73192,73198],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;UInt32&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[73258,73320],"source":"\\n<p>A <strong>UInt32</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[73439,73482],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[73483,73489],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[73582,73629],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[73630,73636],"source":" </p>\\n"},{"pos":[74482,74498],"content":"ToUInt64(String)","needQuote":true,"nodes":[{"content":"ToUInt64(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[75390,75417],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[75418,75424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;UInt64&lt;/strong&gt; equivalent of the string.&lt;/p&gt;\\n","pos":[75484,75546],"source":"\\n<p>A <strong>UInt64</strong> equivalent of the string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[75665,75708],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[75709,75715],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[75808,75855],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[75856,75862],"source":" </p>\\n"},{"pos":[76714,76732],"content":"VerifyName(String)","needQuote":true,"nodes":[{"content":"VerifyName(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The name to verify.","pos":[77490,77514],"source":"\\n<p>The name to verify."},{"content":"&lt;/p&gt;\\n","pos":[77515,77521],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name, if it is a valid XML name.&lt;/p&gt;\\n","pos":[77581,77628],"source":"\\n<p>The name, if it is a valid XML name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid XML name.","pos":[77737,77782],"source":"\\n<p>\\n<em>name</em> is not a valid XML name."},{"content":"&lt;/p&gt;\\n","pos":[77783,77789],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or String.Empty.","pos":[77894,77956],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong> or String.Empty."},{"content":"&lt;/p&gt;\\n","pos":[77957,77963],"source":" </p>\\n"},{"pos":[78452,78472],"content":"VerifyNCName(String)","needQuote":true,"nodes":[{"content":"VerifyNCName(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name to verify.","pos":[79323,79347],"source":"\\n<p>The name to verify."},{"content":"&lt;/p&gt;\\n","pos":[79348,79354],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name, if it is a valid NCName.&lt;/p&gt;\\n","pos":[79414,79459],"source":"\\n<p>The name, if it is a valid NCName.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or &lt;code&gt;String.Empty&lt;/code&gt;.","pos":[79578,79653],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong> or <code>String.Empty</code>."},{"content":"&lt;/p&gt;\\n","pos":[79654,79660],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid non-colon name.","pos":[79755,79806],"source":"\\n<p>\\n<em>name</em> is not a valid non-colon name."},{"content":"&lt;/p&gt;\\n","pos":[79807,79813],"source":" </p>\\n"},{"pos":[80169,80190],"content":"VerifyNMTOKEN(String)","needQuote":true,"nodes":[{"content":"VerifyNMTOKEN(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The string you wish to verify.&lt;/p&gt;\\n","pos":[80967,81008],"source":"\\n<p>The string you wish to verify.</p>\\n"},{"content":"\\n&lt;p&gt;The name token, if it is a valid NMTOKEN.&lt;/p&gt;\\n","pos":[81068,81120],"source":"\\n<p>The name token, if it is a valid NMTOKEN.</p>\\n"},{"content":"\\n&lt;p&gt;The string is not a valid name token.&lt;/p&gt;\\n","pos":[81229,81277],"source":"\\n<p>The string is not a valid name token.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[81382,81434],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[81794,81816],"content":"VerifyPublicId(String)","needQuote":true,"nodes":[{"content":"VerifyPublicId(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;Returns the passed-in string if all the characters in the argument are valid public id characters.&lt;/p&gt;\\n","pos":[82796,82905],"source":"\\n<p>Returns the passed-in string if all the characters in the argument are valid public id characters.</p>\\n"},{"pos":[83272,83296],"content":"VerifyWhitespace(String)","needQuote":true,"nodes":[{"content":"VerifyWhitespace(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[84260,84419],"source":"\\n<p>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise <strong>null</strong>.</p>\\n"},{"pos":[84782,84804],"content":"VerifyXmlChars(String)","needQuote":true,"nodes":[{"content":"VerifyXmlChars(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;Returns the passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise an &lt;strong&gt;XmlException&lt;/strong&gt; is thrown with information on the first invalid character encountered.&lt;/p&gt;\\n","pos":[85913,86167],"source":"\\n<p>Returns the passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise an <strong>XmlException</strong> is thrown with information on the first invalid character encountered.</p>\\n"},{"pos":[86357,86367],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[86510,86516],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86676,86686],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[86781,86789],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[86858,86859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86886,86887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86957,86965],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[87034,87035],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87062,87063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87246,87260],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[87379,87385],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87452,87453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87503,87509],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87569,87570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87653,87659],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87726,87727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87777,87783],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87843,87844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88058,88080],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[88228,88234],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88301,88302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88352,88358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[88419,88420]},{"pos":[88475,88481],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88541,88542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88639,88645],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88712,88713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88763,88769],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[88830,88831]},{"pos":[88886,88892],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88952,88953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89198,89229],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[89395,89410],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[89486,89487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89537,89543],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[89604,89605]},{"pos":[89660,89666],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89726,89727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89833,89848],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[89924,89925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89975,89981],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90042,90043]},{"pos":[90098,90104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90164,90165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90395,90408],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[90509,90520],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[90592,90593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90620,90621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90694,90705],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[90777,90778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90805,90806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90981,90990],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[91083,91090],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[91158,91159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91186,91187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91256,91263],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[91331,91332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91359,91360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91535,91552],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[91661,91676],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[91752,91753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91780,91781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91858,91873],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[91949,91950],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91977,91978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92123,92129],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[92260,92266],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[92412,92419],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[92565,92569],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[92706,92710],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[92879,92907],"content":"XmlDateTimeSerializationMode","needQuote":true,"nodes":[{"content":"XmlDateTimeSerializationMode","pos":[0,28]}]},{"pos":[93128,93136],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[93295,93309],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[93443,93451],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[93579,93585],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[93646,93648]},{"pos":[93713,93719],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[93779,93781],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[93919,93926],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[94074,94080],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[94223,94227],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[94365,94370],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[94511,94516],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94657,94662],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[94803,94808],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[94950,94956],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[95103,95111],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[95262,95268],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[95413,95419],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[95564,95570],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[95713,95734],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[95933,95948],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[96114,96131],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[96308,96330],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]},{"pos":[96527,96554],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[96773,96790],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[96961,96973],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]}],"content":"items:\n- uid: System.Xml.XmlConvert\n  commentId: T:System.Xml.XmlConvert\n  id: XmlConvert\n  parent: System.Xml\n  children:\n  - System.Xml.XmlConvert.DecodeName(System.String)\n  - System.Xml.XmlConvert.EncodeLocalName(System.String)\n  - System.Xml.XmlConvert.EncodeName(System.String)\n  - System.Xml.XmlConvert.EncodeNmToken(System.String)\n  - System.Xml.XmlConvert.ToBoolean(System.String)\n  - System.Xml.XmlConvert.ToByte(System.String)\n  - System.Xml.XmlConvert.ToChar(System.String)\n  - System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)\n  - System.Xml.XmlConvert.ToDateTimeOffset(System.String)\n  - System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)\n  - System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])\n  - System.Xml.XmlConvert.ToDecimal(System.String)\n  - System.Xml.XmlConvert.ToDouble(System.String)\n  - System.Xml.XmlConvert.ToGuid(System.String)\n  - System.Xml.XmlConvert.ToInt16(System.String)\n  - System.Xml.XmlConvert.ToInt32(System.String)\n  - System.Xml.XmlConvert.ToInt64(System.String)\n  - System.Xml.XmlConvert.ToSByte(System.String)\n  - System.Xml.XmlConvert.ToSingle(System.String)\n  - System.Xml.XmlConvert.ToString(System.Boolean)\n  - System.Xml.XmlConvert.ToString(System.Byte)\n  - System.Xml.XmlConvert.ToString(System.Char)\n  - System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)\n  - System.Xml.XmlConvert.ToString(System.DateTimeOffset)\n  - System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)\n  - System.Xml.XmlConvert.ToString(System.Decimal)\n  - System.Xml.XmlConvert.ToString(System.Double)\n  - System.Xml.XmlConvert.ToString(System.Guid)\n  - System.Xml.XmlConvert.ToString(System.Int16)\n  - System.Xml.XmlConvert.ToString(System.Int32)\n  - System.Xml.XmlConvert.ToString(System.Int64)\n  - System.Xml.XmlConvert.ToString(System.SByte)\n  - System.Xml.XmlConvert.ToString(System.Single)\n  - System.Xml.XmlConvert.ToString(System.TimeSpan)\n  - System.Xml.XmlConvert.ToString(System.UInt16)\n  - System.Xml.XmlConvert.ToString(System.UInt32)\n  - System.Xml.XmlConvert.ToString(System.UInt64)\n  - System.Xml.XmlConvert.ToTimeSpan(System.String)\n  - System.Xml.XmlConvert.ToUInt16(System.String)\n  - System.Xml.XmlConvert.ToUInt32(System.String)\n  - System.Xml.XmlConvert.ToUInt64(System.String)\n  - System.Xml.XmlConvert.VerifyName(System.String)\n  - System.Xml.XmlConvert.VerifyNCName(System.String)\n  - System.Xml.XmlConvert.VerifyNMTOKEN(System.String)\n  - System.Xml.XmlConvert.VerifyPublicId(System.String)\n  - System.Xml.XmlConvert.VerifyWhitespace(System.String)\n  - System.Xml.XmlConvert.VerifyXmlChars(System.String)\n  langs:\n  - csharp\n  - vb\n  name: XmlConvert\n  fullName: System.Xml.XmlConvert\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlConvert\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 71\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Encodes and decodes XML names, and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types, the values returned are locale-independent.</p>\\n\"\n  syntax:\n    content: public class XmlConvert\n    content.vb: Public Class XmlConvert\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlConvert\n- uid: System.Xml.XmlConvert.DecodeName(System.String)\n  commentId: M:System.Xml.XmlConvert.DecodeName(System.String)\n  id: DecodeName(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: DecodeName(String)\n  fullName: System.Xml.XmlConvert.DecodeName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DecodeName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 73\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Decodes a name. This method does the reverse of the <xref href=\\\"System.Xml.XmlConvert.EncodeName(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlConvert.EncodeLocalName(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods.</p>\\n\"\n  syntax:\n    content: public static string DecodeName(string name)\n    content.vb: Public Shared Function DecodeName(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to be transformed. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The decoded name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.DecodeName(String)\n- uid: System.Xml.XmlConvert.EncodeLocalName(System.String)\n  commentId: M:System.Xml.XmlConvert.EncodeLocalName(System.String)\n  id: EncodeLocalName(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: EncodeLocalName(String)\n  fullName: System.Xml.XmlConvert.EncodeLocalName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EncodeLocalName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 74\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the name to a valid XML local name.</p>\\n\"\n  syntax:\n    content: public static string EncodeLocalName(string name)\n    content.vb: Public Shared Function EncodeLocalName(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to be encoded. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The encoded name.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlConvert.EncodeName(System.String)\n    commentId: M:System.Xml.XmlConvert.EncodeName(System.String)\n  - type: System.Xml.XmlConvert.DecodeName(System.String)\n    commentId: M:System.Xml.XmlConvert.DecodeName(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.EncodeLocalName(String)\n- uid: System.Xml.XmlConvert.EncodeName(System.String)\n  commentId: M:System.Xml.XmlConvert.EncodeName(System.String)\n  id: EncodeName(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: EncodeName(String)\n  fullName: System.Xml.XmlConvert.EncodeName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EncodeName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 75\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the name to a valid XML name.</p>\\n\"\n  syntax:\n    content: public static string EncodeName(string name)\n    content.vb: Public Shared Function EncodeName(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>A name to be translated. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the name with any invalid characters replaced by an escape string.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlConvert.EncodeLocalName(System.String)\n    commentId: M:System.Xml.XmlConvert.EncodeLocalName(System.String)\n  - type: System.Xml.XmlConvert.DecodeName(System.String)\n    commentId: M:System.Xml.XmlConvert.DecodeName(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.EncodeName(String)\n- uid: System.Xml.XmlConvert.EncodeNmToken(System.String)\n  commentId: M:System.Xml.XmlConvert.EncodeNmToken(System.String)\n  id: EncodeNmToken(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: EncodeNmToken(String)\n  fullName: System.Xml.XmlConvert.EncodeNmToken(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EncodeNmToken\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 76\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Verifies the name is valid according to the XML specification.</p>\\n\"\n  syntax:\n    content: public static string EncodeNmToken(string name)\n    content.vb: Public Shared Function EncodeNmToken(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to be encoded. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The encoded name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.EncodeNmToken(String)\n- uid: System.Xml.XmlConvert.ToBoolean(System.String)\n  commentId: M:System.Xml.XmlConvert.ToBoolean(System.String)\n  id: ToBoolean(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(String)\n  fullName: System.Xml.XmlConvert.ToBoolean(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToBoolean\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 77\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(string s)\n    content.vb: Public Shared Function ToBoolean(s As String) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A <strong>Boolean</strong> value, that is, <strong>true</strong> or <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a <strong>Boolean</strong> value. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToBoolean(String)\n- uid: System.Xml.XmlConvert.ToByte(System.String)\n  commentId: M:System.Xml.XmlConvert.ToByte(System.String)\n  id: ToByte(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(String)\n  fullName: System.Xml.XmlConvert.ToByte(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToByte\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 78\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(string s)\n    content.vb: Public Shared Function ToByte(s As String) As Byte\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>A <strong>Byte</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToByte(String)\n- uid: System.Xml.XmlConvert.ToChar(System.String)\n  commentId: M:System.Xml.XmlConvert.ToChar(System.String)\n  id: ToChar(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(String)\n  fullName: System.Xml.XmlConvert.ToChar(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToChar\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 79\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static char ToChar(string s)\n    content.vb: Public Shared Function ToChar(s As String) As Char\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string containing a single character to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A <strong>Char</strong> representing the single character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value of the <em>s</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The <em>s</em> parameter contains more than one character. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToChar(String)\n- uid: System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)\n  commentId: M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)\n  id: ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(String, XmlDateTimeSerializationMode)\n  fullName: System.Xml.XmlConvert.ToDateTime(System.String, System.Xml.XmlDateTimeSerializationMode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDateTime\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 80\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.Xml.XmlDateTimeSerializationMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specified</p>\\n\"\n  syntax:\n    content: public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption)\n    content.vb: Public Shared Function ToDateTime(s As String, dateTimeOption As XmlDateTimeSerializationMode) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to convert.</p>\\n\"\n    - id: dateTimeOption\n      type: System.Xml.XmlDateTimeSerializationMode\n      description: \"\\n<p>One of the <xref href=\\\"System.Xml.XmlDateTimeSerializationMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent of the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>dateTimeOption</em> value is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is an empty string or is not in a valid format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToDateTime(String, XmlDateTimeSerializationMode)\n- uid: System.Xml.XmlConvert.ToDateTimeOffset(System.String)\n  commentId: M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)\n  id: ToDateTimeOffset(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTimeOffset(String)\n  fullName: System.Xml.XmlConvert.ToDateTimeOffset(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDateTimeOffset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 81\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ToDateTimeOffset(string s)\n    content.vb: Public Shared Function ToDateTimeOffset(s As String) As DateTimeOffset\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert.</p>\\n<p>Note   The string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent of the supplied string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The argument passed to this method is outside the range of allowable values. For information about allowable values, see <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information see <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=97914\\\">http://www.w3.org/TR/xmlschema-2/#dateTime</see>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToDateTimeOffset(String)\n- uid: System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)\n  commentId: M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)\n  id: ToDateTimeOffset(System.String,System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTimeOffset(String, String)\n  fullName: System.Xml.XmlConvert.ToDateTimeOffset(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDateTimeOffset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 82\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ToDateTimeOffset(string s, string format)\n    content.vb: Public Shared Function ToDateTimeOffset(s As String, format As String) As DateTimeOffset\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>The format from which <em>s</em> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <em>s</em> is validated against this format.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent of the supplied string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> or <em>format</em> is an empty string or is not in the specified format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToDateTimeOffset(String, String)\n- uid: System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])\n  commentId: M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])\n  id: ToDateTimeOffset(System.String,System.String[])\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTimeOffset(String, String[])\n  fullName: System.Xml.XmlConvert.ToDateTimeOffset(System.String, System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDateTimeOffset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 83\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ToDateTimeOffset(string s, string[] formats)\n    content.vb: Public Shared Function ToDateTimeOffset(s As String, formats As String()) As DateTimeOffset\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert.</p>\\n\"\n    - id: formats\n      type: System.String[]\n      description: \"\\n<p>An array of formats from which <em>s</em> can be converted. Each format in <em>formats</em> can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <em>s</em> is validated against one of these formats.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent of the supplied string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlConvert.ToDateTimeOffset(System.String, System.String())\n  name.vb: ToDateTimeOffset(String, String())\n  nameWithType: XmlConvert.ToDateTimeOffset(String, String[])\n  nameWithType.vb: XmlConvert.ToDateTimeOffset(String, String())\n- uid: System.Xml.XmlConvert.ToDecimal(System.String)\n  commentId: M:System.Xml.XmlConvert.ToDecimal(System.String)\n  id: ToDecimal(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(String)\n  fullName: System.Xml.XmlConvert.ToDecimal(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDecimal\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 84\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(string s)\n    content.vb: Public Shared Function ToDecimal(s As String) As Decimal\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A <strong>Decimal</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToDecimal(String)\n- uid: System.Xml.XmlConvert.ToDouble(System.String)\n  commentId: M:System.Xml.XmlConvert.ToDouble(System.String)\n  id: ToDouble(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(String)\n  fullName: System.Xml.XmlConvert.ToDouble(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDouble\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 85\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(string s)\n    content.vb: Public Shared Function ToDouble(s As String) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A <strong>Double</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double.PositiveInfinity\n    commentId: F:System.Double.PositiveInfinity\n  - type: System.Double.NegativeInfinity\n    commentId: F:System.Double.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToDouble(String)\n- uid: System.Xml.XmlConvert.ToGuid(System.String)\n  commentId: M:System.Xml.XmlConvert.ToGuid(System.String)\n  id: ToGuid(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToGuid(String)\n  fullName: System.Xml.XmlConvert.ToGuid(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToGuid\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 86\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static Guid ToGuid(string s)\n    content.vb: Public Shared Function ToGuid(s As String) As Guid\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>A <strong>Guid</strong> equivalent of the string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToGuid(String)\n- uid: System.Xml.XmlConvert.ToInt16(System.String)\n  commentId: M:System.Xml.XmlConvert.ToInt16(System.String)\n  id: ToInt16(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(String)\n  fullName: System.Xml.XmlConvert.ToInt16(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToInt16\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 87\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(string s)\n    content.vb: Public Shared Function ToInt16(s As String) As Short\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>An <strong>Int16</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToInt16(String)\n- uid: System.Xml.XmlConvert.ToInt32(System.String)\n  commentId: M:System.Xml.XmlConvert.ToInt32(System.String)\n  id: ToInt32(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(String)\n  fullName: System.Xml.XmlConvert.ToInt32(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToInt32\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 88\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(string s)\n    content.vb: Public Shared Function ToInt32(s As String) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <strong>Int32</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToInt32(String)\n- uid: System.Xml.XmlConvert.ToInt64(System.String)\n  commentId: M:System.Xml.XmlConvert.ToInt64(System.String)\n  id: ToInt64(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(String)\n  fullName: System.Xml.XmlConvert.ToInt64(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToInt64\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 89\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(string s)\n    content.vb: Public Shared Function ToInt64(s As String) As Long\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>An <strong>Int64</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToInt64(String)\n- uid: System.Xml.XmlConvert.ToSByte(System.String)\n  commentId: M:System.Xml.XmlConvert.ToSByte(System.String)\n  id: ToSByte(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(String)\n  fullName: System.Xml.XmlConvert.ToSByte(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSByte\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 90\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(string s)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(s As String) As SByte\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An <strong>SByte</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToSByte(String)\n- uid: System.Xml.XmlConvert.ToSingle(System.String)\n  commentId: M:System.Xml.XmlConvert.ToSingle(System.String)\n  id: ToSingle(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(String)\n  fullName: System.Xml.XmlConvert.ToSingle(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSingle\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 92\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(string s)\n    content.vb: Public Shared Function ToSingle(s As String) As Single\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A <strong>Single</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single.PositiveInfinity\n    commentId: F:System.Single.PositiveInfinity\n  - type: System.Single.NegativeInfinity\n    commentId: F:System.Single.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToSingle(String)\n- uid: System.Xml.XmlConvert.ToString(System.Boolean)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Boolean)\n  id: ToString(System.Boolean)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Boolean)\n  fullName: System.Xml.XmlConvert.ToString(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 93\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(bool value)\n    content.vb: Public Shared Function ToString(value As Boolean) As String\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Boolean</strong>, that is, \\\"true\\\" or \\\"false\\\".</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Boolean)\n- uid: System.Xml.XmlConvert.ToString(System.Byte)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Byte)\n  id: ToString(System.Byte)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte)\n  fullName: System.Xml.XmlConvert.ToString(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 94\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(byte value)\n    content.vb: Public Shared Function ToString(value As Byte) As String\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Byte</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Byte)\n- uid: System.Xml.XmlConvert.ToString(System.Char)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Char)\n  id: ToString(System.Char)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Char)\n  fullName: System.Xml.XmlConvert.ToString(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 95\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(char value)\n    content.vb: Public Shared Function ToString(value As Char) As String\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Char</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Char)\n- uid: System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)\n  commentId: M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)\n  id: ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(DateTime, XmlDateTimeSerializationMode)\n  fullName: System.Xml.XmlConvert.ToString(System.DateTime, System.Xml.XmlDateTimeSerializationMode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 96\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.Xml.XmlDateTimeSerializationMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specified.</p>\\n\"\n  syntax:\n    content: public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption)\n    content.vb: Public Shared Function ToString(value As Date, dateTimeOption As XmlDateTimeSerializationMode) As String\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to convert.</p>\\n\"\n    - id: dateTimeOption\n      type: System.Xml.XmlDateTimeSerializationMode\n      description: \"\\n<p>One of the <xref href=\\\"System.Xml.XmlDateTimeSerializationMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that specify how to treat the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>dateTimeOption</em> value is not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>value</em> or <em>dateTimeOption</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(DateTime, XmlDateTimeSerializationMode)\n- uid: System.Xml.XmlConvert.ToString(System.DateTimeOffset)\n  commentId: M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)\n  id: ToString(System.DateTimeOffset)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(DateTimeOffset)\n  fullName: System.Xml.XmlConvert.ToString(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 97\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(DateTimeOffset value)\n    content.vb: Public Shared Function ToString(value As DateTimeOffset) As String\n    parameters:\n    - id: value\n      type: System.DateTimeOffset\n      description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of the supplied <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(DateTimeOffset)\n- uid: System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)\n  commentId: M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)\n  id: ToString(System.DateTimeOffset,System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(DateTimeOffset, String)\n  fullName: System.Xml.XmlConvert.ToString(System.DateTimeOffset, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 98\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the specified format.</p>\\n\"\n  syntax:\n    content: public static string ToString(DateTimeOffset value, string format)\n    content.vb: Public Shared Function ToString(value As DateTimeOffset, format As String) As String\n    parameters:\n    - id: value\n      type: System.DateTimeOffset\n      description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>The format to which <em>s</em> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation in the specified format of the supplied <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(DateTimeOffset, String)\n- uid: System.Xml.XmlConvert.ToString(System.Decimal)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Decimal)\n  id: ToString(System.Decimal)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Decimal)\n  fullName: System.Xml.XmlConvert.ToString(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 99\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(decimal value)\n    content.vb: Public Shared Function ToString(value As Decimal) As String\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Decimal</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Decimal)\n- uid: System.Xml.XmlConvert.ToString(System.Double)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Double)\n  id: ToString(System.Double)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Double)\n  fullName: System.Xml.XmlConvert.ToString(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 100\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(double value)\n    content.vb: Public Shared Function ToString(value As Double) As String\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Double</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double.PositiveInfinity\n    commentId: F:System.Double.PositiveInfinity\n  - type: System.Double.NegativeInfinity\n    commentId: F:System.Double.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Double)\n- uid: System.Xml.XmlConvert.ToString(System.Guid)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Guid)\n  id: ToString(System.Guid)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Guid)\n  fullName: System.Xml.XmlConvert.ToString(System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 101\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(Guid value)\n    content.vb: Public Shared Function ToString(value As Guid) As String\n    parameters:\n    - id: value\n      type: System.Guid\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Guid</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Guid)\n- uid: System.Xml.XmlConvert.ToString(System.Int16)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Int16)\n  id: ToString(System.Int16)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int16)\n  fullName: System.Xml.XmlConvert.ToString(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 102\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(short value)\n    content.vb: Public Shared Function ToString(value As Short) As String\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Int16</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Int16)\n- uid: System.Xml.XmlConvert.ToString(System.Int32)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Int32)\n  id: ToString(System.Int32)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int32)\n  fullName: System.Xml.XmlConvert.ToString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 103\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(int value)\n    content.vb: Public Shared Function ToString(value As Integer) As String\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Int32</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Int32)\n- uid: System.Xml.XmlConvert.ToString(System.Int64)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Int64)\n  id: ToString(System.Int64)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int64)\n  fullName: System.Xml.XmlConvert.ToString(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 104\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(long value)\n    content.vb: Public Shared Function ToString(value As Long) As String\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Int64</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Int64)\n- uid: System.Xml.XmlConvert.ToString(System.SByte)\n  commentId: M:System.Xml.XmlConvert.ToString(System.SByte)\n  id: ToString(System.SByte)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(SByte)\n  fullName: System.Xml.XmlConvert.ToString(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 105\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As SByte) As String\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>SByte</strong>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(SByte)\n- uid: System.Xml.XmlConvert.ToString(System.Single)\n  commentId: M:System.Xml.XmlConvert.ToString(System.Single)\n  id: ToString(System.Single)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Single)\n  fullName: System.Xml.XmlConvert.ToString(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 107\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(float value)\n    content.vb: Public Shared Function ToString(value As Single) As String\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>Single</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.PositiveInfinity\n    commentId: F:System.Single.PositiveInfinity\n  - type: System.Single.NegativeInfinity\n    commentId: F:System.Single.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(Single)\n- uid: System.Xml.XmlConvert.ToString(System.TimeSpan)\n  commentId: M:System.Xml.XmlConvert.ToString(System.TimeSpan)\n  id: ToString(System.TimeSpan)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(TimeSpan)\n  fullName: System.Xml.XmlConvert.ToString(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 108\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(TimeSpan value)\n    content.vb: Public Shared Function ToString(value As TimeSpan) As String\n    parameters:\n    - id: value\n      type: System.TimeSpan\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>TimeSpan</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(TimeSpan)\n- uid: System.Xml.XmlConvert.ToString(System.UInt16)\n  commentId: M:System.Xml.XmlConvert.ToString(System.UInt16)\n  id: ToString(System.UInt16)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt16)\n  fullName: System.Xml.XmlConvert.ToString(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 109\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As UShort) As String\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>UInt16</strong>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(UInt16)\n- uid: System.Xml.XmlConvert.ToString(System.UInt32)\n  commentId: M:System.Xml.XmlConvert.ToString(System.UInt32)\n  id: ToString(System.UInt32)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt32)\n  fullName: System.Xml.XmlConvert.ToString(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 111\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As UInteger) As String\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>UInt32</strong>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(UInt32)\n- uid: System.Xml.XmlConvert.ToString(System.UInt64)\n  commentId: M:System.Xml.XmlConvert.ToString(System.UInt64)\n  id: ToString(System.UInt64)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt64)\n  fullName: System.Xml.XmlConvert.ToString(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 113\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As ULong) As String\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <strong>UInt64</strong>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToString(UInt64)\n- uid: System.Xml.XmlConvert.ToTimeSpan(System.String)\n  commentId: M:System.Xml.XmlConvert.ToTimeSpan(System.String)\n  id: ToTimeSpan(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToTimeSpan(String)\n  fullName: System.Xml.XmlConvert.ToTimeSpan(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToTimeSpan\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 115\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static TimeSpan ToTimeSpan(string s)\n    content.vb: Public Shared Function ToTimeSpan(s As String) As TimeSpan\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.</p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>A <strong>TimeSpan</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in correct format to represent a <strong>TimeSpan</strong> value. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToTimeSpan(String)\n- uid: System.Xml.XmlConvert.ToUInt16(System.String)\n  commentId: M:System.Xml.XmlConvert.ToUInt16(System.String)\n  id: ToUInt16(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(String)\n  fullName: System.Xml.XmlConvert.ToUInt16(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToUInt16\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 116\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(string s)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(s As String) As UShort\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A <strong>UInt16</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToUInt16(String)\n- uid: System.Xml.XmlConvert.ToUInt32(System.String)\n  commentId: M:System.Xml.XmlConvert.ToUInt32(System.String)\n  id: ToUInt32(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(String)\n  fullName: System.Xml.XmlConvert.ToUInt32(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToUInt32\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 118\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(string s)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(s As String) As UInteger\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A <strong>UInt32</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToUInt32(String)\n- uid: System.Xml.XmlConvert.ToUInt64(System.String)\n  commentId: M:System.Xml.XmlConvert.ToUInt64(System.String)\n  id: ToUInt64(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(String)\n  fullName: System.Xml.XmlConvert.ToUInt64(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToUInt64\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 120\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(string s)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(s As String) As ULong\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A <strong>UInt64</strong> equivalent of the string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.ToUInt64(String)\n- uid: System.Xml.XmlConvert.VerifyName(System.String)\n  commentId: M:System.Xml.XmlConvert.VerifyName(System.String)\n  id: VerifyName(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: VerifyName(String)\n  fullName: System.Xml.XmlConvert.VerifyName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 122\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.</p>\\n\"\n  syntax:\n    content: public static string VerifyName(string name)\n    content.vb: Public Shared Function VerifyName(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to verify. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name, if it is a valid XML name.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>\\n<em>name</em> is not a valid XML name. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong> or String.Empty. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlConvert.VerifyNCName(System.String)\n    commentId: M:System.Xml.XmlConvert.VerifyNCName(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.VerifyName(String)\n- uid: System.Xml.XmlConvert.VerifyNCName(System.String)\n  commentId: M:System.Xml.XmlConvert.VerifyNCName(System.String)\n  id: VerifyNCName(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: VerifyNCName(String)\n  fullName: System.Xml.XmlConvert.VerifyNCName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyNCName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 123\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Verifies that the name is a valid <strong>NCName</strong> according to the W3C Extended Markup Language recommendation. An <strong>NCName</strong> is a name that cannot contain a colon.</p>\\n\"\n  syntax:\n    content: public static string VerifyNCName(string name)\n    content.vb: Public Shared Function VerifyNCName(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to verify. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name, if it is a valid NCName.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong> or <code>String.Empty</code>. </p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>\\n<em>name</em> is not a valid non-colon name. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.VerifyNCName(String)\n- uid: System.Xml.XmlConvert.VerifyNMTOKEN(System.String)\n  commentId: M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)\n  id: VerifyNMTOKEN(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: VerifyNMTOKEN(String)\n  fullName: System.Xml.XmlConvert.VerifyNMTOKEN(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyNMTOKEN\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 124\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation</p>\\n\"\n  syntax:\n    content: public static string VerifyNMTOKEN(string name)\n    content.vb: Public Shared Function VerifyNMTOKEN(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The string you wish to verify.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name token, if it is a valid NMTOKEN.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The string is not a valid name token.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.VerifyNMTOKEN(String)\n- uid: System.Xml.XmlConvert.VerifyPublicId(System.String)\n  commentId: M:System.Xml.XmlConvert.VerifyPublicId(System.String)\n  id: VerifyPublicId(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: VerifyPublicId(String)\n  fullName: System.Xml.XmlConvert.VerifyPublicId(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyPublicId\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 125\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the passed in string instance if all the characters in the string argument are valid public id characters.</p>\\n\"\n  syntax:\n    content: public static string VerifyPublicId(string publicId)\n    content.vb: Public Shared Function VerifyPublicId(publicId As String) As String\n    parameters:\n    - id: publicId\n      type: System.String\n      description: \"\\n<p>\\n<xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the id to validate.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the passed-in string if all the characters in the argument are valid public id characters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.VerifyPublicId(String)\n- uid: System.Xml.XmlConvert.VerifyWhitespace(System.String)\n  commentId: M:System.Xml.XmlConvert.VerifyWhitespace(System.String)\n  id: VerifyWhitespace(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: VerifyWhitespace(String)\n  fullName: System.Xml.XmlConvert.VerifyWhitespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyWhitespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 126\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters. </p>\\n\"\n  syntax:\n    content: public static string VerifyWhitespace(string content)\n    content.vb: Public Shared Function VerifyWhitespace(content As String) As String\n    parameters:\n    - id: content\n      type: System.String\n      description: \"\\n<p>\\n<xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to verify.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.VerifyWhitespace(String)\n- uid: System.Xml.XmlConvert.VerifyXmlChars(System.String)\n  commentId: M:System.Xml.XmlConvert.VerifyXmlChars(System.String)\n  id: VerifyXmlChars(System.String)\n  parent: System.Xml.XmlConvert\n  langs:\n  - csharp\n  - vb\n  name: VerifyXmlChars(String)\n  fullName: System.Xml.XmlConvert.VerifyXmlChars(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyXmlChars\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 127\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise an <strong>XmlException</strong> is thrown with information on the first invalid character encountered. </p>\\n\"\n  syntax:\n    content: public static string VerifyXmlChars(string content)\n    content.vb: Public Shared Function VerifyXmlChars(content As String) As String\n    parameters:\n    - id: content\n      type: System.String\n      description: \"\\n<p>\\n<xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains characters to verify.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise an <strong>XmlException</strong> is thrown with information on the first invalid character encountered.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlConvert.VerifyXmlChars(String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  commentId: T:System.Char\n  nameWithType: Char\n- uid: System.Xml.XmlDateTimeSerializationMode\n  parent: System.Xml\n  isExternal: false\n  name: XmlDateTimeSerializationMode\n  fullName: System.Xml.XmlDateTimeSerializationMode\n  commentId: T:System.Xml.XmlDateTimeSerializationMode\n  nameWithType: XmlDateTimeSerializationMode\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  commentId: T:System.DateTime\n  nameWithType: DateTime\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: false\n  name: DateTimeOffset\n  fullName: System.DateTimeOffset\n  commentId: T:System.DateTimeOffset\n  nameWithType: DateTimeOffset\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  commentId: T:System.Int16\n  nameWithType: Int16\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  commentId: T:System.SByte\n  nameWithType: SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  commentId: T:System.UInt16\n  nameWithType: UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  commentId: T:System.UInt32\n  nameWithType: UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  commentId: T:System.UInt64\n  nameWithType: UInt64\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n"}