{"nodes":[{"pos":[4437,4450],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[14266,14285],"content":"Task(Func<TResult>)","needQuote":true,"nodes":[{"content":"Task(Func&lt;TResult&gt;)","pos":[0,19],"source":"Task(Func<TResult>)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[15593,15643],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[16270,16308],"content":"Task(Func<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"Task(Func&lt;TResult&gt;, CancellationToken)","pos":[0,38],"source":"Task(Func<TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[18255,18305],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[19154,19213],"content":"Task(Func<TResult>, CancellationToken, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Func&lt;TResult&gt;, CancellationToken, TaskCreationOptions)","pos":[0,59],"source":"Task(Func<TResult>, CancellationToken, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[21871,21921],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[22772,22812],"content":"Task(Func<TResult>, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Func&lt;TResult&gt;, TaskCreationOptions)","pos":[0,40],"source":"Task(Func<TResult>, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[24821,24871],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[25584,25619],"content":"Task(Func<Object, TResult>, Object)","needQuote":true,"nodes":[{"content":"Task(Func&lt;Object, TResult&gt;, Object)","pos":[0,35],"source":"Task(Func<Object, TResult>, Object)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the action.&lt;/p&gt;\\n","pos":[26973,27037],"source":"\\n<p>An object representing data to be used by the action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[27156,27206],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[27995,28049],"content":"Task(Func<Object, TResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"Task(Func&lt;Object, TResult&gt;, Object, CancellationToken)","pos":[0,54],"source":"Task(Func<Object, TResult>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the function.&lt;/p&gt;\\n","pos":[29524,29590],"source":"\\n<p>An object representing data to be used by the function.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[30238,30288],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[31299,31374],"content":"Task(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Func&lt;Object, TResult&gt;, Object, CancellationToken, TaskCreationOptions)","pos":[0,75],"source":"Task(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the function.&lt;/p&gt;\\n","pos":[32970,33036],"source":"\\n<p>An object representing data to be used by the function.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[34243,34293],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[35306,35362],"content":"Task(Func<Object, TResult>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Func&lt;Object, TResult&gt;, Object, TaskCreationOptions)","pos":[0,56],"source":"Task(Func<Object, TResult>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the function.&lt;/p&gt;\\n","pos":[36845,36911],"source":"\\n<p>An object representing data to be used by the function.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[37589,37639],"source":"\\n<p>The <em>function</em> argument is null.</p>\\n"},{"pos":[38299,38306],"content":"Factory","needQuote":true,"nodes":[{"content":"Factory","pos":[0,7]}]},{"pos":[39751,39757],"content":"Result","needQuote":true,"nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[41921,41944],"content":"ConfigureAwait(Boolean)","needQuote":true,"nodes":[{"content":"ConfigureAwait(Boolean)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;true to attempt to marshal the continuation back to the original context captured; otherwise, false.&lt;/p&gt;\\n","pos":[42863,42974],"source":"\\n<p>true to attempt to marshal the continuation back to the original context captured; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;An object used to await this task.&lt;/p&gt;\\n","pos":[43087,43132],"source":"\\n<p>An object used to await this task.</p>\\n"},{"pos":[43822,43873],"content":"ContinueWith(Action<Task<TResult>, Object>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;, Object&gt;, Object)","pos":[0,51],"source":"ContinueWith(Action<Task<TResult>, Object>, Object)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.","pos":[45389,45460],"source":"\\n<p>An object representing data to be used by the continuation action."},{"content":"&lt;/p&gt;\\n","pos":[45461,45467],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[45778,45838],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"pos":[46835,46905],"content":"ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;, Object&gt;, Object, CancellationToken)","pos":[0,70],"source":"ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[48494,48571],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[49140,49200],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"pos":[50796,50906],"content":"ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;, Object&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,110],"source":"ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[52728,52805],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[54158,54218],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[54631,54682],"source":"\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[56268,56344],"content":"ContinueWith(Action<Task<TResult>, Object>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;, Object&gt;, Object, TaskContinuationOptions)","pos":[0,76],"source":"ContinueWith(Action<Task<TResult>, Object>, Object, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[57962,58039],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[58861,58921],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"pos":[60355,60421],"content":"ContinueWith(Action<Task<TResult>, Object>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;, Object&gt;, Object, TaskScheduler)","pos":[0,66],"source":"ContinueWith(Action<Task<TResult>, Object>, Object, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[61987,62064],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[62647,62718],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[62719,62725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[62830,62892],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[62893,62899],"source":" </p>\\n"},{"pos":[63790,63825],"content":"ContinueWith(Action<Task<TResult>>)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;)","pos":[0,35],"source":"ContinueWith(Action<Task<TResult>>)"}]},{"content":"\\n&lt;p&gt;A new continuation task.","pos":[65126,65155],"source":"\\n<p>A new continuation task."},{"content":"&lt;/p&gt;\\n","pos":[65156,65162],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[65514,65585],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[65586,65592],"source":" </p>\\n"},{"pos":[66427,66481],"content":"ContinueWith(Action<Task<TResult>>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;, CancellationToken)","pos":[0,54],"source":"ContinueWith(Action<Task<TResult>>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The cancellation token that is passed to the new continuation task.","pos":[67998,68070],"source":"\\n<p>The cancellation token that is passed to the new continuation task."},{"content":"&lt;/p&gt;\\n","pos":[68071,68077],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new continuation task.","pos":[68151,68180],"source":"\\n<p>A new continuation task."},{"content":"&lt;/p&gt;\\n","pos":[68181,68187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[68724,68795],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[68796,68802],"source":" </p>\\n"},{"pos":[69982,70076],"content":"ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,94],"source":"ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An action to run according the condition specified in &lt;em&gt;continuationOptions&lt;/em&gt;.","pos":[71446,71534],"source":"\\n<p>An action to run according the condition specified in <em>continuationOptions</em>."},{"content":"When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[71535,71613],"source":" When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[73389,73511],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[74989,75049],"content":"ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;, TaskContinuationOptions)","pos":[0,60],"source":"ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;An action to according the condition specified in &lt;em&gt;continuationOptions&lt;/em&gt;.","pos":[76215,76299],"source":"\\n<p>An action to according the condition specified in <em>continuationOptions</em>."},{"content":"When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[76300,76378],"source":" When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[77431,77491],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"pos":[78763,78813],"content":"ContinueWith(Action<Task<TResult>>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;, TaskScheduler)","pos":[0,50],"source":"ContinueWith(Action<Task<TResult>>, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[81019,81141],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[81969,82026],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, TNewResult&gt;)","pos":[0,57],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>)"}]},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[83504,83577],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[84136,84198],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[85145,85221],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, TNewResult&gt;, CancellationToken)","pos":[0,76],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[87057,87130],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[87882,87944],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[89236,89352],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, TNewResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,116],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;A function to run according the condition specified in &lt;em&gt;continuationOptions&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;When run, the delegate will be passed as an argument this completed task.&lt;/p&gt;\\n","pos":[90836,91013],"source":"\\n<p>A function to run according the condition specified in <em>continuationOptions</em>.</p>\\n<p>When run, the delegate will be passed as an argument this completed task.</p>\\n"},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[92103,92176],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[92928,93052],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[94642,94724],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, TNewResult&gt;, TaskContinuationOptions)","pos":[0,82],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;A function to run according the condition specified in &lt;em&gt;continuationOptions&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[96004,96180],"source":"\\n<p>A function to run according the condition specified in <em>continuationOptions</em>.</p>\\n<p>When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[96753,96826],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[97385,97447],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[98831,98903],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, TNewResult&gt;, TaskScheduler)","pos":[0,72],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskScheduler)"}]},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[100744,100817],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[101376,101500],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[102509,102582],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, Object, TNewResult&gt;, Object)","pos":[0,73],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[104172,104251],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[104314,104377],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[104704,104766],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[105875,105967],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, Object, TNewResult&gt;, Object, CancellationToken)","pos":[0,92],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[107670,107749],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[108057,108120],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[108447,108509],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[110217,110349],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, Object, TNewResult&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,132],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[112285,112364],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[113454,113517],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[113844,113906],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[114321,114372],"source":"\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[116070,116168],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, Object, TNewResult&gt;, Object, TaskContinuationOptions)","pos":[0,98],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[117900,117979],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[118552,118615],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[118942,119004],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[120550,120638],"content":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;, Object, TNewResult&gt;, Object, TaskScheduler)","pos":[0,88],"source":"ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[122319,122398],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[122733,122796],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[123123,123185],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[123290,123341],"source":"\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[124179,124191],"content":"GetAwaiter()","needQuote":true,"nodes":[{"content":"GetAwaiter()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An awaiter instance.&lt;/p&gt;\\n","pos":[124982,125013],"source":"\\n<p>An awaiter instance.</p>\\n"},{"pos":[125303,125325],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[125504,125510],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125685,125689],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[125866,125878],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[126087,126097],"content":"AsyncState","needQuote":true,"nodes":[{"content":"AsyncState","pos":[0,10]}]},{"pos":[126350,126363],"content":"CompletedTask","needQuote":true,"nodes":[{"content":"CompletedTask","pos":[0,13]}]},{"pos":[126627,126642],"content":"CreationOptions","needQuote":true,"nodes":[{"content":"CreationOptions","pos":[0,15]}]},{"pos":[126906,126915],"content":"CurrentId","needQuote":true,"nodes":[{"content":"CurrentId","pos":[0,9]}]},{"pos":[127161,127170],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[127409,127411],"content":"Id","needQuote":true,"nodes":[{"content":"Id","pos":[0,2]}]},{"pos":[127637,127647],"content":"IsCanceled","needQuote":true,"nodes":[{"content":"IsCanceled","pos":[0,10]}]},{"pos":[127898,127909],"content":"IsCompleted","needQuote":true,"nodes":[{"content":"IsCompleted","pos":[0,11]}]},{"pos":[128161,128170],"content":"IsFaulted","needQuote":true,"nodes":[{"content":"IsFaulted","pos":[0,9]}]},{"pos":[128413,128419],"content":"Status","needQuote":true,"nodes":[{"content":"Status","pos":[0,6]}]},{"pos":[128682,128710],"content":"IAsyncResult.AsyncWaitHandle","needQuote":true,"nodes":[{"content":"IAsyncResult.AsyncWaitHandle","pos":[0,28]}]},{"pos":[129167,129202],"content":"IAsyncResult.CompletedSynchronously","needQuote":true,"nodes":[{"content":"IAsyncResult.CompletedSynchronously","pos":[0,35]}]},{"pos":[129735,129777],"content":"ContinueWith(Action<Task, Object>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object)","pos":[0,42],"source":"ContinueWith(Action<Task, Object>, Object)"}]},{"pos":[130242,130254],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[130320,130321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130373,130379],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[130439,130440],"content":"<","needQuote":true,"nodes":[]},{"pos":[130504,130508],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[130562,130563]},{"pos":[130618,130624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[130717,130718]},{"pos":[130773,130779],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[130839,130840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131000,131012],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[131078,131079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131131,131137],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[131198,131201]},{"pos":[131272,131276],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[131330,131331]},{"pos":[131386,131392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[131452,131453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[131481,131482]},{"pos":[131537,131543],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[131603,131604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132103,132164],"content":"ContinueWith(Action<Task, Object>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, CancellationToken)","pos":[0,61],"source":"ContinueWith(Action<Task, Object>, Object, CancellationToken)"}]},{"pos":[132755,132767],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[132833,132834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132886,132892],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[132952,132953],"content":"<","needQuote":true,"nodes":[]},{"pos":[133017,133021],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[133075,133076]},{"pos":[133131,133137],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[133230,133231]},{"pos":[133286,133292],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[133353,133354]},{"pos":[133430,133447],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[133507,133508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133703,133715],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[133781,133782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133834,133840],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[133901,133904]},{"pos":[133975,133979],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[134033,134034]},{"pos":[134089,134095],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[134155,134156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[134184,134185]},{"pos":[134240,134246],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[134307,134308]},{"pos":[134384,134401],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[134461,134462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135118,135219],"content":"ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,101],"source":"ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"pos":[136106,136118],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[136184,136185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136237,136243],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[136303,136304],"content":"<","needQuote":true,"nodes":[]},{"pos":[136368,136372],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[136426,136427]},{"pos":[136482,136488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[136581,136582]},{"pos":[136637,136643],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[136704,136705]},{"pos":[136781,136798],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[136859,136860]},{"pos":[136948,136971],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[137044,137045]},{"pos":[137123,137136],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[137198,137199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137478,137490],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[137556,137557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137609,137615],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[137676,137679]},{"pos":[137750,137754],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[137808,137809]},{"pos":[137864,137870],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[137930,137931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[137959,137960]},{"pos":[138015,138021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[138082,138083]},{"pos":[138159,138176],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[138237,138238]},{"pos":[138326,138349],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[138422,138423]},{"pos":[138501,138514],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[138576,138577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139325,139392],"content":"ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, TaskContinuationOptions)","pos":[0,67],"source":"ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)"}]},{"pos":[140025,140037],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[140103,140104],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140156,140162],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[140222,140223],"content":"<","needQuote":true,"nodes":[]},{"pos":[140287,140291],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[140345,140346]},{"pos":[140401,140407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[140500,140501]},{"pos":[140556,140562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[140623,140624]},{"pos":[140712,140735],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[140807,140808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141015,141027],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[141093,141094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141146,141152],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[141213,141216]},{"pos":[141287,141291],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[141345,141346]},{"pos":[141401,141407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[141467,141468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[141496,141497]},{"pos":[141552,141558],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[141619,141620]},{"pos":[141708,141731],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[141803,141804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142402,142459],"content":"ContinueWith(Action<Task, Object>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, TaskScheduler)","pos":[0,57],"source":"ContinueWith(Action<Task, Object>, Object, TaskScheduler)"}]},{"pos":[143052,143064],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[143130,143131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143183,143189],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[143249,143250],"content":"<","needQuote":true,"nodes":[]},{"pos":[143314,143318],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[143372,143373]},{"pos":[143428,143434],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[143527,143528]},{"pos":[143583,143589],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[143650,143651]},{"pos":[143729,143742],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[143804,143805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144002,144014],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[144080,144081],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144133,144139],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[144200,144203]},{"pos":[144274,144278],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[144332,144333]},{"pos":[144388,144394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[144454,144455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[144483,144484]},{"pos":[144539,144545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[144606,144607]},{"pos":[144685,144698],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[144760,144761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145264,145290],"content":"ContinueWith(Action<Task>)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;)","pos":[0,26],"source":"ContinueWith(Action<Task>)"}]},{"pos":[145651,145663],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[145729,145730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145782,145788],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[145848,145849],"content":"<","needQuote":true,"nodes":[]},{"pos":[145913,145917],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[146002,146003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146135,146147],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[146213,146214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146266,146272],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[146333,146336]},{"pos":[146407,146411],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[146464,146465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146492,146493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146904,146949],"content":"ContinueWith(Action<Task>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, CancellationToken)","pos":[0,45],"source":"ContinueWith(Action<Task>, CancellationToken)"}]},{"pos":[147436,147448],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[147514,147515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147567,147573],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[147633,147634],"content":"<","needQuote":true,"nodes":[]},{"pos":[147698,147702],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[147788,147789]},{"pos":[147865,147882],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[147942,147943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[148110,148122],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[148188,148189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148241,148247],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[148308,148311]},{"pos":[148382,148386],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[148439,148440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[148468,148469]},{"pos":[148545,148562],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[148622,148623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149191,149276],"content":"ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,85],"source":"ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"pos":[150059,150071],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[150137,150138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150190,150196],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[150256,150257],"content":"<","needQuote":true,"nodes":[]},{"pos":[150321,150325],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[150411,150412]},{"pos":[150488,150505],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[150566,150567]},{"pos":[150655,150678],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[150751,150752]},{"pos":[150830,150843],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[150905,150906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151157,151169],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[151235,151236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151288,151294],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[151355,151358]},{"pos":[151429,151433],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[151486,151487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[151515,151516]},{"pos":[151592,151609],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[151670,151671]},{"pos":[151759,151782],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[151855,151856]},{"pos":[151934,151947],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[152009,152010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[152670,152721],"content":"ContinueWith(Action<Task>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, TaskContinuationOptions)","pos":[0,51],"source":"ContinueWith(Action<Task>, TaskContinuationOptions)"}]},{"pos":[153250,153262],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[153328,153329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[153381,153387],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[153447,153448],"content":"<","needQuote":true,"nodes":[]},{"pos":[153512,153516],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[153602,153603]},{"pos":[153691,153714],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[153786,153787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[153966,153978],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[154044,154045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[154097,154103],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[154164,154167]},{"pos":[154238,154242],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[154295,154296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[154324,154325]},{"pos":[154413,154436],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[154508,154509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155019,155060],"content":"ContinueWith(Action<Task>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, TaskScheduler)","pos":[0,41],"source":"ContinueWith(Action<Task>, TaskScheduler)"}]},{"pos":[155549,155561],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[155627,155628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155680,155686],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[155746,155747],"content":"<","needQuote":true,"nodes":[]},{"pos":[155811,155815],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[155901,155902]},{"pos":[155980,155993],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[156055,156056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156225,156237],"content":"ContinueWith","needQuote":true,"nodes":[{"content":"ContinueWith","pos":[0,12]}]},{"pos":[156303,156304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[156356,156362],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[156423,156426]},{"pos":[156497,156501],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[156554,156555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[156583,156584]},{"pos":[156662,156675],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[156737,156738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[157277,157319],"content":"ContinueWith<TResult>(Func<Task, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;)","pos":[0,42],"source":"ContinueWith<TResult>(Func<Task, TResult>)"}]},{"pos":[157739,157760],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[157835,157836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[157886,157890],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[157948,157949],"content":"<","needQuote":true,"nodes":[]},{"pos":[158013,158017],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[158071,158072]},{"pos":[158104,158111],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[158176,158177],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158314,158338],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[158416,158417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[158467,158471],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[158530,158533]},{"pos":[158604,158608],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[158662,158663]},{"pos":[158695,158702],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[158735,158736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158763,158764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[159346,159407],"content":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, CancellationToken)","pos":[0,61],"source":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)"}]},{"pos":[159953,159974],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[160049,160050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[160100,160104],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[160162,160163],"content":"<","needQuote":true,"nodes":[]},{"pos":[160227,160231],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[160285,160286]},{"pos":[160318,160325],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[160391,160392]},{"pos":[160468,160485],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[160545,160546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[160718,160742],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[160820,160821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[160871,160875],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[160934,160937]},{"pos":[161008,161012],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[161066,161067]},{"pos":[161099,161106],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[161139,161140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[161168,161169]},{"pos":[161245,161262],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[161322,161323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[162146,162247],"content":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,101],"source":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"pos":[163089,163110],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[163185,163186],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[163236,163240],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[163298,163299],"content":"<","needQuote":true,"nodes":[]},{"pos":[163363,163367],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[163421,163422]},{"pos":[163454,163461],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[163527,163528]},{"pos":[163604,163621],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[163682,163683]},{"pos":[163771,163794],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[163867,163868]},{"pos":[163946,163959],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[164021,164022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[164278,164302],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[164380,164381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[164431,164435],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[164494,164497]},{"pos":[164568,164572],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[164626,164627]},{"pos":[164659,164666],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[164699,164700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[164728,164729]},{"pos":[164805,164822],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[164883,164884]},{"pos":[164972,164995],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[165068,165069]},{"pos":[165147,165160],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[165222,165223],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[166066,166133],"content":"ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, TaskContinuationOptions)","pos":[0,67],"source":"ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)"}]},{"pos":[166721,166742],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[166817,166818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[166868,166872],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[166930,166931],"content":"<","needQuote":true,"nodes":[]},{"pos":[166995,166999],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[167053,167054]},{"pos":[167086,167093],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[167159,167160]},{"pos":[167248,167271],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[167343,167344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[167528,167552],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[167630,167631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[167681,167685],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[167744,167747]},{"pos":[167818,167822],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[167876,167877]},{"pos":[167909,167916],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[167949,167950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[167978,167979]},{"pos":[168067,168090],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[168162,168163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[168846,168903],"content":"ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, TaskScheduler)","pos":[0,57],"source":"ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)"}]},{"pos":[169451,169472],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[169547,169548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[169598,169602],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[169660,169661],"content":"<","needQuote":true,"nodes":[]},{"pos":[169725,169729],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[169783,169784]},{"pos":[169816,169823],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[169889,169890]},{"pos":[169968,169981],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[170043,170044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170218,170242],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[170320,170321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[170371,170375],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[170434,170437]},{"pos":[170508,170512],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[170566,170567]},{"pos":[170599,170606],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[170639,170640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[170668,170669]},{"pos":[170747,170760],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[170822,170823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[171458,171516],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object)","pos":[0,58],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object)"}]},{"pos":[172040,172061],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[172136,172137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172187,172191],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[172249,172250],"content":"<","needQuote":true,"nodes":[]},{"pos":[172314,172318],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[172372,172373]},{"pos":[172428,172434],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[172495,172496]},{"pos":[172528,172535],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[172601,172602]},{"pos":[172657,172663],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[172723,172724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172889,172913],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[172991,172992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[173042,173046],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[173105,173108]},{"pos":[173179,173183],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[173237,173238]},{"pos":[173293,173299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[173360,173361]},{"pos":[173393,173400],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[173433,173434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[173462,173463]},{"pos":[173518,173524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[173584,173585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[174283,174360],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, CancellationToken)","pos":[0,77],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)"}]},{"pos":[175010,175031],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[175106,175107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[175157,175161],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[175219,175220],"content":"<","needQuote":true,"nodes":[]},{"pos":[175284,175288],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[175342,175343]},{"pos":[175398,175404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[175465,175466]},{"pos":[175498,175505],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[175571,175572]},{"pos":[175627,175633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[175694,175695]},{"pos":[175771,175788],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[175848,175849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[176049,176073],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[176151,176152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[176202,176206],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[176265,176268]},{"pos":[176339,176343],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[176397,176398]},{"pos":[176453,176459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[176520,176521]},{"pos":[176553,176560],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[176593,176594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[176622,176623]},{"pos":[176678,176684],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[176745,176746]},{"pos":[176822,176839],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[176899,176900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[177839,177956],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,117],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"pos":[178902,178923],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[178998,178999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[179049,179053],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[179111,179112],"content":"<","needQuote":true,"nodes":[]},{"pos":[179176,179180],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[179234,179235]},{"pos":[179290,179296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[179357,179358]},{"pos":[179390,179397],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[179463,179464]},{"pos":[179519,179525],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[179586,179587]},{"pos":[179663,179680],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[179741,179742]},{"pos":[179830,179853],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[179926,179927]},{"pos":[180005,180018],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[180080,180081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[180365,180389],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[180467,180468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[180518,180522],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[180581,180584]},{"pos":[180655,180659],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[180713,180714]},{"pos":[180769,180775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[180836,180837]},{"pos":[180869,180876],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[180909,180910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[180938,180939]},{"pos":[180994,181000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[181061,181062]},{"pos":[181138,181155],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[181216,181217]},{"pos":[181305,181328],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[181401,181402]},{"pos":[181480,181493],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[181555,181556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182515,182598],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, TaskContinuationOptions)","pos":[0,83],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)"}]},{"pos":[183290,183311],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[183386,183387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[183437,183441],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[183499,183500],"content":"<","needQuote":true,"nodes":[]},{"pos":[183564,183568],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[183622,183623]},{"pos":[183678,183684],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[183745,183746]},{"pos":[183778,183785],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[183851,183852]},{"pos":[183907,183913],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[183974,183975]},{"pos":[184063,184086],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[184158,184159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[184371,184395],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[184473,184474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[184524,184528],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[184587,184590]},{"pos":[184661,184665],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[184719,184720]},{"pos":[184775,184781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[184842,184843]},{"pos":[184875,184882],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[184915,184916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[184944,184945]},{"pos":[185000,185006],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[185067,185068]},{"pos":[185156,185179],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[185251,185252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[186051,186124],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, TaskScheduler)","pos":[0,73],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)"}]},{"pos":[186776,186797],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[186872,186873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[186923,186927],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[186985,186986],"content":"<","needQuote":true,"nodes":[]},{"pos":[187050,187054],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[187108,187109]},{"pos":[187164,187170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[187231,187232]},{"pos":[187264,187271],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[187337,187338]},{"pos":[187393,187399],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[187460,187461]},{"pos":[187539,187552],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[187614,187615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[187817,187841],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[187919,187920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[187970,187974],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[188033,188036]},{"pos":[188107,188111],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[188165,188166]},{"pos":[188221,188227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[188288,188289]},{"pos":[188321,188328],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[188361,188362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[188390,188391]},{"pos":[188446,188452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[188513,188514]},{"pos":[188592,188605],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[188667,188668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[189174,189186],"content":"Delay(Int32)","needQuote":true,"nodes":[{"content":"Delay(Int32)","pos":[0,12]}]},{"pos":[189329,189334],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[189393,189394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[189443,189448],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[189507,189508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[189603,189608],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[189667,189668],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[189717,189722],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[189781,189782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[190051,190082],"content":"Delay(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Delay(Int32, CancellationToken)","pos":[0,31]}]},{"pos":[190296,190301],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[190360,190361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[190410,190415],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[190475,190476]},{"pos":[190552,190569],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[190629,190630],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[190760,190765],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[190824,190825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[190874,190879],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[190939,190940]},{"pos":[191016,191033],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[191093,191094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[191385,191400],"content":"Delay(TimeSpan)","needQuote":true,"nodes":[{"content":"Delay(TimeSpan)","pos":[0,15]}]},{"pos":[191549,191554],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[191613,191614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[191666,191674],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[191736,191737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[191835,191840],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[191899,191900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[191952,191960],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[192022,192023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[192301,192335],"content":"Delay(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"Delay(TimeSpan, CancellationToken)","pos":[0,34]}]},{"pos":[192555,192560],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[192619,192620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[192672,192680],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[192743,192744]},{"pos":[192820,192837],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[192897,192898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[193031,193036],"content":"Delay","needQuote":true,"nodes":[{"content":"Delay","pos":[0,5]}]},{"pos":[193095,193096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[193148,193156],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[193219,193220]},{"pos":[193296,193313],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[193373,193374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[193698,193729],"content":"FromCanceled(CancellationToken)","needQuote":true,"nodes":[{"content":"FromCanceled(CancellationToken)","pos":[0,31]}]},{"pos":[193930,193942],"content":"FromCanceled","needQuote":true,"nodes":[{"content":"FromCanceled","pos":[0,12]}]},{"pos":[194008,194009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[194080,194097],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[194157,194158],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[194282,194294],"content":"FromCanceled","needQuote":true,"nodes":[{"content":"FromCanceled","pos":[0,12]}]},{"pos":[194360,194361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[194432,194449],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[194509,194510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[194825,194865],"content":"FromCanceled<TResult>(CancellationToken)","needQuote":true,"nodes":[{"content":"FromCanceled&lt;TResult&gt;(CancellationToken)","pos":[0,40],"source":"FromCanceled<TResult>(CancellationToken)"}]},{"pos":[195237,195258],"content":"FromCanceled<TResult>","needQuote":true,"nodes":[{"content":"FromCanceled&lt;TResult&gt;","pos":[0,21],"source":"FromCanceled<TResult>"}]},{"pos":[195333,195334],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[195405,195422],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[195482,195483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[195610,195634],"content":"FromCanceled(Of TResult)","needQuote":true,"nodes":[{"content":"FromCanceled(Of TResult)","pos":[0,24]}]},{"pos":[195712,195713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[195784,195801],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[195861,195862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[196236,196260],"content":"FromException(Exception)","needQuote":true,"nodes":[{"content":"FromException(Exception)","pos":[0,24]}]},{"pos":[196427,196440],"content":"FromException","needQuote":true,"nodes":[{"content":"FromException","pos":[0,13]}]},{"pos":[196507,196508],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[196561,196570],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[196633,196634],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[196741,196754],"content":"FromException","needQuote":true,"nodes":[{"content":"FromException","pos":[0,13]}]},{"pos":[196821,196822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[196875,196884],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[196947,196948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[197221,197254],"content":"FromException<TResult>(Exception)","needQuote":true,"nodes":[{"content":"FromException&lt;TResult&gt;(Exception)","pos":[0,33],"source":"FromException<TResult>(Exception)"}]},{"pos":[197568,197590],"content":"FromException<TResult>","needQuote":true,"nodes":[{"content":"FromException&lt;TResult&gt;","pos":[0,22],"source":"FromException<TResult>"}]},{"pos":[197666,197667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[197720,197729],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[197792,197793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[197903,197928],"content":"FromException(Of TResult)","needQuote":true,"nodes":[{"content":"FromException(Of TResult)","pos":[0,25]}]},{"pos":[198007,198008],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[198061,198070],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[198133,198134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[198512,198540],"content":"FromResult<TResult>(TResult)","needQuote":true,"nodes":[{"content":"FromResult&lt;TResult&gt;(TResult)","pos":[0,28],"source":"FromResult<TResult>(TResult)"}]},{"pos":[198809,198828],"content":"FromResult<TResult>","needQuote":true,"nodes":[{"content":"FromResult&lt;TResult&gt;","pos":[0,19],"source":"FromResult<TResult>"}]},{"pos":[198901,198902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[198929,198936],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[198969,198970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[199064,199086],"content":"FromResult(Of TResult)","needQuote":true,"nodes":[{"content":"FromResult(Of TResult)","pos":[0,22]}]},{"pos":[199162,199163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[199190,199197],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[199230,199231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[199535,199546],"content":"Run(Action)","needQuote":true,"nodes":[{"content":"Run(Action)","pos":[0,11]}]},{"pos":[199687,199690],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[199747,199748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[199798,199804],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[199864,199865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[199959,199962],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[200019,200020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[200070,200076],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[200136,200137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[200403,200433],"content":"Run(Action, CancellationToken)","needQuote":true,"nodes":[{"content":"Run(Action, CancellationToken)","pos":[0,30]}]},{"pos":[200645,200648],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[200705,200706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[200756,200762],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":",","pos":[200823,200824]},{"pos":[200900,200917],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[200977,200978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[201107,201110],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[201167,201168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[201218,201224],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":",","pos":[201285,201286]},{"pos":[201362,201379],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[201439,201440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[201752,201767],"content":"Run(Func<Task>)","needQuote":true,"nodes":[{"content":"Run(Func&lt;Task&gt;)","pos":[0,15],"source":"Run(Func<Task>)"}]},{"pos":[202084,202087],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[202144,202145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[202195,202199],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[202257,202258],"content":"<","needQuote":true,"nodes":[]},{"pos":[202322,202326],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[202411,202412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202533,202536],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[202593,202594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[202644,202648],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[202707,202710]},{"pos":[202781,202785],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[202838,202839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202866,202867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[203234,203268],"content":"Run(Func<Task>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run(Func&lt;Task&gt;, CancellationToken)","pos":[0,34],"source":"Run(Func<Task>, CancellationToken)"}]},{"pos":[203711,203714],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[203771,203772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[203822,203826],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[203884,203885],"content":"<","needQuote":true,"nodes":[]},{"pos":[203949,203953],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[204039,204040]},{"pos":[204116,204133],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[204193,204194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[204350,204353],"content":"Run","needQuote":true,"nodes":[{"content":"Run","pos":[0,3]}]},{"pos":[204410,204411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[204461,204465],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[204524,204527]},{"pos":[204598,204602],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[204655,204656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[204684,204685]},{"pos":[204761,204778],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[204838,204839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[205277,205304],"content":"Run<TResult>(Func<TResult>)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;TResult&gt;)","pos":[0,27],"source":"Run<TResult>(Func<TResult>)"}]},{"pos":[205596,205608],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[205674,205675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[205725,205729],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[205787,205788],"content":"<","needQuote":true,"nodes":[]},{"pos":[205815,205822],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[205887,205888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[205988,206003],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[206072,206073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[206123,206127],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[206186,206189]},{"pos":[206223,206230],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[206263,206264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[206291,206292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[206733,206779],"content":"Run<TResult>(Func<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;TResult&gt;, CancellationToken)","pos":[0,46],"source":"Run<TResult>(Func<TResult>, CancellationToken)"}]},{"pos":[207197,207209],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[207275,207276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[207326,207330],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[207388,207389],"content":"<","needQuote":true,"nodes":[]},{"pos":[207416,207423],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[207489,207490]},{"pos":[207566,207583],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[207643,207644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[207779,207794],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[207863,207864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[207914,207918],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[207977,207980]},{"pos":[208014,208021],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[208054,208055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[208083,208084]},{"pos":[208160,208177],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[208237,208238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[208740,208773],"content":"Run<TResult>(Func<Task<TResult>>)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;)","pos":[0,33],"source":"Run<TResult>(Func<Task<TResult>>)"}]},{"pos":[209164,209176],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[209242,209243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[209293,209297],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[209355,209356],"content":"<","needQuote":true,"nodes":[]},{"pos":[209422,209426],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[209479,209480],"content":"<","needQuote":true,"nodes":[]},{"pos":[209507,209514],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[209611,209612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[209741,209756],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[209825,209826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[209876,209880],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[209939,209942]},{"pos":[210015,210019],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[210073,210076]},{"pos":[210110,210117],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[210150,210151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[210178,210179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[210206,210207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[210750,210802],"content":"Run<TResult>(Func<Task<TResult>>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;, CancellationToken)","pos":[0,52],"source":"Run<TResult>(Func<Task<TResult>>, CancellationToken)"}]},{"pos":[211319,211331],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[211397,211398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[211448,211452],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[211510,211511],"content":"<","needQuote":true,"nodes":[]},{"pos":[211577,211581],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[211634,211635],"content":"<","needQuote":true,"nodes":[]},{"pos":[211662,211669],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[211767,211768]},{"pos":[211844,211861],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[211921,211922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212086,212101],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[212170,212171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[212221,212225],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[212284,212287]},{"pos":[212360,212364],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[212418,212421]},{"pos":[212455,212462],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[212495,212496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212523,212524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[212552,212553]},{"pos":[212629,212646],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[212706,212707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[213134,213152],"content":"RunSynchronously()","needQuote":true,"nodes":[{"content":"RunSynchronously()","pos":[0,18]}]},{"pos":[213291,213307],"content":"RunSynchronously","needQuote":true,"nodes":[{"content":"RunSynchronously","pos":[0,16]}]},{"pos":[213377,213378],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[213405,213406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[213498,213514],"content":"RunSynchronously","needQuote":true,"nodes":[{"content":"RunSynchronously","pos":[0,16]}]},{"pos":[213584,213585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[213612,213613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[213886,213917],"content":"RunSynchronously(TaskScheduler)","needQuote":true,"nodes":[{"content":"RunSynchronously(TaskScheduler)","pos":[0,31]}]},{"pos":[214130,214146],"content":"RunSynchronously","needQuote":true,"nodes":[{"content":"RunSynchronously","pos":[0,16]}]},{"pos":[214216,214217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[214290,214303],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[214365,214366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[214496,214512],"content":"RunSynchronously","needQuote":true,"nodes":[{"content":"RunSynchronously","pos":[0,16]}]},{"pos":[214582,214583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[214656,214669],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[214731,214732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215007,215014],"content":"Start()","needQuote":true,"nodes":[{"content":"Start()","pos":[0,7]}]},{"pos":[215131,215136],"content":"Start","needQuote":true,"nodes":[{"content":"Start","pos":[0,5]}]},{"pos":[215195,215196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215223,215224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215305,215310],"content":"Start","needQuote":true,"nodes":[{"content":"Start","pos":[0,5]}]},{"pos":[215369,215370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215397,215398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215638,215658],"content":"Start(TaskScheduler)","needQuote":true,"nodes":[{"content":"Start(TaskScheduler)","pos":[0,20]}]},{"pos":[215849,215854],"content":"Start","needQuote":true,"nodes":[{"content":"Start","pos":[0,5]}]},{"pos":[215913,215914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215987,216000],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[216062,216063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216182,216187],"content":"Start","needQuote":true,"nodes":[{"content":"Start","pos":[0,5]}]},{"pos":[216246,216247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216320,216333],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[216395,216396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216648,216654],"content":"Wait()","needQuote":true,"nodes":[{"content":"Wait()","pos":[0,6]}]},{"pos":[216769,216773],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[216831,216832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216859,216860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216940,216944],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[217002,217003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217030,217031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[217243,217254],"content":"Wait(Int32)","needQuote":true,"nodes":[{"content":"Wait(Int32)","pos":[0,11]}]},{"pos":[217395,217399],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[217457,217458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217507,217512],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[217571,217572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[217666,217670],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[217728,217729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217778,217783],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[217842,217843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[218109,218139],"content":"Wait(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(Int32, CancellationToken)","pos":[0,30]}]},{"pos":[218351,218355],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[218413,218414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[218463,218468],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[218528,218529]},{"pos":[218605,218622],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[218682,218683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[218812,218816],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[218874,218875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[218924,218929],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[218989,218990]},{"pos":[219066,219083],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[219143,219144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[219452,219475],"content":"Wait(CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(CancellationToken)","pos":[0,23]}]},{"pos":[219660,219664],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[219722,219723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[219794,219811],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[219871,219872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[219988,219992],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[220050,220051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[220122,220139],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[220199,220200],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220468,220482],"content":"Wait(TimeSpan)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan)","pos":[0,14]}]},{"pos":[220629,220633],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[220691,220692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[220744,220752],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[220814,220815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220912,220916],"content":"Wait","needQuote":true,"nodes":[{"content":"Wait","pos":[0,4]}]},{"pos":[220974,220975],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[221027,221035],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[221097,221098],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[221356,221371],"content":"WaitAll(Task[])","needQuote":true,"nodes":[{"content":"WaitAll(Task[])","pos":[0,15]}]},{"pos":[221661,221668],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[221729,221730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[221794,221798],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[221852,221854]},{"pos":[221885,221886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222000,222007],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[222068,222069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[222133,222137],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[222190,222192],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[222220,222221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222549,222571],"content":"WaitAll(Task[], Int32)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], Int32)","pos":[0,22]}]},{"pos":[222909,222916],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[222977,222978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[223042,223046],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[223100,223102]},{"content":",","pos":[223134,223135]},{"pos":[223189,223194],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[223253,223254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[223381,223388],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[223449,223450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[223514,223518],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[223571,223573],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[223602,223603]},{"pos":[223657,223662],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[223721,223722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[224112,224153],"content":"WaitAll(Task[], Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], Int32, CancellationToken)","pos":[0,41]}]},{"pos":[224617,224624],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[224685,224686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[224750,224754],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[224808,224810]},{"content":",","pos":[224842,224843]},{"pos":[224897,224902],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[224962,224963]},{"pos":[225039,225056],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[225116,225117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[225279,225286],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[225347,225348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[225412,225416],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[225469,225471],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[225500,225501]},{"pos":[225555,225560],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[225620,225621]},{"pos":[225697,225714],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[225774,225775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[226226,226260],"content":"WaitAll(Task[], CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], CancellationToken)","pos":[0,34]}]},{"pos":[226676,226683],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[226744,226745],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[226809,226813],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[226867,226869]},{"content":",","pos":[226901,226902]},{"pos":[226978,226995],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[227055,227056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[227205,227212],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[227273,227274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[227338,227342],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[227395,227397],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[227426,227427]},{"pos":[227503,227520],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[227580,227581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[227985,228010],"content":"WaitAll(Task[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], TimeSpan)","pos":[0,25]}]},{"pos":[228360,228367],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[228428,228429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[228493,228497],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[228551,228553]},{"content":",","pos":[228585,228586]},{"pos":[228643,228651],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[228713,228714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[228844,228851],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[228912,228913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[228977,228981],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[229034,229036],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[229065,229066]},{"pos":[229123,229131],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[229193,229194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229546,229561],"content":"WaitAny(Task[])","needQuote":true,"nodes":[{"content":"WaitAny(Task[])","pos":[0,15]}]},{"pos":[229851,229858],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[229919,229920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229984,229988],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[230042,230044]},{"pos":[230075,230076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230190,230197],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[230258,230259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230323,230327],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[230380,230382],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[230410,230411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230739,230761],"content":"WaitAny(Task[], Int32)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], Int32)","pos":[0,22]}]},{"pos":[231099,231106],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[231167,231168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[231232,231236],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[231290,231292]},{"content":",","pos":[231324,231325]},{"pos":[231379,231384],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[231443,231444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[231571,231578],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[231639,231640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[231704,231708],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[231761,231763],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[231792,231793]},{"pos":[231847,231852],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[231911,231912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[232302,232343],"content":"WaitAny(Task[], Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], Int32, CancellationToken)","pos":[0,41]}]},{"pos":[232807,232814],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[232875,232876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[232940,232944],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[232998,233000]},{"content":",","pos":[233032,233033]},{"pos":[233087,233092],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[233152,233153]},{"pos":[233229,233246],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[233306,233307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[233469,233476],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[233537,233538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[233602,233606],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[233659,233661],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[233690,233691]},{"pos":[233745,233750],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[233810,233811]},{"pos":[233887,233904],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[233964,233965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[234416,234450],"content":"WaitAny(Task[], CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], CancellationToken)","pos":[0,34]}]},{"pos":[234866,234873],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[234934,234935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[234999,235003],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[235057,235059]},{"content":",","pos":[235091,235092]},{"pos":[235168,235185],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[235245,235246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[235395,235402],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[235463,235464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[235528,235532],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[235585,235587],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[235616,235617]},{"pos":[235693,235710],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[235770,235771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[236175,236200],"content":"WaitAny(Task[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], TimeSpan)","pos":[0,25]}]},{"pos":[236550,236557],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[236618,236619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[236683,236687],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[236741,236743]},{"content":",","pos":[236775,236776]},{"pos":[236833,236841],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[236903,236904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[237034,237041],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[237102,237103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[237167,237171],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[237224,237226],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[237255,237256]},{"pos":[237313,237321],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[237383,237384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[237773,237799],"content":"WhenAll(IEnumerable<Task>)","needQuote":true,"nodes":[{"content":"WhenAll(IEnumerable&lt;Task&gt;)","pos":[0,26],"source":"WhenAll(IEnumerable<Task>)"}]},{"pos":[238220,238227],"content":"WhenAll","needQuote":true,"nodes":[{"content":"WhenAll","pos":[0,7]}]},{"pos":[238288,238289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[238366,238377],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[238462,238463],"content":"<","needQuote":true,"nodes":[]},{"pos":[238527,238531],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[238616,238617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[238769,238776],"content":"WhenAll","needQuote":true,"nodes":[{"content":"WhenAll","pos":[0,7]}]},{"pos":[238837,238838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[238915,238926],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[239012,239015]},{"pos":[239086,239090],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[239143,239144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[239171,239172],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[239551,239566],"content":"WhenAll(Task[])","needQuote":true,"nodes":[{"content":"WhenAll(Task[])","pos":[0,15]}]},{"pos":[239856,239863],"content":"WhenAll","needQuote":true,"nodes":[{"content":"WhenAll","pos":[0,7]}]},{"pos":[239924,239925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[239989,239993],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[240047,240049]},{"pos":[240080,240081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[240195,240202],"content":"WhenAll","needQuote":true,"nodes":[{"content":"WhenAll","pos":[0,7]}]},{"pos":[240263,240264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[240328,240332],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[240385,240387],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[240415,240416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[240891,240935],"content":"WhenAll<TResult>(IEnumerable<Task<TResult>>)","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)","pos":[0,44],"source":"WhenAll<TResult>(IEnumerable<Task<TResult>>)"}]},{"pos":[241430,241446],"content":"WhenAll<TResult>","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;","pos":[0,16],"source":"WhenAll<TResult>"}]},{"pos":[241516,241517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[241594,241605],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[241690,241691],"content":"<","needQuote":true,"nodes":[]},{"pos":[241757,241761],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[241814,241815],"content":"<","needQuote":true,"nodes":[]},{"pos":[241842,241849],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[241946,241947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[242107,242126],"content":"WhenAll(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAll(Of TResult)","pos":[0,19]}]},{"pos":[242199,242200],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[242277,242288],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[242374,242377]},{"pos":[242450,242454],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[242508,242511]},{"pos":[242545,242552],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[242585,242586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[242613,242614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[242641,242642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[243154,243187],"content":"WhenAll<TResult>(Task<TResult>[])","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;(Task&lt;TResult&gt;[])","pos":[0,33],"source":"WhenAll<TResult>(Task<TResult>[])"}]},{"pos":[243551,243567],"content":"WhenAll<TResult>","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;","pos":[0,16],"source":"WhenAll<TResult>"}]},{"pos":[243637,243638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[243704,243708],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[243761,243762],"content":"<","needQuote":true,"nodes":[]},{"pos":[243789,243796],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":"[]","pos":[243862,243864]},{"pos":[243895,243896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[244018,244037],"content":"WhenAll(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAll(Of TResult)","pos":[0,19]}]},{"pos":[244110,244111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[244177,244181],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[244235,244238]},{"pos":[244272,244279],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[244312,244313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[244340,244342],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[244370,244371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[244774,244800],"content":"WhenAny(IEnumerable<Task>)","needQuote":true,"nodes":[{"content":"WhenAny(IEnumerable&lt;Task&gt;)","pos":[0,26],"source":"WhenAny(IEnumerable<Task>)"}]},{"pos":[245221,245228],"content":"WhenAny","needQuote":true,"nodes":[{"content":"WhenAny","pos":[0,7]}]},{"pos":[245289,245290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[245367,245378],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[245463,245464],"content":"<","needQuote":true,"nodes":[]},{"pos":[245528,245532],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[245617,245618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[245770,245777],"content":"WhenAny","needQuote":true,"nodes":[{"content":"WhenAny","pos":[0,7]}]},{"pos":[245838,245839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[245916,245927],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[246013,246016]},{"pos":[246087,246091],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[246144,246145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[246172,246173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[246552,246567],"content":"WhenAny(Task[])","needQuote":true,"nodes":[{"content":"WhenAny(Task[])","pos":[0,15]}]},{"pos":[246857,246864],"content":"WhenAny","needQuote":true,"nodes":[{"content":"WhenAny","pos":[0,7]}]},{"pos":[246925,246926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[246990,246994],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[247048,247050]},{"pos":[247081,247082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[247196,247203],"content":"WhenAny","needQuote":true,"nodes":[{"content":"WhenAny","pos":[0,7]}]},{"pos":[247264,247265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[247329,247333],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[247386,247388],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[247416,247417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[247892,247936],"content":"WhenAny<TResult>(IEnumerable<Task<TResult>>)","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)","pos":[0,44],"source":"WhenAny<TResult>(IEnumerable<Task<TResult>>)"}]},{"pos":[248431,248447],"content":"WhenAny<TResult>","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;","pos":[0,16],"source":"WhenAny<TResult>"}]},{"pos":[248517,248518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[248595,248606],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[248691,248692],"content":"<","needQuote":true,"nodes":[]},{"pos":[248758,248762],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[248815,248816],"content":"<","needQuote":true,"nodes":[]},{"pos":[248843,248850],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[248947,248948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249108,249127],"content":"WhenAny(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAny(Of TResult)","pos":[0,19]}]},{"pos":[249200,249201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[249278,249289],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[249375,249378]},{"pos":[249451,249455],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[249509,249512]},{"pos":[249546,249553],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[249586,249587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249614,249615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249642,249643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[250155,250188],"content":"WhenAny<TResult>(Task<TResult>[])","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;(Task&lt;TResult&gt;[])","pos":[0,33],"source":"WhenAny<TResult>(Task<TResult>[])"}]},{"pos":[250552,250568],"content":"WhenAny<TResult>","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;","pos":[0,16],"source":"WhenAny<TResult>"}]},{"pos":[250638,250639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[250705,250709],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[250762,250763],"content":"<","needQuote":true,"nodes":[]},{"pos":[250790,250797],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":"[]","pos":[250863,250865]},{"pos":[250896,250897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251019,251038],"content":"WhenAny(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAny(Of TResult)","pos":[0,19]}]},{"pos":[251111,251112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[251178,251182],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[251236,251239]},{"pos":[251273,251280],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[251313,251314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251341,251343],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[251371,251372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251705,251712],"content":"Yield()","needQuote":true,"nodes":[{"content":"Yield()","pos":[0,7]}]},{"pos":[251829,251834],"content":"Yield","needQuote":true,"nodes":[{"content":"Yield","pos":[0,5]}]},{"pos":[251893,251894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[251921,251922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252003,252008],"content":"Yield","needQuote":true,"nodes":[{"content":"Yield","pos":[0,5]}]},{"pos":[252067,252068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[252095,252096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252272,252282],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[252377,252385],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[252454,252455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[252482,252483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252553,252561],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[252630,252631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[252658,252659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252842,252856],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[252975,252981],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[253048,253049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[253099,253105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[253165,253166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[253249,253255],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[253322,253323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[253373,253379],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[253439,253440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[253654,253676],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[253824,253830],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[253897,253898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[253948,253954],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[254015,254016]},{"pos":[254071,254077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[254137,254138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[254235,254241],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[254308,254309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[254359,254365],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[254426,254427]},{"pos":[254482,254488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[254548,254549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[254794,254825],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[254991,255006],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[255082,255083],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255133,255139],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[255200,255201]},{"pos":[255256,255262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[255322,255323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255429,255444],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[255520,255521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255571,255577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[255638,255639]},{"pos":[255694,255700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[255760,255761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255991,256004],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[256105,256116],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[256188,256189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256216,256217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256290,256301],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[256373,256374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256401,256402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256577,256586],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[256679,256686],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[256754,256755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256782,256783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256852,256859],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[256927,256928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256955,256956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[257131,257148],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[257257,257272],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[257348,257349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[257376,257377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[257454,257469],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[257545,257546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[257573,257574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[257719,257725],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[257914,257956],"content":"ContinueWith<TResult>(Func<Task, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;)","pos":[0,42],"source":"ContinueWith<TResult>(Func<Task, TResult>)"}]},{"pos":[258376,258397],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[258472,258473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[258523,258527],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[258585,258586],"content":"<","needQuote":true,"nodes":[]},{"pos":[258650,258654],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[258708,258709]},{"pos":[258741,258748],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[258813,258814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[258951,258975],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[259053,259054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[259104,259108],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[259167,259170]},{"pos":[259241,259245],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[259299,259300]},{"pos":[259332,259339],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[259372,259373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[259400,259401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[259819,259880],"content":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, CancellationToken)","pos":[0,61],"source":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)"}]},{"pos":[260426,260447],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[260522,260523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[260573,260577],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[260635,260636],"content":"<","needQuote":true,"nodes":[]},{"pos":[260700,260704],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[260758,260759]},{"pos":[260791,260798],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[260864,260865]},{"pos":[260941,260958],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[261018,261019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[261191,261215],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[261293,261294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[261344,261348],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[261407,261410]},{"pos":[261481,261485],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[261539,261540]},{"pos":[261572,261579],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[261612,261613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[261641,261642]},{"pos":[261718,261735],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[261795,261796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[262371,262472],"content":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,101],"source":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"pos":[263314,263335],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[263410,263411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[263461,263465],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[263523,263524],"content":"<","needQuote":true,"nodes":[]},{"pos":[263588,263592],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[263646,263647]},{"pos":[263679,263686],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[263752,263753]},{"pos":[263829,263846],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[263907,263908]},{"pos":[263996,264019],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[264092,264093]},{"pos":[264171,264184],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[264246,264247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[264503,264527],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[264605,264606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[264656,264660],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[264719,264722]},{"pos":[264793,264797],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[264851,264852]},{"pos":[264884,264891],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[264924,264925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[264953,264954]},{"pos":[265030,265047],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[265108,265109]},{"pos":[265197,265220],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[265293,265294]},{"pos":[265372,265385],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[265447,265448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[266115,266182],"content":"ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, TaskContinuationOptions)","pos":[0,67],"source":"ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)"}]},{"pos":[266770,266791],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[266866,266867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[266917,266921],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[266979,266980],"content":"<","needQuote":true,"nodes":[]},{"pos":[267044,267048],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[267102,267103]},{"pos":[267135,267142],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[267208,267209]},{"pos":[267297,267320],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[267392,267393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[267577,267601],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[267679,267680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[267730,267734],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[267793,267796]},{"pos":[267867,267871],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[267925,267926]},{"pos":[267958,267965],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[267998,267999],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[268027,268028]},{"pos":[268116,268139],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[268211,268212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[268729,268786],"content":"ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, TaskScheduler)","pos":[0,57],"source":"ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)"}]},{"pos":[269334,269355],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[269430,269431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[269481,269485],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[269543,269544],"content":"<","needQuote":true,"nodes":[]},{"pos":[269608,269612],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[269666,269667]},{"pos":[269699,269706],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[269772,269773]},{"pos":[269851,269864],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[269926,269927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[270101,270125],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[270203,270204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[270254,270258],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[270317,270320]},{"pos":[270391,270395],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[270449,270450]},{"pos":[270482,270489],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[270522,270523],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[270551,270552]},{"pos":[270630,270643],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[270705,270706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[271184,271242],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object)","pos":[0,58],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object)"}]},{"pos":[271766,271787],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[271862,271863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[271913,271917],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[271975,271976],"content":"<","needQuote":true,"nodes":[]},{"pos":[272040,272044],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[272098,272099]},{"pos":[272154,272160],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[272221,272222]},{"pos":[272254,272261],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[272327,272328]},{"pos":[272383,272389],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[272449,272450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[272615,272639],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[272717,272718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[272768,272772],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[272831,272834]},{"pos":[272905,272909],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[272963,272964]},{"pos":[273019,273025],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[273086,273087]},{"pos":[273119,273126],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[273159,273160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[273188,273189]},{"pos":[273244,273250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[273310,273311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[273817,273894],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, CancellationToken)","pos":[0,77],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)"}]},{"pos":[274544,274565],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[274640,274641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[274691,274695],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[274753,274754],"content":"<","needQuote":true,"nodes":[]},{"pos":[274818,274822],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[274876,274877]},{"pos":[274932,274938],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[274999,275000]},{"pos":[275032,275039],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[275105,275106]},{"pos":[275161,275167],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[275228,275229]},{"pos":[275305,275322],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[275382,275383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[275583,275607],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[275685,275686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[275736,275740],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[275799,275802]},{"pos":[275873,275877],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[275931,275932]},{"pos":[275987,275993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[276054,276055]},{"pos":[276087,276094],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[276127,276128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[276156,276157]},{"pos":[276212,276218],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[276279,276280]},{"pos":[276356,276373],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[276433,276434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[277097,277214],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,117],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"pos":[278160,278181],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[278256,278257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[278307,278311],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[278369,278370],"content":"<","needQuote":true,"nodes":[]},{"pos":[278434,278438],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[278492,278493]},{"pos":[278548,278554],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[278615,278616]},{"pos":[278648,278655],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[278721,278722]},{"pos":[278777,278783],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[278844,278845]},{"pos":[278921,278938],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[278999,279000]},{"pos":[279088,279111],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[279184,279185]},{"pos":[279263,279276],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[279338,279339],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[279623,279647],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[279725,279726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[279776,279780],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[279839,279842]},{"pos":[279913,279917],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[279971,279972]},{"pos":[280027,280033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[280094,280095]},{"pos":[280127,280134],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[280167,280168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[280196,280197]},{"pos":[280252,280258],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[280319,280320]},{"pos":[280396,280413],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":",","pos":[280474,280475]},{"pos":[280563,280586],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"content":",","pos":[280659,280660]},{"pos":[280738,280751],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[280813,280814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[281569,281652],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, TaskContinuationOptions)","pos":[0,83],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)"}]},{"pos":[282344,282365],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[282440,282441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[282491,282495],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[282553,282554],"content":"<","needQuote":true,"nodes":[]},{"pos":[282618,282622],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[282676,282677]},{"pos":[282732,282738],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[282799,282800]},{"pos":[282832,282839],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[282905,282906]},{"pos":[282961,282967],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[283028,283029]},{"pos":[283117,283140],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[283212,283213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[283425,283449],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[283527,283528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[283578,283582],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[283641,283644]},{"pos":[283715,283719],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[283773,283774]},{"pos":[283829,283835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[283896,283897]},{"pos":[283929,283936],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[283969,283970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[283998,283999]},{"pos":[284054,284060],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[284121,284122]},{"pos":[284210,284233],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[284305,284306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[284911,284984],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, TaskScheduler)","pos":[0,73],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)"}]},{"pos":[285636,285657],"content":"ContinueWith<TResult>","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;","pos":[0,21],"source":"ContinueWith<TResult>"}]},{"pos":[285732,285733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[285783,285787],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[285845,285846],"content":"<","needQuote":true,"nodes":[]},{"pos":[285910,285914],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[285968,285969]},{"pos":[286024,286030],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[286091,286092]},{"pos":[286124,286131],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[286197,286198]},{"pos":[286253,286259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[286320,286321]},{"pos":[286399,286412],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[286474,286475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[286677,286701],"content":"ContinueWith(Of TResult)","needQuote":true,"nodes":[{"content":"ContinueWith(Of TResult)","pos":[0,24]}]},{"pos":[286779,286780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[286830,286834],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[286893,286896]},{"pos":[286967,286971],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[287025,287026]},{"pos":[287081,287087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[287148,287149]},{"pos":[287181,287188],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[287221,287222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[287250,287251]},{"pos":[287306,287312],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[287373,287374]},{"pos":[287452,287465],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[287527,287528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[287996,288024],"content":"FromResult<TResult>(TResult)","needQuote":true,"nodes":[{"content":"FromResult&lt;TResult&gt;(TResult)","pos":[0,28],"source":"FromResult<TResult>(TResult)"}]},{"pos":[288293,288312],"content":"FromResult<TResult>","needQuote":true,"nodes":[{"content":"FromResult&lt;TResult&gt;","pos":[0,19],"source":"FromResult<TResult>"}]},{"pos":[288385,288386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[288413,288420],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[288453,288454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[288548,288570],"content":"FromResult(Of TResult)","needQuote":true,"nodes":[{"content":"FromResult(Of TResult)","pos":[0,22]}]},{"pos":[288646,288647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[288674,288681],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[288714,288715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[288987,289014],"content":"Run<TResult>(Func<TResult>)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;TResult&gt;)","pos":[0,27],"source":"Run<TResult>(Func<TResult>)"}]},{"pos":[289306,289318],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[289384,289385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[289435,289439],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[289497,289498],"content":"<","needQuote":true,"nodes":[]},{"pos":[289525,289532],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[289597,289598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[289698,289713],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[289782,289783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[289833,289837],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[289896,289899]},{"pos":[289933,289940],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[289973,289974],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[290001,290002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[290316,290362],"content":"Run<TResult>(Func<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;TResult&gt;, CancellationToken)","pos":[0,46],"source":"Run<TResult>(Func<TResult>, CancellationToken)"}]},{"pos":[290780,290792],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[290858,290859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[290909,290913],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[290971,290972],"content":"<","needQuote":true,"nodes":[]},{"pos":[290999,291006],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[291072,291073]},{"pos":[291149,291166],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[291226,291227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[291362,291377],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[291446,291447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[291497,291501],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[291560,291563]},{"pos":[291597,291604],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[291637,291638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[291666,291667]},{"pos":[291743,291760],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[291820,291821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[292202,292235],"content":"Run<TResult>(Func<Task<TResult>>)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;)","pos":[0,33],"source":"Run<TResult>(Func<Task<TResult>>)"}]},{"pos":[292626,292638],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[292704,292705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[292755,292759],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[292817,292818],"content":"<","needQuote":true,"nodes":[]},{"pos":[292884,292888],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[292941,292942],"content":"<","needQuote":true,"nodes":[]},{"pos":[292969,292976],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[293073,293074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[293203,293218],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[293287,293288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[293338,293342],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[293401,293404]},{"pos":[293477,293481],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[293535,293538]},{"pos":[293572,293579],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[293612,293613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[293640,293641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[293668,293669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[294056,294108],"content":"Run<TResult>(Func<Task<TResult>>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;, CancellationToken)","pos":[0,52],"source":"Run<TResult>(Func<Task<TResult>>, CancellationToken)"}]},{"pos":[294625,294637],"content":"Run<TResult>","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;","pos":[0,12],"source":"Run<TResult>"}]},{"pos":[294703,294704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[294754,294758],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[294816,294817],"content":"<","needQuote":true,"nodes":[]},{"pos":[294883,294887],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[294940,294941],"content":"<","needQuote":true,"nodes":[]},{"pos":[294968,294975],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[295073,295074]},{"pos":[295150,295167],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[295227,295228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[295392,295407],"content":"Run(Of TResult)","needQuote":true,"nodes":[{"content":"Run(Of TResult)","pos":[0,15]}]},{"pos":[295476,295477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[295527,295531],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[295590,295593]},{"pos":[295666,295670],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[295724,295727]},{"pos":[295761,295768],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[295801,295802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[295829,295830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[295858,295859]},{"pos":[295935,295952],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[296012,296013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[296469,296513],"content":"WhenAll<TResult>(IEnumerable<Task<TResult>>)","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)","pos":[0,44],"source":"WhenAll<TResult>(IEnumerable<Task<TResult>>)"}]},{"pos":[297008,297024],"content":"WhenAll<TResult>","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;","pos":[0,16],"source":"WhenAll<TResult>"}]},{"pos":[297094,297095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[297172,297183],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[297268,297269],"content":"<","needQuote":true,"nodes":[]},{"pos":[297335,297339],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[297392,297393],"content":"<","needQuote":true,"nodes":[]},{"pos":[297420,297427],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[297524,297525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[297685,297704],"content":"WhenAll(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAll(Of TResult)","pos":[0,19]}]},{"pos":[297777,297778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[297855,297866],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[297952,297955]},{"pos":[298028,298032],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[298086,298089]},{"pos":[298123,298130],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[298163,298164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[298191,298192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[298219,298220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[298619,298652],"content":"WhenAll<TResult>(Task<TResult>[])","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;(Task&lt;TResult&gt;[])","pos":[0,33],"source":"WhenAll<TResult>(Task<TResult>[])"}]},{"pos":[299016,299032],"content":"WhenAll<TResult>","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;","pos":[0,16],"source":"WhenAll<TResult>"}]},{"pos":[299102,299103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[299169,299173],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[299226,299227],"content":"<","needQuote":true,"nodes":[]},{"pos":[299254,299261],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":"[]","pos":[299327,299329]},{"pos":[299360,299361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[299483,299502],"content":"WhenAll(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAll(Of TResult)","pos":[0,19]}]},{"pos":[299575,299576],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[299642,299646],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[299700,299703]},{"pos":[299737,299744],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[299777,299778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[299805,299807],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[299835,299836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[300209,300253],"content":"WhenAny<TResult>(IEnumerable<Task<TResult>>)","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)","pos":[0,44],"source":"WhenAny<TResult>(IEnumerable<Task<TResult>>)"}]},{"pos":[300748,300764],"content":"WhenAny<TResult>","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;","pos":[0,16],"source":"WhenAny<TResult>"}]},{"pos":[300834,300835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[300912,300923],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[301008,301009],"content":"<","needQuote":true,"nodes":[]},{"pos":[301075,301079],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[301132,301133],"content":"<","needQuote":true,"nodes":[]},{"pos":[301160,301167],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[301264,301265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[301425,301444],"content":"WhenAny(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAny(Of TResult)","pos":[0,19]}]},{"pos":[301517,301518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[301595,301606],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[301692,301695]},{"pos":[301768,301772],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[301826,301829]},{"pos":[301863,301870],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[301903,301904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[301931,301932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[301959,301960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[302359,302392],"content":"WhenAny<TResult>(Task<TResult>[])","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;(Task&lt;TResult&gt;[])","pos":[0,33],"source":"WhenAny<TResult>(Task<TResult>[])"}]},{"pos":[302756,302772],"content":"WhenAny<TResult>","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;","pos":[0,16],"source":"WhenAny<TResult>"}]},{"pos":[302842,302843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[302909,302913],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[302966,302967],"content":"<","needQuote":true,"nodes":[]},{"pos":[302994,303001],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":"[]","pos":[303067,303069]},{"pos":[303100,303101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[303223,303242],"content":"WhenAny(Of TResult)","needQuote":true,"nodes":[{"content":"WhenAny(Of TResult)","pos":[0,19]}]},{"pos":[303315,303316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[303382,303386],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[303440,303443]},{"pos":[303477,303484],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[303517,303518],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[303545,303547],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[303575,303576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[303885,303898],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[304047,304051],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[304109,304110],"content":"<","needQuote":true,"nodes":[]},{"pos":[304137,304144],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[304243,304247],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[304306,304309]},{"pos":[304343,304350],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[304383,304384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[304548,304561],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[304710,304714],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[304751,304752],"content":"<","needQuote":true,"nodes":[]},{"pos":[304779,304786],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[304885,304889],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[304927,304930]},{"pos":[304964,304971],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[305004,305005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[305214,305231],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[305415,305431],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[305637,305656],"content":"TaskCreationOptions","needQuote":true,"nodes":[{"content":"TaskCreationOptions","pos":[0,19]}]},{"pos":[305903,305924],"content":"Func<Object, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Object, TResult&gt;","pos":[0,21],"source":"Func<Object, TResult>"}]},{"pos":[306111,306115],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[306173,306174],"content":"<","needQuote":true,"nodes":[]},{"pos":[306224,306230],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[306291,306292]},{"pos":[306324,306331],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[306430,306434],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[306493,306496]},{"pos":[306553,306559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[306620,306621]},{"pos":[306653,306660],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[306693,306694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[306887,306903],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[307061,307065],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[307102,307103],"content":"<","needQuote":true,"nodes":[]},{"pos":[307130,307131],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[307159,307160]},{"pos":[307192,307199],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[307298,307302],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[307340,307343]},{"pos":[307377,307378],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[307406,307407]},{"pos":[307439,307446],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[307479,307480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[307743,307763],"content":"TaskFactory<TResult>","needQuote":true,"nodes":[{"content":"TaskFactory&lt;TResult&gt;","pos":[0,20],"source":"TaskFactory<TResult>"}]},{"pos":[307988,307999],"content":"TaskFactory","needQuote":true,"nodes":[{"content":"TaskFactory","pos":[0,11]}]},{"pos":[308059,308060],"content":"<","needQuote":true,"nodes":[]},{"pos":[308087,308094],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[308216,308227],"content":"TaskFactory","needQuote":true,"nodes":[{"content":"TaskFactory","pos":[0,11]}]},{"content":"(Of","pos":[308288,308291]},{"pos":[308325,308332],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[308365,308366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[308589,308609],"content":"TaskFactory<TResult>","needQuote":true,"nodes":[{"content":"TaskFactory&lt;TResult&gt;","pos":[0,20],"source":"TaskFactory<TResult>"}]},{"pos":[308834,308845],"content":"TaskFactory","needQuote":true,"nodes":[{"content":"TaskFactory","pos":[0,11]}]},{"pos":[308905,308906],"content":"<","needQuote":true,"nodes":[]},{"pos":[308933,308940],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[309062,309073],"content":"TaskFactory","needQuote":true,"nodes":[{"content":"TaskFactory","pos":[0,11]}]},{"content":"(Of","pos":[309134,309137]},{"pos":[309171,309178],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[309211,309212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[309410,309417],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[309530,309537],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[309649,309656],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[309934,309966],"content":"ConfiguredTaskAwaitable<TResult>","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable&lt;TResult&gt;","pos":[0,32],"source":"ConfiguredTaskAwaitable<TResult>"}]},{"pos":[310266,310289],"content":"ConfiguredTaskAwaitable","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable","pos":[0,23]}]},{"pos":[310370,310371],"content":"<","needQuote":true,"nodes":[]},{"pos":[310398,310405],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[310548,310571],"content":"ConfiguredTaskAwaitable","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable","pos":[0,23]}]},{"content":"(Of","pos":[310653,310656]},{"pos":[310690,310697],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[310730,310731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[311020,311052],"content":"ConfiguredTaskAwaitable<TResult>","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable&lt;TResult&gt;","pos":[0,32],"source":"ConfiguredTaskAwaitable<TResult>"}]},{"pos":[311352,311375],"content":"ConfiguredTaskAwaitable","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable","pos":[0,23]}]},{"pos":[311456,311457],"content":"<","needQuote":true,"nodes":[]},{"pos":[311484,311491],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[311634,311657],"content":"ConfiguredTaskAwaitable","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable","pos":[0,23]}]},{"content":"(Of","pos":[311739,311742]},{"pos":[311776,311783],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[311816,311817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[312078,312109],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[312370,312399],"content":"Action<Task<TResult>, Object>","needQuote":true,"nodes":[{"content":"Action&lt;Task&lt;TResult&gt;, Object&gt;","pos":[0,29],"source":"Action<Task<TResult>, Object>"}]},{"pos":[312664,312670],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[312730,312731],"content":"<","needQuote":true,"nodes":[]},{"pos":[312797,312801],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[312854,312855],"content":"<","needQuote":true,"nodes":[]},{"pos":[312882,312889],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[312955,312956]},{"pos":[313011,313017],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[313145,313151],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[313212,313215]},{"pos":[313288,313292],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[313346,313349]},{"pos":[313383,313390],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[313423,313424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[313452,313453]},{"pos":[313508,313514],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[313574,313575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[313818,313832],"content":"Action<T1, T2>","needQuote":true,"nodes":[{"content":"Action&lt;T1, T2&gt;","pos":[0,14],"source":"Action<T1, T2>"}]},{"pos":[313986,313992],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[314031,314032],"content":"<","needQuote":true,"nodes":[]},{"pos":[314059,314061],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[314090,314091]},{"pos":[314123,314125],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[314221,314227],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[314267,314270]},{"pos":[314304,314306],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[314335,314336]},{"pos":[314368,314370],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[314398,314399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[314630,314653],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[314920,314933],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[315172,315193],"content":"Action<Task<TResult>>","needQuote":true,"nodes":[{"content":"Action&lt;Task&lt;TResult&gt;&gt;","pos":[0,21],"source":"Action<Task<TResult>>"}]},{"pos":[315420,315426],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[315486,315487],"content":"<","needQuote":true,"nodes":[]},{"pos":[315553,315557],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[315610,315611],"content":"<","needQuote":true,"nodes":[]},{"pos":[315638,315645],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[315778,315784],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[315845,315848]},{"pos":[315921,315925],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[315979,315982]},{"pos":[316016,316023],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[316056,316057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[316084,316085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[316298,316307],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[316446,316452],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[316491,316492],"content":"<","needQuote":true,"nodes":[]},{"pos":[316519,316520],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[316615,316621],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[316661,316664]},{"pos":[316698,316699],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[316726,316727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[316949,316980],"content":"Func<Task<TResult>, TNewResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TResult&gt;, TNewResult&gt;","pos":[0,31],"source":"Func<Task<TResult>, TNewResult>"}]},{"pos":[317235,317239],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[317297,317298],"content":"<","needQuote":true,"nodes":[]},{"pos":[317364,317368],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[317421,317422],"content":"<","needQuote":true,"nodes":[]},{"pos":[317449,317456],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[317522,317523]},{"pos":[317555,317565],"content":"TNewResult","needQuote":true,"nodes":[{"content":"TNewResult","pos":[0,10]}]},{"pos":[317667,317671],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[317730,317733]},{"pos":[317806,317810],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[317864,317867]},{"pos":[317901,317908],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[317941,317942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[317970,317971]},{"pos":[318003,318013],"content":"TNewResult","needQuote":true,"nodes":[{"content":"TNewResult","pos":[0,10]}]},{"pos":[318049,318050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[318368,318384],"content":"Task<TNewResult>","needQuote":true,"nodes":[{"content":"Task&lt;TNewResult&gt;","pos":[0,16],"source":"Task<TNewResult>"}]},{"pos":[318590,318594],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[318647,318648],"content":"<","needQuote":true,"nodes":[]},{"pos":[318675,318685],"content":"TNewResult","needQuote":true,"nodes":[{"content":"TNewResult","pos":[0,10]}]},{"pos":[318803,318807],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[318861,318864]},{"pos":[318898,318908],"content":"TNewResult","needQuote":true,"nodes":[{"content":"TNewResult","pos":[0,10]}]},{"pos":[318944,318945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[319147,319160],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[319357,319361],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[319414,319415],"content":"<","needQuote":true,"nodes":[]},{"pos":[319442,319449],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[319564,319568],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[319622,319625]},{"pos":[319659,319666],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[319699,319700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[319958,319997],"content":"Func<Task<TResult>, Object, TNewResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TResult&gt;, Object, TNewResult&gt;","pos":[0,39],"source":"Func<Task<TResult>, Object, TNewResult>"}]},{"pos":[320290,320294],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[320352,320353],"content":"<","needQuote":true,"nodes":[]},{"pos":[320419,320423],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[320476,320477],"content":"<","needQuote":true,"nodes":[]},{"pos":[320504,320511],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[320577,320578]},{"pos":[320633,320639],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[320700,320701]},{"pos":[320733,320743],"content":"TNewResult","needQuote":true,"nodes":[{"content":"TNewResult","pos":[0,10]}]},{"pos":[320845,320849],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[320908,320911]},{"pos":[320984,320988],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[321042,321045]},{"pos":[321079,321086],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[321119,321120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[321148,321149]},{"pos":[321204,321210],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[321271,321272]},{"pos":[321304,321314],"content":"TNewResult","needQuote":true,"nodes":[{"content":"TNewResult","pos":[0,10]}]},{"pos":[321350,321351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[321614,321635],"content":"Func<T1, T2, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, TResult&gt;","pos":[0,21],"source":"Func<T1, T2, TResult>"}]},{"pos":[321808,321812],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[321849,321850],"content":"<","needQuote":true,"nodes":[]},{"pos":[321877,321879],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[321908,321909]},{"pos":[321941,321943],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[321972,321973]},{"pos":[322005,322012],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[322111,322115],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[322153,322156]},{"pos":[322190,322192],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[322221,322222]},{"pos":[322254,322256],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[322285,322286]},{"pos":[322318,322325],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[322358,322359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[322659,322679],"content":"TaskAwaiter<TResult>","needQuote":true,"nodes":[{"content":"TaskAwaiter&lt;TResult&gt;","pos":[0,20],"source":"TaskAwaiter<TResult>"}]},{"pos":[322931,322942],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"pos":[323011,323012],"content":"<","needQuote":true,"nodes":[]},{"pos":[323039,323046],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[323177,323188],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"content":"(Of","pos":[323258,323261]},{"pos":[323295,323302],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[323335,323336],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[323577,323597],"content":"TaskAwaiter<TResult>","needQuote":true,"nodes":[{"content":"TaskAwaiter&lt;TResult&gt;","pos":[0,20],"source":"TaskAwaiter<TResult>"}]},{"pos":[323849,323860],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"pos":[323929,323930],"content":"<","needQuote":true,"nodes":[]},{"pos":[323957,323964],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[324095,324106],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"content":"(Of","pos":[324176,324179]},{"pos":[324213,324220],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[324253,324254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[324476,324497],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[324687,324710],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[324910,324937],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[325157,325175],"content":"AggregateException","needQuote":true,"nodes":[{"content":"AggregateException","pos":[0,18]}]}],"content":"items:\n- uid: System.Threading.Tasks.Task`1\n  commentId: T:System.Threading.Tasks.Task`1\n  id: Task`1\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.Factory\n  - System.Threading.Tasks.Task`1.GetAwaiter\n  - System.Threading.Tasks.Task`1.Result\n  langs:\n  - csharp\n  - vb\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Task\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 67\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Represents an asynchronous operation that can return a value.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerTypeProxy(typeof (SystemThreadingTasks_FutureDebugView<>))]\n\n      [DebuggerDisplay(\"Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}\")]\n\n      public class Task<TResult> : Task, IThreadPoolWorkItem, IAsyncResult, IDisposable\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerTypeProxy(GetType(SystemThreadingTasks_FutureDebugView(Of )))>\n\n      <DebuggerDisplay(\"Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}\")>\n\n      Public Class Task(Of TResult)\n          Inherits Task\n          Implements IThreadPoolWorkItem, IAsyncResult, IDisposable\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result produced by this <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.Task\n    commentId: T:System.Threading.Tasks.Task\n  inheritance:\n  - System.Object\n  - System.Threading.Tasks.Task\n  implements:\n  - System.IAsyncResult\n  inheritedMembers:\n  - System.Threading.Tasks.Task.AsyncState\n  - System.Threading.Tasks.Task.CompletedTask\n  - System.Threading.Tasks.Task.CreationOptions\n  - System.Threading.Tasks.Task.CurrentId\n  - System.Threading.Tasks.Task.Exception\n  - System.Threading.Tasks.Task.Id\n  - System.Threading.Tasks.Task.IsCanceled\n  - System.Threading.Tasks.Task.IsCompleted\n  - System.Threading.Tasks.Task.IsFaulted\n  - System.Threading.Tasks.Task.Status\n  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}})\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Delay(System.Int32)\n  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromException(System.Exception)\n  - System.Threading.Tasks.Task.FromException``1(System.Exception)\n  - System.Threading.Tasks.Task.FromResult``1({TResult})\n  - System.Threading.Tasks.Task.Run(System.Action)\n  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{{TResult}})\n  - System.Threading.Tasks.Task.Run``1(System.Func{{TResult}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{{TResult}}})\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{{TResult}}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.RunSynchronously\n  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Start\n  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Wait\n  - System.Threading.Tasks.Task.Wait(System.Int32)\n  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}})\n  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{{TResult}}[])\n  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}})\n  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{{TResult}}[])\n  - System.Threading.Tasks.Task.Yield\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  id: '#ctor(System.Func{`0})'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<TResult>)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<TResult>)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 131\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified function.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<TResult> function)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of TResult))\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of TResult))\n  name.vb: Task(Func(Of TResult))\n  nameWithType: Task<TResult>.Task(Func<TResult>)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of TResult))\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  id: '#ctor(System.Func{`0},System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<TResult>, System.Threading.CancellationToken)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 155\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified function.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<TResult> function, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of TResult), cancellationToken As CancellationToken)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be assigned to this task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of TResult), System.Threading.CancellationToken)\n  name.vb: Task(Func(Of TResult), CancellationToken)\n  nameWithType: Task<TResult>.Task(Func<TResult>, CancellationToken)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of TResult), CancellationToken)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<TResult>, CancellationToken, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 212\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified function and creation options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: Task(Func(Of TResult), CancellationToken, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task(Func<TResult>, CancellationToken, TaskCreationOptions)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of TResult), CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<TResult>, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 182\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified function and creation options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<TResult> function, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of TResult), creationOptions As TaskCreationOptions)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)\n  name.vb: Task(Func(Of TResult), TaskCreationOptions)\n  nameWithType: Task<TResult>.Task(Func<TResult>, TaskCreationOptions)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of TResult), TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  id: '#ctor(System.Func{System.Object,`0},System.Object)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<Object, TResult>, Object)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<System.Object, TResult>, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 231\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified function and state.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<object, TResult> function, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of Object, TResult), state As Object)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the action.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of System.Object, TResult), System.Object)\n  name.vb: Task(Func(Of Object, TResult), Object)\n  nameWithType: Task<TResult>.Task(Func<Object, TResult>, Object)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of Object, TResult), Object)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<Object, TResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 255\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action, state, and options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be assigned to the new task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)\n  name.vb: Task(Func(Of Object, TResult), Object, CancellationToken)\n  nameWithType: Task<TResult>.Task(Func<Object, TResult>, Object, CancellationToken)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of Object, TResult), Object, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 316\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action, state, and options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: Task(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Task(Func<Object, TResult>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.Task(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 283\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action, state, and options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will be set to return the result value of the function.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the function.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Task(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: Task(Func(Of Object, TResult), Object, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task(Func<Object, TResult>, Object, TaskCreationOptions)\n  nameWithType.vb: Task(Of TResult).Task(Func(Of Object, TResult), Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.Factory\n  commentId: P:System.Threading.Tasks.Task`1.Factory\n  id: Factory\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Factory\n  fullName: System.Threading.Tasks.Task<TResult>.Factory\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Factory\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 663\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides access to factory methods for creating and configuring <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: public static TaskFactory<TResult> Factory { get; }\n    content.vb: Public Shared ReadOnly Property Factory As TaskFactory(Of TResult)\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskFactory{{TResult}}\n      description: \"\\n<p>A factory object that can create a variety of <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Factory\n  nameWithType: Task<TResult>.Factory\n  nameWithType.vb: Task(Of TResult).Factory\n- uid: System.Threading.Tasks.Task`1.Result\n  commentId: P:System.Threading.Tasks.Task`1.Result\n  id: Result\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: Result\n  fullName: System.Threading.Tasks.Task<TResult>.Result\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Result\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 524\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the result value of this <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n\n      public TResult Result { get; }\n    content.vb: >-\n      <DebuggerBrowsable(DebuggerBrowsableState.Never)>\n\n      Public ReadOnly Property Result As TResult\n    parameters: []\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The result value of this <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which is the same type as the task's type parameter.</p>\\n\"\n  exceptions:\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains information about the exception or exceptions. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).Result\n  nameWithType: Task<TResult>.Result\n  nameWithType.vb: Task(Of TResult).Result\n- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  commentId: M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  id: ConfigureAwait(System.Boolean)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ConfigureAwait(Boolean)\n  fullName: System.Threading.Tasks.Task<TResult>.ConfigureAwait(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConfigureAwait\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 702\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Configures an awaiter used to await this <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext)\n    content.vb: Public Function ConfigureAwait(continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable(Of TResult)\n    parameters:\n    - id: continueOnCapturedContext\n      type: System.Boolean\n      description: \"\\n<p>true to attempt to marshal the continuation back to the original context captured; otherwise, false.</p>\\n\"\n    return:\n      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable{{TResult}}\n      description: \"\\n<p>An object used to await this task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ConfigureAwait(System.Boolean)\n  nameWithType: Task<TResult>.ConfigureAwait(Boolean)\n  nameWithType.vb: Task(Of TResult).ConfigureAwait(Boolean)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>, Object>, Object)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, System.Object>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 929\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that that is passed state information and that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult), Object), state As Object) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments. </p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult), System.Object), System.Object)\n  name.vb: ContinueWith(Action(Of Task(Of TResult), Object), Object)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>, Object>, Object)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult), Object), Object)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, System.Object>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 958\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult), Object), state As Object, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult), System.Object), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Action(Of Task(Of TResult), Object), Object, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult), Object), Object, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1071\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult), Object), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as  well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its  execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult), System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task(Of TResult), Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult), Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>, Object>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, System.Object>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1025\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult), Object), state As Object, continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult), System.Object), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Action(Of Task(Of TResult), Object), Object, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>, Object>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult), Object), Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>, Object>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, System.Object>, System.Object, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 989\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult), Object), state As Object, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult), System.Object), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task(Of TResult), Object), Object, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>, Object>, Object, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult), Object), Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 729\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target task completes. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>> continuationAction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult))) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1}\n      description: \"\\n<p>An action to run when the antecedent <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation task. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: ContinueWith(Action(Of Task(Of TResult)))\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult)))\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>>, CancellationToken)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 757\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a cancelable continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>> continuationAction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate is passed the completed task as an argument. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that is passed to the new continuation task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation task. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has been disposed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Action(Of Task(Of TResult)), CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult)), CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 867\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes according the condition specified in <em>continuationOptions</em>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult)), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1}\n      description: \"\\n<p>An action to run according the condition specified in <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task(Of TResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 822\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes according the condition specified in <em>continuationOptions</em>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>> continuationAction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult)), continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1}\n      description: \"\\n<p>An action to according the condition specified in <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Action(Of Task(Of TResult)), TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult)), TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>>, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 787\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task<TResult>> continuationAction, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task(Of TResult)), scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task`1}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(System.Action(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task(Of TResult)), TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Action(Of Task(Of TResult)), TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1136\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), TNewResult)) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), TNewResult))\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult))\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult))\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1167\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), TNewResult), cancellationToken As CancellationToken) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), TNewResult), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1298\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes according the condition specified in <em>continuationOptions</em>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), TNewResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,{TNewResult}}\n      description: \"\\n<p>A function to run according the condition specified in <em>continuationOptions</em>.</p>\\n<p>When run, the delegate will be passed as an argument this completed task.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), TNewResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1243\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes according the condition specified in <em>continuationOptions</em>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), TNewResult), continuationOptions As TaskContinuationOptions) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,{TNewResult}}\n      description: \"\\n<p>A function to run according the condition specified in <em>continuationOptions</em>.</p>\\n<p>When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), TNewResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskContinuationOptions)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult>, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1199\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), TNewResult), scheduler As TaskScheduler) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), TNewResult), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult>, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), TNewResult), TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, System.Object, TNewResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1363\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,System.Object,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Object, TNewResult), System.Object)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, System.Object, TNewResult>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1395\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, cancellationToken As CancellationToken) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,System.Object,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Object, TNewResult), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, System.Object, TNewResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1532\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,System.Object,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The  <em>continuationOptions</em>  argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Object, TNewResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, System.Object, TNewResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1475\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,System.Object,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Object, TNewResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, System.Object, TNewResult>, System.Object, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 1429\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TNewResult)(continuationFunction As Func(Of Task(Of TResult), Object, TNewResult), state As Object, scheduler As TaskScheduler) As Task(Of TNewResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task`1,System.Object,{TNewResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TNewResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TNewResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).ContinueWith(Of TNewResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Object, TNewResult), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>, Object, TNewResult>, Object, TaskScheduler)\n  nameWithType.vb: Task(Of TResult).ContinueWith(Of TNewResult)(Func(Of Task(Of TResult), Object, TNewResult), Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.GetAwaiter\n  commentId: M:System.Threading.Tasks.Task`1.GetAwaiter\n  id: GetAwaiter\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  - vb\n  name: GetAwaiter()\n  fullName: System.Threading.Tasks.Task<TResult>.GetAwaiter()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/future.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAwaiter\n    path: src/mscorlib/src/System/Threading/Tasks/future.cs\n    startLine: 692\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets an awaiter used to await this <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public TaskAwaiter<TResult> GetAwaiter()\n    content.vb: Public Function GetAwaiter As TaskAwaiter(Of TResult)\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter{{TResult}}\n      description: \"\\n<p>An awaiter instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task(Of TResult).GetAwaiter()\n  nameWithType: Task<TResult>.GetAwaiter()\n  nameWithType.vb: Task(Of TResult).GetAwaiter()\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  fullName: System.IAsyncResult\n  nameWithType: IAsyncResult\n  commentId: T:System.IAsyncResult\n- uid: System.Threading.Tasks.Task.AsyncState\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: AsyncState\n  fullName: System.Threading.Tasks.Task.AsyncState\n  nameWithType: Task.AsyncState\n  commentId: P:System.Threading.Tasks.Task.AsyncState\n- uid: System.Threading.Tasks.Task.CompletedTask\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CompletedTask\n  fullName: System.Threading.Tasks.Task.CompletedTask\n  nameWithType: Task.CompletedTask\n  commentId: P:System.Threading.Tasks.Task.CompletedTask\n- uid: System.Threading.Tasks.Task.CreationOptions\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CreationOptions\n  fullName: System.Threading.Tasks.Task.CreationOptions\n  nameWithType: Task.CreationOptions\n  commentId: P:System.Threading.Tasks.Task.CreationOptions\n- uid: System.Threading.Tasks.Task.CurrentId\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CurrentId\n  fullName: System.Threading.Tasks.Task.CurrentId\n  nameWithType: Task.CurrentId\n  commentId: P:System.Threading.Tasks.Task.CurrentId\n- uid: System.Threading.Tasks.Task.Exception\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Exception\n  fullName: System.Threading.Tasks.Task.Exception\n  nameWithType: Task.Exception\n  commentId: P:System.Threading.Tasks.Task.Exception\n- uid: System.Threading.Tasks.Task.Id\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Id\n  fullName: System.Threading.Tasks.Task.Id\n  nameWithType: Task.Id\n  commentId: P:System.Threading.Tasks.Task.Id\n- uid: System.Threading.Tasks.Task.IsCanceled\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCanceled\n  fullName: System.Threading.Tasks.Task.IsCanceled\n  nameWithType: Task.IsCanceled\n  commentId: P:System.Threading.Tasks.Task.IsCanceled\n- uid: System.Threading.Tasks.Task.IsCompleted\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompleted\n  fullName: System.Threading.Tasks.Task.IsCompleted\n  nameWithType: Task.IsCompleted\n  commentId: P:System.Threading.Tasks.Task.IsCompleted\n- uid: System.Threading.Tasks.Task.IsFaulted\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsFaulted\n  fullName: System.Threading.Tasks.Task.IsFaulted\n  nameWithType: Task.IsFaulted\n  commentId: P:System.Threading.Tasks.Task.IsFaulted\n- uid: System.Threading.Tasks.Task.Status\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Status\n  fullName: System.Threading.Tasks.Task.Status\n  nameWithType: Task.Status\n  commentId: P:System.Threading.Tasks.Task.Status\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IAsyncResult.AsyncWaitHandle\n  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle\n  name.vb: System.IAsyncResult.AsyncWaitHandle\n  nameWithType: Task.IAsyncResult.AsyncWaitHandle\n  nameWithType.vb: Task.System.IAsyncResult.AsyncWaitHandle\n  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IAsyncResult.CompletedSynchronously\n  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously\n  name.vb: System.IAsyncResult.CompletedSynchronously\n  nameWithType: Task.IAsyncResult.CompletedSynchronously\n  nameWithType.vb: Task.System.IAsyncResult.CompletedSynchronously\n  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task, Object>, Object)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object)\n  name.vb: ContinueWith(Action(Of Task, Object), Object)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task, Object>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task, Object>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task>)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task))\n  name.vb: ContinueWith(Action(Of Task))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task>)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task))\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Action(Of Task), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Action(Of Task), TaskContinuationOptions)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: ContinueWith(Action<Task>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task), TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith\n    fullName: System.Threading.Tasks.Task.ContinueWith\n  - name: (\n    fullName: (\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}})\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  name: ContinueWith<TResult>(Func<Task, TResult>)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult))\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult))\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  name: ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,{TResult}},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  name: ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,{TResult}},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Delay(Int32)\n  fullName: System.Threading.Tasks.Task.Delay(System.Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Delay(System.Int32)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Delay(System.Int32)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.Delay(Int32)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Delay(Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Delay(System.Int32, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Delay(Int32, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Delay(TimeSpan)\n  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.Delay(TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan)\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Delay(TimeSpan, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n    name: Delay\n    fullName: System.Threading.Tasks.Task.Delay\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Delay(TimeSpan, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled(CancellationToken)\n  fullName: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n    name: FromCanceled\n    fullName: System.Threading.Tasks.Task.FromCanceled\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n    name: FromCanceled\n    fullName: System.Threading.Tasks.Task.FromCanceled\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.FromCanceled(CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled<TResult>(CancellationToken)\n  fullName: System.Threading.Tasks.Task.FromCanceled<TResult>(System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.FromCanceled(Of TResult)(System.Threading.CancellationToken)\n  name.vb: FromCanceled(Of TResult)(CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n    name: FromCanceled<TResult>\n    fullName: System.Threading.Tasks.Task.FromCanceled<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n    name: FromCanceled(Of TResult)\n    fullName: System.Threading.Tasks.Task.FromCanceled(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.FromCanceled<TResult>(CancellationToken)\n  nameWithType.vb: Task.FromCanceled(Of TResult)(CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.FromException(System.Exception)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: FromException(Exception)\n  fullName: System.Threading.Tasks.Task.FromException(System.Exception)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.FromException(System.Exception)\n    name: FromException\n    fullName: System.Threading.Tasks.Task.FromException\n  - name: (\n    fullName: (\n  - uid: System.Exception\n    name: Exception\n    fullName: System.Exception\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.FromException(System.Exception)\n    name: FromException\n    fullName: System.Threading.Tasks.Task.FromException\n  - name: (\n    fullName: (\n  - uid: System.Exception\n    name: Exception\n    fullName: System.Exception\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.FromException(Exception)\n  commentId: M:System.Threading.Tasks.Task.FromException(System.Exception)\n- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: FromException<TResult>(Exception)\n  fullName: System.Threading.Tasks.Task.FromException<TResult>(System.Exception)\n  fullname.vb: System.Threading.Tasks.Task.FromException(Of TResult)(System.Exception)\n  name.vb: FromException(Of TResult)(Exception)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n    name: FromException<TResult>\n    fullName: System.Threading.Tasks.Task.FromException<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Exception\n    name: Exception\n    fullName: System.Exception\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n    name: FromException(Of TResult)\n    fullName: System.Threading.Tasks.Task.FromException(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Exception\n    name: Exception\n    fullName: System.Exception\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.FromException<TResult>(Exception)\n  nameWithType.vb: Task.FromException(Of TResult)(Exception)\n  commentId: M:System.Threading.Tasks.Task.FromException``1(System.Exception)\n- uid: System.Threading.Tasks.Task.FromResult``1({TResult})\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.FromResult``1(``0)\n  name: FromResult<TResult>(TResult)\n  fullName: System.Threading.Tasks.Task.FromResult<TResult>(TResult)\n  fullname.vb: System.Threading.Tasks.Task.FromResult(Of TResult)(TResult)\n  name.vb: FromResult(Of TResult)(TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.FromResult``1(``0)\n    name: FromResult<TResult>\n    fullName: System.Threading.Tasks.Task.FromResult<TResult>\n  - name: (\n    fullName: (\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.FromResult``1(``0)\n    name: FromResult(Of TResult)\n    fullName: System.Threading.Tasks.Task.FromResult(Of TResult)\n  - name: (\n    fullName: (\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task.FromResult<TResult>(TResult)\n  nameWithType.vb: Task.FromResult(Of TResult)(TResult)\n  commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)\n- uid: System.Threading.Tasks.Task.Run(System.Action)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Run(Action)\n  fullName: System.Threading.Tasks.Task.Run(System.Action)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run(System.Action)\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Action\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run(System.Action)\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Action\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.Run(Action)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Action)\n- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Run(Action, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run(System.Action, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Action\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Action\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Run(Action, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Run(Func<Task>)\n  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>)\n  fullname.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task))\n  name.vb: Run(Func(Of Task))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.Run(Func<Task>)\n  nameWithType.vb: Task.Run(Func(Of Task))\n  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Run(Func<Task>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)\n  name.vb: Run(Func(Of Task), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n    name: Run\n    fullName: System.Threading.Tasks.Task.Run\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Run(Func<Task>, CancellationToken)\n  nameWithType.vb: Task.Run(Func(Of Task), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{{TResult}})\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  name: Run<TResult>(Func<TResult>)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult))\n  name.vb: Run(Of TResult)(Func(Of TResult))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<TResult>)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult))\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0})\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{{TResult}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  name: Run<TResult>(Func<TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)\n  name.vb: Run(Of TResult)(Func(Of TResult), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{{TResult}}})\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  name: Run<TResult>(Func<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)))\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{{TResult}}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)\n  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.RunSynchronously\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously()\n  fullName: System.Threading.Tasks.Task.RunSynchronously()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.RunSynchronously\n    name: RunSynchronously\n    fullName: System.Threading.Tasks.Task.RunSynchronously\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.RunSynchronously\n    name: RunSynchronously\n    fullName: System.Threading.Tasks.Task.RunSynchronously\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Task.RunSynchronously()\n  commentId: M:System.Threading.Tasks.Task.RunSynchronously\n- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously(TaskScheduler)\n  fullName: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n    name: RunSynchronously\n    fullName: System.Threading.Tasks.Task.RunSynchronously\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n    name: RunSynchronously\n    fullName: System.Threading.Tasks.Task.RunSynchronously\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.RunSynchronously(TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.Start\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start()\n  fullName: System.Threading.Tasks.Task.Start()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Start\n    name: Start\n    fullName: System.Threading.Tasks.Task.Start\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Start\n    name: Start\n    fullName: System.Threading.Tasks.Task.Start\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Task.Start()\n  commentId: M:System.Threading.Tasks.Task.Start\n- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start(TaskScheduler)\n  fullName: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n    name: Start\n    fullName: System.Threading.Tasks.Task.Start\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n    name: Start\n    fullName: System.Threading.Tasks.Task.Start\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.Start(TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.Wait\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait()\n  fullName: System.Threading.Tasks.Task.Wait()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Wait\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Wait\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Task.Wait()\n  commentId: M:System.Threading.Tasks.Task.Wait\n- uid: System.Threading.Tasks.Task.Wait(System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Wait(Int32)\n  fullName: System.Threading.Tasks.Task.Wait(System.Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Wait(System.Int32)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Wait(System.Int32)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.Wait(Int32)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32)\n- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Wait(Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Wait(System.Int32, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Wait(Int32, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(CancellationToken)\n  fullName: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Wait(CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: Wait(TimeSpan)\n  fullName: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n    name: Wait\n    fullName: System.Threading.Tasks.Task.Wait\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.Wait(TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[])\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  fullname.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task())\n  name.vb: WaitAll(Task())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAll(Task[])\n  nameWithType.vb: Task.WaitAll(Task())\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WaitAll(Task[], Int32)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32)\n  fullname.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32)\n  name.vb: WaitAll(Task(), Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAll(Task[], Int32)\n  nameWithType.vb: Task.WaitAll(Task(), Int32)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WaitAll(Task[], Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)\n  name.vb: WaitAll(Task(), Int32, CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)\n  nameWithType.vb: Task.WaitAll(Task(), Int32, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Threading.CancellationToken)\n  name.vb: WaitAll(Task(), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAll(Task[], CancellationToken)\n  nameWithType.vb: Task.WaitAll(Task(), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WaitAll(Task[], TimeSpan)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.TimeSpan)\n  fullname.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.TimeSpan)\n  name.vb: WaitAll(Task(), TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n    name: WaitAll\n    fullName: System.Threading.Tasks.Task.WaitAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAll(Task[], TimeSpan)\n  nameWithType.vb: Task.WaitAll(Task(), TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[])\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  fullname.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task())\n  name.vb: WaitAny(Task())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAny(Task[])\n  nameWithType.vb: Task.WaitAny(Task())\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WaitAny(Task[], Int32)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32)\n  fullname.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32)\n  name.vb: WaitAny(Task(), Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAny(Task[], Int32)\n  nameWithType.vb: Task.WaitAny(Task(), Int32)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WaitAny(Task[], Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)\n  name.vb: WaitAny(Task(), Int32, CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)\n  nameWithType.vb: Task.WaitAny(Task(), Int32, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Threading.CancellationToken)\n  name.vb: WaitAny(Task(), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAny(Task[], CancellationToken)\n  nameWithType.vb: Task.WaitAny(Task(), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WaitAny(Task[], TimeSpan)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.TimeSpan)\n  fullname.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.TimeSpan)\n  name.vb: WaitAny(Task(), TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n    name: WaitAny\n    fullName: System.Threading.Tasks.Task.WaitAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.WaitAny(Task[], TimeSpan)\n  nameWithType.vb: Task.WaitAny(Task(), TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WhenAll(IEnumerable<Task>)\n  fullName: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)\n  fullname.vb: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))\n  name.vb: WhenAll(IEnumerable(Of Task))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n    name: WhenAll\n    fullName: System.Threading.Tasks.Task.WhenAll\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n    name: WhenAll\n    fullName: System.Threading.Tasks.Task.WhenAll\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAll(IEnumerable<Task>)\n  nameWithType.vb: Task.WhenAll(IEnumerable(Of Task))\n  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll(Task[])\n  fullName: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  fullname.vb: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task())\n  name.vb: WhenAll(Task())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n    name: WhenAll\n    fullName: System.Threading.Tasks.Task.WhenAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n    name: WhenAll\n    fullName: System.Threading.Tasks.Task.WhenAll\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAll(Task[])\n  nameWithType.vb: Task.WhenAll(Task())\n  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}})\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)\n  fullname.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAll<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAll<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAll(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAll(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType.vb: Task.WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{{TResult}}[])\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  name: WhenAll<TResult>(Task<TResult>[])\n  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Threading.Tasks.Task<TResult>[])\n  fullname.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Threading.Tasks.Task(Of TResult)())\n  name.vb: WhenAll(Of TResult)(Task(Of TResult)())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAll<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAll<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAll(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAll(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])\n  nameWithType.vb: Task.WhenAll(Of TResult)(Task(Of TResult)())\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: true\n  name: WhenAny(IEnumerable<Task>)\n  fullName: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)\n  fullname.vb: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))\n  name.vb: WhenAny(IEnumerable(Of Task))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n    name: WhenAny\n    fullName: System.Threading.Tasks.Task.WhenAny\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n    name: WhenAny\n    fullName: System.Threading.Tasks.Task.WhenAny\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAny(IEnumerable<Task>)\n  nameWithType.vb: Task.WhenAny(IEnumerable(Of Task))\n  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny(Task[])\n  fullName: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  fullname.vb: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task())\n  name.vb: WhenAny(Task())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n    name: WhenAny\n    fullName: System.Threading.Tasks.Task.WhenAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n    name: WhenAny\n    fullName: System.Threading.Tasks.Task.WhenAny\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAny(Task[])\n  nameWithType.vb: Task.WhenAny(Task())\n  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}})\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)\n  fullname.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAny<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAny<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAny(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAny(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType.vb: Task.WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{{TResult}}[])\n  parent: System.Threading.Tasks.Task\n  definition: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  name: WhenAny<TResult>(Task<TResult>[])\n  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Threading.Tasks.Task<TResult>[])\n  fullname.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Threading.Tasks.Task(Of TResult)())\n  name.vb: WhenAny(Of TResult)(Task(Of TResult)())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAny<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAny<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAny(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAny(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])\n  nameWithType.vb: Task.WhenAny(Of TResult)(Task(Of TResult)())\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n- uid: System.Threading.Tasks.Task.Yield\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Yield()\n  fullName: System.Threading.Tasks.Task.Yield()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Yield\n    name: Yield\n    fullName: System.Threading.Tasks.Task.Yield\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Yield\n    name: Yield\n    fullName: System.Threading.Tasks.Task.Yield\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Task.Yield()\n  commentId: M:System.Threading.Tasks.Task.Yield\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, TResult>)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult))\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult))\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskContinuationOptions\n    name: TaskContinuationOptions\n    fullName: System.Threading.Tasks.TaskContinuationOptions\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  isExternal: true\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskScheduler)\n  fullname.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith<TResult>\n    fullName: System.Threading.Tasks.Task.ContinueWith<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n    name: ContinueWith(Of TResult)\n    fullName: System.Threading.Tasks.Task.ContinueWith(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.TaskScheduler\n    name: TaskScheduler\n    fullName: System.Threading.Tasks.TaskScheduler\n  - name: )\n    fullName: )\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n- uid: System.Threading.Tasks.Task.FromResult``1(``0)\n  isExternal: false\n  name: FromResult<TResult>(TResult)\n  fullName: System.Threading.Tasks.Task.FromResult<TResult>(TResult)\n  fullname.vb: System.Threading.Tasks.Task.FromResult(Of TResult)(TResult)\n  name.vb: FromResult(Of TResult)(TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.FromResult``1(``0)\n    name: FromResult<TResult>\n    fullName: System.Threading.Tasks.Task.FromResult<TResult>\n  - name: (\n    fullName: (\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.FromResult``1(``0)\n    name: FromResult(Of TResult)\n    fullName: System.Threading.Tasks.Task.FromResult(Of TResult)\n  - name: (\n    fullName: (\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task.FromResult<TResult>(TResult)\n  nameWithType.vb: Task.FromResult(Of TResult)(TResult)\n  commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  isExternal: true\n  name: Run<TResult>(Func<TResult>)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult))\n  name.vb: Run(Of TResult)(Func(Of TResult))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<TResult>)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult))\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0})\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  isExternal: true\n  name: Run<TResult>(Func<TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)\n  name.vb: Run(Of TResult)(Func(Of TResult), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  isExternal: true\n  name: Run<TResult>(Func<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)))\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  isExternal: true\n  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)\n  fullname.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)\n  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n    name: Run<TResult>\n    fullName: System.Threading.Tasks.Task.Run<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n    name: Run(Of TResult)\n    fullName: System.Threading.Tasks.Task.Run(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: )\n    fullName: )\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  isExternal: true\n  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)\n  fullname.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAll<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAll<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAll(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAll(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType.vb: Task.WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  isExternal: false\n  name: WhenAll<TResult>(Task<TResult>[])\n  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Threading.Tasks.Task<TResult>[])\n  fullname.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Threading.Tasks.Task(Of TResult)())\n  name.vb: WhenAll(Of TResult)(Task(Of TResult)())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAll<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAll<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAll(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAll(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])\n  nameWithType.vb: Task.WhenAll(Of TResult)(Task(Of TResult)())\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  isExternal: true\n  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)\n  fullname.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAny<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAny<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n    name: WhenAny(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAny(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType.vb: Task.WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  isExternal: false\n  name: WhenAny<TResult>(Task<TResult>[])\n  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Threading.Tasks.Task<TResult>[])\n  fullname.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Threading.Tasks.Task(Of TResult)())\n  name.vb: WhenAny(Of TResult)(Task(Of TResult)())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAny<TResult>\n    fullName: System.Threading.Tasks.Task.WhenAny<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n    name: WhenAny(Of TResult)\n    fullName: System.Threading.Tasks.Task.WhenAny(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])\n  nameWithType.vb: Task.WhenAny(Of TResult)(Task(Of TResult)())\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n- uid: System.Func{{TResult}}\n  parent: System\n  definition: System.Func`1\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func{``0}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  commentId: T:System.Threading.Tasks.TaskCreationOptions\n- uid: System.Func{System.Object,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Object, TResult>\n  fullName: System.Func<System.Object, TResult>\n  fullname.vb: System.Func(Of System.Object, TResult)\n  name.vb: Func(Of Object, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Object, TResult>\n  nameWithType.vb: Func(Of Object, TResult)\n  commentId: T:System.Func{System.Object,`0}\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n  commentId: T:System.Func`2\n- uid: System.Threading.Tasks.TaskFactory{{TResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.TaskFactory`1\n  name: TaskFactory<TResult>\n  fullName: System.Threading.Tasks.TaskFactory<TResult>\n  fullname.vb: System.Threading.Tasks.TaskFactory(Of TResult)\n  name.vb: TaskFactory(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.TaskFactory`1\n    name: TaskFactory\n    fullName: System.Threading.Tasks.TaskFactory\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.TaskFactory`1\n    name: TaskFactory\n    fullName: System.Threading.Tasks.TaskFactory\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: TaskFactory<TResult>\n  nameWithType.vb: TaskFactory(Of TResult)\n  commentId: T:System.Threading.Tasks.TaskFactory{`0}\n- uid: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>\n  fullName: System.Threading.Tasks.TaskFactory<TResult>\n  fullname.vb: System.Threading.Tasks.TaskFactory(Of TResult)\n  name.vb: TaskFactory(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.TaskFactory`1\n    name: TaskFactory\n    fullName: System.Threading.Tasks.TaskFactory\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.TaskFactory`1\n    name: TaskFactory\n    fullName: System.Threading.Tasks.TaskFactory\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: TaskFactory<TResult>\n  nameWithType.vb: TaskFactory(Of TResult)\n  commentId: T:System.Threading.Tasks.TaskFactory`1\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n  commentId: '!:TResult'\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable{{TResult}}\n  parent: System.Runtime.CompilerServices\n  definition: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n  name: ConfiguredTaskAwaitable<TResult>\n  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>\n  fullname.vb: System.Runtime.CompilerServices.ConfiguredTaskAwaitable(Of TResult)\n  name.vb: ConfiguredTaskAwaitable(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n    name: ConfiguredTaskAwaitable\n    fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n    name: ConfiguredTaskAwaitable\n    fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: ConfiguredTaskAwaitable<TResult>\n  nameWithType.vb: ConfiguredTaskAwaitable(Of TResult)\n  commentId: T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable{`0}\n- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n  isExternal: false\n  name: ConfiguredTaskAwaitable<TResult>\n  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>\n  fullname.vb: System.Runtime.CompilerServices.ConfiguredTaskAwaitable(Of TResult)\n  name.vb: ConfiguredTaskAwaitable(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n    name: ConfiguredTaskAwaitable\n    fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n    name: ConfiguredTaskAwaitable\n    fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: ConfiguredTaskAwaitable<TResult>\n  nameWithType.vb: ConfiguredTaskAwaitable(Of TResult)\n  commentId: T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Action{System.Threading.Tasks.Task`1,System.Object}\n  parent: System\n  definition: System.Action`2\n  name: Action<Task<TResult>, Object>\n  fullName: System.Action<System.Threading.Tasks.Task<TResult>, System.Object>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TResult), System.Object)\n  name.vb: Action(Of Task(Of TResult), Object)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Task<TResult>, Object>\n  nameWithType.vb: Action(Of Task(Of TResult), Object)\n  commentId: T:System.Action{System.Threading.Tasks.Task`1,System.Object}\n- uid: System.Action`2\n  isExternal: false\n  name: Action<T1, T2>\n  fullName: System.Action<T1, T2>\n  fullname.vb: System.Action(Of T1, T2)\n  name.vb: Action(Of T1, T2)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: )\n    fullName: )\n  nameWithType: Action<T1, T2>\n  nameWithType.vb: Action(Of T1, T2)\n  commentId: T:System.Action`2\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  commentId: T:System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  nameWithType: TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n- uid: System.Action{System.Threading.Tasks.Task`1}\n  parent: System\n  definition: System.Action`1\n  name: Action<Task<TResult>>\n  fullName: System.Action<System.Threading.Tasks.Task<TResult>>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TResult))\n  name.vb: Action(Of Task(Of TResult))\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Action<Task<TResult>>\n  nameWithType.vb: Action(Of Task(Of TResult))\n  commentId: T:System.Action{System.Threading.Tasks.Task`1}\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n  commentId: T:System.Action`1\n- uid: System.Func{System.Threading.Tasks.Task`1,{TNewResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task<TResult>, TNewResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TResult>, TNewResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult), TNewResult)\n  name.vb: Func(Of Task(Of TResult), TNewResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TNewResult\n    fullName: TNewResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TNewResult\n    fullName: TNewResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TResult>, TNewResult>\n  nameWithType.vb: Func(Of Task(Of TResult), TNewResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task`1,``0}\n- uid: System.Threading.Tasks.Task{{TNewResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TNewResult>\n  fullName: System.Threading.Tasks.Task<TNewResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TNewResult)\n  name.vb: Task(Of TNewResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TNewResult\n    fullName: TNewResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TNewResult\n    fullName: TNewResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TNewResult>\n  nameWithType.vb: Task(Of TNewResult)\n  commentId: T:System.Threading.Tasks.Task{``0}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Func{System.Threading.Tasks.Task`1,System.Object,{TNewResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<Task<TResult>, Object, TNewResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TResult>, System.Object, TNewResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Object, TNewResult)\n  name.vb: Func(Of Task(Of TResult), Object, TNewResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TNewResult\n    fullName: TNewResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TNewResult\n    fullName: TNewResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TResult>, Object, TNewResult>\n  nameWithType.vb: Func(Of Task(Of TResult), Object, TNewResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task`1,System.Object,``0}\n- uid: System.Func`3\n  isExternal: false\n  name: Func<T1, T2, TResult>\n  fullName: System.Func<T1, T2, TResult>\n  fullname.vb: System.Func(Of T1, T2, TResult)\n  name.vb: Func(Of T1, T2, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, TResult>\n  nameWithType.vb: Func(Of T1, T2, TResult)\n  commentId: T:System.Func`3\n- uid: System.Runtime.CompilerServices.TaskAwaiter{{TResult}}\n  parent: System.Runtime.CompilerServices\n  definition: System.Runtime.CompilerServices.TaskAwaiter`1\n  name: TaskAwaiter<TResult>\n  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>\n  fullname.vb: System.Runtime.CompilerServices.TaskAwaiter(Of TResult)\n  name.vb: TaskAwaiter(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: TaskAwaiter<TResult>\n  nameWithType.vb: TaskAwaiter(Of TResult)\n  commentId: T:System.Runtime.CompilerServices.TaskAwaiter{`0}\n- uid: System.Runtime.CompilerServices.TaskAwaiter`1\n  isExternal: false\n  name: TaskAwaiter<TResult>\n  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>\n  fullname.vb: System.Runtime.CompilerServices.TaskAwaiter(Of TResult)\n  name.vb: TaskAwaiter(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: TaskAwaiter<TResult>\n  nameWithType.vb: TaskAwaiter(Of TResult)\n  commentId: T:System.Runtime.CompilerServices.TaskAwaiter`1\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  fullName: System.AggregateException\n  nameWithType: AggregateException\n  commentId: T:System.AggregateException\n"}