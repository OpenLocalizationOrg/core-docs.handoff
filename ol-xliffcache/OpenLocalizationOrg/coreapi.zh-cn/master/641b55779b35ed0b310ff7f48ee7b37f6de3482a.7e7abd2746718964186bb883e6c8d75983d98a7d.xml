{"nodes":[{"pos":[1350,1362],"content":"XmlAttribute","needQuote":true,"nodes":[{"content":"XmlAttribute","pos":[0,12]}]},{"pos":[4048,4097],"content":"XmlAttribute(String, String, String, XmlDocument)","needQuote":true,"nodes":[{"content":"XmlAttribute(String, String, String, XmlDocument)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[5023,5055],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[5123,5166],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace uniform resource identifier (URI).&lt;/p&gt;\\n","pos":[5237,5296],"source":"\\n<p>The namespace uniform resource identifier (URI).</p>\\n"},{"content":"\\n&lt;p&gt;The parent XML document.&lt;/p&gt;\\n","pos":[5367,5402],"source":"\\n<p>The parent XML document.</p>\\n"},{"pos":[5716,5723],"content":"BaseURI","needQuote":true,"nodes":[{"content":"BaseURI","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The location from which the node was loaded or String.Empty if the node has no base URI.","pos":[6406,6499],"source":"\\n<p>The location from which the node was loaded or String.Empty if the node has no base URI."},{"content":"Attribute nodes have the same base URI as their owner element.","pos":[6500,6562]},{"content":"If an attribute node does not have an owner element, &lt;strong&gt;BaseURI&lt;/strong&gt; returns String.Empty.&lt;/p&gt;\\n","pos":[6563,6668],"source":" If an attribute node does not have an owner element, <strong>BaseURI</strong> returns String.Empty.</p>\\n"},{"pos":[7141,7150],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"pos":[8631,8639],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The attribute value.&lt;/p&gt;\\n","pos":[9299,9330],"source":"\\n<p>The attribute value.</p>\\n"},{"content":"\\n&lt;p&gt;The XML specified when setting this property is not well-formed.&lt;/p&gt;\\n","pos":[9481,9556],"source":"\\n<p>The XML specified when setting this property is not well-formed.</p>\\n"},{"pos":[10067,10076],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The name of the attribute node with the prefix removed.","pos":[10739,10799],"source":"\\n<p>The name of the attribute node with the prefix removed."},{"content":"In the following example &lt;book bk:genre= 'novel'&gt;, the &lt;strong&gt;LocalName&lt;/strong&gt; of the attribute is &lt;strong&gt;genre&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10800,10931],"source":" In the following example <book bk:genre= 'novel'>, the <strong>LocalName</strong> of the attribute is <strong>genre</strong>.</p>\\n"},{"pos":[11281,11285],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The qualified name of the attribute node.&lt;/p&gt;\\n","pos":[11932,11984],"source":"\\n<p>The qualified name of the attribute node.</p>\\n"},{"pos":[12454,12466],"content":"NamespaceURI","needQuote":true,"nodes":[{"content":"NamespaceURI","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The namespace URI of this node.","pos":[13145,13181],"source":"\\n<p>The namespace URI of this node."},{"content":"If the attribute is not explicitly given a namespace, this property returns String.Empty.&lt;/p&gt;\\n","pos":[13182,13277],"source":" If the attribute is not explicitly given a namespace, this property returns String.Empty.</p>\\n"},{"pos":[13645,13653],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The node type for &lt;strong&gt;XmlAttribute&lt;/strong&gt; nodes is XmlNodeType.Attribute.&lt;/p&gt;\\n","pos":[14333,14423],"source":"\\n<p>The node type for <strong>XmlAttribute</strong> nodes is XmlNodeType.Attribute.</p>\\n"},{"pos":[14882,14895],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An XML document to which this node belongs.&lt;/p&gt;\\n","pos":[15680,15734],"source":"\\n<p>An XML document to which this node belongs.</p>\\n"},{"pos":[16116,16128],"content":"OwnerElement","needQuote":true,"nodes":[{"content":"OwnerElement","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlElement&lt;/strong&gt; that the attribute belongs to or &lt;strong&gt;null&lt;/strong&gt; if this attribute is not part of an &lt;strong&gt;XmlElement&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16910,17072],"source":"\\n<p>The <strong>XmlElement</strong> that the attribute belongs to or <strong>null</strong> if this attribute is not part of an <strong>XmlElement</strong>.</p>\\n"},{"pos":[17401,17411],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"content":"\\n&lt;p&gt;For &lt;strong&gt;XmlAttribute&lt;/strong&gt; nodes, this property always returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18175,18278],"source":"\\n<p>For <strong>XmlAttribute</strong> nodes, this property always returns <strong>null</strong>.</p>\\n"},{"pos":[18636,18642],"content":"Prefix","needQuote":true,"nodes":[{"content":"Prefix","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The namespace prefix of this node.","pos":[19304,19343],"source":"\\n<p>The namespace prefix of this node."},{"content":"If there is no prefix, this property returns String.Empty.&lt;/p&gt;\\n","pos":[19344,19408],"source":" If there is no prefix, this property returns String.Empty.</p>\\n"},{"content":"\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n","pos":[19559,19593],"source":"\\n<p>This node is read-only.</p>\\n"},{"pos":[20560,20569],"content":"Specified","needQuote":true,"nodes":[{"content":"Specified","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this attribute was explicitly given a value in the original instance document; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[21272,21417],"source":"\\n<p>\\n<strong>true</strong> if this attribute was explicitly given a value in the original instance document; otherwise, <strong>false</strong>."},{"content":"A value of &lt;strong&gt;false&lt;/strong&gt; indicates that the value of the attribute came from the DTD.&lt;/p&gt;\\n","pos":[21418,21518],"source":" A value of <strong>false</strong> indicates that the value of the attribute came from the DTD.</p>\\n"},{"pos":[21829,21834],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The node is read-only and a set operation is called.&lt;/p&gt;\\n","pos":[22857,22920],"source":"\\n<p>The node is read-only and a set operation is called.</p>\\n"},{"pos":[23299,23319],"content":"AppendChild(XmlNode)","needQuote":true,"nodes":[{"content":"AppendChild(XmlNode)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.&lt;/p&gt;\\n","pos":[24542,24709],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n","pos":[24806,24945],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n"},{"pos":[25305,25323],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to recursively clone the subtree under the specified node; &lt;strong&gt;false&lt;/strong&gt; to clone only the node itself &lt;/p&gt;\\n","pos":[26014,26161],"source":"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself </p>\\n"},{"content":"\\n&lt;p&gt;The duplicate node.&lt;/p&gt;\\n","pos":[26226,26256],"source":"\\n<p>The duplicate node.</p>\\n"},{"pos":[26830,26859],"content":"InsertAfter(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertAfter(XmlNode, XmlNode)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.&lt;/p&gt;\\n","pos":[28418,28585],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;refChild&lt;/em&gt; is not a child of this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n","pos":[28682,28880],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only.</p>\\n"},{"pos":[29327,29357],"content":"InsertBefore(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertBefore(XmlNode, XmlNode)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The current node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.&lt;/p&gt;\\n","pos":[30911,31085],"source":"\\n<p>The current node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;refChild&lt;/em&gt; is not a child of this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n","pos":[31182,31380],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only.</p>\\n"},{"pos":[31771,31792],"content":"PrependChild(XmlNode)","needQuote":true,"nodes":[{"content":"PrependChild(XmlNode)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.&lt;/p&gt;\\n","pos":[33219,33386],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n","pos":[33483,33622],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n"},{"pos":[34001,34021],"content":"RemoveChild(XmlNode)","needQuote":true,"nodes":[{"content":"RemoveChild(XmlNode)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;oldChild&lt;/em&gt; is not a child of this node.","pos":[35190,35245],"source":"\\n<p>The <em>oldChild</em> is not a child of this node."},{"content":"Or this node is read-only.&lt;/p&gt;\\n","pos":[35246,35278],"source":" Or this node is read-only.</p>\\n"},{"pos":[35716,35746],"content":"ReplaceChild(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"ReplaceChild(XmlNode, XmlNode)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.&lt;/p&gt;\\n","pos":[37227,37394],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;oldChild&lt;/em&gt; is not a child of this node.&lt;/p&gt;\\n","pos":[37491,37689],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n<p>The <em>oldChild</em> is not a child of this node.</p>\\n"},{"pos":[38092,38117],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.&lt;/p&gt;\\n","pos":[38919,38987],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save.</p>\\n"},{"pos":[39434,39452],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.&lt;/p&gt;\\n","pos":[40206,40274],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save.</p>\\n"},{"pos":[40530,40540],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[40683,40689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40843,40850],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[41035,41046],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41258,41268],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[41485,41495],"content":"ChildNodes","needQuote":true,"nodes":[{"content":"ChildNodes","pos":[0,10]}]},{"pos":[41712,41722],"content":"FirstChild","needQuote":true,"nodes":[{"content":"FirstChild","pos":[0,10]}]},{"pos":[41942,41955],"content":"HasChildNodes","needQuote":true,"nodes":[{"content":"HasChildNodes","pos":[0,13]}]},{"pos":[42181,42191],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[42416,42428],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[42631,42635],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[42685,42686]},{"pos":[42739,42745],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[42806,42807]},{"pos":[42896,42900],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[42949,42950],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43000,43006],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43066,43067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43331,43351],"content":"Item[String, String]","needQuote":true,"nodes":[{"content":"Item[String, String]","pos":[0,20]}]},{"pos":[43606,43610],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[43660,43661]},{"pos":[43714,43720],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[43781,43782]},{"pos":[43837,43843],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[43904,43905]},{"pos":[44008,44012],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[44061,44062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44112,44118],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[44179,44180]},{"pos":[44235,44241],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44301,44302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44573,44582],"content":"LastChild","needQuote":true,"nodes":[{"content":"LastChild","pos":[0,9]}]},{"pos":[44797,44808],"content":"NextSibling","needQuote":true,"nodes":[{"content":"NextSibling","pos":[0,11]}]},{"pos":[45026,45034],"content":"OuterXml","needQuote":true,"nodes":[{"content":"OuterXml","pos":[0,8]}]},{"pos":[45250,45265],"content":"PreviousSibling","needQuote":true,"nodes":[{"content":"PreviousSibling","pos":[0,15]}]},{"pos":[45499,45511],"content":"PreviousText","needQuote":true,"nodes":[{"content":"PreviousText","pos":[0,12]}]},{"pos":[45737,45752],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[45867,45880],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[45938,45939],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45966,45967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46047,46060],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[46118,46119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46146,46147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46370,46398],"content":"GetNamespaceOfPrefix(String)","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix(String)","pos":[0,28]}]},{"pos":[46555,46575],"content":"GetNamespaceOfPrefix","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix","pos":[0,20]}]},{"pos":[46640,46641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46691,46697],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[46757,46758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46860,46880],"content":"GetNamespaceOfPrefix","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix","pos":[0,20]}]},{"pos":[46945,46946],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46996,47002],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47062,47063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47321,47349],"content":"GetPrefixOfNamespace(String)","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace(String)","pos":[0,28]}]},{"pos":[47506,47526],"content":"GetPrefixOfNamespace","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace","pos":[0,20]}]},{"pos":[47591,47592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47642,47648],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47708,47709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47811,47831],"content":"GetPrefixOfNamespace","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace","pos":[0,20]}]},{"pos":[47896,47897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47947,47953],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[48013,48014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48247,48258],"content":"Normalize()","needQuote":true,"nodes":[{"content":"Normalize()","pos":[0,11]}]},{"pos":[48365,48374],"content":"Normalize","needQuote":true,"nodes":[{"content":"Normalize","pos":[0,9]}]},{"pos":[48428,48429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48456,48457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48533,48542],"content":"Normalize","needQuote":true,"nodes":[{"content":"Normalize","pos":[0,9]}]},{"pos":[48596,48597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48624,48625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48815,48826],"content":"RemoveAll()","needQuote":true,"nodes":[{"content":"RemoveAll()","pos":[0,11]}]},{"pos":[48933,48942],"content":"RemoveAll","needQuote":true,"nodes":[{"content":"RemoveAll","pos":[0,9]}]},{"pos":[48996,48997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49024,49025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49101,49110],"content":"RemoveAll","needQuote":true,"nodes":[{"content":"RemoveAll","pos":[0,9]}]},{"pos":[49164,49165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49192,49193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49410,49434],"content":"Supports(String, String)","needQuote":true,"nodes":[{"content":"Supports(String, String)","pos":[0,24]}]},{"pos":[49596,49604],"content":"Supports","needQuote":true,"nodes":[{"content":"Supports","pos":[0,8]}]},{"pos":[49657,49658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49708,49714],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[49775,49776]},{"pos":[49831,49837],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[49897,49898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50002,50010],"content":"Supports","needQuote":true,"nodes":[{"content":"Supports","pos":[0,8]}]},{"pos":[50063,50064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50114,50120],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[50181,50182]},{"pos":[50237,50243],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[50303,50304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50570,50597],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[50832,50857],"content":"IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator","pos":[0,25]}]},{"pos":[50946,50947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50974,50975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51086,51130],"content":"System.Collections.IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator","pos":[0,44]}]},{"pos":[51219,51220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51247,51248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51551,51561],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[51656,51664],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51733,51734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51761,51762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51832,51840],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51909,51910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51937,51938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52121,52135],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[52254,52260],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52327,52328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52378,52384],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52444,52445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52528,52534],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52601,52602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52652,52658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52718,52719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52933,52955],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[53103,53109],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53176,53177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53227,53233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53294,53295]},{"pos":[53350,53356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53416,53417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53514,53520],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53587,53588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53638,53644],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53705,53706]},{"pos":[53761,53767],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53827,53828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54073,54104],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[54270,54285],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[54361,54362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54412,54418],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54479,54480]},{"pos":[54535,54541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54601,54602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54708,54723],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[54799,54800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54850,54856],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54917,54918]},{"pos":[54973,54979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55039,55040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55270,55283],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[55384,55395],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[55467,55468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55495,55496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55569,55580],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[55652,55653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55680,55681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55856,55865],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[55958,55965],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[56033,56034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56061,56062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56131,56138],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[56206,56207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56234,56235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56410,56427],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[56536,56551],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[56627,56628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56655,56656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56733,56748],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[56824,56825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56852,56853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57148,57161],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[57278,57289],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[57348,57349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57376,57377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57458,57469],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[57528,57529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57556,57557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57912,57924],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[58057,58067],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[58134,58135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58162,58163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58252,58262],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[58329,58330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58357,58358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58699,58714],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[58918,58931],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[58993,58994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59021,59022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59100,59116],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[59181,59182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59209,59210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59588,59605],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[59817,59832],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[59896,59897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59924,59925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60005,60023],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[60090,60091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60118,60119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60354,60360],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[60479,60497],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[60698,60722],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[60901,60912],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[60971,60972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61039,61050],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[61127,61128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61241,61252],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[61311,61312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61379,61390],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[61467,61468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61696,61705],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[61911,61934],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[62129,62139],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[62206,62207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62274,62285],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62362,62363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62484,62494],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[62561,62562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62629,62640],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62717,62718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62971,62989],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[63211,63237],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[63544,63557],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[63619,63620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63687,63698],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[63775,63776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63886,63902],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[63967,63968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64035,64046],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[64123,64124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64413,64423],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[64623,64651],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[64966,64981],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[65045,65046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65113,65124],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65201,65202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65314,65332],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[65399,65400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65467,65478],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65555,65556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65818,65829],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[65975,65981],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[66139,66150],"content":"XmlDocument","needQuote":true,"nodes":[{"content":"XmlDocument","pos":[0,11]}]},{"pos":[66343,66350],"content":"BaseURI","needQuote":true,"nodes":[{"content":"BaseURI","pos":[0,7]}]},{"pos":[66557,66566],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"pos":[66778,66786],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"pos":[66996,67005],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"pos":[67213,67217],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[67418,67430],"content":"NamespaceURI","needQuote":true,"nodes":[{"content":"NamespaceURI","pos":[0,12]}]},{"pos":[67651,67659],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[67855,67866],"content":"XmlNodeType","needQuote":true,"nodes":[{"content":"XmlNodeType","pos":[0,11]}]},{"pos":[68065,68078],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"pos":[68288,68298],"content":"XmlElement","needQuote":true,"nodes":[{"content":"XmlElement","pos":[0,10]}]},{"pos":[68491,68501],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"pos":[68714,68720],"content":"Prefix","needQuote":true,"nodes":[{"content":"Prefix","pos":[0,6]}]},{"pos":[68898,68905],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[69076,69081],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[69304,69324],"content":"AppendChild(XmlNode)","needQuote":true,"nodes":[{"content":"AppendChild(XmlNode)","pos":[0,20]}]},{"pos":[69473,69484],"content":"AppendChild","needQuote":true,"nodes":[{"content":"AppendChild","pos":[0,11]}]},{"pos":[69540,69541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69596,69603],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[69647,69648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69746,69757],"content":"AppendChild","needQuote":true,"nodes":[{"content":"AppendChild","pos":[0,11]}]},{"pos":[69813,69814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69869,69876],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[69920,69921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70157,70175],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"pos":[70312,70321],"content":"CloneNode","needQuote":true,"nodes":[{"content":"CloneNode","pos":[0,9]}]},{"pos":[70375,70376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70427,70434],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[70495,70496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70588,70597],"content":"CloneNode","needQuote":true,"nodes":[{"content":"CloneNode","pos":[0,9]}]},{"pos":[70651,70652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70703,70710],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[70771,70772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71026,71055],"content":"InsertAfter(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertAfter(XmlNode, XmlNode)","pos":[0,29]}]},{"pos":[71243,71254],"content":"InsertAfter","needQuote":true,"nodes":[{"content":"InsertAfter","pos":[0,11]}]},{"pos":[71310,71311],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71366,71373],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[71418,71419]},{"pos":[71479,71486],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[71530,71531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71648,71659],"content":"InsertAfter","needQuote":true,"nodes":[{"content":"InsertAfter","pos":[0,11]}]},{"pos":[71715,71716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71771,71778],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[71823,71824]},{"pos":[71884,71891],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[71935,71936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72227,72257],"content":"InsertBefore(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertBefore(XmlNode, XmlNode)","pos":[0,30]}]},{"pos":[72447,72459],"content":"InsertBefore","needQuote":true,"nodes":[{"content":"InsertBefore","pos":[0,12]}]},{"pos":[72516,72517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72572,72579],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[72624,72625]},{"pos":[72685,72692],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[72736,72737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72855,72867],"content":"InsertBefore","needQuote":true,"nodes":[{"content":"InsertBefore","pos":[0,12]}]},{"pos":[72924,72925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72980,72987],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[73032,73033]},{"pos":[73093,73100],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[73144,73145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73419,73440],"content":"PrependChild(XmlNode)","needQuote":true,"nodes":[{"content":"PrependChild(XmlNode)","pos":[0,21]}]},{"pos":[73591,73603],"content":"PrependChild","needQuote":true,"nodes":[{"content":"PrependChild","pos":[0,12]}]},{"pos":[73660,73661],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73716,73723],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[73767,73768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73867,73879],"content":"PrependChild","needQuote":true,"nodes":[{"content":"PrependChild","pos":[0,12]}]},{"pos":[73936,73937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73992,73999],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[74043,74044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74289,74309],"content":"RemoveChild(XmlNode)","needQuote":true,"nodes":[{"content":"RemoveChild(XmlNode)","pos":[0,20]}]},{"pos":[74458,74469],"content":"RemoveChild","needQuote":true,"nodes":[{"content":"RemoveChild","pos":[0,11]}]},{"pos":[74525,74526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74581,74588],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[74632,74633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74731,74742],"content":"RemoveChild","needQuote":true,"nodes":[{"content":"RemoveChild","pos":[0,11]}]},{"pos":[74798,74799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74854,74861],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[74905,74906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75169,75199],"content":"ReplaceChild(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"ReplaceChild(XmlNode, XmlNode)","pos":[0,30]}]},{"pos":[75389,75401],"content":"ReplaceChild","needQuote":true,"nodes":[{"content":"ReplaceChild","pos":[0,12]}]},{"pos":[75458,75459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75514,75521],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[75566,75567]},{"pos":[75627,75634],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[75678,75679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75797,75809],"content":"ReplaceChild","needQuote":true,"nodes":[{"content":"ReplaceChild","pos":[0,12]}]},{"pos":[75866,75867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75922,75929],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[75974,75975]},{"pos":[76035,76042],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[76086,76087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76364,76389],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"pos":[76548,76562],"content":"WriteContentTo","needQuote":true,"nodes":[{"content":"WriteContentTo","pos":[0,14]}]},{"pos":[76621,76622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76679,76688],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[76755,76756],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76859,76873],"content":"WriteContentTo","needQuote":true,"nodes":[{"content":"WriteContentTo","pos":[0,14]}]},{"pos":[76932,76933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76990,76999],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[77066,77067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77282,77291],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[77499,77517],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"pos":[77662,77669],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[77721,77722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77779,77788],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[77855,77856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77952,77959],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[78011,78012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78069,78078],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[78145,78146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78329,78341],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]},{"pos":[78523,78540],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[78737,78762],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Xml.XmlAttribute\n  commentId: T:System.Xml.XmlAttribute\n  id: XmlAttribute\n  parent: System.Xml\n  children:\n  - System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)\n  - System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)\n  - System.Xml.XmlAttribute.BaseURI\n  - System.Xml.XmlAttribute.CloneNode(System.Boolean)\n  - System.Xml.XmlAttribute.InnerText\n  - System.Xml.XmlAttribute.InnerXml\n  - System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlAttribute.LocalName\n  - System.Xml.XmlAttribute.Name\n  - System.Xml.XmlAttribute.NamespaceURI\n  - System.Xml.XmlAttribute.NodeType\n  - System.Xml.XmlAttribute.OwnerDocument\n  - System.Xml.XmlAttribute.OwnerElement\n  - System.Xml.XmlAttribute.ParentNode\n  - System.Xml.XmlAttribute.Prefix\n  - System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)\n  - System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)\n  - System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlAttribute.Specified\n  - System.Xml.XmlAttribute.Value\n  - System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)\n  - System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  - vb\n  name: XmlAttribute\n  fullName: System.Xml.XmlAttribute\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 10\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.</p>\\n\"\n  syntax:\n    content: 'public class XmlAttribute : XmlNode, IEnumerable'\n    content.vb: >-\n      Public Class XmlAttribute\n          Inherits XmlNode\n          Implements IEnumerable\n  inheritance:\n  - System.Object\n  - System.Xml.XmlNode\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Xml.XmlNode.Attributes\n  - System.Xml.XmlNode.ChildNodes\n  - System.Xml.XmlNode.FirstChild\n  - System.Xml.XmlNode.HasChildNodes\n  - System.Xml.XmlNode.IsReadOnly\n  - System.Xml.XmlNode.Item(System.String)\n  - System.Xml.XmlNode.Item(System.String,System.String)\n  - System.Xml.XmlNode.LastChild\n  - System.Xml.XmlNode.NextSibling\n  - System.Xml.XmlNode.OuterXml\n  - System.Xml.XmlNode.PreviousSibling\n  - System.Xml.XmlNode.PreviousText\n  - System.Xml.XmlNode.GetEnumerator\n  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  - System.Xml.XmlNode.Normalize\n  - System.Xml.XmlNode.RemoveAll\n  - System.Xml.XmlNode.Supports(System.String,System.String)\n  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlAttribute\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)\n  commentId: M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)\n  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: XmlAttribute(String, String, String, XmlDocument)\n  fullName: System.Xml.XmlAttribute.XmlAttribute(System.String, System.String, System.String, System.Xml.XmlDocument)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 12\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected XmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc)\n    content.vb: Protected Sub New(prefix As String, localName As String, namespaceURI As String, doc As XmlDocument)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace uniform resource identifier (URI).</p>\\n\"\n    - id: doc\n      type: System.Xml.XmlDocument\n      description: \"\\n<p>The parent XML document.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlAttribute.XmlAttribute(String, String, String, XmlDocument)\n- uid: System.Xml.XmlAttribute.BaseURI\n  commentId: P:System.Xml.XmlAttribute.BaseURI\n  id: BaseURI\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: BaseURI\n  fullName: System.Xml.XmlAttribute.BaseURI\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseURI\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 13\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the base Uniform Resource Identifier (URI) of the node.</p>\\n\"\n  syntax:\n    content: public override string BaseURI { get; }\n    content.vb: Public Overrides ReadOnly Property BaseURI As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, <strong>BaseURI</strong> returns String.Empty.</p>\\n\"\n  overridden: System.Xml.XmlNode.BaseURI\n  seealso:\n  - type: System.Xml.XmlAttribute.OwnerElement\n    commentId: P:System.Xml.XmlAttribute.OwnerElement\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.BaseURI\n- uid: System.Xml.XmlAttribute.InnerText\n  commentId: P:System.Xml.XmlAttribute.InnerText\n  id: InnerText\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: InnerText\n  fullName: System.Xml.XmlAttribute.InnerText\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerText\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 14\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Sets the concatenated values of the node and all its children.</p>\\n\"\n  syntax:\n    content: public override string InnerText { set; }\n    content.vb: Public Overrides WriteOnly Property InnerText As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the <xref href=\\\"System.Xml.XmlAttribute.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  overridden: System.Xml.XmlNode.InnerText\n  seealso:\n  - type: System.Xml.XmlAttribute.InnerXml\n    commentId: P:System.Xml.XmlAttribute.InnerXml\n  - type: System.Xml.XmlNode.OuterXml\n    commentId: P:System.Xml.XmlNode.OuterXml\n  modifiers.csharp:\n  - public\n  - override\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  - WriteOnly\n  nameWithType: XmlAttribute.InnerText\n- uid: System.Xml.XmlAttribute.InnerXml\n  commentId: P:System.Xml.XmlAttribute.InnerXml\n  id: InnerXml\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: InnerXml\n  fullName: System.Xml.XmlAttribute.InnerXml\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerXml\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 15\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Sets the value of the attribute.</p>\\n\"\n  syntax:\n    content: public override string InnerXml { set; }\n    content.vb: Public Overrides WriteOnly Property InnerXml As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The attribute value.</p>\\n\"\n  overridden: System.Xml.XmlNode.InnerXml\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The XML specified when setting this property is not well-formed.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlAttribute.InnerText\n    commentId: P:System.Xml.XmlAttribute.InnerText\n  - type: System.Xml.XmlNode.OuterXml\n    commentId: P:System.Xml.XmlNode.OuterXml\n  modifiers.csharp:\n  - public\n  - override\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  - WriteOnly\n  nameWithType: XmlAttribute.InnerXml\n- uid: System.Xml.XmlAttribute.LocalName\n  commentId: P:System.Xml.XmlAttribute.LocalName\n  id: LocalName\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: LocalName\n  fullName: System.Xml.XmlAttribute.LocalName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 16\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the local name of the node.</p>\\n\"\n  syntax:\n    content: public override string LocalName { get; }\n    content.vb: Public Overrides ReadOnly Property LocalName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the attribute node with the prefix removed. In the following example <book bk:genre= 'novel'>, the <strong>LocalName</strong> of the attribute is <strong>genre</strong>.</p>\\n\"\n  overridden: System.Xml.XmlNode.LocalName\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.LocalName\n- uid: System.Xml.XmlAttribute.Name\n  commentId: P:System.Xml.XmlAttribute.Name\n  id: Name\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Xml.XmlAttribute.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 17\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the qualified name of the node.</p>\\n\"\n  syntax:\n    content: public override string Name { get; }\n    content.vb: Public Overrides ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The qualified name of the attribute node.</p>\\n\"\n  overridden: System.Xml.XmlNode.Name\n  seealso:\n  - type: System.Xml.XmlAttribute.LocalName\n    commentId: P:System.Xml.XmlAttribute.LocalName\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.Name\n- uid: System.Xml.XmlAttribute.NamespaceURI\n  commentId: P:System.Xml.XmlAttribute.NamespaceURI\n  id: NamespaceURI\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: NamespaceURI\n  fullName: System.Xml.XmlAttribute.NamespaceURI\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NamespaceURI\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 18\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the namespace URI of this node.</p>\\n\"\n  syntax:\n    content: public override string NamespaceURI { get; }\n    content.vb: Public Overrides ReadOnly Property NamespaceURI As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.</p>\\n\"\n  overridden: System.Xml.XmlNode.NamespaceURI\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.NamespaceURI\n- uid: System.Xml.XmlAttribute.NodeType\n  commentId: P:System.Xml.XmlAttribute.NodeType\n  id: NodeType\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: NodeType\n  fullName: System.Xml.XmlAttribute.NodeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeType\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 19\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the type of the current node.</p>\\n\"\n  syntax:\n    content: public override XmlNodeType NodeType { get; }\n    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType\n    parameters: []\n    return:\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>The node type for <strong>XmlAttribute</strong> nodes is XmlNodeType.Attribute.</p>\\n\"\n  overridden: System.Xml.XmlNode.NodeType\n  seealso:\n  - type: System.Xml.XmlNodeType\n    commentId: T:System.Xml.XmlNodeType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.NodeType\n- uid: System.Xml.XmlAttribute.OwnerDocument\n  commentId: P:System.Xml.XmlAttribute.OwnerDocument\n  id: OwnerDocument\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: OwnerDocument\n  fullName: System.Xml.XmlAttribute.OwnerDocument\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OwnerDocument\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 20\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which this node belongs.</p>\\n\"\n  syntax:\n    content: public override XmlDocument OwnerDocument { get; }\n    content.vb: Public Overrides ReadOnly Property OwnerDocument As XmlDocument\n    parameters: []\n    return:\n      type: System.Xml.XmlDocument\n      description: \"\\n<p>An XML document to which this node belongs.</p>\\n\"\n  overridden: System.Xml.XmlNode.OwnerDocument\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.OwnerDocument\n- uid: System.Xml.XmlAttribute.OwnerElement\n  commentId: P:System.Xml.XmlAttribute.OwnerElement\n  id: OwnerElement\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: OwnerElement\n  fullName: System.Xml.XmlAttribute.OwnerElement\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OwnerElement\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 21\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which the attribute belongs.</p>\\n\"\n  syntax:\n    content: public virtual XmlElement OwnerElement { get; }\n    content.vb: Public Overridable ReadOnly Property OwnerElement As XmlElement\n    parameters: []\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The <strong>XmlElement</strong> that the attribute belongs to or <strong>null</strong> if this attribute is not part of an <strong>XmlElement</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlAttribute.OwnerElement\n- uid: System.Xml.XmlAttribute.ParentNode\n  commentId: P:System.Xml.XmlAttribute.ParentNode\n  id: ParentNode\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: ParentNode\n  fullName: System.Xml.XmlAttribute.ParentNode\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParentNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 22\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the parent of this node. For <strong>XmlAttribute</strong> nodes, this property always returns <strong>null</strong>.</p>\\n\"\n  syntax:\n    content: public override XmlNode ParentNode { get; }\n    content.vb: Public Overrides ReadOnly Property ParentNode As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>For <strong>XmlAttribute</strong> nodes, this property always returns <strong>null</strong>.</p>\\n\"\n  overridden: System.Xml.XmlNode.ParentNode\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlAttribute.ParentNode\n- uid: System.Xml.XmlAttribute.Prefix\n  commentId: P:System.Xml.XmlAttribute.Prefix\n  id: Prefix\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: Prefix\n  fullName: System.Xml.XmlAttribute.Prefix\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Prefix\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 23\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the namespace prefix of this node.</p>\\n\"\n  syntax:\n    content: public override string Prefix { get; set; }\n    content.vb: Public Overrides Property Prefix As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</p>\\n\"\n  overridden: System.Xml.XmlNode.Prefix\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>This node is read-only.</p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The specified prefix contains an invalid character.</p>\\n<p>The specified prefix is malformed.</p>\\n<p>The namespaceURI of this node is <strong>null</strong>.</p>\\n<p>The specified prefix is \\\"xml\\\", and the namespaceURI of this node is different from \\\"http://www.w3.org/XML/1998/namespace\\\".</p>\\n<p>This node is an attribute, the specified prefix is \\\"xmlns\\\", and the namespaceURI of this node is different from \\\"http://www.w3.org/2000/xmlns/\\\".</p>\\n<p>This node is an attribute, and the qualifiedName of this node is \\\"xmlns\\\" [Namespaces].</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.Prefix\n- uid: System.Xml.XmlAttribute.Specified\n  commentId: P:System.Xml.XmlAttribute.Specified\n  id: Specified\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: Specified\n  fullName: System.Xml.XmlAttribute.Specified\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Specified\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 24\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating whether the attribute value was explicitly set.</p>\\n\"\n  syntax:\n    content: public virtual bool Specified { get; }\n    content.vb: Public Overridable ReadOnly Property Specified As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this attribute was explicitly given a value in the original instance document; otherwise, <strong>false</strong>. A value of <strong>false</strong> indicates that the value of the attribute came from the DTD.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlAttribute.Specified\n- uid: System.Xml.XmlAttribute.Value\n  commentId: P:System.Xml.XmlAttribute.Value\n  id: Value\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Xml.XmlAttribute.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 25\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the value of the node.</p>\\n\"\n  syntax:\n    content: public override string Value { get; set; }\n    content.vb: Public Overrides Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value returned depends on the <xref href=\\\"System.Xml.XmlNode.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the node. For <strong>XmlAttribute</strong> nodes, this property is the value of attribute.</p>\\n\"\n  overridden: System.Xml.XmlNode.Value\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The node is read-only and a set operation is called.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.Value\n- uid: System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)\n  id: AppendChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: AppendChild(XmlNode)\n  fullName: System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 26\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the specified node to the end of the list of child nodes, of this node.</p>\\n\"\n  syntax:\n    content: public override XmlNode AppendChild(XmlNode newChild)\n    content.vb: Public Overrides Function AppendChild(newChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> added.</p>\\n\"\n  overridden: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.AppendChild(XmlNode)\n- uid: System.Xml.XmlAttribute.CloneNode(System.Boolean)\n  commentId: M:System.Xml.XmlAttribute.CloneNode(System.Boolean)\n  id: CloneNode(System.Boolean)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlAttribute.CloneNode(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloneNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 27\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a duplicate of this node.</p>\\n\"\n  syntax:\n    content: public override XmlNode CloneNode(bool deep)\n    content.vb: Public Overrides Function CloneNode(deep As Boolean) As XmlNode\n    parameters:\n    - id: deep\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The duplicate node.</p>\\n\"\n  overridden: System.Xml.XmlNode.CloneNode(System.Boolean)\n  seealso:\n  - type: System.Xml.XmlElement\n    commentId: T:System.Xml.XmlElement\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.CloneNode(Boolean)\n- uid: System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  id: InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: InsertAfter(XmlNode, XmlNode)\n  fullName: System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InsertAfter\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 28\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Inserts the specified node immediately after the specified reference node.</p>\\n\"\n  syntax:\n    content: public override XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)\n    content.vb: Public Overrides Function InsertAfter(newChild As XmlNode, refChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert.</p>\\n\"\n    - id: refChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the reference node. The <em>newChild</em> is placed after the <em>refChild</em>.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> inserted.</p>\\n\"\n  overridden: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.InsertAfter(XmlNode, XmlNode)\n- uid: System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  id: InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: InsertBefore(XmlNode, XmlNode)\n  fullName: System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InsertBefore\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 29\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Inserts the specified node immediately before the specified reference node.</p>\\n\"\n  syntax:\n    content: public override XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)\n    content.vb: Public Overrides Function InsertBefore(newChild As XmlNode, refChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert.</p>\\n\"\n    - id: refChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the reference node. The <em>newChild</em> is placed before this node.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> inserted.</p>\\n\"\n  overridden: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.InsertBefore(XmlNode, XmlNode)\n- uid: System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)\n  id: PrependChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: PrependChild(XmlNode)\n  fullName: System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrependChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 30\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the specified node to the beginning of the list of child nodes for this node.</p>\\n\"\n  syntax:\n    content: public override XmlNode PrependChild(XmlNode newChild)\n    content.vb: Public Overrides Function PrependChild(newChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add. If it is an <xref href=\\\"System.Xml.XmlDocumentFragment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the entire contents of the document fragment are moved into the child list of this node.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> added.</p>\\n\"\n  overridden: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.PrependChild(XmlNode)\n- uid: System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)\n  id: RemoveChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: RemoveChild(XmlNode)\n  fullName: System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 31\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes the specified child node.</p>\\n\"\n  syntax:\n    content: public override XmlNode RemoveChild(XmlNode oldChild)\n    content.vb: Public Overrides Function RemoveChild(oldChild As XmlNode) As XmlNode\n    parameters:\n    - id: oldChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> removed.</p>\\n\"\n  overridden: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>oldChild</em> is not a child of this node. Or this node is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.RemoveChild(XmlNode)\n- uid: System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  id: ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: ReplaceChild(XmlNode, XmlNode)\n  fullName: System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReplaceChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 32\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Replaces the child node specified with the new child node specified.</p>\\n\"\n  syntax:\n    content: public override XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)\n    content.vb: Public Overrides Function ReplaceChild(newChild As XmlNode, oldChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new child <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: oldChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to replace.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> replaced.</p>\\n\"\n  overridden: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n<p>The <em>oldChild</em> is not a child of this node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.ReplaceChild(XmlNode, XmlNode)\n- uid: System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)\n  id: WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteContentTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 33\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves all the children of the node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteContentTo(XmlWriter w)\n    content.vb: Public Overrides Sub WriteContentTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save.</p>\\n\"\n  overridden: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlAttribute\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 34\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteTo(XmlWriter w)\n    content.vb: Public Overrides Sub WriteTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save.</p>\\n\"\n  overridden: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlAttribute.WriteTo(XmlWriter)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Xml.XmlNode.Attributes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Attributes\n  fullName: System.Xml.XmlNode.Attributes\n  commentId: P:System.Xml.XmlNode.Attributes\n  nameWithType: XmlNode.Attributes\n- uid: System.Xml.XmlNode.ChildNodes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ChildNodes\n  fullName: System.Xml.XmlNode.ChildNodes\n  commentId: P:System.Xml.XmlNode.ChildNodes\n  nameWithType: XmlNode.ChildNodes\n- uid: System.Xml.XmlNode.FirstChild\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: FirstChild\n  fullName: System.Xml.XmlNode.FirstChild\n  commentId: P:System.Xml.XmlNode.FirstChild\n  nameWithType: XmlNode.FirstChild\n- uid: System.Xml.XmlNode.HasChildNodes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: HasChildNodes\n  fullName: System.Xml.XmlNode.HasChildNodes\n  commentId: P:System.Xml.XmlNode.HasChildNodes\n  nameWithType: XmlNode.HasChildNodes\n- uid: System.Xml.XmlNode.IsReadOnly\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Xml.XmlNode.IsReadOnly\n  commentId: P:System.Xml.XmlNode.IsReadOnly\n  nameWithType: XmlNode.IsReadOnly\n- uid: System.Xml.XmlNode.Item(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Item[String]\n  fullName: System.Xml.XmlNode.Item[System.String]\n  fullname.vb: System.Xml.XmlNode.Item(System.String)\n  name.vb: Item(String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Item(System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Xml.XmlNode.Item(System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Xml.XmlNode.Item(System.String)\n  nameWithType: XmlNode.Item[String]\n  nameWithType.vb: XmlNode.Item(String)\n- uid: System.Xml.XmlNode.Item(System.String,System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Item[String, String]\n  fullName: System.Xml.XmlNode.Item[System.String, System.String]\n  fullname.vb: System.Xml.XmlNode.Item(System.String, System.String)\n  name.vb: Item(String, String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Item(System.String,System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Xml.XmlNode.Item(System.String,System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Xml.XmlNode.Item(System.String,System.String)\n  nameWithType: XmlNode.Item[String, String]\n  nameWithType.vb: XmlNode.Item(String, String)\n- uid: System.Xml.XmlNode.LastChild\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: LastChild\n  fullName: System.Xml.XmlNode.LastChild\n  commentId: P:System.Xml.XmlNode.LastChild\n  nameWithType: XmlNode.LastChild\n- uid: System.Xml.XmlNode.NextSibling\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NextSibling\n  fullName: System.Xml.XmlNode.NextSibling\n  commentId: P:System.Xml.XmlNode.NextSibling\n  nameWithType: XmlNode.NextSibling\n- uid: System.Xml.XmlNode.OuterXml\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: OuterXml\n  fullName: System.Xml.XmlNode.OuterXml\n  commentId: P:System.Xml.XmlNode.OuterXml\n  nameWithType: XmlNode.OuterXml\n- uid: System.Xml.XmlNode.PreviousSibling\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PreviousSibling\n  fullName: System.Xml.XmlNode.PreviousSibling\n  commentId: P:System.Xml.XmlNode.PreviousSibling\n  nameWithType: XmlNode.PreviousSibling\n- uid: System.Xml.XmlNode.PreviousText\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PreviousText\n  fullName: System.Xml.XmlNode.PreviousText\n  commentId: P:System.Xml.XmlNode.PreviousText\n  nameWithType: XmlNode.PreviousText\n- uid: System.Xml.XmlNode.GetEnumerator\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNode.GetEnumerator()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Xml.XmlNode.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Xml.XmlNode.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetEnumerator\n  nameWithType: XmlNode.GetEnumerator()\n- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: GetNamespaceOfPrefix(String)\n  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n    name: GetNamespaceOfPrefix\n    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n    name: GetNamespaceOfPrefix\n    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  nameWithType: XmlNode.GetNamespaceOfPrefix(String)\n- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: GetPrefixOfNamespace(String)\n  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n    name: GetPrefixOfNamespace\n    fullName: System.Xml.XmlNode.GetPrefixOfNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n    name: GetPrefixOfNamespace\n    fullName: System.Xml.XmlNode.GetPrefixOfNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  nameWithType: XmlNode.GetPrefixOfNamespace(String)\n- uid: System.Xml.XmlNode.Normalize\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Normalize()\n  fullName: System.Xml.XmlNode.Normalize()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Normalize\n    name: Normalize\n    fullName: System.Xml.XmlNode.Normalize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.Normalize\n    name: Normalize\n    fullName: System.Xml.XmlNode.Normalize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.Normalize\n  nameWithType: XmlNode.Normalize()\n- uid: System.Xml.XmlNode.RemoveAll\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: RemoveAll()\n  fullName: System.Xml.XmlNode.RemoveAll()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.RemoveAll\n    name: RemoveAll\n    fullName: System.Xml.XmlNode.RemoveAll\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.RemoveAll\n    name: RemoveAll\n    fullName: System.Xml.XmlNode.RemoveAll\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.RemoveAll\n  nameWithType: XmlNode.RemoveAll()\n- uid: System.Xml.XmlNode.Supports(System.String,System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Supports(String, String)\n  fullName: System.Xml.XmlNode.Supports(System.String, System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Supports(System.String,System.String)\n    name: Supports\n    fullName: System.Xml.XmlNode.Supports\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.Supports(System.String,System.String)\n    name: Supports\n    fullName: System.Xml.XmlNode.Supports\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.Supports(System.String,System.String)\n  nameWithType: XmlNode.Supports(String, String)\n- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n    name: IEnumerable.GetEnumerator\n    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n    name: System.Collections.IEnumerable.GetEnumerator\n    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  nameWithType: XmlNode.IEnumerable.GetEnumerator()\n  nameWithType.vb: XmlNode.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlDocument\n  parent: System.Xml\n  isExternal: false\n  name: XmlDocument\n  fullName: System.Xml.XmlDocument\n  commentId: T:System.Xml.XmlDocument\n  nameWithType: XmlDocument\n- uid: System.Xml.XmlNode.BaseURI\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: BaseURI\n  fullName: System.Xml.XmlNode.BaseURI\n  commentId: P:System.Xml.XmlNode.BaseURI\n  nameWithType: XmlNode.BaseURI\n- uid: System.Xml.XmlNode.InnerText\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InnerText\n  fullName: System.Xml.XmlNode.InnerText\n  commentId: P:System.Xml.XmlNode.InnerText\n  nameWithType: XmlNode.InnerText\n- uid: System.Xml.XmlNode.InnerXml\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InnerXml\n  fullName: System.Xml.XmlNode.InnerXml\n  commentId: P:System.Xml.XmlNode.InnerXml\n  nameWithType: XmlNode.InnerXml\n- uid: System.Xml.XmlNode.LocalName\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: LocalName\n  fullName: System.Xml.XmlNode.LocalName\n  commentId: P:System.Xml.XmlNode.LocalName\n  nameWithType: XmlNode.LocalName\n- uid: System.Xml.XmlNode.Name\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Name\n  fullName: System.Xml.XmlNode.Name\n  commentId: P:System.Xml.XmlNode.Name\n  nameWithType: XmlNode.Name\n- uid: System.Xml.XmlNode.NamespaceURI\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NamespaceURI\n  fullName: System.Xml.XmlNode.NamespaceURI\n  commentId: P:System.Xml.XmlNode.NamespaceURI\n  nameWithType: XmlNode.NamespaceURI\n- uid: System.Xml.XmlNode.NodeType\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NodeType\n  fullName: System.Xml.XmlNode.NodeType\n  commentId: P:System.Xml.XmlNode.NodeType\n  nameWithType: XmlNode.NodeType\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n  commentId: T:System.Xml.XmlNodeType\n  nameWithType: XmlNodeType\n- uid: System.Xml.XmlNode.OwnerDocument\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: OwnerDocument\n  fullName: System.Xml.XmlNode.OwnerDocument\n  commentId: P:System.Xml.XmlNode.OwnerDocument\n  nameWithType: XmlNode.OwnerDocument\n- uid: System.Xml.XmlElement\n  parent: System.Xml\n  isExternal: false\n  name: XmlElement\n  fullName: System.Xml.XmlElement\n  commentId: T:System.Xml.XmlElement\n  nameWithType: XmlElement\n- uid: System.Xml.XmlNode.ParentNode\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ParentNode\n  fullName: System.Xml.XmlNode.ParentNode\n  commentId: P:System.Xml.XmlNode.ParentNode\n  nameWithType: XmlNode.ParentNode\n- uid: System.Xml.XmlNode.Prefix\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Prefix\n  fullName: System.Xml.XmlNode.Prefix\n  commentId: P:System.Xml.XmlNode.Prefix\n  nameWithType: XmlNode.Prefix\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.XmlNode.Value\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Value\n  fullName: System.Xml.XmlNode.Value\n  commentId: P:System.Xml.XmlNode.Value\n  nameWithType: XmlNode.Value\n- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: AppendChild(XmlNode)\n  fullName: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n    name: AppendChild\n    fullName: System.Xml.XmlNode.AppendChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n    name: AppendChild\n    fullName: System.Xml.XmlNode.AppendChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.AppendChild(XmlNode)\n- uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlNode.CloneNode(System.Boolean)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n    name: CloneNode\n    fullName: System.Xml.XmlNode.CloneNode\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n    name: CloneNode\n    fullName: System.Xml.XmlNode.CloneNode\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.CloneNode(System.Boolean)\n  nameWithType: XmlNode.CloneNode(Boolean)\n- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InsertAfter(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertAfter\n    fullName: System.Xml.XmlNode.InsertAfter\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertAfter\n    fullName: System.Xml.XmlNode.InsertAfter\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.InsertAfter(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InsertBefore(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertBefore\n    fullName: System.Xml.XmlNode.InsertBefore\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertBefore\n    fullName: System.Xml.XmlNode.InsertBefore\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.InsertBefore(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PrependChild(XmlNode)\n  fullName: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n    name: PrependChild\n    fullName: System.Xml.XmlNode.PrependChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n    name: PrependChild\n    fullName: System.Xml.XmlNode.PrependChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.PrependChild(XmlNode)\n- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: RemoveChild(XmlNode)\n  fullName: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n    name: RemoveChild\n    fullName: System.Xml.XmlNode.RemoveChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n    name: RemoveChild\n    fullName: System.Xml.XmlNode.RemoveChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.RemoveChild(XmlNode)\n- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ReplaceChild(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: ReplaceChild\n    fullName: System.Xml.XmlNode.ReplaceChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: ReplaceChild\n    fullName: System.Xml.XmlNode.ReplaceChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.ReplaceChild(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n    name: WriteContentTo\n    fullName: System.Xml.XmlNode.WriteContentTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n    name: WriteContentTo\n    fullName: System.Xml.XmlNode.WriteContentTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  nameWithType: XmlNode.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    name: WriteTo\n    fullName: System.Xml.XmlNode.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    name: WriteTo\n    fullName: System.Xml.XmlNode.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  nameWithType: XmlNode.WriteTo(XmlWriter)\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}