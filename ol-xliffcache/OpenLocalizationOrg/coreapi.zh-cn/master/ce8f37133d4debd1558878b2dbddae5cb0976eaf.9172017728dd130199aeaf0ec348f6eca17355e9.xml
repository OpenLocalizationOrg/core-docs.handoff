{"nodes":[{"pos":[589,610],"content":"EncoderFallbackBuffer","needQuote":true,"nodes":[{"content":"EncoderFallbackBuffer","pos":[0,21]}]},{"pos":[2045,2068],"content":"EncoderFallbackBuffer()","needQuote":true,"nodes":[{"content":"EncoderFallbackBuffer()","pos":[0,23]}]},{"pos":[3056,3065],"content":"Remaining","needQuote":true,"nodes":[{"content":"Remaining","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The number of characters in the current fallback buffer that have not yet been processed.&lt;/p&gt;\\n","pos":[3899,3999],"source":"\\n<p>The number of characters in the current fallback buffer that have not yet been processed.</p>\\n"},{"pos":[4474,4501],"content":"Fallback(Char, Char, Int32)","needQuote":true,"nodes":[{"content":"Fallback(Char, Char, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The high surrogate of the input pair.&lt;/p&gt;\\n","pos":[5376,5424],"source":"\\n<p>The high surrogate of the input pair.</p>\\n"},{"content":"\\n&lt;p&gt;The low surrogate of the input pair.&lt;/p&gt;\\n","pos":[5495,5542],"source":"\\n<p>The low surrogate of the input pair.</p>\\n"},{"content":"\\n&lt;p&gt;The index position of the surrogate pair in the input buffer.&lt;/p&gt;\\n","pos":[5605,5677],"source":"\\n<p>The index position of the surrogate pair in the input buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the fallback buffer can process &lt;em&gt;charUnknownHigh&lt;/em&gt; and &lt;em&gt;charUnknownLow&lt;/em&gt;; &lt;strong&gt;false&lt;/strong&gt; if the fallback buffer ignores the surrogate pair.&lt;/p&gt;\\n","pos":[5738,5935],"source":"\\n<p>\\n<strong>true</strong> if the fallback buffer can process <em>charUnknownHigh</em> and <em>charUnknownLow</em>; <strong>false</strong> if the fallback buffer ignores the surrogate pair.</p>\\n"},{"pos":[6371,6392],"content":"Fallback(Char, Int32)","needQuote":true,"nodes":[{"content":"Fallback(Char, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An input character.&lt;/p&gt;\\n","pos":[7199,7229],"source":"\\n<p>An input character.</p>\\n"},{"content":"\\n&lt;p&gt;The index position of the character in the input buffer.&lt;/p&gt;\\n","pos":[7292,7359],"source":"\\n<p>The index position of the character in the input buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the fallback buffer can process &lt;em&gt;charUnknown&lt;/em&gt;; &lt;strong&gt;false&lt;/strong&gt; if the fallback buffer ignores &lt;em&gt;charUnknown&lt;/em&gt;.&lt;/p&gt;\\n","pos":[7420,7587],"source":"\\n<p>\\n<strong>true</strong> if the fallback buffer can process <em>charUnknown</em>; <strong>false</strong> if the fallback buffer ignores <em>charUnknown</em>.</p>\\n"},{"pos":[7948,7961],"content":"GetNextChar()","needQuote":true,"nodes":[{"content":"GetNextChar()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The next character in the fallback buffer.&lt;/p&gt;\\n","pos":[8642,8695],"source":"\\n<p>The next character in the fallback buffer.</p>\\n"},{"pos":[9051,9065],"content":"MovePrevious()","needQuote":true,"nodes":[{"content":"MovePrevious()","pos":[0,14]}]},{"pos":[10484,10491],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[11259,11270],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[11416,11422],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11582,11592],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11687,11695],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11764,11765],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11792,11793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11863,11871],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11940,11941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11968,11969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12152,12166],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12285,12291],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12358,12359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12409,12415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12475,12476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12559,12565],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12632,12633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12683,12689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12749,12750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12964,12986],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13134,13140],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13207,13208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13258,13264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13325,13326]},{"pos":[13381,13387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13447,13448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13545,13551],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13618,13619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13669,13675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13736,13737]},{"pos":[13792,13798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13858,13859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14104,14135],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14301,14316],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14392,14393],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14443,14449],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14510,14511]},{"pos":[14566,14572],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14632,14633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14739,14754],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14830,14831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14881,14887],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14948,14949]},{"pos":[15004,15010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15070,15071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15301,15314],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15415,15426],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15498,15499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15526,15527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15600,15611],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15683,15684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15711,15712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15887,15896],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15989,15996],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16064,16065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16092,16093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16162,16169],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16237,16238],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16265,16266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16441,16458],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16567,16582],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16658,16659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16686,16687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16764,16779],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16855,16856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16883,16884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17029,17035],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17165,17170],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17310,17314],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[17454,17461],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Text.EncoderFallbackBuffer\n  commentId: T:System.Text.EncoderFallbackBuffer\n  id: EncoderFallbackBuffer\n  parent: System.Text\n  children:\n  - System.Text.EncoderFallbackBuffer.#ctor\n  - System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  - System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  - System.Text.EncoderFallbackBuffer.GetNextChar\n  - System.Text.EncoderFallbackBuffer.MovePrevious\n  - System.Text.EncoderFallbackBuffer.Remaining\n  - System.Text.EncoderFallbackBuffer.Reset\n  langs:\n  - csharp\n  - vb\n  name: EncoderFallbackBuffer\n  fullName: System.Text.EncoderFallbackBuffer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EncoderFallbackBuffer\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 80\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character. </p>\\n\"\n  syntax:\n    content: public abstract class EncoderFallbackBuffer\n    content.vb: Public MustInherit Class EncoderFallbackBuffer\n  seealso:\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: EncoderFallbackBuffer\n- uid: System.Text.EncoderFallbackBuffer.#ctor\n  commentId: M:System.Text.EncoderFallbackBuffer.#ctor\n  id: '#ctor'\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: EncoderFallbackBuffer()\n  fullName: System.Text.EncoderFallbackBuffer.EncoderFallbackBuffer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs\n    startLine: 94\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.EncoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected EncoderFallbackBuffer()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EncoderFallbackBuffer.EncoderFallbackBuffer()\n- uid: System.Text.EncoderFallbackBuffer.Remaining\n  commentId: P:System.Text.EncoderFallbackBuffer.Remaining\n  id: Remaining\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Remaining\n  fullName: System.Text.EncoderFallbackBuffer.Remaining\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remaining\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 101\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, gets the number of characters in the current <xref href=\\\"System.Text.EncoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that remain to be processed.</p>\\n\"\n  syntax:\n    content: public abstract int Remaining { get; }\n    content.vb: Public MustOverride ReadOnly Property Remaining As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the current fallback buffer that have not yet been processed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: EncoderFallbackBuffer.Remaining\n- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  commentId: M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  id: Fallback(System.Char,System.Char,System.Int32)\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Fallback(Char, Char, Int32)\n  fullName: System.Text.EncoderFallbackBuffer.Fallback(System.Char, System.Char, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Fallback\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 89\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</p>\\n\"\n  syntax:\n    content: public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index)\n    content.vb: Public MustOverride Function Fallback(charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean\n    parameters:\n    - id: charUnknownHigh\n      type: System.Char\n      description: \"\\n<p>The high surrogate of the input pair.</p>\\n\"\n    - id: charUnknownLow\n      type: System.Char\n      description: \"\\n<p>The low surrogate of the input pair.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of the surrogate pair in the input buffer.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the fallback buffer can process <em>charUnknownHigh</em> and <em>charUnknownLow</em>; <strong>false</strong> if the fallback buffer ignores the surrogate pair.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EncoderFallbackBuffer.Fallback(Char, Char, Int32)\n- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  commentId: M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  id: Fallback(System.Char,System.Int32)\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Fallback(Char, Int32)\n  fullName: System.Text.EncoderFallbackBuffer.Fallback(System.Char, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Fallback\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 87\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, prepares the fallback buffer to handle the specified input character. </p>\\n\"\n  syntax:\n    content: public abstract bool Fallback(char charUnknown, int index)\n    content.vb: Public MustOverride Function Fallback(charUnknown As Char, index As Integer) As Boolean\n    parameters:\n    - id: charUnknown\n      type: System.Char\n      description: \"\\n<p>An input character.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of the character in the input buffer.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the fallback buffer can process <em>charUnknown</em>; <strong>false</strong> if the fallback buffer ignores <em>charUnknown</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EncoderFallbackBuffer.Fallback(Char, Int32)\n- uid: System.Text.EncoderFallbackBuffer.GetNextChar\n  commentId: M:System.Text.EncoderFallbackBuffer.GetNextChar\n  id: GetNextChar\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: GetNextChar()\n  fullName: System.Text.EncoderFallbackBuffer.GetNextChar()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNextChar\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 93\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, retrieves the next character in the fallback buffer.</p>\\n\"\n  syntax:\n    content: public abstract char GetNextChar()\n    content.vb: Public MustOverride Function GetNextChar As Char\n    return:\n      type: System.Char\n      description: \"\\n<p>The next character in the fallback buffer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EncoderFallbackBuffer.GetNextChar()\n- uid: System.Text.EncoderFallbackBuffer.MovePrevious\n  commentId: M:System.Text.EncoderFallbackBuffer.MovePrevious\n  id: MovePrevious\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: MovePrevious()\n  fullName: System.Text.EncoderFallbackBuffer.MovePrevious()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MovePrevious\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 97\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, causes the next call to the <xref href=\\\"System.Text.EncoderFallbackBuffer.GetNextChar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to access the data buffer character position that is prior to the current character position. </p>\\n\"\n  syntax:\n    content: public abstract bool MovePrevious()\n    content.vb: Public MustOverride Function MovePrevious As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Text.EncoderFallbackBuffer.MovePrevious\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operation was successful; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EncoderFallbackBuffer.MovePrevious()\n- uid: System.Text.EncoderFallbackBuffer.Reset\n  commentId: M:System.Text.EncoderFallbackBuffer.Reset\n  id: Reset\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Text.EncoderFallbackBuffer.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/EncoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Text/EncoderFallback.cs\n    startLine: 106\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes all data and state information pertaining to this fallback buffer.</p>\\n\"\n  syntax:\n    content: public virtual void Reset()\n    content.vb: Public Overridable Sub Reset\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EncoderFallbackBuffer.Reset()\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}