{"nodes":[{"pos":[1594,1607],"content":"CounterSample","needQuote":true,"nodes":[{"content":"CounterSample","pos":[0,13]}]},{"pos":[3154,3159],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[4596,4675],"content":"CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType)","needQuote":true,"nodes":[{"content":"CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType)","pos":[0,79]}]},{"content":"\\n&lt;p&gt;The numeric value associated with the performance counter sample.","pos":[6074,6144],"source":"\\n<p>The numeric value associated with the performance counter sample."},{"content":"&lt;/p&gt;\\n","pos":[6145,6151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An optional, base raw value for the counter, to use only if the sample is based on multiple counters.","pos":[6218,6324],"source":"\\n<p>An optional, base raw value for the counter, to use only if the sample is based on multiple counters."},{"content":"&lt;/p&gt;\\n","pos":[6325,6331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The frequency with which the counter is read.","pos":[6405,6455],"source":"\\n<p>The frequency with which the counter is read."},{"content":"&lt;/p&gt;\\n","pos":[6456,6462],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The frequency with which the system reads from the counter.","pos":[6535,6599],"source":"\\n<p>The frequency with which the system reads from the counter."},{"content":"&lt;/p&gt;\\n","pos":[6600,6606],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The raw time stamp.","pos":[6673,6697],"source":"\\n<p>The raw time stamp."},{"content":"&lt;/p&gt;\\n","pos":[6698,6704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The raw, high-fidelity time stamp.","pos":[6778,6817],"source":"\\n<p>The raw, high-fidelity time stamp."},{"content":"&lt;/p&gt;\\n","pos":[6818,6824],"source":" </p>\\n"},{"pos":[7884,7970],"content":"CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType, Int64)","needQuote":true,"nodes":[{"content":"CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType, Int64)","pos":[0,86]}]},{"content":"\\n&lt;p&gt;The numeric value associated with the performance counter sample.","pos":[9451,9521],"source":"\\n<p>The numeric value associated with the performance counter sample."},{"content":"&lt;/p&gt;\\n","pos":[9522,9528],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An optional, base raw value for the counter, to use only if the sample is based on multiple counters.","pos":[9595,9701],"source":"\\n<p>An optional, base raw value for the counter, to use only if the sample is based on multiple counters."},{"content":"&lt;/p&gt;\\n","pos":[9702,9708],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The frequency with which the counter is read.","pos":[9782,9832],"source":"\\n<p>The frequency with which the counter is read."},{"content":"&lt;/p&gt;\\n","pos":[9833,9839],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The frequency with which the system reads from the counter.","pos":[9912,9976],"source":"\\n<p>The frequency with which the system reads from the counter."},{"content":"&lt;/p&gt;\\n","pos":[9977,9983],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The raw time stamp.","pos":[10050,10074],"source":"\\n<p>The raw time stamp."},{"content":"&lt;/p&gt;\\n","pos":[10075,10081],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The raw, high-fidelity time stamp.","pos":[10155,10194],"source":"\\n<p>The raw, high-fidelity time stamp."},{"content":"&lt;/p&gt;\\n","pos":[10195,10201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The time at which the sample was taken.","pos":[10571,10615],"source":"\\n<p>The time at which the sample was taken."},{"content":"&lt;/p&gt;\\n","pos":[10616,10622],"source":" </p>\\n"},{"pos":[11001,11010],"content":"BaseValue","needQuote":true,"nodes":[{"content":"BaseValue","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The base raw value, which is used only if the sample is based on multiple counters.&lt;/p&gt;\\n","pos":[11758,11852],"source":"\\n<p>The base raw value, which is used only if the sample is based on multiple counters.</p>\\n"},{"pos":[12196,12212],"content":"CounterFrequency","needQuote":true,"nodes":[{"content":"CounterFrequency","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The frequency with which the counter is read.&lt;/p&gt;\\n","pos":[12970,13026],"source":"\\n<p>The frequency with which the counter is read.</p>\\n"},{"pos":[13377,13393],"content":"CounterTimeStamp","needQuote":true,"nodes":[{"content":"CounterTimeStamp","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The time at which the sample was taken.&lt;/p&gt;\\n","pos":[14150,14200],"source":"\\n<p>The time at which the sample was taken.</p>\\n"},{"pos":[14536,14547],"content":"CounterType","needQuote":true,"nodes":[{"content":"CounterType","pos":[0,11]}]},{"pos":[15872,15880],"content":"RawValue","needQuote":true,"nodes":[{"content":"RawValue","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The numeric value that is associated with the performance counter sample.&lt;/p&gt;\\n","pos":[16609,16693],"source":"\\n<p>The numeric value that is associated with the performance counter sample.</p>\\n"},{"pos":[17033,17048],"content":"SystemFrequency","needQuote":true,"nodes":[{"content":"SystemFrequency","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The frequency with which the system reads from the counter.&lt;/p&gt;\\n","pos":[17801,17871],"source":"\\n<p>The frequency with which the system reads from the counter.</p>\\n"},{"pos":[18200,18209],"content":"TimeStamp","needQuote":true,"nodes":[{"content":"TimeStamp","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The system time stamp.&lt;/p&gt;\\n","pos":[18932,18965],"source":"\\n<p>The system time stamp.</p>\\n"},{"pos":[19309,19325],"content":"TimeStamp100nSec","needQuote":true,"nodes":[{"content":"TimeStamp100nSec","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The system time stamp, represented within 0.1 millisecond.&lt;/p&gt;\\n","pos":[20091,20160],"source":"\\n<p>The system time stamp, represented within 0.1 millisecond.</p>\\n"},{"pos":[20592,20616],"content":"Calculate(CounterSample)","needQuote":true,"nodes":[{"content":"Calculate(CounterSample)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The calculated performance value.&lt;/p&gt;\\n","pos":[21821,21865],"source":"\\n<p>The calculated performance value.</p>\\n"},{"pos":[22405,22444],"content":"Calculate(CounterSample, CounterSample)","needQuote":true,"nodes":[{"content":"Calculate(CounterSample, CounterSample)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The calculated performance value.&lt;/p&gt;\\n","pos":[24037,24081],"source":"\\n<p>The calculated performance value.</p>\\n"},{"pos":[24528,24549],"content":"Equals(CounterSample)","needQuote":true,"nodes":[{"content":"Equals(CounterSample)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;sample&lt;/em&gt; is equal to the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[25797,25913],"source":"\\n<p>\\n<strong>true</strong> if <em>sample</em> is equal to the current instance; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25914,25920],"source":" </p>\\n"},{"pos":[26270,26284],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28142,28155],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A hash code for the current counter sample.&lt;/p&gt;\\n","pos":[28896,28950],"source":"\\n<p>A hash code for the current counter sample.</p>\\n"},{"pos":[29533,29571],"content":"Equality(CounterSample, CounterSample)","needQuote":true,"nodes":[{"content":"Equality(CounterSample, CounterSample)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31028,31137],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[31703,31743],"content":"Inequality(CounterSample, CounterSample)","needQuote":true,"nodes":[{"content":"Inequality(CounterSample, CounterSample)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;\\n","pos":[33209,33321],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are not equal; otherwise, <strong>false</strong></p>\\n"},{"pos":[33540,33558],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[33747,33757],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[33858,33866],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33917,33918],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33945,33946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34019,34027],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34078,34079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34106,34107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34310,34332],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[34480,34486],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34553,34554],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34604,34610],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34671,34672]},{"pos":[34727,34733],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34793,34794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34891,34897],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34964,34965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35015,35021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35082,35083]},{"pos":[35138,35144],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35204,35205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35450,35481],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[35647,35662],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35738,35739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35789,35795],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35856,35857]},{"pos":[35912,35918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35978,35979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36085,36100],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36176,36177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36227,36233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36294,36295]},{"pos":[36350,36356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36416,36417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36643,36652],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[36745,36752],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36820,36821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36848,36849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36918,36925],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36993,36994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37021,37022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37178,37187],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[37341,37347],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37468,37474],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[37636,37649],"content":"CounterSample","needQuote":true,"nodes":[{"content":"CounterSample","pos":[0,13]}]},{"pos":[37838,37843],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[38025,38047],"content":"PerformanceCounterType","needQuote":true,"nodes":[{"content":"PerformanceCounterType","pos":[0,22]}]},{"pos":[38264,38270],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[38416,38423],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38605,38619],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[38744,38750],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38799,38800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38850,38856],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38916,38917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39003,39009],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39058,39059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39109,39115],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39175,39176],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39379,39392],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[39499,39510],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[39564,39565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39592,39593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39669,39680],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[39734,39735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39762,39763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39929,39934],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Diagnostics.CounterSample\n  commentId: T:System.Diagnostics.CounterSample\n  id: CounterSample\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)\n  - System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)\n  - System.Diagnostics.CounterSample.BaseValue\n  - System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)\n  - System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  - System.Diagnostics.CounterSample.CounterFrequency\n  - System.Diagnostics.CounterSample.CounterTimeStamp\n  - System.Diagnostics.CounterSample.CounterType\n  - System.Diagnostics.CounterSample.Empty\n  - System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)\n  - System.Diagnostics.CounterSample.Equals(System.Object)\n  - System.Diagnostics.CounterSample.GetHashCode\n  - System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  - System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  - System.Diagnostics.CounterSample.RawValue\n  - System.Diagnostics.CounterSample.SystemFrequency\n  - System.Diagnostics.CounterSample.TimeStamp\n  - System.Diagnostics.CounterSample.TimeStamp100nSec\n  langs:\n  - csharp\n  - vb\n  name: CounterSample\n  fullName: System.Diagnostics.CounterSample\n  type: Struct\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CounterSample\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 10\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Defines a structure that holds the raw data for a performance counter.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct CounterSample\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure CounterSample\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: CounterSample\n- uid: System.Diagnostics.CounterSample.Empty\n  commentId: F:System.Diagnostics.CounterSample.Empty\n  id: Empty\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Diagnostics.CounterSample.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 13\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Defines an empty, uninitialized performance counter sample of type <strong>NumberOfItems32</strong>.</p>\\n\"\n  syntax:\n    content: public static CounterSample Empty\n    content.vb: Public Shared Empty As CounterSample\n    return:\n      type: System.Diagnostics.CounterSample\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CounterSample.Empty\n- uid: System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)\n  commentId: M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)\n  id: '#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)'\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType)\n  fullName: System.Diagnostics.CounterSample.CounterSample(System.Int64, System.Int64, System.Int64, System.Int64, System.Int64, System.Int64, System.Diagnostics.PerformanceCounterType)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 14\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and sets the <xref href=\\\"System.Diagnostics.CounterSample.CounterTimeStamp\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to 0 (zero).</p>\\n\"\n  syntax:\n    content: public CounterSample(long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, PerformanceCounterType counterType)\n    content.vb: Public Sub New(rawValue As Long, baseValue As Long, counterFrequency As Long, systemFrequency As Long, timeStamp As Long, timeStamp100nSec As Long, counterType As PerformanceCounterType)\n    parameters:\n    - id: rawValue\n      type: System.Int64\n      description: \"\\n<p>The numeric value associated with the performance counter sample. </p>\\n\"\n    - id: baseValue\n      type: System.Int64\n      description: \"\\n<p>An optional, base raw value for the counter, to use only if the sample is based on multiple counters. </p>\\n\"\n    - id: counterFrequency\n      type: System.Int64\n      description: \"\\n<p>The frequency with which the counter is read. </p>\\n\"\n    - id: systemFrequency\n      type: System.Int64\n      description: \"\\n<p>The frequency with which the system reads from the counter. </p>\\n\"\n    - id: timeStamp\n      type: System.Int64\n      description: \"\\n<p>The raw time stamp. </p>\\n\"\n    - id: timeStamp100nSec\n      type: System.Int64\n      description: \"\\n<p>The raw, high-fidelity time stamp. </p>\\n\"\n    - id: counterType\n      type: System.Diagnostics.PerformanceCounterType\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.PerformanceCounterType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that indicates the type of the counter for which this sample is a snapshot. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CounterSample.CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType)\n- uid: System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)\n  commentId: M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)\n  id: '#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)'\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType, Int64)\n  fullName: System.Diagnostics.CounterSample.CounterSample(System.Int64, System.Int64, System.Int64, System.Int64, System.Int64, System.Int64, System.Diagnostics.PerformanceCounterType, System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 15\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and sets the <xref href=\\\"System.Diagnostics.CounterSample.CounterTimeStamp\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to the value that is passed in.</p>\\n\"\n  syntax:\n    content: public CounterSample(long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, PerformanceCounterType counterType, long counterTimeStamp)\n    content.vb: Public Sub New(rawValue As Long, baseValue As Long, counterFrequency As Long, systemFrequency As Long, timeStamp As Long, timeStamp100nSec As Long, counterType As PerformanceCounterType, counterTimeStamp As Long)\n    parameters:\n    - id: rawValue\n      type: System.Int64\n      description: \"\\n<p>The numeric value associated with the performance counter sample. </p>\\n\"\n    - id: baseValue\n      type: System.Int64\n      description: \"\\n<p>An optional, base raw value for the counter, to use only if the sample is based on multiple counters. </p>\\n\"\n    - id: counterFrequency\n      type: System.Int64\n      description: \"\\n<p>The frequency with which the counter is read. </p>\\n\"\n    - id: systemFrequency\n      type: System.Int64\n      description: \"\\n<p>The frequency with which the system reads from the counter. </p>\\n\"\n    - id: timeStamp\n      type: System.Int64\n      description: \"\\n<p>The raw time stamp. </p>\\n\"\n    - id: timeStamp100nSec\n      type: System.Int64\n      description: \"\\n<p>The raw, high-fidelity time stamp. </p>\\n\"\n    - id: counterType\n      type: System.Diagnostics.PerformanceCounterType\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.PerformanceCounterType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that indicates the type of the counter for which this sample is a snapshot. </p>\\n\"\n    - id: counterTimeStamp\n      type: System.Int64\n      description: \"\\n<p>The time at which the sample was taken. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CounterSample.CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType, Int64)\n- uid: System.Diagnostics.CounterSample.BaseValue\n  commentId: P:System.Diagnostics.CounterSample.BaseValue\n  id: BaseValue\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: BaseValue\n  fullName: System.Diagnostics.CounterSample.BaseValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseValue\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 16\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets an optional, base raw value for the counter.</p>\\n\"\n  syntax:\n    content: public long BaseValue { get; }\n    content.vb: Public ReadOnly Property BaseValue As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The base raw value, which is used only if the sample is based on multiple counters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.BaseValue\n- uid: System.Diagnostics.CounterSample.CounterFrequency\n  commentId: P:System.Diagnostics.CounterSample.CounterFrequency\n  id: CounterFrequency\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: CounterFrequency\n  fullName: System.Diagnostics.CounterSample.CounterFrequency\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CounterFrequency\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 17\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the raw counter frequency.</p>\\n\"\n  syntax:\n    content: public long CounterFrequency { get; }\n    content.vb: Public ReadOnly Property CounterFrequency As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The frequency with which the counter is read.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.CounterFrequency\n- uid: System.Diagnostics.CounterSample.CounterTimeStamp\n  commentId: P:System.Diagnostics.CounterSample.CounterTimeStamp\n  id: CounterTimeStamp\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: CounterTimeStamp\n  fullName: System.Diagnostics.CounterSample.CounterTimeStamp\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CounterTimeStamp\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 18\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the counter's time stamp.</p>\\n\"\n  syntax:\n    content: public long CounterTimeStamp { get; }\n    content.vb: Public ReadOnly Property CounterTimeStamp As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The time at which the sample was taken.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.CounterTimeStamp\n- uid: System.Diagnostics.CounterSample.CounterType\n  commentId: P:System.Diagnostics.CounterSample.CounterType\n  id: CounterType\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: CounterType\n  fullName: System.Diagnostics.CounterSample.CounterType\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CounterType\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 19\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the performance counter type.</p>\\n\"\n  syntax:\n    content: public PerformanceCounterType CounterType { get; }\n    content.vb: Public ReadOnly Property CounterType As PerformanceCounterType\n    parameters: []\n    return:\n      type: System.Diagnostics.PerformanceCounterType\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.PerformanceCounterType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that indicates the type of the counter for which this sample is a snapshot.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.CounterType\n- uid: System.Diagnostics.CounterSample.RawValue\n  commentId: P:System.Diagnostics.CounterSample.RawValue\n  id: RawValue\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: RawValue\n  fullName: System.Diagnostics.CounterSample.RawValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RawValue\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 20\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the raw value of the counter.</p>\\n\"\n  syntax:\n    content: public long RawValue { get; }\n    content.vb: Public ReadOnly Property RawValue As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The numeric value that is associated with the performance counter sample.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.RawValue\n- uid: System.Diagnostics.CounterSample.SystemFrequency\n  commentId: P:System.Diagnostics.CounterSample.SystemFrequency\n  id: SystemFrequency\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: SystemFrequency\n  fullName: System.Diagnostics.CounterSample.SystemFrequency\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SystemFrequency\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 21\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the raw system frequency.</p>\\n\"\n  syntax:\n    content: public long SystemFrequency { get; }\n    content.vb: Public ReadOnly Property SystemFrequency As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The frequency with which the system reads from the counter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.SystemFrequency\n- uid: System.Diagnostics.CounterSample.TimeStamp\n  commentId: P:System.Diagnostics.CounterSample.TimeStamp\n  id: TimeStamp\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: TimeStamp\n  fullName: System.Diagnostics.CounterSample.TimeStamp\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TimeStamp\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 22\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the raw time stamp.</p>\\n\"\n  syntax:\n    content: public long TimeStamp { get; }\n    content.vb: Public ReadOnly Property TimeStamp As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The system time stamp.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.TimeStamp\n- uid: System.Diagnostics.CounterSample.TimeStamp100nSec\n  commentId: P:System.Diagnostics.CounterSample.TimeStamp100nSec\n  id: TimeStamp100nSec\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: TimeStamp100nSec\n  fullName: System.Diagnostics.CounterSample.TimeStamp100nSec\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TimeStamp100nSec\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 23\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the raw, high-fidelity time stamp.</p>\\n\"\n  syntax:\n    content: public long TimeStamp100nSec { get; }\n    content.vb: Public ReadOnly Property TimeStamp100nSec As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The system time stamp, represented within 0.1 millisecond.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CounterSample.TimeStamp100nSec\n- uid: System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)\n  commentId: M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)\n  id: Calculate(System.Diagnostics.CounterSample)\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Calculate(CounterSample)\n  fullName: System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Calculate\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 24\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Calculates the performance data of the counter, using a single sample point. This method is generally used for uncalculated performance counter types.</p>\\n\"\n  syntax:\n    content: public static float Calculate(CounterSample counterSample)\n    content.vb: Public Shared Function Calculate(counterSample As CounterSample) As Single\n    parameters:\n    - id: counterSample\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to use as a base point for calculating performance data. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The calculated performance value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CounterSample.Calculate(CounterSample)\n- uid: System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  commentId: M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  id: Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Calculate(CounterSample, CounterSample)\n  fullName: System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample, System.Diagnostics.CounterSample)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Calculate\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 25\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Calculates the performance data of the counter, using two sample points. This method is generally used for calculated performance counter types, such as averages.</p>\\n\"\n  syntax:\n    content: public static float Calculate(CounterSample counterSample, CounterSample nextCounterSample)\n    content.vb: Public Shared Function Calculate(counterSample As CounterSample, nextCounterSample As CounterSample) As Single\n    parameters:\n    - id: counterSample\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to use as a base point for calculating performance data. </p>\\n\"\n    - id: nextCounterSample\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to use as an ending point for calculating performance data. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The calculated performance value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CounterSample.Calculate(CounterSample, CounterSample)\n- uid: System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)\n  commentId: M:System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)\n  id: Equals(System.Diagnostics.CounterSample)\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Equals(CounterSample)\n  fullName: System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 26\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is equal to the current <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public bool Equals(CounterSample sample)\n    content.vb: Public Function Equals(sample As CounterSample) As Boolean\n    parameters:\n    - id: sample\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be compared with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>sample</em> is equal to the current instance; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CounterSample.Equals(CounterSample)\n- uid: System.Diagnostics.CounterSample.Equals(System.Object)\n  commentId: M:System.Diagnostics.CounterSample.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Diagnostics.CounterSample.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 27\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Indicates whether the specified structure is a <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and is identical to the current <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be compared with the current structure.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is a <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and is identical to the current instance; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CounterSample.Equals(Object)\n- uid: System.Diagnostics.CounterSample.GetHashCode\n  commentId: M:System.Diagnostics.CounterSample.GetHashCode\n  id: GetHashCode\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Diagnostics.CounterSample.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 28\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a hash code for the current counter sample.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current counter sample.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CounterSample.GetHashCode()\n- uid: System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  commentId: M:System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  id: op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Equality(CounterSample, CounterSample)\n  fullName: System.Diagnostics.CounterSample.Equality(System.Diagnostics.CounterSample, System.Diagnostics.CounterSample)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 29\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CounterSample a, CounterSample b)\n    content.vb: Public Shared Operator =(a As CounterSample, b As CounterSample) As Boolean\n    parameters:\n    - id: a\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: b\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>Another <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be compared to the structure specified by the <em>a</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CounterSample.Equality(CounterSample, CounterSample)\n- uid: System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  commentId: M:System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  id: op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)\n  parent: System.Diagnostics.CounterSample\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CounterSample, CounterSample)\n  fullName: System.Diagnostics.CounterSample.Inequality(System.Diagnostics.CounterSample, System.Diagnostics.CounterSample)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs\n    startLine: 30\n  assemblies:\n  - System.Diagnostics.PerformanceCounter\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CounterSample a, CounterSample b)\n    content.vb: Public Shared Operator <>(a As CounterSample, b As CounterSample) As Boolean\n    parameters:\n    - id: a\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: b\n      type: System.Diagnostics.CounterSample\n      description: \"\\n<p>Another <xref href=\\\"System.Diagnostics.CounterSample\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be compared to the structure specified by the <em>a</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are not equal; otherwise, <strong>false</strong></p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CounterSample.Inequality(CounterSample, CounterSample)\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  commentId: N:System.Diagnostics\n  nameWithType: System.Diagnostics\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Diagnostics.CounterSample\n  parent: System.Diagnostics\n  isExternal: false\n  name: CounterSample\n  fullName: System.Diagnostics.CounterSample\n  commentId: T:System.Diagnostics.CounterSample\n  nameWithType: CounterSample\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Diagnostics.PerformanceCounterType\n  parent: System.Diagnostics\n  isExternal: false\n  name: PerformanceCounterType\n  fullName: System.Diagnostics.PerformanceCounterType\n  commentId: T:System.Diagnostics.PerformanceCounterType\n  nameWithType: PerformanceCounterType\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n"}