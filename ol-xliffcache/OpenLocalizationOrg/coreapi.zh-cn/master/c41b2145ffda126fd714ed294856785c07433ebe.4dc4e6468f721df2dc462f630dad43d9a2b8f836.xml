{"nodes":[{"pos":[434,460],"content":"KeyValuePair<TKey, TValue>","needQuote":true,"nodes":[{"content":"KeyValuePair&lt;TKey, TValue&gt;","pos":[0,26],"source":"KeyValuePair<TKey, TValue>"}]},{"content":"\\n&lt;p&gt;The type of the key.&lt;/p&gt;\\n","pos":[1212,1243],"source":"\\n<p>The type of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value.&lt;/p&gt;\\n","pos":[1282,1315],"source":"\\n<p>The type of the value.</p>\\n"},{"pos":[2703,2729],"content":"KeyValuePair(TKey, TValue)","needQuote":true,"nodes":[{"content":"KeyValuePair(TKey, TValue)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object defined in each key/value pair.&lt;/p&gt;\\n","pos":[3586,3639],"source":"\\n<p>The object defined in each key/value pair.</p>\\n"},{"content":"\\n&lt;p&gt;The definition associated with &lt;em&gt;key&lt;/em&gt;.&lt;/p&gt;\\n","pos":[3700,3755],"source":"\\n<p>The definition associated with <em>key</em>.</p>\\n"},{"pos":[4271,4274],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[5560,5565],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[6886,6896],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8335,8361],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[8586,8600],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8725,8731],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8780,8781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8831,8837],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8897,8898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8984,8990],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9039,9040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9090,9096],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9156,9157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9360,9373],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9480,9491],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9545,9546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9573,9574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9650,9661],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9715,9716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9743,9744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9953,9975],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10123,10129],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10196,10197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10247,10253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10314,10315]},{"pos":[10370,10376],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10436,10437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10534,10540],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10607,10608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10658,10664],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10725,10726]},{"pos":[10781,10787],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10847,10848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11093,11124],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11290,11305],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11381,11382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11432,11438],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11499,11500]},{"pos":[11555,11561],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11621,11622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11728,11743],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11819,11820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11870,11876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11937,11938]},{"pos":[11993,11999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12059,12060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12286,12295],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12388,12395],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12463,12464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12491,12492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12561,12568],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12636,12637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12664,12665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12821,12830],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[12984,12990],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13111,13117],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13225,13229],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[13337,13343],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[13450,13454],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[13535,13541],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[13672,13682],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13783,13791],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13842,13843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13870,13871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13944,13952],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14003,14004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14031,14032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14193,14199],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Collections.Generic.KeyValuePair`2\n  commentId: T:System.Collections.Generic.KeyValuePair`2\n  id: KeyValuePair`2\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)\n  - System.Collections.Generic.KeyValuePair`2.Key\n  - System.Collections.Generic.KeyValuePair`2.ToString\n  - System.Collections.Generic.KeyValuePair`2.Value\n  langs:\n  - csharp\n  - vb\n  name: KeyValuePair<TKey, TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: KeyValuePair\n    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n    startLine: 23\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Defines a key/value pair that can be set or retrieved.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public struct KeyValuePair<TKey, TValue>\n    content.vb: >-\n      <Serializable>\n\n      Public Structure KeyValuePair(Of TKey, TValue)\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The type of the key.</p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The type of the value.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IDictionary`2\n    commentId: T:System.Collections.Generic.IDictionary`2\n  - type: System.Collections.Generic.Dictionary`2.Enumerator\n    commentId: T:System.Collections.Generic.Dictionary`2.Enumerator\n  - type: System.Collections.DictionaryEntry\n    commentId: T:System.Collections.DictionaryEntry\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)\n  name.vb: KeyValuePair(Of TKey, TValue)\n  nameWithType: KeyValuePair<TKey, TValue>\n  nameWithType.vb: KeyValuePair(Of TKey, TValue)\n- uid: System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)\n  commentId: M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)\n  id: '#ctor(`0,`1)'\n  parent: System.Collections.Generic.KeyValuePair`2\n  langs:\n  - csharp\n  - vb\n  name: KeyValuePair(TKey, TValue)\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Generic.KeyValuePair`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure with the specified key and value.</p>\\n\"\n  syntax:\n    content: public KeyValuePair(TKey key, TValue value)\n    content.vb: Public Sub New(key As TKey, value As TValue)\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The object defined in each key/value pair.</p>\\n\"\n    - id: value\n      type: '{TValue}'\n      description: \"\\n<p>The definition associated with <em>key</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).KeyValuePair(TKey, TValue)\n  nameWithType: KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)\n  nameWithType.vb: KeyValuePair(Of TKey, TValue).KeyValuePair(TKey, TValue)\n- uid: System.Collections.Generic.KeyValuePair`2.Key\n  commentId: P:System.Collections.Generic.KeyValuePair`2.Key\n  id: Key\n  parent: System.Collections.Generic.KeyValuePair`2\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.Key\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Key\n    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the key in the key/value pair.</p>\\n\"\n  syntax:\n    content: public TKey Key { get; }\n    content.vb: Public ReadOnly Property Key As TKey\n    parameters: []\n    return:\n      type: '{TKey}'\n      description: \"\\n<p>A <em>TKey</em> that is the key of the <xref href=\\\"System.Collections.Generic.KeyValuePair`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).Key\n  nameWithType: KeyValuePair<TKey, TValue>.Key\n  nameWithType.vb: KeyValuePair(Of TKey, TValue).Key\n- uid: System.Collections.Generic.KeyValuePair`2.Value\n  commentId: P:System.Collections.Generic.KeyValuePair`2.Value\n  id: Value\n  parent: System.Collections.Generic.KeyValuePair`2\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Value\n    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n    startLine: 37\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the value in the key/value pair.</p>\\n\"\n  syntax:\n    content: public TValue Value { get; }\n    content.vb: Public ReadOnly Property Value As TValue\n    parameters: []\n    return:\n      type: '{TValue}'\n      description: \"\\n<p>A <em>TValue</em> that is the value of the <xref href=\\\"System.Collections.Generic.KeyValuePair`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).Value\n  nameWithType: KeyValuePair<TKey, TValue>.Value\n  nameWithType.vb: KeyValuePair(Of TKey, TValue).Value\n- uid: System.Collections.Generic.KeyValuePair`2.ToString\n  commentId: M:System.Collections.Generic.KeyValuePair`2.ToString\n  id: ToString\n  parent: System.Collections.Generic.KeyValuePair`2\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Collections/Generic/KeyValuePair.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Returns a string representation of the <xref href=\\\"System.Collections.Generic.KeyValuePair`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using the string representations of the key and value.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <xref href=\\\"System.Collections.Generic.KeyValuePair`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which includes the string representations of the key and value.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue).ToString()\n  nameWithType: KeyValuePair<TKey, TValue>.ToString()\n  nameWithType.vb: KeyValuePair(Of TKey, TValue).ToString()\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: '{TKey}'\n  definition: TKey\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n  commentId: '!:TKey'\n- uid: '{TValue}'\n  definition: TValue\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n  commentId: '!:TValue'\n- uid: TKey\n  isExternal: false\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n- uid: TValue\n  isExternal: false\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}