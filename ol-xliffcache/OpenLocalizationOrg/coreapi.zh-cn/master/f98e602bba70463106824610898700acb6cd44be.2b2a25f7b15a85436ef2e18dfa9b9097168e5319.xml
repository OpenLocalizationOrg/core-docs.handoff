{"nodes":[{"pos":[6144,6153],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[7500,7511],"content":"XmlWriter()","needQuote":true,"nodes":[{"content":"XmlWriter()","pos":[0,11]}]},{"pos":[8398,8406],"content":"Settings","needQuote":true,"nodes":[{"content":"Settings","pos":[0,8]}]},{"pos":[10425,10435],"content":"WriteState","needQuote":true,"nodes":[{"content":"WriteState","pos":[0,10]}]},{"pos":[12052,12059],"content":"XmlLang","needQuote":true,"nodes":[{"content":"XmlLang","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The current &lt;strong&gt;xml:lang&lt;/strong&gt; scope.&lt;/p&gt;\\n","pos":[12771,12826],"source":"\\n<p>The current <strong>xml:lang</strong> scope.</p>\\n"},{"pos":[13608,13616],"content":"XmlSpace","needQuote":true,"nodes":[{"content":"XmlSpace","pos":[0,8]}]},{"pos":[15848,15862],"content":"Create(Stream)","needQuote":true,"nodes":[{"content":"Create(Stream)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;stream&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17141,17203],"source":"\\n<p>The <em>stream</em> value is <strong>null</strong>.</p>\\n"},{"pos":[17624,17657],"content":"Create(Stream, XmlWriterSettings)","needQuote":true,"nodes":[{"content":"Create(Stream, XmlWriterSettings)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;stream&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20275,20337],"source":"\\n<p>The <em>stream</em> value is <strong>null</strong>.</p>\\n"},{"pos":[20702,20720],"content":"Create(TextWriter)","needQuote":true,"nodes":[{"content":"Create(TextWriter)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;text&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22237,22297],"source":"\\n<p>The <em>text</em> value is <strong>null</strong>.</p>\\n"},{"pos":[22734,22771],"content":"Create(TextWriter, XmlWriterSettings)","needQuote":true,"nodes":[{"content":"Create(TextWriter, XmlWriterSettings)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;text&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25628,25688],"source":"\\n<p>The <em>text</em> value is <strong>null</strong>.</p>\\n"},{"pos":[26072,26093],"content":"Create(StringBuilder)","needQuote":true,"nodes":[{"content":"Create(StringBuilder)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;builder&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27614,27677],"source":"\\n<p>The <em>builder</em> value is <strong>null</strong>.</p>\\n"},{"pos":[28132,28172],"content":"Create(StringBuilder, XmlWriterSettings)","needQuote":true,"nodes":[{"content":"Create(StringBuilder, XmlWriterSettings)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;builder&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31033,31096],"source":"\\n<p>The <em>builder</em> value is <strong>null</strong>.</p>\\n"},{"pos":[31468,31485],"content":"Create(XmlWriter)","needQuote":true,"nodes":[{"content":"Create(XmlWriter)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;writer&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32932,32994],"source":"\\n<p>The <em>writer</em> value is <strong>null</strong>.</p>\\n"},{"pos":[33430,33466],"content":"Create(XmlWriter, XmlWriterSettings)","needQuote":true,"nodes":[{"content":"Create(XmlWriter, XmlWriterSettings)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;writer&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36256,36318],"source":"\\n<p>The <em>writer</em> value is <strong>null</strong>.</p>\\n"},{"pos":[36623,36632],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[38098,38114],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[38942,39085],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[39852,39859],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[41272,41284],"content":"FlushAsync()","needQuote":true,"nodes":[{"content":"FlushAsync()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;Flush&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[42012,42098],"source":"\\n<p>The task that represents the asynchronous <strong>Flush</strong> operation.</p>\\n"},{"pos":[43511,43531],"content":"LookupPrefix(String)","needQuote":true,"nodes":[{"content":"LookupPrefix(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The namespace URI whose prefix you want to find.&lt;/p&gt;\\n","pos":[44322,44381],"source":"\\n<p>The namespace URI whose prefix you want to find.</p>\\n"},{"content":"\\n&lt;p&gt;The matching prefix or &lt;strong&gt;null&lt;/strong&gt; if no matching namespace URI is found in the current scope.&lt;/p&gt;\\n","pos":[44441,44556],"source":"\\n<p>The matching prefix or <strong>null</strong> if no matching namespace URI is found in the current scope.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ns&lt;/em&gt; is either &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;String.Empty&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44667,44757],"source":"\\n<p>\\n<em>ns</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n"},{"pos":[45651,45686],"content":"WriteAttributes(XmlReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteAttributes(XmlReader, Boolean)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlReader&lt;/strong&gt; from which to copy the attributes.&lt;/p&gt;\\n","pos":[46612,46688],"source":"\\n<p>The <strong>XmlReader</strong> from which to copy the attributes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to copy the default attributes from the &lt;strong&gt;XmlReader&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46755,46892],"source":"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reader&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47011,47059],"source":"\\n<p>\\n<em>reader</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47060,47066],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The reader is not positioned on an &lt;strong&gt;element&lt;/strong&gt;, &lt;strong&gt;attribute&lt;/strong&gt; or &lt;strong&gt;XmlDeclaration&lt;/strong&gt; node.","pos":[47161,47294],"source":"\\n<p>The reader is not positioned on an <strong>element</strong>, <strong>attribute</strong> or <strong>XmlDeclaration</strong> node."},{"content":"&lt;/p&gt;\\n","pos":[47295,47301],"source":" </p>\\n"},{"pos":[48223,48263],"content":"WriteAttributesAsync(XmlReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteAttributesAsync(XmlReader, Boolean)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlReader&lt;/strong&gt; from which to copy the attributes.&lt;/p&gt;\\n","pos":[49201,49277],"source":"\\n<p>The <strong>XmlReader</strong> from which to copy the attributes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to copy the default attributes from the &lt;strong&gt;XmlReader&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49344,49481],"source":"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteAttributes&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[49555,49651],"source":"\\n<p>The task that represents the asynchronous <strong>WriteAttributes</strong> operation.</p>\\n"},{"pos":[51158,51194],"content":"WriteAttributeString(String, String)","needQuote":true,"nodes":[{"content":"WriteAttributeString(String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[52022,52065],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[52129,52167],"source":"\\n<p>The value of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The state of writer is not &lt;strong&gt;WriteState.Element&lt;/strong&gt; or writer is closed.","pos":[52294,52382],"source":"\\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed."},{"content":"&lt;/p&gt;\\n","pos":[52383,52389],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;xml:space&lt;/strong&gt; or &lt;strong&gt;xml:lang&lt;/strong&gt; attribute value is invalid.","pos":[52486,52578],"source":"\\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid."},{"content":"&lt;/p&gt;\\n","pos":[52579,52585],"source":" </p>\\n"},{"pos":[53498,53542],"content":"WriteAttributeString(String, String, String)","needQuote":true,"nodes":[{"content":"WriteAttributeString(String, String, String)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[54421,54464],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI to associate with the attribute.&lt;/p&gt;\\n","pos":[54525,54586],"source":"\\n<p>The namespace URI to associate with the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[54650,54688],"source":"\\n<p>The value of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The state of writer is not &lt;strong&gt;WriteState.Element&lt;/strong&gt; or writer is closed.","pos":[54815,54903],"source":"\\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed."},{"content":"&lt;/p&gt;\\n","pos":[54904,54910],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;xml:space&lt;/strong&gt; or &lt;strong&gt;xml:lang&lt;/strong&gt; attribute value is invalid.","pos":[55007,55099],"source":"\\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid."},{"content":"&lt;/p&gt;\\n","pos":[55100,55106],"source":" </p>\\n"},{"pos":[56069,56121],"content":"WriteAttributeString(String, String, String, String)","needQuote":true,"nodes":[{"content":"WriteAttributeString(String, String, String, String)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The namespace prefix of the attribute.&lt;/p&gt;\\n","pos":[57058,57107],"source":"\\n<p>The namespace prefix of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[57175,57218],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[57279,57325],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[57389,57427],"source":"\\n<p>The value of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The state of writer is not &lt;strong&gt;WriteState.Element&lt;/strong&gt; or writer is closed.","pos":[57554,57642],"source":"\\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed."},{"content":"&lt;/p&gt;\\n","pos":[57643,57649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;xml:space&lt;/strong&gt; or &lt;strong&gt;xml:lang&lt;/strong&gt; attribute value is invalid.","pos":[57746,57838],"source":"\\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid."},{"content":"&lt;/p&gt;\\n","pos":[57839,57845],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;localName&lt;/em&gt; or &lt;em&gt;ns&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[57940,58008],"source":"\\n<p>The <em>localName</em> or <em>ns</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[58009,58015],"source":" </p>\\n"},{"pos":[59001,59058],"content":"WriteAttributeStringAsync(String, String, String, String)","needQuote":true,"nodes":[{"content":"WriteAttributeStringAsync(String, String, String, String)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The namespace prefix of the attribute.&lt;/p&gt;\\n","pos":[60007,60056],"source":"\\n<p>The namespace prefix of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[60124,60167],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[60228,60274],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[60338,60376],"source":"\\n<p>The value of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteAttributeString&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[60450,60551],"source":"\\n<p>The task that represents the asynchronous <strong>WriteAttributeString</strong> operation.</p>\\n"},{"pos":[62056,62089],"content":"WriteBase64(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteBase64(Byte[], Int32, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;Byte array to encode.&lt;/p&gt;\\n","pos":[62948,62980],"source":"\\n<p>Byte array to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The position in the buffer indicating the start of the bytes to write.&lt;/p&gt;\\n","pos":[63043,63124],"source":"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to write.&lt;/p&gt;\\n","pos":[63187,63227],"source":"\\n<p>The number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[63346,63394],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[63395,63401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[63518,63576],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[63577,63672],"source":" </p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n"},{"pos":[64793,64831],"content":"WriteBase64Async(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteBase64Async(Byte[], Int32, Int32)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;Byte array to encode.&lt;/p&gt;\\n","pos":[65700,65732],"source":"\\n<p>Byte array to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The position in the buffer indicating the start of the bytes to write.&lt;/p&gt;\\n","pos":[65795,65876],"source":"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to write.&lt;/p&gt;\\n","pos":[65939,65979],"source":"\\n<p>The number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteBase64&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[66053,66145],"source":"\\n<p>The task that represents the asynchronous <strong>WriteBase64</strong> operation.</p>\\n"},{"pos":[67873,67906],"content":"WriteBinHex(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteBinHex(Byte[], Int32, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;Byte array to encode.&lt;/p&gt;\\n","pos":[68780,68812],"source":"\\n<p>Byte array to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The position in the buffer indicating the start of the bytes to write.&lt;/p&gt;\\n","pos":[68875,68956],"source":"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to write.&lt;/p&gt;\\n","pos":[69019,69059],"source":"\\n<p>The number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69178,69232],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed or in error state.&lt;/p&gt;\\n","pos":[69345,69395],"source":"\\n<p>The writer is closed or in error state.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[69512,69570],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69571,69666],"source":" </p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n"},{"pos":[70785,70823],"content":"WriteBinHexAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteBinHexAsync(Byte[], Int32, Int32)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;Byte array to encode.&lt;/p&gt;\\n","pos":[71709,71741],"source":"\\n<p>Byte array to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The position in the buffer indicating the start of the bytes to write.&lt;/p&gt;\\n","pos":[71804,71885],"source":"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to write.&lt;/p&gt;\\n","pos":[71948,71988],"source":"\\n<p>The number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteBinHex&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[72062,72154],"source":"\\n<p>The task that represents the asynchronous <strong>WriteBinHex</strong> operation.</p>\\n"},{"pos":[73801,73819],"content":"WriteCData(String)","needQuote":true,"nodes":[{"content":"WriteCData(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The text to place inside the CDATA block.&lt;/p&gt;\\n","pos":[74568,74620],"source":"\\n<p>The text to place inside the CDATA block.</p>\\n"},{"content":"\\n&lt;p&gt;The text would result in a non-well formed XML document.&lt;/p&gt;\\n","pos":[74731,74798],"source":"\\n<p>The text would result in a non-well formed XML document.</p>\\n"},{"pos":[75624,75647],"content":"WriteCDataAsync(String)","needQuote":true,"nodes":[{"content":"WriteCDataAsync(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The text to place inside the CDATA block.&lt;/p&gt;\\n","pos":[76406,76458],"source":"\\n<p>The text to place inside the CDATA block.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteCData&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[76532,76623],"source":"\\n<p>The task that represents the asynchronous <strong>WriteCData</strong> operation.</p>\\n"},{"pos":[78050,78071],"content":"WriteCharEntity(Char)","needQuote":true,"nodes":[{"content":"WriteCharEntity(Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Unicode character for which to generate a character entity.&lt;/p&gt;\\n","pos":[78847,78921],"source":"\\n<p>The Unicode character for which to generate a character entity.</p>\\n"},{"content":"\\n&lt;p&gt;The character is in the surrogate pair character range, &lt;strong&gt;0xd800&lt;/strong&gt; - &lt;strong&gt;0xdfff&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79032,79149],"source":"\\n<p>The character is in the surrogate pair character range, <strong>0xd800</strong> - <strong>0xdfff</strong>.</p>\\n"},{"pos":[79987,80013],"content":"WriteCharEntityAsync(Char)","needQuote":true,"nodes":[{"content":"WriteCharEntityAsync(Char)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The Unicode character for which to generate a character entity.&lt;/p&gt;\\n","pos":[80799,80873],"source":"\\n<p>The Unicode character for which to generate a character entity.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteCharEntity&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[80947,81043],"source":"\\n<p>The task that represents the asynchronous <strong>WriteCharEntity</strong> operation.</p>\\n"},{"pos":[82542,82574],"content":"WriteChars(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteChars(Char[], Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;Character array containing the text to write.&lt;/p&gt;\\n","pos":[83383,83439],"source":"\\n<p>Character array containing the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The position in the buffer indicating the start of the text to write.&lt;/p&gt;\\n","pos":[83502,83582],"source":"\\n<p>The position in the buffer indicating the start of the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.&lt;/p&gt;\\n","pos":[83645,83690],"source":"\\n<p>The number of characters to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[83809,83863],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;; the call results in surrogate pair characters being split or an invalid surrogate pair being written.&lt;/p&gt;\\n","pos":[83980,84235],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;buffer&lt;/em&gt; parameter value is not valid.&lt;/p&gt;\\n","pos":[84332,84392],"source":"\\n<p>The <em>buffer</em> parameter value is not valid.</p>\\n"},{"pos":[85506,85543],"content":"WriteCharsAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteCharsAsync(Char[], Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;Character array containing the text to write.&lt;/p&gt;\\n","pos":[86362,86418],"source":"\\n<p>Character array containing the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The position in the buffer indicating the start of the text to write.&lt;/p&gt;\\n","pos":[86481,86561],"source":"\\n<p>The position in the buffer indicating the start of the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.&lt;/p&gt;\\n","pos":[86624,86669],"source":"\\n<p>The number of characters to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteChars&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[86743,86834],"source":"\\n<p>The task that represents the asynchronous <strong>WriteChars</strong> operation.</p>\\n"},{"pos":[88483,88503],"content":"WriteComment(String)","needQuote":true,"nodes":[{"content":"WriteComment(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;Text to place inside the comment.&lt;/p&gt;\\n","pos":[89257,89301],"source":"\\n<p>Text to place inside the comment.</p>\\n"},{"content":"\\n&lt;p&gt;The text would result in a non-well-formed XML document.&lt;/p&gt;\\n","pos":[89412,89479],"source":"\\n<p>The text would result in a non-well-formed XML document.</p>\\n"},{"pos":[90313,90338],"content":"WriteCommentAsync(String)","needQuote":true,"nodes":[{"content":"WriteCommentAsync(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;Text to place inside the comment.&lt;/p&gt;\\n","pos":[91102,91146],"source":"\\n<p>Text to place inside the comment.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteComment&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[91220,91313],"source":"\\n<p>The task that represents the asynchronous <strong>WriteComment</strong> operation.</p>\\n"},{"pos":[92865,92909],"content":"WriteDocType(String, String, String, String)","needQuote":true,"nodes":[{"content":"WriteDocType(String, String, String, String)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The name of the DOCTYPE.","pos":[93820,93849],"source":"\\n<p>The name of the DOCTYPE."},{"content":"This must be non-empty.&lt;/p&gt;\\n","pos":[93850,93879],"source":" This must be non-empty.</p>\\n"},{"content":"\\n&lt;p&gt;If non-null it writes [subset] where subset is replaced with the value of this argument.&lt;/p&gt;\\n","pos":[94405,94504],"source":"\\n<p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\\n"},{"content":"\\n&lt;p&gt;This method was called outside the prolog (after the root element).","pos":[94631,94703],"source":"\\n<p>This method was called outside the prolog (after the root element)."},{"content":"&lt;/p&gt;\\n","pos":[94704,94710],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value for &lt;em&gt;name&lt;/em&gt; would result in invalid XML.&lt;/p&gt;\\n","pos":[94807,94874],"source":"\\n<p>The value for <em>name</em> would result in invalid XML.</p>\\n"},{"pos":[95858,95907],"content":"WriteDocTypeAsync(String, String, String, String)","needQuote":true,"nodes":[{"content":"WriteDocTypeAsync(String, String, String, String)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The name of the DOCTYPE.","pos":[96828,96857],"source":"\\n<p>The name of the DOCTYPE."},{"content":"This must be non-empty.&lt;/p&gt;\\n","pos":[96858,96887],"source":" This must be non-empty.</p>\\n"},{"content":"\\n&lt;p&gt;If non-null it writes [subset] where subset is replaced with the value of this argument.&lt;/p&gt;\\n","pos":[97413,97512],"source":"\\n<p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteDocType&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[97586,97679],"source":"\\n<p>The task that represents the asynchronous <strong>WriteDocType</strong> operation.</p>\\n"},{"pos":[99189,99223],"content":"WriteElementString(String, String)","needQuote":true,"nodes":[{"content":"WriteElementString(String, String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[100000,100041],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element.&lt;/p&gt;\\n","pos":[100105,100141],"source":"\\n<p>The value of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;localName&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt; or an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The parameter values are not valid.&lt;/p&gt;\\n","pos":[100252,100393],"source":"\\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>The parameter values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[100514,100625],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[100626,100762]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[100763,100895]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[100896,101018]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[101019,101165],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[102070,102112],"content":"WriteElementString(String, String, String)","needQuote":true,"nodes":[{"content":"WriteElementString(String, String, String)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[102945,102986],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI to associate with the element.&lt;/p&gt;\\n","pos":[103047,103106],"source":"\\n<p>The namespace URI to associate with the element.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element.&lt;/p&gt;\\n","pos":[103170,103206],"source":"\\n<p>The value of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;localName&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt; or an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The parameter values are not valid.&lt;/p&gt;\\n","pos":[103317,103458],"source":"\\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>The parameter values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[103579,103690],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[103691,103827]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[103828,103960]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[103961,104083]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[104084,104230],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[105185,105235],"content":"WriteElementString(String, String, String, String)","needQuote":true,"nodes":[{"content":"WriteElementString(String, String, String, String)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The prefix of the element.&lt;/p&gt;\\n","pos":[106121,106158],"source":"\\n<p>The prefix of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[106226,106267],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[106328,106372],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element.&lt;/p&gt;\\n","pos":[106436,106472],"source":"\\n<p>The value of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;localName&lt;/em&gt; value is &lt;strong&gt;null&lt;/strong&gt; or an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The parameter values are not valid.&lt;/p&gt;\\n","pos":[106583,106724],"source":"\\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>The parameter values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[106845,106956],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[106957,107093]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[107094,107226]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[107227,107349]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[107350,107496],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[108474,108529],"content":"WriteElementStringAsync(String, String, String, String)","needQuote":true,"nodes":[{"content":"WriteElementStringAsync(String, String, String, String)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;The prefix of the element.&lt;/p&gt;\\n","pos":[109463,109500],"source":"\\n<p>The prefix of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[109568,109609],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[109670,109714],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element.&lt;/p&gt;\\n","pos":[109778,109814],"source":"\\n<p>The value of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteElementString&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[109888,109987],"source":"\\n<p>The task that represents the asynchronous <strong>WriteElementString</strong> operation.</p>\\n"},{"pos":[111385,111404],"content":"WriteEndAttribute()","needQuote":true,"nodes":[{"content":"WriteEndAttribute()","pos":[0,19]}]},{"pos":[112969,112993],"content":"WriteEndAttributeAsync()","needQuote":true,"nodes":[{"content":"WriteEndAttributeAsync()","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteEndAttribute&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[113831,113929],"source":"\\n<p>The task that represents the asynchronous <strong>WriteEndAttribute</strong> operation.</p>\\n"},{"pos":[115327,115345],"content":"WriteEndDocument()","needQuote":true,"nodes":[{"content":"WriteEndDocument()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The XML document is invalid.&lt;/p&gt;\\n","pos":[116128,116167],"source":"\\n<p>The XML document is invalid.</p>\\n"},{"pos":[116966,116989],"content":"WriteEndDocumentAsync()","needQuote":true,"nodes":[{"content":"WriteEndDocumentAsync()","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteEndDocument&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[117745,117842],"source":"\\n<p>The task that represents the asynchronous <strong>WriteEndDocument</strong> operation.</p>\\n"},{"pos":[119230,119247],"content":"WriteEndElement()","needQuote":true,"nodes":[{"content":"WriteEndElement()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;This results in an invalid XML document.&lt;/p&gt;\\n","pos":[120021,120072],"source":"\\n<p>This results in an invalid XML document.</p>\\n"},{"pos":[120867,120889],"content":"WriteEndElementAsync()","needQuote":true,"nodes":[{"content":"WriteEndElementAsync()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteEndElement&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[121620,121716],"source":"\\n<p>The task that represents the asynchronous <strong>WriteEndElement</strong> operation.</p>\\n"},{"pos":[123145,123167],"content":"WriteEntityRef(String)","needQuote":true,"nodes":[{"content":"WriteEntityRef(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The name of the entity reference.&lt;/p&gt;\\n","pos":[123925,123969],"source":"\\n<p>The name of the entity reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is either &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;String.Empty&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[124080,124172],"source":"\\n<p>\\n<em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n"},{"pos":[125014,125041],"content":"WriteEntityRefAsync(String)","needQuote":true,"nodes":[{"content":"WriteEntityRefAsync(String)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The name of the entity reference.&lt;/p&gt;\\n","pos":[125809,125853],"source":"\\n<p>The name of the entity reference.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteEntityRef&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[125927,126022],"source":"\\n<p>The task that represents the asynchronous <strong>WriteEntityRef</strong> operation.</p>\\n"},{"pos":[127426,127447],"content":"WriteFullEndElement()","needQuote":true,"nodes":[{"content":"WriteFullEndElement()","pos":[0,21]}]},{"pos":[128935,128961],"content":"WriteFullEndElementAsync()","needQuote":true,"nodes":[{"content":"WriteFullEndElementAsync()","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteFullEndElement&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[129708,129808],"source":"\\n<p>The task that represents the asynchronous <strong>WriteFullEndElement</strong> operation.</p>\\n"},{"pos":[131226,131243],"content":"WriteName(String)","needQuote":true,"nodes":[{"content":"WriteName(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The name to write.&lt;/p&gt;\\n","pos":[132077,132106],"source":"\\n<p>The name to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid XML name; or &lt;em&gt;name&lt;/em&gt; is either &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;String.Empty&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[132217,132351],"source":"\\n<p>\\n<em>name</em> is not a valid XML name; or <em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n"},{"pos":[133171,133193],"content":"WriteNameAsync(String)","needQuote":true,"nodes":[{"content":"WriteNameAsync(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The name to write.&lt;/p&gt;\\n","pos":[134039,134068],"source":"\\n<p>The name to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteName&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[134142,134232],"source":"\\n<p>The task that represents the asynchronous <strong>WriteName</strong> operation.</p>\\n"},{"pos":[135655,135675],"content":"WriteNmToken(String)","needQuote":true,"nodes":[{"content":"WriteNmToken(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name to write.&lt;/p&gt;\\n","pos":[136524,136553],"source":"\\n<p>The name to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid NmToken; or &lt;em&gt;name&lt;/em&gt; is either &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;String.Empty&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[136664,136797],"source":"\\n<p>\\n<em>name</em> is not a valid NmToken; or <em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n"},{"pos":[137629,137654],"content":"WriteNmTokenAsync(String)","needQuote":true,"nodes":[{"content":"WriteNmTokenAsync(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name to write.&lt;/p&gt;\\n","pos":[138515,138544],"source":"\\n<p>The name to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteNmToken&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[138618,138711],"source":"\\n<p>The task that represents the asynchronous <strong>WriteNmToken</strong> operation.</p>\\n"},{"pos":[140194,140223],"content":"WriteNode(XmlReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteNode(XmlReader, Boolean)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to copy the default attributes from the &lt;strong&gt;XmlReader&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[141255,141392],"source":"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reader&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[141511,141565],"source":"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reader&lt;/em&gt; contains invalid characters.&lt;/p&gt;\\n","pos":[141662,141719],"source":"\\n<p>\\n<em>reader</em> contains invalid characters.</p>\\n"},{"pos":[142617,142651],"content":"WriteNodeAsync(XmlReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteNodeAsync(XmlReader, Boolean)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to copy the default attributes from the &lt;strong&gt;XmlReader&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[143695,143832],"source":"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteNode&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[143906,143996],"source":"\\n<p>The task that represents the asynchronous <strong>WriteNode</strong> operation.</p>\\n"},{"pos":[145515,145557],"content":"WriteProcessingInstruction(String, String)","needQuote":true,"nodes":[{"content":"WriteProcessingInstruction(String, String)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The name of the processing instruction.&lt;/p&gt;\\n","pos":[146450,146500],"source":"\\n<p>The name of the processing instruction.</p>\\n"},{"content":"\\n&lt;p&gt;The text to include in the processing instruction.&lt;/p&gt;\\n","pos":[146563,146624],"source":"\\n<p>The text to include in the processing instruction.</p>\\n"},{"pos":[148027,148074],"content":"WriteProcessingInstructionAsync(String, String)","needQuote":true,"nodes":[{"content":"WriteProcessingInstructionAsync(String, String)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The name of the processing instruction.&lt;/p&gt;\\n","pos":[148977,149027],"source":"\\n<p>The name of the processing instruction.</p>\\n"},{"content":"\\n&lt;p&gt;The text to include in the processing instruction.&lt;/p&gt;\\n","pos":[149090,149151],"source":"\\n<p>The text to include in the processing instruction.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteProcessingInstruction&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[149225,149332],"source":"\\n<p>The task that represents the asynchronous <strong>WriteProcessingInstruction</strong> operation.</p>\\n"},{"pos":[150840,150874],"content":"WriteQualifiedName(String, String)","needQuote":true,"nodes":[{"content":"WriteQualifiedName(String, String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The local name to write.&lt;/p&gt;\\n","pos":[151757,151792],"source":"\\n<p>The local name to write.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI for the name.&lt;/p&gt;\\n","pos":[151853,151895],"source":"\\n<p>The namespace URI for the name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localName&lt;/em&gt; is either &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;String.Empty&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;localName&lt;/em&gt; is not a valid name.","pos":[152006,152147],"source":"\\n<p>\\n<em>localName</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n<p>\\n<em>localName</em> is not a valid name."},{"content":"&lt;/p&gt;\\n","pos":[152148,152154],"source":" </p>\\n"},{"pos":[153060,153099],"content":"WriteQualifiedNameAsync(String, String)","needQuote":true,"nodes":[{"content":"WriteQualifiedNameAsync(String, String)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The local name to write.&lt;/p&gt;\\n","pos":[153994,154029],"source":"\\n<p>The local name to write.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI for the name.&lt;/p&gt;\\n","pos":[154090,154132],"source":"\\n<p>The namespace URI for the name.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteQualifiedName&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[154206,154305],"source":"\\n<p>The task that represents the asynchronous <strong>WriteQualifiedName</strong> operation.</p>\\n"},{"pos":[155811,155841],"content":"WriteRaw(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteRaw(Char[], Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;Character array containing the text to write.&lt;/p&gt;\\n","pos":[156660,156716],"source":"\\n<p>Character array containing the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The position within the buffer indicating the start of the text to write.&lt;/p&gt;\\n","pos":[156779,156863],"source":"\\n<p>The position within the buffer indicating the start of the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.&lt;/p&gt;\\n","pos":[156926,156971],"source":"\\n<p>The number of characters to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[157090,157144],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[157261,157319],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[157320,157415],"source":" </p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n"},{"pos":[158422,158438],"content":"WriteRaw(String)","needQuote":true,"nodes":[{"content":"WriteRaw(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;String containing the text to write.&lt;/p&gt;\\n","pos":[159155,159202],"source":"\\n<p>String containing the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is either &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;String.Empty&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[159313,159405],"source":"\\n<p>\\n<em>data</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n"},{"pos":[160301,160336],"content":"WriteRawAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteRawAsync(Char[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;Character array containing the text to write.&lt;/p&gt;\\n","pos":[161165,161221],"source":"\\n<p>Character array containing the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The position within the buffer indicating the start of the text to write.&lt;/p&gt;\\n","pos":[161284,161368],"source":"\\n<p>The position within the buffer indicating the start of the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.&lt;/p&gt;\\n","pos":[161431,161476],"source":"\\n<p>The number of characters to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteRaw&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[161550,161639],"source":"\\n<p>The task that represents the asynchronous <strong>WriteRaw</strong> operation.</p>\\n"},{"pos":[163283,163304],"content":"WriteRawAsync(String)","needQuote":true,"nodes":[{"content":"WriteRawAsync(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;String containing the text to write.&lt;/p&gt;\\n","pos":[164031,164078],"source":"\\n<p>String containing the text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteRaw&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[164152,164241],"source":"\\n<p>The task that represents the asynchronous <strong>WriteRaw</strong> operation.</p>\\n"},{"pos":[165684,165711],"content":"WriteStartAttribute(String)","needQuote":true,"nodes":[{"content":"WriteStartAttribute(String)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[166451,166494],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed.&lt;/p&gt;\\n","pos":[166621,166653],"source":"\\n<p>The writer is closed.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[166774,166885],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[166886,167022]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[167023,167155]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[167156,167278]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[167279,167425],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[168284,168319],"content":"WriteStartAttribute(String, String)","needQuote":true,"nodes":[{"content":"WriteStartAttribute(String, String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[169117,169160],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[169221,169267],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[169402,169513],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[169514,169650]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[169651,169783]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[169784,169906]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[169907,170053],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[171078,171121],"content":"WriteStartAttribute(String, String, String)","needQuote":true,"nodes":[{"content":"WriteStartAttribute(String, String, String)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The namespace prefix of the attribute.&lt;/p&gt;\\n","pos":[172031,172080],"source":"\\n<p>The namespace prefix of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[172148,172191],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI for the attribute.&lt;/p&gt;\\n","pos":[172252,172299],"source":"\\n<p>The namespace URI for the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[172434,172545],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[172546,172682]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[172683,172815]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[172816,172938]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.","pos":[172939,173079]},{"content":"&lt;/p&gt;\\n","pos":[173080,173086],"source":" </p>\\n"},{"pos":[174048,174096],"content":"WriteStartAttributeAsync(String, String, String)","needQuote":true,"nodes":[{"content":"WriteStartAttributeAsync(String, String, String)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The namespace prefix of the attribute.&lt;/p&gt;\\n","pos":[175022,175071],"source":"\\n<p>The namespace prefix of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[175139,175182],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI for the attribute.&lt;/p&gt;\\n","pos":[175243,175290],"source":"\\n<p>The namespace URI for the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteStartAttribute&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[175364,175464],"source":"\\n<p>The task that represents the asynchronous <strong>WriteStartAttribute</strong> operation.</p>\\n"},{"pos":[176892,176912],"content":"WriteStartDocument()","needQuote":true,"nodes":[{"content":"WriteStartDocument()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;This is not the first write method called after the constructor.&lt;/p&gt;\\n","pos":[177688,177763],"source":"\\n<p>This is not the first write method called after the constructor.</p>\\n"},{"pos":[178603,178630],"content":"WriteStartDocument(Boolean)","needQuote":true,"nodes":[{"content":"WriteStartDocument(Boolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;This is not the first write method called after the constructor.","pos":[179695,179764],"source":"\\n<p>This is not the first write method called after the constructor."},{"content":"&lt;/p&gt;\\n","pos":[179765,179771],"source":" </p>\\n"},{"pos":[180585,180610],"content":"WriteStartDocumentAsync()","needQuote":true,"nodes":[{"content":"WriteStartDocumentAsync()","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteStartDocument&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[181343,181442],"source":"\\n<p>The task that represents the asynchronous <strong>WriteStartDocument</strong> operation.</p>\\n"},{"pos":[182904,182936],"content":"WriteStartDocumentAsync(Boolean)","needQuote":true,"nodes":[{"content":"WriteStartDocumentAsync(Boolean)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteStartDocument&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[183958,184057],"source":"\\n<p>The task that represents the asynchronous <strong>WriteStartDocument</strong> operation.</p>\\n"},{"pos":[185505,185530],"content":"WriteStartElement(String)","needQuote":true,"nodes":[{"content":"WriteStartElement(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[186288,186329],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed.&lt;/p&gt;\\n","pos":[186456,186488],"source":"\\n<p>The writer is closed.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[186609,186720],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[186721,186857]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[186858,186990]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[186991,187113]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.","pos":[187114,187254]},{"content":"&lt;/p&gt;\\n","pos":[187255,187261],"source":" </p>\\n"},{"pos":[188112,188145],"content":"WriteStartElement(String, String)","needQuote":true,"nodes":[{"content":"WriteStartElement(String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[188964,189005],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI to associate with the element.","pos":[189066,189119],"source":"\\n<p>The namespace URI to associate with the element."},{"content":"If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.&lt;/p&gt;\\n","pos":[189120,189243],"source":" If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed.&lt;/p&gt;\\n","pos":[189370,189402],"source":"\\n<p>The writer is closed.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[189523,189634],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[189635,189771]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[189772,189904]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[189905,190027]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[190028,190174],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[191075,191116],"content":"WriteStartElement(String, String, String)","needQuote":true,"nodes":[{"content":"WriteStartElement(String, String, String)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The namespace prefix of the element.&lt;/p&gt;\\n","pos":[192013,192060],"source":"\\n<p>The namespace prefix of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[192128,192169],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI to associate with the element.&lt;/p&gt;\\n","pos":[192230,192289],"source":"\\n<p>The namespace URI to associate with the element.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed.&lt;/p&gt;\\n","pos":[192416,192448],"source":"\\n<p>The writer is closed.</p>\\n"},{"content":"\\n&lt;p&gt;There is a character in the buffer that is a valid XML character but is not valid for the output encoding.","pos":[192569,192680],"source":"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding."},{"content":"For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.","pos":[192681,192817]},{"content":"The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.","pos":[192818,192950]},{"content":"Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).","pos":[192951,193073]},{"content":"However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.&lt;/p&gt;\\n","pos":[193074,193220],"source":" However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n"},{"pos":[194174,194220],"content":"WriteStartElementAsync(String, String, String)","needQuote":true,"nodes":[{"content":"WriteStartElementAsync(String, String, String)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The namespace prefix of the element.&lt;/p&gt;\\n","pos":[195127,195174],"source":"\\n<p>The namespace prefix of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[195242,195283],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI to associate with the element.&lt;/p&gt;\\n","pos":[195344,195403],"source":"\\n<p>The namespace URI to associate with the element.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteStartElement&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[195477,195575],"source":"\\n<p>The task that represents the asynchronous <strong>WriteStartElement</strong> operation.</p>\\n"},{"pos":[197019,197038],"content":"WriteString(String)","needQuote":true,"nodes":[{"content":"WriteString(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The text to write.&lt;/p&gt;\\n","pos":[197756,197785],"source":"\\n<p>The text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The text string contains an invalid surrogate pair.&lt;/p&gt;\\n","pos":[197896,197958],"source":"\\n<p>The text string contains an invalid surrogate pair.</p>\\n"},{"pos":[198788,198812],"content":"WriteStringAsync(String)","needQuote":true,"nodes":[{"content":"WriteStringAsync(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The text to write.&lt;/p&gt;\\n","pos":[199540,199569],"source":"\\n<p>The text to write.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteString&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[199643,199735],"source":"\\n<p>The task that represents the asynchronous <strong>WriteString</strong> operation.</p>\\n"},{"pos":[201226,201262],"content":"WriteSurrogateCharEntity(Char, Char)","needQuote":true,"nodes":[{"content":"WriteSurrogateCharEntity(Char, Char)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The low surrogate.","pos":[202134,202157],"source":"\\n<p>The low surrogate."},{"content":"This must be a value between 0xDC00 and 0xDFFF.&lt;/p&gt;\\n","pos":[202158,202211],"source":" This must be a value between 0xDC00 and 0xDFFF.</p>\\n"},{"content":"\\n&lt;p&gt;The high surrogate.","pos":[202276,202300],"source":"\\n<p>The high surrogate."},{"content":"This must be a value between 0xD800 and 0xDBFF.&lt;/p&gt;\\n","pos":[202301,202354],"source":" This must be a value between 0xD800 and 0xDBFF.</p>\\n"},{"content":"\\n&lt;p&gt;An invalid surrogate character pair was passed.&lt;/p&gt;\\n","pos":[202465,202523],"source":"\\n<p>An invalid surrogate character pair was passed.</p>\\n"},{"pos":[203439,203480],"content":"WriteSurrogateCharEntityAsync(Char, Char)","needQuote":true,"nodes":[{"content":"WriteSurrogateCharEntityAsync(Char, Char)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The low surrogate.","pos":[204362,204385],"source":"\\n<p>The low surrogate."},{"content":"This must be a value between 0xDC00 and 0xDFFF.&lt;/p&gt;\\n","pos":[204386,204439],"source":" This must be a value between 0xDC00 and 0xDFFF.</p>\\n"},{"content":"\\n&lt;p&gt;The high surrogate.","pos":[204504,204528],"source":"\\n<p>The high surrogate."},{"content":"This must be a value between 0xD800 and 0xDBFF.&lt;/p&gt;\\n","pos":[204529,204582],"source":" This must be a value between 0xD800 and 0xDBFF.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteSurrogateCharEntity&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[204656,204761],"source":"\\n<p>The task that represents the asynchronous <strong>WriteSurrogateCharEntity</strong> operation.</p>\\n"},{"pos":[206200,206219],"content":"WriteValue(Boolean)","needQuote":true,"nodes":[{"content":"WriteValue(Boolean)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[207175,207217],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[208033,208053],"content":"WriteValue(DateTime)","needQuote":true,"nodes":[{"content":"WriteValue(DateTime)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[209014,209056],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[209891,209917],"content":"WriteValue(DateTimeOffset)","needQuote":true,"nodes":[{"content":"WriteValue(DateTimeOffset)","pos":[0,26]}]},{"pos":[211641,211660],"content":"WriteValue(Decimal)","needQuote":true,"nodes":[{"content":"WriteValue(Decimal)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[212619,212661],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[213471,213489],"content":"WriteValue(Double)","needQuote":true,"nodes":[{"content":"WriteValue(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[214442,214484],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[215290,215307],"content":"WriteValue(Int32)","needQuote":true,"nodes":[{"content":"WriteValue(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[216254,216296],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[217101,217118],"content":"WriteValue(Int64)","needQuote":true,"nodes":[{"content":"WriteValue(Int64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[218063,218105],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[218913,218931],"content":"WriteValue(Object)","needQuote":true,"nodes":[{"content":"WriteValue(Object)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[219929,219971],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[220076,220131],"source":"\\n<p>The <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed or in error state.&lt;/p&gt;\\n","pos":[220244,220294],"source":"\\n<p>The writer is closed or in error state.</p>\\n"},{"pos":[221103,221121],"content":"WriteValue(Single)","needQuote":true,"nodes":[{"content":"WriteValue(Single)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to write.&lt;/p&gt;\\n","pos":[221817,221880],"source":"\\n<p>The single-precision floating-point number to write.</p>\\n"},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[221991,222033],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[222842,222860],"content":"WriteValue(String)","needQuote":true,"nodes":[{"content":"WriteValue(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An invalid value was specified.&lt;/p&gt;\\n","pos":[223813,223855],"source":"\\n<p>An invalid value was specified.</p>\\n"},{"pos":[224679,224702],"content":"WriteWhitespace(String)","needQuote":true,"nodes":[{"content":"WriteWhitespace(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string of white space characters.&lt;/p&gt;\\n","pos":[225433,225481],"source":"\\n<p>The string of white space characters.</p>\\n"},{"content":"\\n&lt;p&gt;The string contains non-white space characters.&lt;/p&gt;\\n","pos":[225592,225650],"source":"\\n<p>The string contains non-white space characters.</p>\\n"},{"pos":[226496,226524],"content":"WriteWhitespaceAsync(String)","needQuote":true,"nodes":[{"content":"WriteWhitespaceAsync(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The string of white space characters.&lt;/p&gt;\\n","pos":[227265,227313],"source":"\\n<p>The string of white space characters.</p>\\n"},{"content":"\\n&lt;p&gt;The task that represents the asynchronous &lt;strong&gt;WriteWhitespace&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[227387,227483],"source":"\\n<p>The task that represents the asynchronous <strong>WriteWhitespace</strong> operation.</p>\\n"},{"pos":[228750,228760],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[228903,228909],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[229059,229070],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[229245,229255],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[229350,229358],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[229427,229428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229455,229456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229526,229534],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[229603,229604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229631,229632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229815,229829],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[229948,229954],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[230021,230022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230072,230078],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[230138,230139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230222,230228],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[230295,230296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230346,230352],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[230412,230413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230627,230649],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[230797,230803],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[230870,230871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230921,230927],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[230988,230989]},{"pos":[231044,231050],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[231110,231111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[231208,231214],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[231281,231282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[231332,231338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[231399,231400]},{"pos":[231455,231461],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[231521,231522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[231767,231798],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[231964,231979],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[232055,232056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[232106,232112],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[232173,232174]},{"pos":[232229,232235],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[232295,232296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[232402,232417],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[232493,232494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[232544,232550],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[232611,232612]},{"pos":[232667,232673],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[232733,232734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[232964,232977],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[233078,233089],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[233161,233162],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[233189,233190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[233263,233274],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[233346,233347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[233374,233375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[233550,233559],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[233652,233659],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[233727,233728],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[233755,233756],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[233825,233832],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[233900,233901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[233928,233929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[234104,234121],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[234230,234245],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[234321,234322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[234349,234350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[234427,234442],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[234518,234519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[234546,234547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[234692,234698],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[234848,234865],"content":"XmlWriterSettings","needQuote":true,"nodes":[{"content":"XmlWriterSettings","pos":[0,17]}]},{"pos":[235063,235073],"content":"WriteState","needQuote":true,"nodes":[{"content":"WriteState","pos":[0,10]}]},{"pos":[235238,235244],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[235399,235407],"content":"XmlSpace","needQuote":true,"nodes":[{"content":"XmlSpace","pos":[0,8]}]},{"pos":[235572,235578],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[235740,235749],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[235890,235899],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[236049,236059],"content":"TextWriter","needQuote":true,"nodes":[{"content":"TextWriter","pos":[0,10]}]},{"pos":[236239,236252],"content":"StringBuilder","needQuote":true,"nodes":[{"content":"StringBuilder","pos":[0,13]}]},{"pos":[236409,236420],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[236591,236600],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[236703,236710],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[236762,236763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[236790,236791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[236865,236872],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[236924,236925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[236952,236953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[237117,237124],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[237302,237306],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[237469,237491],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[237681,237690],"content":"XmlReader","needQuote":true,"nodes":[{"content":"XmlReader","pos":[0,9]}]},{"pos":[237815,237821],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[237941,237945],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[238004,238006]},{"pos":[238069,238073],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[238131,238133],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[238265,238270],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[238410,238414],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[238516,238522],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[238642,238646],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[238705,238707]},{"pos":[238770,238774],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[238832,238834],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[238969,238977],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[239136,239150],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[239320,239327],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[239475,239481],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[239625,239630],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[239772,239778],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[239942,239967],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[240167,240188],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[240389,240406],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[240577,240589],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]},{"pos":[240764,240791],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[241005,241029],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  id: XmlWriter\n  parent: System.Xml\n  children:\n  - System.Xml.XmlWriter.#ctor\n  - System.Xml.XmlWriter.Create(System.IO.Stream)\n  - System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)\n  - System.Xml.XmlWriter.Create(System.IO.TextWriter)\n  - System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)\n  - System.Xml.XmlWriter.Create(System.Text.StringBuilder)\n  - System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)\n  - System.Xml.XmlWriter.Create(System.Xml.XmlWriter)\n  - System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)\n  - System.Xml.XmlWriter.Dispose\n  - System.Xml.XmlWriter.Dispose(System.Boolean)\n  - System.Xml.XmlWriter.Flush\n  - System.Xml.XmlWriter.FlushAsync\n  - System.Xml.XmlWriter.LookupPrefix(System.String)\n  - System.Xml.XmlWriter.Settings\n  - System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)\n  - System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)\n  - System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)\n  - System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteCData(System.String)\n  - System.Xml.XmlWriter.WriteCDataAsync(System.String)\n  - System.Xml.XmlWriter.WriteCharEntity(System.Char)\n  - System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)\n  - System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteComment(System.String)\n  - System.Xml.XmlWriter.WriteCommentAsync(System.String)\n  - System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteElementString(System.String,System.String)\n  - System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteEndAttribute\n  - System.Xml.XmlWriter.WriteEndAttributeAsync\n  - System.Xml.XmlWriter.WriteEndDocument\n  - System.Xml.XmlWriter.WriteEndDocumentAsync\n  - System.Xml.XmlWriter.WriteEndElement\n  - System.Xml.XmlWriter.WriteEndElementAsync\n  - System.Xml.XmlWriter.WriteEntityRef(System.String)\n  - System.Xml.XmlWriter.WriteEntityRefAsync(System.String)\n  - System.Xml.XmlWriter.WriteFullEndElement\n  - System.Xml.XmlWriter.WriteFullEndElementAsync\n  - System.Xml.XmlWriter.WriteName(System.String)\n  - System.Xml.XmlWriter.WriteNameAsync(System.String)\n  - System.Xml.XmlWriter.WriteNmToken(System.String)\n  - System.Xml.XmlWriter.WriteNmTokenAsync(System.String)\n  - System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\n  - System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)\n  - System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\n  - System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)\n  - System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)\n  - System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)\n  - System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteRaw(System.String)\n  - System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlWriter.WriteRawAsync(System.String)\n  - System.Xml.XmlWriter.WriteStartAttribute(System.String)\n  - System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\n  - System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteStartDocument\n  - System.Xml.XmlWriter.WriteStartDocument(System.Boolean)\n  - System.Xml.XmlWriter.WriteStartDocumentAsync\n  - System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)\n  - System.Xml.XmlWriter.WriteStartElement(System.String)\n  - System.Xml.XmlWriter.WriteStartElement(System.String,System.String)\n  - System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)\n  - System.Xml.XmlWriter.WriteState\n  - System.Xml.XmlWriter.WriteString(System.String)\n  - System.Xml.XmlWriter.WriteStringAsync(System.String)\n  - System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)\n  - System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)\n  - System.Xml.XmlWriter.WriteValue(System.Boolean)\n  - System.Xml.XmlWriter.WriteValue(System.DateTime)\n  - System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)\n  - System.Xml.XmlWriter.WriteValue(System.Decimal)\n  - System.Xml.XmlWriter.WriteValue(System.Double)\n  - System.Xml.XmlWriter.WriteValue(System.Int32)\n  - System.Xml.XmlWriter.WriteValue(System.Int64)\n  - System.Xml.XmlWriter.WriteValue(System.Object)\n  - System.Xml.XmlWriter.WriteValue(System.Single)\n  - System.Xml.XmlWriter.WriteValue(System.String)\n  - System.Xml.XmlWriter.WriteWhitespace(System.String)\n  - System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)\n  - System.Xml.XmlWriter.XmlLang\n  - System.Xml.XmlWriter.XmlSpace\n  langs:\n  - csharp\n  - vb\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlWriter\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 378\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.</p>\\n\"\n  syntax:\n    content: 'public abstract class XmlWriter : IDisposable'\n    content.vb: >-\n      Public MustInherit Class XmlWriter\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XmlWriter\n- uid: System.Xml.XmlWriter.#ctor\n  commentId: M:System.Xml.XmlWriter.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: XmlWriter()\n  fullName: System.Xml.XmlWriter.XmlWriter()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 380\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected XmlWriter()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlWriter.XmlWriter()\n- uid: System.Xml.XmlWriter.Settings\n  commentId: P:System.Xml.XmlWriter.Settings\n  id: Settings\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Settings\n  fullName: System.Xml.XmlWriter.Settings\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Settings\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 381\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to create this <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual XmlWriterSettings Settings { get; }\n    content.vb: Public Overridable ReadOnly Property Settings As XmlWriterSettings\n    parameters: []\n    return:\n      type: System.Xml.XmlWriterSettings\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to create this writer instance. If this writer was not created using the <xref href=\\\"System.Xml.XmlWriter.Create(System.IO.Stream)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method, this property returns <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlWriter.Settings\n- uid: System.Xml.XmlWriter.WriteState\n  commentId: P:System.Xml.XmlWriter.WriteState\n  id: WriteState\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteState\n  fullName: System.Xml.XmlWriter.WriteState\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteState\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 382\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, gets the state of the writer.</p>\\n\"\n  syntax:\n    content: public abstract WriteState WriteState { get; }\n    content.vb: Public MustOverride ReadOnly Property WriteState As WriteState\n    parameters: []\n    return:\n      type: System.Xml.WriteState\n      description: \"\\n<p>One of the <xref href=\\\"System.Xml.WriteState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XmlWriter.WriteState\n- uid: System.Xml.XmlWriter.XmlLang\n  commentId: P:System.Xml.XmlWriter.XmlLang\n  id: XmlLang\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: XmlLang\n  fullName: System.Xml.XmlWriter.XmlLang\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlLang\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 383\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, gets the current <strong>xml:lang</strong> scope.</p>\\n\"\n  syntax:\n    content: public virtual string XmlLang { get; }\n    content.vb: Public Overridable ReadOnly Property XmlLang As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The current <strong>xml:lang</strong> scope.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlWriter.XmlLang\n- uid: System.Xml.XmlWriter.XmlSpace\n  commentId: P:System.Xml.XmlWriter.XmlSpace\n  id: XmlSpace\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: XmlSpace\n  fullName: System.Xml.XmlWriter.XmlSpace\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlSpace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 384\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, gets an <xref href=\\\"System.Xml.XmlSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the current <strong>xml:space</strong> scope.</p>\\n\"\n  syntax:\n    content: public virtual XmlSpace XmlSpace { get; }\n    content.vb: Public Overridable ReadOnly Property XmlSpace As XmlSpace\n    parameters: []\n    return:\n      type: System.Xml.XmlSpace\n      description: \"\\n<p>An <strong>XmlSpace</strong> representing the current <strong>xml:space</strong> scope.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>\\n<strong>None</strong>\\n</p>\\n</td><td>\\n<p>This is the default if no <strong>xml:space</strong> scope exists.</p>\\n</td></tr><tr><td>\\n<p>\\n<strong>Default</strong>\\n</p>\\n</td><td>\\n<p>The current scope is <strong>xml:space</strong>=\\\"default\\\".</p>\\n</td></tr><tr><td>\\n<p>\\n<strong>Preserve</strong>\\n</p>\\n</td><td>\\n<p>The current scope is <strong>xml:space</strong>=\\\"preserve\\\".</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlWriter.XmlSpace\n- uid: System.Xml.XmlWriter.Create(System.IO.Stream)\n  commentId: M:System.Xml.XmlWriter.Create(System.IO.Stream)\n  id: Create(System.IO.Stream)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(Stream)\n  fullName: System.Xml.XmlWriter.Create(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 385\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the specified stream.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(Stream output)\n    content.vb: Public Shared Function Create(output As Stream) As XmlWriter\n    parameters:\n    - id: output\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which you want to write. The <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> writes XML 1.0 text syntax and appends it to the specified stream.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>stream</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(Stream)\n- uid: System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)\n  commentId: M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)\n  id: Create(System.IO.Stream,System.Xml.XmlWriterSettings)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(Stream, XmlWriterSettings)\n  fullName: System.Xml.XmlWriter.Create(System.IO.Stream, System.Xml.XmlWriterSettings)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 386\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the stream and <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(Stream output, XmlWriterSettings settings)\n    content.vb: Public Shared Function Create(output As Stream, settings As XmlWriterSettings) As XmlWriter\n    parameters:\n    - id: output\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which you want to write. The <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> writes XML 1.0 text syntax and appends it to the specified stream.</p>\\n\"\n    - id: settings\n      type: System.Xml.XmlWriterSettings\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to configure the new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. If this is <strong>null</strong>, a <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with default settings is used.</p>\\n<p>If the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is being used with the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method, you should use the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain an <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the correct settings. This ensures that the created <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has the correct output settings.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>stream</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(Stream, XmlWriterSettings)\n- uid: System.Xml.XmlWriter.Create(System.IO.TextWriter)\n  commentId: M:System.Xml.XmlWriter.Create(System.IO.TextWriter)\n  id: Create(System.IO.TextWriter)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(TextWriter)\n  fullName: System.Xml.XmlWriter.Create(System.IO.TextWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 387\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the specified <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(TextWriter output)\n    content.vb: Public Shared Function Create(output As TextWriter) As XmlWriter\n    parameters:\n    - id: output\n      type: System.IO.TextWriter\n      description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which you want to write. The <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> writes XML 1.0 text syntax and appends it to the specified <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>text</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(TextWriter)\n- uid: System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)\n  commentId: M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)\n  id: Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(TextWriter, XmlWriterSettings)\n  fullName: System.Xml.XmlWriter.Create(System.IO.TextWriter, System.Xml.XmlWriterSettings)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 388\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(TextWriter output, XmlWriterSettings settings)\n    content.vb: Public Shared Function Create(output As TextWriter, settings As XmlWriterSettings) As XmlWriter\n    parameters:\n    - id: output\n      type: System.IO.TextWriter\n      description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which you want to write. The <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> writes XML 1.0 text syntax and appends it to the specified <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: settings\n      type: System.Xml.XmlWriterSettings\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to configure the new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. If this is <strong>null</strong>, a <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with default settings is used.</p>\\n<p>If the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is being used with the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method, you should use the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain an <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the correct settings. This ensures that the created <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has the correct output settings.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>text</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(TextWriter, XmlWriterSettings)\n- uid: System.Xml.XmlWriter.Create(System.Text.StringBuilder)\n  commentId: M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)\n  id: Create(System.Text.StringBuilder)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(StringBuilder)\n  fullName: System.Xml.XmlWriter.Create(System.Text.StringBuilder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 389\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the specified <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(StringBuilder output)\n    content.vb: Public Shared Function Create(output As StringBuilder) As XmlWriter\n    parameters:\n    - id: output\n      type: System.Text.StringBuilder\n      description: \"\\n<p>The <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to write to. Content written by the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is appended to the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>builder</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(StringBuilder)\n- uid: System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)\n  commentId: M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)\n  id: Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(StringBuilder, XmlWriterSettings)\n  fullName: System.Xml.XmlWriter.Create(System.Text.StringBuilder, System.Xml.XmlWriterSettings)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 390\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings)\n    content.vb: Public Shared Function Create(output As StringBuilder, settings As XmlWriterSettings) As XmlWriter\n    parameters:\n    - id: output\n      type: System.Text.StringBuilder\n      description: \"\\n<p>The <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to write to. Content written by the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is appended to the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: settings\n      type: System.Xml.XmlWriterSettings\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to configure the new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. If this is <strong>null</strong>, a <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with default settings is used.</p>\\n<p>If the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is being used with the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method, you should use the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain an <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the correct settings. This ensures that the created <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has the correct output settings.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>builder</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(StringBuilder, XmlWriterSettings)\n- uid: System.Xml.XmlWriter.Create(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)\n  id: Create(System.Xml.XmlWriter)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(XmlWriter)\n  fullName: System.Xml.XmlWriter.Create(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 391\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(XmlWriter output)\n    content.vb: Public Shared Function Create(output As XmlWriter) As XmlWriter\n    parameters:\n    - id: output\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that you want to use as the underlying writer.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is wrapped around the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>writer</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(XmlWriter)\n- uid: System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)\n  commentId: M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)\n  id: Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Create(XmlWriter, XmlWriterSettings)\n  fullName: System.Xml.XmlWriter.Create(System.Xml.XmlWriter, System.Xml.XmlWriterSettings)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 392\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings)\n    content.vb: Public Shared Function Create(output As XmlWriter, settings As XmlWriterSettings) As XmlWriter\n    parameters:\n    - id: output\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that you want to use as the underlying writer.</p>\\n\"\n    - id: settings\n      type: System.Xml.XmlWriterSettings\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to configure the new <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. If this is <strong>null</strong>, a <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with default settings is used.</p>\\n<p>If the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is being used with the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method, you should use the <xref href=\\\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain an <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the correct settings. This ensures that the created <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has the correct output settings.</p>\\n\"\n    return:\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is wrapped around the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>writer</em> value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlWriter.Create(XmlWriter, XmlWriterSettings)\n- uid: System.Xml.XmlWriter.Dispose\n  commentId: M:System.Xml.XmlWriter.Dispose\n  id: Dispose\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Xml.XmlWriter.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 393\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.Dispose()\n- uid: System.Xml.XmlWriter.Dispose(System.Boolean)\n  commentId: M:System.Xml.XmlWriter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Xml.XmlWriter.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 394\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: XmlWriter.Dispose(Boolean)\n- uid: System.Xml.XmlWriter.Flush\n  commentId: M:System.Xml.XmlWriter.Flush\n  id: Flush\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.Xml.XmlWriter.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Flush\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 395\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</p>\\n\"\n  syntax:\n    content: public abstract void Flush()\n    content.vb: Public MustOverride Sub Flush\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.Flush()\n- uid: System.Xml.XmlWriter.FlushAsync\n  commentId: M:System.Xml.XmlWriter.FlushAsync\n  id: FlushAsync\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: FlushAsync()\n  fullName: System.Xml.XmlWriter.FlushAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FlushAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 396\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</p>\\n\"\n  syntax:\n    content: public virtual Task FlushAsync()\n    content.vb: Public Overridable Function FlushAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>Flush</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.FlushAsync()\n- uid: System.Xml.XmlWriter.LookupPrefix(System.String)\n  commentId: M:System.Xml.XmlWriter.LookupPrefix(System.String)\n  id: LookupPrefix(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: LookupPrefix(String)\n  fullName: System.Xml.XmlWriter.LookupPrefix(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LookupPrefix\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 397\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</p>\\n\"\n  syntax:\n    content: public abstract string LookupPrefix(string ns)\n    content.vb: Public MustOverride Function LookupPrefix(ns As String) As String\n    parameters:\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI whose prefix you want to find.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The matching prefix or <strong>null</strong> if no matching namespace URI is found in the current scope.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ns</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.LookupPrefix(String)\n- uid: System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)\n  id: WriteAttributes(System.Xml.XmlReader,System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributes(XmlReader, Boolean)\n  fullName: System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributes\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 398\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out all the attributes found at the current position in the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void WriteAttributes(XmlReader reader, bool defattr)\n    content.vb: Public Overridable Sub WriteAttributes(reader As XmlReader, defattr As Boolean)\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The <strong>XmlReader</strong> from which to copy the attributes.</p>\\n\"\n    - id: defattr\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>reader</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The reader is not positioned on an <strong>element</strong>, <strong>attribute</strong> or <strong>XmlDeclaration</strong> node. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteAttributes(XmlReader, Boolean)\n- uid: System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)\n  id: WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributesAsync(XmlReader, Boolean)\n  fullName: System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributesAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 399\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out all the attributes found at the current position in the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr)\n    content.vb: Public Overridable Function WriteAttributesAsync(reader As XmlReader, defattr As Boolean) As Task\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The <strong>XmlReader</strong> from which to copy the attributes.</p>\\n\"\n    - id: defattr\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteAttributes</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteAttributesAsync(XmlReader, Boolean)\n- uid: System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)\n  id: WriteAttributeString(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributeString(String, String)\n  fullName: System.Xml.XmlWriter.WriteAttributeString(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributeString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 400\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out the attribute with the specified local name and value.</p>\\n\"\n  syntax:\n    content: public void WriteAttributeString(string localName, string value)\n    content.vb: Public Sub WriteAttributeString(localName As String, value As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteAttributeString(String, String)\n- uid: System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)\n  id: WriteAttributeString(System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributeString(String, String, String)\n  fullName: System.Xml.XmlWriter.WriteAttributeString(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributeString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 401\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</p>\\n\"\n  syntax:\n    content: public void WriteAttributeString(string localName, string ns, string value)\n    content.vb: Public Sub WriteAttributeString(localName As String, ns As String, value As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI to associate with the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteAttributeString(String, String, String)\n- uid: System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)\n  id: WriteAttributeString(System.String,System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributeString(String, String, String, String)\n  fullName: System.Xml.XmlWriter.WriteAttributeString(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributeString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 402\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</p>\\n\"\n  syntax:\n    content: public void WriteAttributeString(string prefix, string localName, string ns, string value)\n    content.vb: Public Sub WriteAttributeString(prefix As String, localName As String, ns As String, value As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix of the attribute.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The state of writer is not <strong>WriteState.Element</strong> or writer is closed. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <strong>xml:space</strong> or <strong>xml:lang</strong> attribute value is invalid. </p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The <em>localName</em> or <em>ns</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteAttributeString(String, String, String, String)\n- uid: System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\n  id: WriteAttributeStringAsync(System.String,System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributeStringAsync(String, String, String, String)\n  fullName: System.Xml.XmlWriter.WriteAttributeStringAsync(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributeStringAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 403\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.</p>\\n\"\n  syntax:\n    content: public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value)\n    content.vb: Public Function WriteAttributeStringAsync(prefix As String, localName As String, ns As String, value As String) As Task\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix of the attribute.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteAttributeString</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteAttributeStringAsync(String, String, String, String)\n- uid: System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)\n  id: WriteBase64(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteBase64(Byte[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteBase64(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteBase64\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 404\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</p>\\n\"\n  syntax:\n    content: public abstract void WriteBase64(byte[] buffer, int index, int count)\n    content.vb: Public MustOverride Sub WriteBase64(buffer As Byte(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>Byte array to encode.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Xml.XmlWriter.WriteBase64(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteBase64(Byte(), Int32, Int32)\n  nameWithType: XmlWriter.WriteBase64(Byte[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteBase64(Byte(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)\n  id: WriteBase64Async(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteBase64Async(Byte[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteBase64Async(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteBase64Async\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 405\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteBase64Async(byte[] buffer, int index, int count)\n    content.vb: Public Overridable Function WriteBase64Async(buffer As Byte(), index As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>Byte array to encode.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteBase64</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlWriter.WriteBase64Async(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteBase64Async(Byte(), Int32, Int32)\n  nameWithType: XmlWriter.WriteBase64Async(Byte[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteBase64Async(Byte(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)\n  id: WriteBinHex(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteBinHex(Byte[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteBinHex(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteBinHex\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 406\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, encodes the specified binary bytes as <strong>BinHex</strong> and writes out the resulting text.</p>\\n\"\n  syntax:\n    content: public virtual void WriteBinHex(byte[] buffer, int index, int count)\n    content.vb: Public Overridable Sub WriteBinHex(buffer As Byte(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>Byte array to encode.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed or in error state.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlWriter.WriteBinHex(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteBinHex(Byte(), Int32, Int32)\n  nameWithType: XmlWriter.WriteBinHex(Byte[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteBinHex(Byte(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)\n  id: WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteBinHexAsync(Byte[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteBinHexAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 407\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously encodes the specified binary bytes as <strong>BinHex</strong> and writes out the resulting text.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteBinHexAsync(byte[] buffer, int index, int count)\n    content.vb: Public Overridable Function WriteBinHexAsync(buffer As Byte(), index As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>Byte array to encode.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the buffer indicating the start of the bytes to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteBinHex</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlWriter.WriteBinHexAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteBinHexAsync(Byte(), Int32, Int32)\n  nameWithType: XmlWriter.WriteBinHexAsync(Byte[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteBinHexAsync(Byte(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteCData(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteCData(System.String)\n  id: WriteCData(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteCData(String)\n  fullName: System.Xml.XmlWriter.WriteCData(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteCData\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 408\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out a <![CDATA[...]]> block containing the specified text.</p>\\n\"\n  syntax:\n    content: public abstract void WriteCData(string text)\n    content.vb: Public MustOverride Sub WriteCData(text As String)\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to place inside the CDATA block.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The text would result in a non-well formed XML document.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteCData(String)\n- uid: System.Xml.XmlWriter.WriteCDataAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteCDataAsync(System.String)\n  id: WriteCDataAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteCDataAsync(String)\n  fullName: System.Xml.XmlWriter.WriteCDataAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteCDataAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 409\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out a <![CDATA[...]]> block containing the specified text.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteCDataAsync(string text)\n    content.vb: Public Overridable Function WriteCDataAsync(text As String) As Task\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to place inside the CDATA block.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteCData</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteCDataAsync(String)\n- uid: System.Xml.XmlWriter.WriteCharEntity(System.Char)\n  commentId: M:System.Xml.XmlWriter.WriteCharEntity(System.Char)\n  id: WriteCharEntity(System.Char)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteCharEntity(Char)\n  fullName: System.Xml.XmlWriter.WriteCharEntity(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteCharEntity\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 410\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</p>\\n\"\n  syntax:\n    content: public abstract void WriteCharEntity(char ch)\n    content.vb: Public MustOverride Sub WriteCharEntity(ch As Char)\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>The Unicode character for which to generate a character entity.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The character is in the surrogate pair character range, <strong>0xd800</strong> - <strong>0xdfff</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteCharEntity(Char)\n- uid: System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)\n  commentId: M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)\n  id: WriteCharEntityAsync(System.Char)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteCharEntityAsync(Char)\n  fullName: System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteCharEntityAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 411\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously forces the generation of a character entity for the specified Unicode character value.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteCharEntityAsync(char ch)\n    content.vb: Public Overridable Function WriteCharEntityAsync(ch As Char) As Task\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>The Unicode character for which to generate a character entity.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteCharEntity</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteCharEntityAsync(Char)\n- uid: System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)\n  id: WriteChars(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteChars(Char[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteChars(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteChars\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 412\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes text one buffer at a time.</p>\\n\"\n  syntax:\n    content: public abstract void WriteChars(char[] buffer, int index, int count)\n    content.vb: Public MustOverride Sub WriteChars(buffer As Char(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>Character array containing the text to write.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the buffer indicating the start of the text to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>buffer</em> parameter value is not valid.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Xml.XmlWriter.WriteChars(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteChars(Char(), Int32, Int32)\n  nameWithType: XmlWriter.WriteChars(Char[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteChars(Char(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteCharsAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteCharsAsync(Char[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteCharsAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteCharsAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 413\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes text one buffer at a time.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteCharsAsync(char[] buffer, int index, int count)\n    content.vb: Public Overridable Function WriteCharsAsync(buffer As Char(), index As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>Character array containing the text to write.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the buffer indicating the start of the text to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteChars</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlWriter.WriteCharsAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteCharsAsync(Char(), Int32, Int32)\n  nameWithType: XmlWriter.WriteCharsAsync(Char[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteCharsAsync(Char(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteComment(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteComment(System.String)\n  id: WriteComment(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteComment(String)\n  fullName: System.Xml.XmlWriter.WriteComment(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteComment\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 414\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out a comment <!--...--> containing the specified text.</p>\\n\"\n  syntax:\n    content: public abstract void WriteComment(string text)\n    content.vb: Public MustOverride Sub WriteComment(text As String)\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>Text to place inside the comment.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The text would result in a non-well-formed XML document.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteComment(String)\n- uid: System.Xml.XmlWriter.WriteCommentAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteCommentAsync(System.String)\n  id: WriteCommentAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteCommentAsync(String)\n  fullName: System.Xml.XmlWriter.WriteCommentAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteCommentAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 415\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out a comment <!--...--> containing the specified text.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteCommentAsync(string text)\n    content.vb: Public Overridable Function WriteCommentAsync(text As String) As Task\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>Text to place inside the comment.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteComment</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteCommentAsync(String)\n- uid: System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)\n  id: WriteDocType(System.String,System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteDocType(String, String, String, String)\n  fullName: System.Xml.XmlWriter.WriteDocType(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteDocType\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 416\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</p>\\n\"\n  syntax:\n    content: public abstract void WriteDocType(string name, string pubid, string sysid, string subset)\n    content.vb: Public MustOverride Sub WriteDocType(name As String, pubid As String, sysid As String, subset As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the DOCTYPE. This must be non-empty.</p>\\n\"\n    - id: pubid\n      type: System.String\n      description: \"\\n<p>If non-null it also writes PUBLIC \\\"pubid\\\" \\\"sysid\\\" where <em>pubid</em> and <em>sysid</em> are replaced with the value of the given arguments.</p>\\n\"\n    - id: sysid\n      type: System.String\n      description: \"\\n<p>If <em>pubid</em> is <strong>null</strong> and <em>sysid</em> is non-null it writes SYSTEM \\\"sysid\\\" where <em>sysid</em> is replaced with the value of this argument.</p>\\n\"\n    - id: subset\n      type: System.String\n      description: \"\\n<p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This method was called outside the prolog (after the root element). </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value for <em>name</em> would result in invalid XML.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteDocType(String, String, String, String)\n- uid: System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)\n  id: WriteDocTypeAsync(System.String,System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteDocTypeAsync(String, String, String, String)\n  fullName: System.Xml.XmlWriter.WriteDocTypeAsync(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteDocTypeAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 417\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)\n    content.vb: Public Overridable Function WriteDocTypeAsync(name As String, pubid As String, sysid As String, subset As String) As Task\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the DOCTYPE. This must be non-empty.</p>\\n\"\n    - id: pubid\n      type: System.String\n      description: \"\\n<p>If non-null it also writes PUBLIC \\\"pubid\\\" \\\"sysid\\\" where <em>pubid</em> and <em>sysid</em> are replaced with the value of the given arguments.</p>\\n\"\n    - id: sysid\n      type: System.String\n      description: \"\\n<p>If <em>pubid</em> is <strong>null</strong> and <em>sysid</em> is non-null it writes SYSTEM \\\"sysid\\\" where <em>sysid</em> is replaced with the value of this argument.</p>\\n\"\n    - id: subset\n      type: System.String\n      description: \"\\n<p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteDocType</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteDocTypeAsync(String, String, String, String)\n- uid: System.Xml.XmlWriter.WriteElementString(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)\n  id: WriteElementString(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteElementString(String, String)\n  fullName: System.Xml.XmlWriter.WriteElementString(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteElementString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 418\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an element with the specified local name and value.</p>\\n\"\n  syntax:\n    content: public void WriteElementString(string localName, string value)\n    content.vb: Public Sub WriteElementString(localName As String, value As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>The parameter values are not valid.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteElementString(String, String)\n- uid: System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)\n  id: WriteElementString(System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteElementString(String, String, String)\n  fullName: System.Xml.XmlWriter.WriteElementString(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteElementString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 419\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an element with the specified local name, namespace URI, and value.</p>\\n\"\n  syntax:\n    content: public void WriteElementString(string localName, string ns, string value)\n    content.vb: Public Sub WriteElementString(localName As String, ns As String, value As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI to associate with the element.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>The parameter values are not valid.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteElementString(String, String, String)\n- uid: System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)\n  id: WriteElementString(System.String,System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteElementString(String, String, String, String)\n  fullName: System.Xml.XmlWriter.WriteElementString(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteElementString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 420\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an element with the specified prefix, local name, namespace URI, and value.</p>\\n\"\n  syntax:\n    content: public void WriteElementString(string prefix, string localName, string ns, string value)\n    content.vb: Public Sub WriteElementString(prefix As String, localName As String, ns As String, value As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the element.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>localName</em> value is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>The parameter values are not valid.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteElementString(String, String, String, String)\n- uid: System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)\n  id: WriteElementStringAsync(System.String,System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteElementStringAsync(String, String, String, String)\n  fullName: System.Xml.XmlWriter.WriteElementStringAsync(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteElementStringAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 421\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.</p>\\n\"\n  syntax:\n    content: public Task WriteElementStringAsync(string prefix, string localName, string ns, string value)\n    content.vb: Public Function WriteElementStringAsync(prefix As String, localName As String, ns As String, value As String) As Task\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the element.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the element.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteElementString</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteElementStringAsync(String, String, String, String)\n- uid: System.Xml.XmlWriter.WriteEndAttribute\n  commentId: M:System.Xml.XmlWriter.WriteEndAttribute\n  id: WriteEndAttribute\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEndAttribute()\n  fullName: System.Xml.XmlWriter.WriteEndAttribute()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndAttribute\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 422\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, closes the previous <xref href=\\\"System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> call.</p>\\n\"\n  syntax:\n    content: public abstract void WriteEndAttribute()\n    content.vb: Public MustOverride Sub WriteEndAttribute\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteEndAttribute()\n- uid: System.Xml.XmlWriter.WriteEndAttributeAsync\n  commentId: M:System.Xml.XmlWriter.WriteEndAttributeAsync\n  id: WriteEndAttributeAsync\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEndAttributeAsync()\n  fullName: System.Xml.XmlWriter.WriteEndAttributeAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndAttributeAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 423\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously closes the previous <xref href=\\\"System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> call.</p>\\n\"\n  syntax:\n    content: protected virtual Task WriteEndAttributeAsync()\n    content.vb: Protected Overridable Function WriteEndAttributeAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteEndAttribute</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: XmlWriter.WriteEndAttributeAsync()\n- uid: System.Xml.XmlWriter.WriteEndDocument\n  commentId: M:System.Xml.XmlWriter.WriteEndDocument\n  id: WriteEndDocument\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEndDocument()\n  fullName: System.Xml.XmlWriter.WriteEndDocument()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndDocument\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 424\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</p>\\n\"\n  syntax:\n    content: public abstract void WriteEndDocument()\n    content.vb: Public MustOverride Sub WriteEndDocument\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The XML document is invalid.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteEndDocument()\n- uid: System.Xml.XmlWriter.WriteEndDocumentAsync\n  commentId: M:System.Xml.XmlWriter.WriteEndDocumentAsync\n  id: WriteEndDocumentAsync\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEndDocumentAsync()\n  fullName: System.Xml.XmlWriter.WriteEndDocumentAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndDocumentAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 425\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously closes any open elements or attributes and puts the writer back in the Start state.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteEndDocumentAsync()\n    content.vb: Public Overridable Function WriteEndDocumentAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteEndDocument</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteEndDocumentAsync()\n- uid: System.Xml.XmlWriter.WriteEndElement\n  commentId: M:System.Xml.XmlWriter.WriteEndElement\n  id: WriteEndElement\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEndElement()\n  fullName: System.Xml.XmlWriter.WriteEndElement()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndElement\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 426\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</p>\\n\"\n  syntax:\n    content: public abstract void WriteEndElement()\n    content.vb: Public MustOverride Sub WriteEndElement\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This results in an invalid XML document.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteEndElement()\n- uid: System.Xml.XmlWriter.WriteEndElementAsync\n  commentId: M:System.Xml.XmlWriter.WriteEndElementAsync\n  id: WriteEndElementAsync\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEndElementAsync()\n  fullName: System.Xml.XmlWriter.WriteEndElementAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndElementAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 427\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously closes one element and pops the corresponding namespace scope.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteEndElementAsync()\n    content.vb: Public Overridable Function WriteEndElementAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteEndElement</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteEndElementAsync()\n- uid: System.Xml.XmlWriter.WriteEntityRef(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteEntityRef(System.String)\n  id: WriteEntityRef(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEntityRef(String)\n  fullName: System.Xml.XmlWriter.WriteEntityRef(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEntityRef\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 428\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out an entity reference as <strong>&name;</strong>.</p>\\n\"\n  syntax:\n    content: public abstract void WriteEntityRef(string name)\n    content.vb: Public MustOverride Sub WriteEntityRef(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the entity reference.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteEntityRef(String)\n- uid: System.Xml.XmlWriter.WriteEntityRefAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)\n  id: WriteEntityRefAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteEntityRefAsync(String)\n  fullName: System.Xml.XmlWriter.WriteEntityRefAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEntityRefAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 429\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out an entity reference as <strong>&name;</strong>.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteEntityRefAsync(string name)\n    content.vb: Public Overridable Function WriteEntityRefAsync(name As String) As Task\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the entity reference.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteEntityRef</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteEntityRefAsync(String)\n- uid: System.Xml.XmlWriter.WriteFullEndElement\n  commentId: M:System.Xml.XmlWriter.WriteFullEndElement\n  id: WriteFullEndElement\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteFullEndElement()\n  fullName: System.Xml.XmlWriter.WriteFullEndElement()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteFullEndElement\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 430\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</p>\\n\"\n  syntax:\n    content: public abstract void WriteFullEndElement()\n    content.vb: Public MustOverride Sub WriteFullEndElement\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteFullEndElement()\n- uid: System.Xml.XmlWriter.WriteFullEndElementAsync\n  commentId: M:System.Xml.XmlWriter.WriteFullEndElementAsync\n  id: WriteFullEndElementAsync\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteFullEndElementAsync()\n  fullName: System.Xml.XmlWriter.WriteFullEndElementAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteFullEndElementAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 431\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously closes one element and pops the corresponding namespace scope.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteFullEndElementAsync()\n    content.vb: Public Overridable Function WriteFullEndElementAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteFullEndElement</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteFullEndElementAsync()\n- uid: System.Xml.XmlWriter.WriteName(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteName(System.String)\n  id: WriteName(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteName(String)\n  fullName: System.Xml.XmlWriter.WriteName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 432\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\\n\"\n  syntax:\n    content: public virtual void WriteName(string name)\n    content.vb: Public Overridable Sub WriteName(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is not a valid XML name; or <em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteName(String)\n- uid: System.Xml.XmlWriter.WriteNameAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteNameAsync(System.String)\n  id: WriteNameAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNameAsync(String)\n  fullName: System.Xml.XmlWriter.WriteNameAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNameAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 433\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\\n\"\n  syntax:\n    content: public virtual Task WriteNameAsync(string name)\n    content.vb: Public Overridable Function WriteNameAsync(name As String) As Task\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteName</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteNameAsync(String)\n- uid: System.Xml.XmlWriter.WriteNmToken(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteNmToken(System.String)\n  id: WriteNmToken(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNmToken(String)\n  fullName: System.Xml.XmlWriter.WriteNmToken(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNmToken\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 434\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\\n\"\n  syntax:\n    content: public virtual void WriteNmToken(string name)\n    content.vb: Public Overridable Sub WriteNmToken(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is not a valid NmToken; or <em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteNmToken(String)\n- uid: System.Xml.XmlWriter.WriteNmTokenAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)\n  id: WriteNmTokenAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNmTokenAsync(String)\n  fullName: System.Xml.XmlWriter.WriteNmTokenAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNmTokenAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 435\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</p>\\n\"\n  syntax:\n    content: public virtual Task WriteNmTokenAsync(string name)\n    content.vb: Public Overridable Function WriteNmTokenAsync(name As String) As Task\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteNmToken</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteNmTokenAsync(String)\n- uid: System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\n  id: WriteNode(System.Xml.XmlReader,System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNode(XmlReader, Boolean)\n  fullName: System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNode\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 436\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</p>\\n\"\n  syntax:\n    content: public virtual void WriteNode(XmlReader reader, bool defattr)\n    content.vb: Public Overridable Sub WriteNode(reader As XmlReader, defattr As Boolean)\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read from.</p>\\n\"\n    - id: defattr\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>reader</em> contains invalid characters.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteNode(XmlReader, Boolean)\n- uid: System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)\n  id: WriteNodeAsync(System.Xml.XmlReader,System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNodeAsync(XmlReader, Boolean)\n  fullName: System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNodeAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 437\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteNodeAsync(XmlReader reader, bool defattr)\n    content.vb: Public Overridable Function WriteNodeAsync(reader As XmlReader, defattr As Boolean) As Task\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read from.</p>\\n\"\n    - id: defattr\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteNode</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteNodeAsync(XmlReader, Boolean)\n- uid: System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\n  id: WriteProcessingInstruction(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteProcessingInstruction(String, String)\n  fullName: System.Xml.XmlWriter.WriteProcessingInstruction(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteProcessingInstruction\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 438\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: <?name text?>.</p>\\n\"\n  syntax:\n    content: public abstract void WriteProcessingInstruction(string name, string text)\n    content.vb: Public MustOverride Sub WriteProcessingInstruction(name As String, text As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the processing instruction.</p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to include in the processing instruction.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The text would result in a non-well formed XML document.</p>\\n<p>\\n<em>name</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n<p>This method is being used to create an XML declaration after <xref href=\\\"System.Xml.XmlWriter.WriteStartDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been called. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteProcessingInstruction(String, String)\n- uid: System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)\n  id: WriteProcessingInstructionAsync(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteProcessingInstructionAsync(String, String)\n  fullName: System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteProcessingInstructionAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 439\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out a processing instruction with a space between the name and text as follows: <?name text?>.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteProcessingInstructionAsync(string name, string text)\n    content.vb: Public Overridable Function WriteProcessingInstructionAsync(name As String, text As String) As Task\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the processing instruction.</p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to include in the processing instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteProcessingInstruction</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteProcessingInstructionAsync(String, String)\n- uid: System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)\n  id: WriteQualifiedName(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteQualifiedName(String, String)\n  fullName: System.Xml.XmlWriter.WriteQualifiedName(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteQualifiedName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 440\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\\n\"\n  syntax:\n    content: public virtual void WriteQualifiedName(string localName, string ns)\n    content.vb: Public Overridable Sub WriteQualifiedName(localName As String, ns As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name to write.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI for the name.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>localName</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n<p>\\n<em>localName</em> is not a valid name. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteQualifiedName(String, String)\n- uid: System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)\n  id: WriteQualifiedNameAsync(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteQualifiedNameAsync(String, String)\n  fullName: System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteQualifiedNameAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 441\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteQualifiedNameAsync(string localName, string ns)\n    content.vb: Public Overridable Function WriteQualifiedNameAsync(localName As String, ns As String) As Task\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name to write.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI for the name.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteQualifiedName</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteQualifiedNameAsync(String, String)\n- uid: System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)\n  id: WriteRaw(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteRaw(Char[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteRaw(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteRaw\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 442\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes raw markup manually from a character buffer.</p>\\n\"\n  syntax:\n    content: public abstract void WriteRaw(char[] buffer, int index, int count)\n    content.vb: Public MustOverride Sub WriteRaw(buffer As Char(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>Character array containing the text to write.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position within the buffer indicating the start of the text to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Xml.XmlWriter.WriteRaw(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteRaw(Char(), Int32, Int32)\n  nameWithType: XmlWriter.WriteRaw(Char[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteRaw(Char(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteRaw(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteRaw(System.String)\n  id: WriteRaw(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteRaw(String)\n  fullName: System.Xml.XmlWriter.WriteRaw(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteRaw\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 443\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes raw markup manually from a string.</p>\\n\"\n  syntax:\n    content: public abstract void WriteRaw(string data)\n    content.vb: Public MustOverride Sub WriteRaw(data As String)\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>String containing the text to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>data</em> is either <strong>null</strong> or <strong>String.Empty</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteRaw(String)\n- uid: System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteRawAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteRawAsync(Char[], Int32, Int32)\n  fullName: System.Xml.XmlWriter.WriteRawAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteRawAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 444\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes raw markup manually from a character buffer.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteRawAsync(char[] buffer, int index, int count)\n    content.vb: Public Overridable Function WriteRawAsync(buffer As Char(), index As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>Character array containing the text to write.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position within the buffer indicating the start of the text to write.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteRaw</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlWriter.WriteRawAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteRawAsync(Char(), Int32, Int32)\n  nameWithType: XmlWriter.WriteRawAsync(Char[], Int32, Int32)\n  nameWithType.vb: XmlWriter.WriteRawAsync(Char(), Int32, Int32)\n- uid: System.Xml.XmlWriter.WriteRawAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteRawAsync(System.String)\n  id: WriteRawAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteRawAsync(String)\n  fullName: System.Xml.XmlWriter.WriteRawAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteRawAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 445\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes raw markup manually from a string.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteRawAsync(string data)\n    content.vb: Public Overridable Function WriteRawAsync(data As String) As Task\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>String containing the text to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteRaw</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteRawAsync(String)\n- uid: System.Xml.XmlWriter.WriteStartAttribute(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartAttribute(System.String)\n  id: WriteStartAttribute(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartAttribute(String)\n  fullName: System.Xml.XmlWriter.WriteStartAttribute(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartAttribute\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 446\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the start of an attribute with the specified local name.</p>\\n\"\n  syntax:\n    content: public void WriteStartAttribute(string localName)\n    content.vb: Public Sub WriteStartAttribute(localName As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteStartAttribute(String)\n- uid: System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)\n  id: WriteStartAttribute(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartAttribute(String, String)\n  fullName: System.Xml.XmlWriter.WriteStartAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartAttribute\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 447\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the start of an attribute with the specified local name and namespace URI.</p>\\n\"\n  syntax:\n    content: public void WriteStartAttribute(string localName, string ns)\n    content.vb: Public Sub WriteStartAttribute(localName As String, ns As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n  exceptions:\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlWriter.WriteEndAttribute\n    commentId: M:System.Xml.XmlWriter.WriteEndAttribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteStartAttribute(String, String)\n- uid: System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)\n  id: WriteStartAttribute(System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartAttribute(String, String, String)\n  fullName: System.Xml.XmlWriter.WriteStartAttribute(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartAttribute\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 448\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</p>\\n\"\n  syntax:\n    content: public abstract void WriteStartAttribute(string prefix, string localName, string ns)\n    content.vb: Public MustOverride Sub WriteStartAttribute(prefix As String, localName As String, ns As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix of the attribute.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI for the attribute.</p>\\n\"\n  exceptions:\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteStartAttribute(String, String, String)\n- uid: System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)\n  id: WriteStartAttributeAsync(System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartAttributeAsync(String, String, String)\n  fullName: System.Xml.XmlWriter.WriteStartAttributeAsync(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartAttributeAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 449\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes the start of an attribute with the specified prefix, local name, and namespace URI.</p>\\n\"\n  syntax:\n    content: protected virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns)\n    content.vb: Protected Overridable Function WriteStartAttributeAsync(prefix As String, localName As String, ns As String) As Task\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix of the attribute.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI for the attribute.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteStartAttribute</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: XmlWriter.WriteStartAttributeAsync(String, String, String)\n- uid: System.Xml.XmlWriter.WriteStartDocument\n  commentId: M:System.Xml.XmlWriter.WriteStartDocument\n  id: WriteStartDocument\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartDocument()\n  fullName: System.Xml.XmlWriter.WriteStartDocument()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartDocument\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 450\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the XML declaration with the version \\\"1.0\\\".</p>\\n\"\n  syntax:\n    content: public abstract void WriteStartDocument()\n    content.vb: Public MustOverride Sub WriteStartDocument\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This is not the first write method called after the constructor.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteStartDocument()\n- uid: System.Xml.XmlWriter.WriteStartDocument(System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)\n  id: WriteStartDocument(System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartDocument(Boolean)\n  fullName: System.Xml.XmlWriter.WriteStartDocument(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartDocument\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 451\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the XML declaration with the version \\\"1.0\\\" and the standalone attribute.</p>\\n\"\n  syntax:\n    content: public abstract void WriteStartDocument(bool standalone)\n    content.vb: Public MustOverride Sub WriteStartDocument(standalone As Boolean)\n    parameters:\n    - id: standalone\n      type: System.Boolean\n      description: \"\\n<p>If <strong>true</strong>, it writes \\\"standalone=yes\\\"; if <strong>false</strong>, it writes \\\"standalone=no\\\".</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This is not the first write method called after the constructor. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteStartDocument(Boolean)\n- uid: System.Xml.XmlWriter.WriteStartDocumentAsync\n  commentId: M:System.Xml.XmlWriter.WriteStartDocumentAsync\n  id: WriteStartDocumentAsync\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartDocumentAsync()\n  fullName: System.Xml.XmlWriter.WriteStartDocumentAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartDocumentAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 452\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes the XML declaration with the version \\\"1.0\\\".</p>\\n\"\n  syntax:\n    content: public virtual Task WriteStartDocumentAsync()\n    content.vb: Public Overridable Function WriteStartDocumentAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteStartDocument</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteStartDocumentAsync()\n- uid: System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)\n  id: WriteStartDocumentAsync(System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartDocumentAsync(Boolean)\n  fullName: System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartDocumentAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 453\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes the XML declaration with the version \\\"1.0\\\" and the standalone attribute.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteStartDocumentAsync(bool standalone)\n    content.vb: Public Overridable Function WriteStartDocumentAsync(standalone As Boolean) As Task\n    parameters:\n    - id: standalone\n      type: System.Boolean\n      description: \"\\n<p>If <strong>true</strong>, it writes \\\"standalone=yes\\\"; if <strong>false</strong>, it writes \\\"standalone=no\\\".</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteStartDocument</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteStartDocumentAsync(Boolean)\n- uid: System.Xml.XmlWriter.WriteStartElement(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartElement(System.String)\n  id: WriteStartElement(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartElement(String)\n  fullName: System.Xml.XmlWriter.WriteStartElement(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartElement\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 454\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out a start tag with the specified local name.</p>\\n\"\n  syntax:\n    content: public void WriteStartElement(string localName)\n    content.vb: Public Sub WriteStartElement(localName As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteStartElement(String)\n- uid: System.Xml.XmlWriter.WriteStartElement(System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)\n  id: WriteStartElement(System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartElement(String, String)\n  fullName: System.Xml.XmlWriter.WriteStartElement(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartElement\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 455\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</p>\\n\"\n  syntax:\n    content: public void WriteStartElement(string localName, string ns)\n    content.vb: Public Sub WriteStartElement(localName As String, ns As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriter.WriteStartElement(String, String)\n- uid: System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)\n  id: WriteStartElement(System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartElement(String, String, String)\n  fullName: System.Xml.XmlWriter.WriteStartElement(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartElement\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 456\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</p>\\n\"\n  syntax:\n    content: public abstract void WriteStartElement(string prefix, string localName, string ns)\n    content.vb: Public MustOverride Sub WriteStartElement(prefix As String, localName As String, ns As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix of the element.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI to associate with the element.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteStartElement(String, String, String)\n- uid: System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)\n  id: WriteStartElementAsync(System.String,System.String,System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartElementAsync(String, String, String)\n  fullName: System.Xml.XmlWriter.WriteStartElementAsync(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartElementAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 457\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes the specified start tag and associates it with the given namespace and prefix.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteStartElementAsync(string prefix, string localName, string ns)\n    content.vb: Public Overridable Function WriteStartElementAsync(prefix As String, localName As String, ns As String) As Task\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix of the element.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI to associate with the element.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteStartElement</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteStartElementAsync(String, String, String)\n- uid: System.Xml.XmlWriter.WriteString(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteString(System.String)\n  id: WriteString(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteString(String)\n  fullName: System.Xml.XmlWriter.WriteString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 458\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes the given text content.</p>\\n\"\n  syntax:\n    content: public abstract void WriteString(string text)\n    content.vb: Public MustOverride Sub WriteString(text As String)\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The text string contains an invalid surrogate pair.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteString(String)\n- uid: System.Xml.XmlWriter.WriteStringAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteStringAsync(System.String)\n  id: WriteStringAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStringAsync(String)\n  fullName: System.Xml.XmlWriter.WriteStringAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStringAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 459\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes the given text content.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteStringAsync(string text)\n    content.vb: Public Overridable Function WriteStringAsync(text As String) As Task\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteString</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteStringAsync(String)\n- uid: System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)\n  commentId: M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)\n  id: WriteSurrogateCharEntity(System.Char,System.Char)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteSurrogateCharEntity(Char, Char)\n  fullName: System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteSurrogateCharEntity\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 460\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</p>\\n\"\n  syntax:\n    content: public abstract void WriteSurrogateCharEntity(char lowChar, char highChar)\n    content.vb: Public MustOverride Sub WriteSurrogateCharEntity(lowChar As Char, highChar As Char)\n    parameters:\n    - id: lowChar\n      type: System.Char\n      description: \"\\n<p>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</p>\\n\"\n    - id: highChar\n      type: System.Char\n      description: \"\\n<p>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid surrogate character pair was passed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteSurrogateCharEntity(Char, Char)\n- uid: System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)\n  commentId: M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)\n  id: WriteSurrogateCharEntityAsync(System.Char,System.Char)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteSurrogateCharEntityAsync(Char, Char)\n  fullName: System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteSurrogateCharEntityAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 461\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously generates and writes the surrogate character entity for the surrogate character pair.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)\n    content.vb: Public Overridable Function WriteSurrogateCharEntityAsync(lowChar As Char, highChar As Char) As Task\n    parameters:\n    - id: lowChar\n      type: System.Char\n      description: \"\\n<p>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</p>\\n\"\n    - id: highChar\n      type: System.Char\n      description: \"\\n<p>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteSurrogateCharEntity</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteSurrogateCharEntityAsync(Char, Char)\n- uid: System.Xml.XmlWriter.WriteValue(System.Boolean)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Boolean)\n  id: WriteValue(System.Boolean)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Boolean)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 462\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(bool value)\n    content.vb: Public Overridable Sub WriteValue(value As Boolean)\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Boolean)\n- uid: System.Xml.XmlWriter.WriteValue(System.DateTime)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.DateTime)\n  id: WriteValue(System.DateTime)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(DateTime)\n  fullName: System.Xml.XmlWriter.WriteValue(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 463\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(DateTime value)\n    content.vb: Public Overridable Sub WriteValue(value As Date)\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(DateTime)\n- uid: System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)\n  id: WriteValue(System.DateTimeOffset)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(DateTimeOffset)\n  fullName: System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 464\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(DateTimeOffset value)\n    content.vb: Public Overridable Sub WriteValue(value As DateTimeOffset)\n    parameters:\n    - id: value\n      type: System.DateTimeOffset\n      description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(DateTimeOffset)\n- uid: System.Xml.XmlWriter.WriteValue(System.Decimal)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Decimal)\n  id: WriteValue(System.Decimal)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Decimal)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 465\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(decimal value)\n    content.vb: Public Overridable Sub WriteValue(value As Decimal)\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Decimal)\n- uid: System.Xml.XmlWriter.WriteValue(System.Double)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Double)\n  id: WriteValue(System.Double)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Double)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 466\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(double value)\n    content.vb: Public Overridable Sub WriteValue(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Double)\n- uid: System.Xml.XmlWriter.WriteValue(System.Int32)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Int32)\n  id: WriteValue(System.Int32)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Int32)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 467\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(int value)\n    content.vb: Public Overridable Sub WriteValue(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Int32)\n- uid: System.Xml.XmlWriter.WriteValue(System.Int64)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Int64)\n  id: WriteValue(System.Int64)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Int64)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 468\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(long value)\n    content.vb: Public Overridable Sub WriteValue(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Int64)\n- uid: System.Xml.XmlWriter.WriteValue(System.Object)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Object)\n  id: WriteValue(System.Object)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Object)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 469\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the object value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(object value)\n    content.vb: Public Overridable Sub WriteValue(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object value to write.</p>\\n<p>Note   With the release of the .NET Framework 3.5, this method accepts <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as a parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed or in error state.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Object)\n- uid: System.Xml.XmlWriter.WriteValue(System.Single)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.Single)\n  id: WriteValue(System.Single)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Single)\n  fullName: System.Xml.XmlWriter.WriteValue(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 470\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(float value)\n    content.vb: Public Overridable Sub WriteValue(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(Single)\n- uid: System.Xml.XmlWriter.WriteValue(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteValue(System.String)\n  id: WriteValue(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(String)\n  fullName: System.Xml.XmlWriter.WriteValue(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 471\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(string value)\n    content.vb: Public Overridable Sub WriteValue(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid value was specified.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteValue(String)\n- uid: System.Xml.XmlWriter.WriteWhitespace(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteWhitespace(System.String)\n  id: WriteWhitespace(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteWhitespace(String)\n  fullName: System.Xml.XmlWriter.WriteWhitespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteWhitespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 472\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, writes out the given white space.</p>\\n\"\n  syntax:\n    content: public abstract void WriteWhitespace(string ws)\n    content.vb: Public MustOverride Sub WriteWhitespace(ws As String)\n    parameters:\n    - id: ws\n      type: System.String\n      description: \"\\n<p>The string of white space characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The string contains non-white space characters.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlWriter.WriteWhitespace(String)\n- uid: System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)\n  commentId: M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)\n  id: WriteWhitespaceAsync(System.String)\n  parent: System.Xml.XmlWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteWhitespaceAsync(String)\n  fullName: System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteWhitespaceAsync\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 473\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Asynchronously writes out the given white space.</p>\\n\"\n  syntax:\n    content: public virtual Task WriteWhitespaceAsync(string ws)\n    content.vb: Public Overridable Function WriteWhitespaceAsync(ws As String) As Task\n    parameters:\n    - id: ws\n      type: System.String\n      description: \"\\n<p>The string of white space characters.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The task that represents the asynchronous <strong>WriteWhitespace</strong> operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> asynchronous method was called without setting the <xref href=\\\"System.Xml.XmlWriterSettings.Async\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag to <strong>true</strong>. In this case, <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown with the message “Set XmlWriterSettings.Async to true if you want to use Async Methods.”</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlWriter.WriteWhitespaceAsync(String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Xml.XmlWriterSettings\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriterSettings\n  fullName: System.Xml.XmlWriterSettings\n  commentId: T:System.Xml.XmlWriterSettings\n  nameWithType: XmlWriterSettings\n- uid: System.Xml.WriteState\n  parent: System.Xml\n  isExternal: false\n  name: WriteState\n  fullName: System.Xml.WriteState\n  commentId: T:System.Xml.WriteState\n  nameWithType: WriteState\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlSpace\n  parent: System.Xml\n  isExternal: false\n  name: XmlSpace\n  fullName: System.Xml.XmlSpace\n  commentId: T:System.Xml.XmlSpace\n  nameWithType: XmlSpace\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  fullName: System.IO.TextWriter\n  commentId: T:System.IO.TextWriter\n  nameWithType: TextWriter\n- uid: System.Text.StringBuilder\n  parent: System.Text\n  isExternal: false\n  name: StringBuilder\n  fullName: System.Text.StringBuilder\n  commentId: T:System.Text.StringBuilder\n  nameWithType: StringBuilder\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  commentId: N:System.Text\n  nameWithType: System.Text\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  nameWithType: Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  fullName: System.Xml.XmlReader\n  commentId: T:System.Xml.XmlReader\n  nameWithType: XmlReader\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  commentId: T:System.Char\n  nameWithType: Char\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  commentId: T:System.DateTime\n  nameWithType: DateTime\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: false\n  name: DateTimeOffset\n  fullName: System.DateTimeOffset\n  commentId: T:System.DateTimeOffset\n  nameWithType: DateTimeOffset\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n"}