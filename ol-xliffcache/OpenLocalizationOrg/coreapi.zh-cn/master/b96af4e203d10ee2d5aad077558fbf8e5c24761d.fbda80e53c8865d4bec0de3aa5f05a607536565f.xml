{"nodes":[{"pos":[676,690],"content":"ConsoleKeyInfo","needQuote":true,"nodes":[{"content":"ConsoleKeyInfo","pos":[0,14]}]},{"pos":[2166,2225],"content":"ConsoleKeyInfo(Char, ConsoleKey, Boolean, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"ConsoleKeyInfo(Char, ConsoleKey, Boolean, Boolean, Boolean)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The Unicode character that corresponds to the &lt;em&gt;key&lt;/em&gt; parameter.","pos":[3193,3267],"source":"\\n<p>The Unicode character that corresponds to the <em>key</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[3268,3274],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The console key that corresponds to the &lt;em&gt;keyChar&lt;/em&gt; parameter.","pos":[3340,3412],"source":"\\n<p>The console key that corresponds to the <em>keyChar</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[3413,3419],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that a SHIFT key was pressed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[3484,3589],"source":"\\n<p>\\n<strong>true</strong> to indicate that a SHIFT key was pressed; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3590,3596],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that an ALT key was pressed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[3659,3763],"source":"\\n<p>\\n<strong>true</strong> to indicate that an ALT key was pressed; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3764,3770],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that a CTRL key was pressed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[3837,3941],"source":"\\n<p>\\n<strong>true</strong> to indicate that a CTRL key was pressed; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3942,3948],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numeric value of the &lt;em&gt;key&lt;/em&gt; parameter is less than 0 or greater than 255.&lt;/p&gt;\\n","pos":[4079,4173],"source":"\\n<p>The numeric value of the <em>key</em> parameter is less than 0 or greater than 255.</p>\\n"},{"pos":[4487,4494],"content":"KeyChar","needQuote":true,"nodes":[{"content":"KeyChar","pos":[0,7]}]},{"pos":[5647,5650],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;A value that identifies the console key that was pressed.&lt;/p&gt;\\n","pos":[6355,6423],"source":"\\n<p>A value that identifies the console key that was pressed.</p>\\n"},{"pos":[6708,6717],"content":"Modifiers","needQuote":true,"nodes":[{"content":"Modifiers","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values.","pos":[7533,7586],"source":"\\n<p>A bitwise combination of the enumeration values."},{"content":"There is no default value.&lt;/p&gt;\\n","pos":[7587,7619],"source":" There is no default value.</p>\\n"},{"pos":[7970,7992],"content":"Equals(ConsoleKeyInfo)","needQuote":true,"nodes":[{"content":"Equals(ConsoleKeyInfo)","pos":[0,22]}]},{"pos":[9575,9589],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11225,11238],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[11934,11979],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[12464,12504],"content":"Equality(ConsoleKeyInfo, ConsoleKeyInfo)","needQuote":true,"nodes":[{"content":"Equality(ConsoleKeyInfo, ConsoleKeyInfo)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[13335,13374],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[13442,13482],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13543,13650],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14120,14162],"content":"Inequality(ConsoleKeyInfo, ConsoleKeyInfo)","needQuote":true,"nodes":[{"content":"Inequality(ConsoleKeyInfo, ConsoleKeyInfo)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[15002,15041],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[15109,15149],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is not equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15210,15321],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15531,15537],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15690,15700],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15801,15809],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15860,15861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15888,15889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15962,15970],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16021,16022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16049,16050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16253,16275],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16423,16429],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16496,16497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16547,16553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16614,16615]},{"pos":[16670,16676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16736,16737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16834,16840],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16907,16908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16958,16964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17025,17026]},{"pos":[17081,17087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17147,17148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17393,17424],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17590,17605],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17681,17682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17732,17738],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17799,17800]},{"pos":[17855,17861],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17921,17922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18028,18043],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18119,18120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18170,18176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18237,18238]},{"pos":[18293,18299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18359,18360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18586,18595],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18688,18695],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18763,18764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18791,18792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18861,18868],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18936,18937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18964,18965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19121,19130],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[19284,19290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19433,19437],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[19580,19590],"content":"ConsoleKey","needQuote":true,"nodes":[{"content":"ConsoleKey","pos":[0,10]}]},{"pos":[19748,19755],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19913,19929],"content":"ConsoleModifiers","needQuote":true,"nodes":[{"content":"ConsoleModifiers","pos":[0,16]}]},{"pos":[20112,20126],"content":"ConsoleKeyInfo","needQuote":true,"nodes":[{"content":"ConsoleKeyInfo","pos":[0,14]}]},{"pos":[20329,20343],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20468,20474],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20523,20524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20574,20580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20640,20641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20727,20733],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20782,20783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20833,20839],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20899,20900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21103,21116],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21223,21234],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21288,21289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21316,21317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21393,21404],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21458,21459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21486,21487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21653,21658],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21804,21831],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.ConsoleKeyInfo\n  commentId: T:System.ConsoleKeyInfo\n  id: ConsoleKeyInfo\n  parent: System\n  children:\n  - System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)\n  - System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  - System.ConsoleKeyInfo.Equals(System.Object)\n  - System.ConsoleKeyInfo.GetHashCode\n  - System.ConsoleKeyInfo.Key\n  - System.ConsoleKeyInfo.KeyChar\n  - System.ConsoleKeyInfo.Modifiers\n  - System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  - System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  langs:\n  - csharp\n  - vb\n  name: ConsoleKeyInfo\n  fullName: System.ConsoleKeyInfo\n  type: Struct\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConsoleKeyInfo\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 6\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.</p>\\n\"\n  syntax:\n    content: public struct ConsoleKeyInfo\n    content.vb: Public Structure ConsoleKeyInfo\n  seealso:\n  - type: System.ConsoleModifiers\n    commentId: T:System.ConsoleModifiers\n  - type: System.ConsoleKey\n    commentId: T:System.ConsoleKey\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: ConsoleKeyInfo\n- uid: System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)\n  commentId: M:System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: ConsoleKeyInfo(Char, ConsoleKey, Boolean, Boolean, Boolean)\n  fullName: System.ConsoleKeyInfo.ConsoleKeyInfo(System.Char, System.ConsoleKey, System.Boolean, System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 12\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified character, console key, and modifier keys.</p>\\n\"\n  syntax:\n    content: public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control)\n    content.vb: Public Sub New(keyChar As Char, key As ConsoleKey, shift As Boolean, alt As Boolean, control As Boolean)\n    parameters:\n    - id: keyChar\n      type: System.Char\n      description: \"\\n<p>The Unicode character that corresponds to the <em>key</em> parameter. </p>\\n\"\n    - id: key\n      type: System.ConsoleKey\n      description: \"\\n<p>The console key that corresponds to the <em>keyChar</em> parameter. </p>\\n\"\n    - id: shift\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that a SHIFT key was pressed; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: alt\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that an ALT key was pressed; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: control\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that a CTRL key was pressed; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The numeric value of the <em>key</em> parameter is less than 0 or greater than 255.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConsoleKeyInfo.ConsoleKeyInfo(Char, ConsoleKey, Boolean, Boolean, Boolean)\n- uid: System.ConsoleKeyInfo.KeyChar\n  commentId: P:System.ConsoleKeyInfo.KeyChar\n  id: KeyChar\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: KeyChar\n  fullName: System.ConsoleKeyInfo.KeyChar\n  type: Property\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyChar\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 34\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets the Unicode character represented by the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public char KeyChar { get; }\n    content.vb: Public ReadOnly Property KeyChar As Char\n    parameters: []\n    return:\n      type: System.Char\n      description: \"\\n<p>An object that corresponds to the console key represented by the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConsoleKeyInfo.KeyChar\n- uid: System.ConsoleKeyInfo.Key\n  commentId: P:System.ConsoleKeyInfo.Key\n  id: Key\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.ConsoleKeyInfo.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 39\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets the console key represented by the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public ConsoleKey Key { get; }\n    content.vb: Public ReadOnly Property Key As ConsoleKey\n    parameters: []\n    return:\n      type: System.ConsoleKey\n      description: \"\\n<p>A value that identifies the console key that was pressed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConsoleKeyInfo.Key\n- uid: System.ConsoleKeyInfo.Modifiers\n  commentId: P:System.ConsoleKeyInfo.Modifiers\n  id: Modifiers\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Modifiers\n  fullName: System.ConsoleKeyInfo.Modifiers\n  type: Property\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modifiers\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 44\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets a bitwise combination of <xref href=\\\"System.ConsoleModifiers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that specifies one or more modifier keys pressed simultaneously with the console key.</p>\\n\"\n  syntax:\n    content: public ConsoleModifiers Modifiers { get; }\n    content.vb: Public ReadOnly Property Modifiers As ConsoleModifiers\n    parameters: []\n    return:\n      type: System.ConsoleModifiers\n      description: \"\\n<p>A bitwise combination of the enumeration values. There is no default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConsoleKeyInfo.Modifiers\n- uid: System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  commentId: M:System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  id: Equals(System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 54\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the specified <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(ConsoleKeyInfo obj)\n    content.vb: Public Function Equals(obj As ConsoleKeyInfo) As Boolean\n    parameters:\n    - id: obj\n      type: System.ConsoleKeyInfo\n      description: \"\\n<p>An object to compare to the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConsoleKeyInfo.Equals(ConsoleKeyInfo)\n- uid: System.ConsoleKeyInfo.Equals(System.Object)\n  commentId: M:System.ConsoleKeyInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.ConsoleKeyInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 49\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the specified object is equal to the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object to compare to the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is a <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and is equal to the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ConsoleKeyInfo.Equals(Object)\n- uid: System.ConsoleKeyInfo.GetHashCode\n  commentId: M:System.ConsoleKeyInfo.GetHashCode\n  id: GetHashCode\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.ConsoleKeyInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 69\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ConsoleKeyInfo.GetHashCode()\n- uid: System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  commentId: M:System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  id: op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Equality(ConsoleKeyInfo, ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.Equality(System.ConsoleKeyInfo, System.ConsoleKeyInfo)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 59\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(ConsoleKeyInfo a, ConsoleKeyInfo b)\n    content.vb: Public Shared Operator =(a As ConsoleKeyInfo, b As ConsoleKeyInfo) As Boolean\n    parameters:\n    - id: a\n      type: System.ConsoleKeyInfo\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: b\n      type: System.ConsoleKeyInfo\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ConsoleKeyInfo.Equality(ConsoleKeyInfo, ConsoleKeyInfo)\n- uid: System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  commentId: M:System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  id: op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Inequality(ConsoleKeyInfo, ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.Inequality(System.ConsoleKeyInfo, System.ConsoleKeyInfo)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleKeyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Console/src/System/ConsoleKeyInfo.cs\n    startLine: 64\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.ConsoleKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(ConsoleKeyInfo a, ConsoleKeyInfo b)\n    content.vb: Public Shared Operator <>(a As ConsoleKeyInfo, b As ConsoleKeyInfo) As Boolean\n    parameters:\n    - id: a\n      type: System.ConsoleKeyInfo\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: b\n      type: System.ConsoleKeyInfo\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ConsoleKeyInfo.Inequality(ConsoleKeyInfo, ConsoleKeyInfo)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.ConsoleKey\n  parent: System\n  isExternal: false\n  name: ConsoleKey\n  fullName: System.ConsoleKey\n  nameWithType: ConsoleKey\n  commentId: T:System.ConsoleKey\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ConsoleModifiers\n  parent: System\n  isExternal: false\n  name: ConsoleModifiers\n  fullName: System.ConsoleModifiers\n  nameWithType: ConsoleModifiers\n  commentId: T:System.ConsoleModifiers\n- uid: System.ConsoleKeyInfo\n  parent: System\n  isExternal: false\n  name: ConsoleKeyInfo\n  fullName: System.ConsoleKeyInfo\n  nameWithType: ConsoleKeyInfo\n  commentId: T:System.ConsoleKeyInfo\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}