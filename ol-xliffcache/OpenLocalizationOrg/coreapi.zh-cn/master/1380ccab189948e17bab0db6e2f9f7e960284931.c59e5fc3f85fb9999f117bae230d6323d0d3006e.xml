{"nodes":[{"pos":[1244,1271],"content":"RuntimeReflectionExtensions","needQuote":true,"nodes":[{"content":"RuntimeReflectionExtensions","pos":[0,27]}]},{"pos":[2714,2737],"content":"GetMethodInfo(Delegate)","needQuote":true,"nodes":[{"content":"GetMethodInfo(Delegate)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The delegate to examine.&lt;/p&gt;\\n","pos":[3593,3628],"source":"\\n<p>The delegate to examine.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the method.&lt;/p&gt;\\n","pos":[3703,3751],"source":"\\n<p>An object that represents the method.</p>\\n"},{"pos":[4303,4339],"content":"GetRuntimeBaseDefinition(MethodInfo)","needQuote":true,"nodes":[{"content":"GetRuntimeBaseDefinition(MethodInfo)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The method to retrieve information about.&lt;/p&gt;\\n","pos":[5327,5379],"source":"\\n<p>The method to retrieve information about.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified method's initial declaration on a base class.&lt;/p&gt;\\n","pos":[5454,5550],"source":"\\n<p>An object that represents the specified method's initial declaration on a base class.</p>\\n"},{"pos":[6079,6108],"content":"GetRuntimeEvent(Type, String)","needQuote":true,"nodes":[{"content":"GetRuntimeEvent(Type, String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The type that contains the event.&lt;/p&gt;\\n","pos":[6976,7020],"source":"\\n<p>The type that contains the event.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[7083,7116],"source":"\\n<p>The name of the event.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified event, or &lt;strong&gt;null&lt;/strong&gt; if the event is not found.&lt;/p&gt;\\n","pos":[7190,7299],"source":"\\n<p>An object that represents the specified event, or <strong>null</strong> if the event is not found.</p>\\n"},{"pos":[7782,7804],"content":"GetRuntimeEvents(Type)","needQuote":true,"nodes":[{"content":"GetRuntimeEvents(Type)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The type that contains the events.&lt;/p&gt;\\n","pos":[8687,8732],"source":"\\n<p>The type that contains the events.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of events for the specified type.&lt;/p&gt;\\n","pos":[8846,8903],"source":"\\n<p>A collection of events for the specified type.</p>\\n"},{"pos":[9418,9447],"content":"GetRuntimeField(Type, String)","needQuote":true,"nodes":[{"content":"GetRuntimeField(Type, String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The type that contains the field.&lt;/p&gt;\\n","pos":[10313,10357],"source":"\\n<p>The type that contains the field.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the field.&lt;/p&gt;\\n","pos":[10420,10453],"source":"\\n<p>The name of the field.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified field, or &lt;strong&gt;null&lt;/strong&gt; if the field is not found.&lt;/p&gt;\\n","pos":[10527,10636],"source":"\\n<p>An object that represents the specified field, or <strong>null</strong> if the field is not found.</p>\\n"},{"pos":[11119,11141],"content":"GetRuntimeFields(Type)","needQuote":true,"nodes":[{"content":"GetRuntimeFields(Type)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The type that contains the fields.&lt;/p&gt;\\n","pos":[12024,12069],"source":"\\n<p>The type that contains the fields.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of fields for the specified type.&lt;/p&gt;\\n","pos":[12183,12240],"source":"\\n<p>A collection of fields for the specified type.</p>\\n"},{"pos":[12815,12853],"content":"GetRuntimeInterfaceMap(TypeInfo, Type)","needQuote":true,"nodes":[{"content":"GetRuntimeInterfaceMap(TypeInfo, Type)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The type to retrieve a mapping for.&lt;/p&gt;\\n","pos":[13849,13895],"source":"\\n<p>The type to retrieve a mapping for.</p>\\n"},{"content":"\\n&lt;p&gt;The interface to retrieve a mapping for.&lt;/p&gt;\\n","pos":[13965,14016],"source":"\\n<p>The interface to retrieve a mapping for.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the interface mapping for the specified interface and type.&lt;/p&gt;\\n","pos":[14097,14193],"source":"\\n<p>An object that represents the interface mapping for the specified interface and type.</p>\\n"},{"pos":[14769,14807],"content":"GetRuntimeMethod(Type, String, Type[])","needQuote":true,"nodes":[{"content":"GetRuntimeMethod(Type, String, Type[])","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The type that contains the method.&lt;/p&gt;\\n","pos":[15736,15781],"source":"\\n<p>The type that contains the method.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the method.&lt;/p&gt;\\n","pos":[15844,15878],"source":"\\n<p>The name of the method.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the method's parameters.&lt;/p&gt;\\n","pos":[15947,16005],"source":"\\n<p>An array that contains the method's parameters.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified method, or &lt;strong&gt;null&lt;/strong&gt; if the method is not found.&lt;/p&gt;\\n","pos":[16080,16191],"source":"\\n<p>An object that represents the specified method, or <strong>null</strong> if the method is not found.</p>\\n"},{"pos":[16943,16966],"content":"GetRuntimeMethods(Type)","needQuote":true,"nodes":[{"content":"GetRuntimeMethods(Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The type that contains the methods.&lt;/p&gt;\\n","pos":[17852,17898],"source":"\\n<p>The type that contains the methods.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of methods for the specified type.&lt;/p&gt;\\n","pos":[18013,18071],"source":"\\n<p>A collection of methods for the specified type.</p>\\n"},{"pos":[18560,18586],"content":"GetRuntimeProperties(Type)","needQuote":true,"nodes":[{"content":"GetRuntimeProperties(Type)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The type that contains the properties.&lt;/p&gt;\\n","pos":[19495,19544],"source":"\\n<p>The type that contains the properties.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of properties for the specified type.&lt;/p&gt;\\n","pos":[19661,19722],"source":"\\n<p>A collection of properties for the specified type.</p>\\n"},{"pos":[20250,20282],"content":"GetRuntimeProperty(Type, String)","needQuote":true,"nodes":[{"content":"GetRuntimeProperty(Type, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The type that contains the property.&lt;/p&gt;\\n","pos":[21169,21216],"source":"\\n<p>The type that contains the property.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the property.&lt;/p&gt;\\n","pos":[21279,21315],"source":"\\n<p>The name of the property.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified property, or &lt;strong&gt;null&lt;/strong&gt; if the property is not found.&lt;/p&gt;\\n","pos":[21392,21507],"source":"\\n<p>An object that represents the specified property, or <strong>null</strong> if the property is not found.</p>\\n"},{"pos":[21731,21748],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[21912,21918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22078,22088],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22183,22191],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22260,22261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22288,22289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22359,22367],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22436,22437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22464,22465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22648,22662],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22781,22787],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22854,22855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22905,22911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22971,22972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23055,23061],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23128,23129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23179,23185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23245,23246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23460,23482],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23630,23636],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23703,23704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23754,23760],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23821,23822]},{"pos":[23877,23883],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23943,23944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24041,24047],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24114,24115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24165,24171],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24232,24233]},{"pos":[24288,24294],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24354,24355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24600,24631],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24797,24812],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24888,24889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24939,24945],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25006,25007]},{"pos":[25062,25068],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25128,25129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25235,25250],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25326,25327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25377,25383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25444,25445]},{"pos":[25500,25506],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25566,25567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25797,25810],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25911,25922],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25994,25995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26022,26023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26096,26107],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26179,26180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26207,26208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26383,26392],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26485,26492],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26560,26561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26588,26589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26658,26665],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26733,26734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26761,26762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26937,26954],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27063,27078],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27154,27155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27182,27183],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27260,27275],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27351,27352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27379,27380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27525,27531],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[27664,27672],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[27849,27859],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[28036,28040],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[28179,28185],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28355,28364],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[28649,28671],"content":"IEnumerable<EventInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;EventInfo&gt;","pos":[0,22],"source":"IEnumerable<EventInfo>"}]},{"pos":[28950,28961],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[29046,29047],"content":"<","needQuote":true,"nodes":[]},{"pos":[29111,29120],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[29266,29277],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[29363,29366]},{"pos":[29437,29446],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[29499,29500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29760,29774],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[29993,30004],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[30068,30069],"content":"<","needQuote":true,"nodes":[]},{"pos":[30096,30097],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30217,30228],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[30293,30296]},{"pos":[30330,30331],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30358,30359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30562,30588],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[30804,30813],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[31098,31120],"content":"IEnumerable<FieldInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;FieldInfo&gt;","pos":[0,22],"source":"IEnumerable<FieldInfo>"}]},{"pos":[31399,31410],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[31495,31496],"content":"<","needQuote":true,"nodes":[]},{"pos":[31560,31569],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[31715,31726],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[31812,31815]},{"pos":[31886,31895],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[31948,31949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32223,32231],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[32436,32452],"content":"InterfaceMapping","needQuote":true,"nodes":[{"content":"InterfaceMapping","pos":[0,16]}]},{"pos":[32612,32618],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[32738,32742],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[32780,32782]},{"pos":[32845,32849],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[32886,32888],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33131,33154],"content":"IEnumerable<MethodInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;MethodInfo&gt;","pos":[0,23],"source":"IEnumerable<MethodInfo>"}]},{"pos":[33436,33447],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33532,33533],"content":"<","needQuote":true,"nodes":[]},{"pos":[33598,33608],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[33755,33766],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[33852,33855]},{"pos":[33927,33937],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[33991,33992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34357,34382],"content":"IEnumerable<PropertyInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;PropertyInfo&gt;","pos":[0,25],"source":"IEnumerable<PropertyInfo>"}]},{"pos":[34670,34681],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34766,34767],"content":"<","needQuote":true,"nodes":[]},{"pos":[34834,34846],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[34995,35006],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[35092,35095]},{"pos":[35169,35181],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[35237,35238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35525,35537],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]}],"content":"items:\n- uid: System.Reflection.RuntimeReflectionExtensions\n  commentId: T:System.Reflection.RuntimeReflectionExtensions\n  id: RuntimeReflectionExtensions\n  parent: System.Reflection\n  children:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)\n  langs:\n  - csharp\n  - vb\n  name: RuntimeReflectionExtensions\n  fullName: System.Reflection.RuntimeReflectionExtensions\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RuntimeReflectionExtensions\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 8\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Provides methods that retrieve information about types at run time.</p>\\n\"\n  syntax:\n    content: public class RuntimeReflectionExtensions\n    content.vb: Public Class RuntimeReflectionExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: RuntimeReflectionExtensions\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  id: GetMethodInfo(System.Delegate)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMethodInfo(Delegate)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodInfo\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 80\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets an object that represents the method represented by the specified delegate.</p>\\n\"\n  syntax:\n    content: public static MethodInfo GetMethodInfo(this Delegate del)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMethodInfo(del As  Delegate) As MethodInfo\n    parameters:\n    - id: del\n      type: System.Delegate\n      description: \"\\n<p>The delegate to examine.</p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>An object that represents the method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  id: GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeBaseDefinition(MethodInfo)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeBaseDefinition\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 67\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves an object that represents the specified method on the direct or indirect base class where the method was first declared.</p>\\n\"\n  syntax:\n    content: public static MethodInfo GetRuntimeBaseDefinition(this MethodInfo method)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeBaseDefinition(method As MethodInfo) As MethodInfo\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The method to retrieve information about.</p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>An object that represents the specified method's initial declaration on a base class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)\n  id: GetRuntimeEvent(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeEvent(Type, String)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeEvent\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 52\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves an object that represents the specified event.</p>\\n\"\n  syntax:\n    content: public static EventInfo GetRuntimeEvent(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeEvent(type As Type, name As String) As EventInfo\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the event.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n    return:\n      type: System.Reflection.EventInfo\n      description: \"\\n<p>An object that represents the specified event, or <strong>null</strong> if the event is not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvent(Type, String)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)\n  id: GetRuntimeEvents(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeEvents(Type)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeEvents\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 29\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection that represents all the events defined on a specified type.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<EventInfo> GetRuntimeEvents(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeEvents(type As Type) As IEnumerable(Of EventInfo)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the events.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}\n      description: \"\\n<p>A collection of events for the specified type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvents(Type)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)\n  id: GetRuntimeField(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeField(Type, String)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeField\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 62\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves an object that represents a specified field.</p>\\n\"\n  syntax:\n    content: public static FieldInfo GetRuntimeField(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeField(type As Type, name As String) As FieldInfo\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the field.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the field.</p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>An object that represents the specified field, or <strong>null</strong> if the field is not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeField(Type, String)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)\n  id: GetRuntimeFields(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeFields(Type)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeFields\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 41\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection that represents all the fields defined on a specified type.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<FieldInfo> GetRuntimeFields(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeFields(type As Type) As IEnumerable(Of FieldInfo)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the fields.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}\n      description: \"\\n<p>A collection of fields for the specified type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeFields(Type)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  id: GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeInterfaceMap(TypeInfo, Type)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeInterfaceMap\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 72\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an interface mapping for the specified type and the specified interface.</p>\\n\"\n  syntax:\n    content: public static InterfaceMapping GetRuntimeInterfaceMap(this TypeInfo typeInfo, Type interfaceType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeInterfaceMap(typeInfo As TypeInfo, interfaceType As Type) As InterfaceMapping\n    parameters:\n    - id: typeInfo\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>The type to retrieve a mapping for.</p>\\n\"\n    - id: interfaceType\n      type: System.Type\n      description: \"\\n<p>The interface to retrieve a mapping for.</p>\\n\"\n    return:\n      type: System.Reflection.InterfaceMapping\n      description: \"\\n<p>An object that represents the interface mapping for the specified interface and type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])\n  id: GetRuntimeMethod(System.Type,System.String,System.Type[])\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeMethod(Type, String, Type[])\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type, System.String, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeMethod\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 57\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves an object that represents a specified method.</p>\\n\"\n  syntax:\n    content: public static MethodInfo GetRuntimeMethod(this Type type, string name, Type[] parameters)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeMethod(type As Type, name As String, parameters As Type()) As MethodInfo\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the method.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the method.</p>\\n\"\n    - id: parameters\n      type: System.Type[]\n      description: \"\\n<p>An array that contains the method's parameters.</p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>An object that represents the specified method, or <strong>null</strong> if the method is not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type, System.String, System.Type())\n  name.vb: GetRuntimeMethod(Type, String, Type())\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type[])\n  nameWithType.vb: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type())\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)\n  id: GetRuntimeMethods(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeMethods(Type)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeMethods\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 35\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection that represents all methods defined on a specified type.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<MethodInfo> GetRuntimeMethods(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeMethods(type As Type) As IEnumerable(Of MethodInfo)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the methods.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n      description: \"\\n<p>A collection of methods for the specified type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethods(Type)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)\n  id: GetRuntimeProperties(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeProperties(Type)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeProperties\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 24\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection that represents all the properties defined on a specified type.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<PropertyInfo> GetRuntimeProperties(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeProperties(type As Type) As IEnumerable(Of PropertyInfo)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the properties.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}\n      description: \"\\n<p>A collection of properties for the specified type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperties(Type)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)\n  id: GetRuntimeProperty(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.RuntimeReflectionExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeProperty(Type, String)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRuntimeProperty\n    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs\n    startLine: 47\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves an object that represents a specified property.</p>\\n\"\n  syntax:\n    content: public static PropertyInfo GetRuntimeProperty(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRuntimeProperty(type As Type, name As String) As PropertyInfo\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type that contains the property.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the property.</p>\\n\"\n    return:\n      type: System.Reflection.PropertyInfo\n      description: \"\\n<p>An object that represents the specified property, or <strong>null</strong> if the property is not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperty(Type, String)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  fullName: System.Delegate\n  nameWithType: Delegate\n  commentId: T:System.Delegate\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  fullName: System.Reflection.EventInfo\n  nameWithType: EventInfo\n  commentId: T:System.Reflection.EventInfo\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<EventInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)\n  name.vb: IEnumerable(Of EventInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<EventInfo>\n  nameWithType.vb: IEnumerable(Of EventInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  nameWithType: FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<FieldInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)\n  name.vb: IEnumerable(Of FieldInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<FieldInfo>\n  nameWithType.vb: IEnumerable(Of FieldInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  fullName: System.Reflection.TypeInfo\n  nameWithType: TypeInfo\n  commentId: T:System.Reflection.TypeInfo\n- uid: System.Reflection.InterfaceMapping\n  parent: System.Reflection\n  isExternal: false\n  name: InterfaceMapping\n  fullName: System.Reflection.InterfaceMapping\n  nameWithType: InterfaceMapping\n  commentId: T:System.Reflection.InterfaceMapping\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<MethodInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)\n  name.vb: IEnumerable(Of MethodInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<MethodInfo>\n  nameWithType.vb: IEnumerable(Of MethodInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<PropertyInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)\n  name.vb: IEnumerable(Of PropertyInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<PropertyInfo>\n  nameWithType.vb: IEnumerable(Of PropertyInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n  nameWithType: PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n"}