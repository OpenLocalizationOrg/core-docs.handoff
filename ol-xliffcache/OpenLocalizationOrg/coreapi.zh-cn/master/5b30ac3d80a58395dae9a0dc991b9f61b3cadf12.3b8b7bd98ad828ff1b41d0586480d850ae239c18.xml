{"nodes":[{"pos":[1346,1350],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[3011,3016],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[3938,3950],"content":"Guid(Byte[])","needQuote":true,"nodes":[{"content":"Guid(Byte[])","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A 16-element byte array containing values with which to initialize the GUID.","pos":[4621,4702],"source":"\\n<p>A 16-element byte array containing values with which to initialize the GUID."},{"content":"&lt;/p&gt;\\n","pos":[4703,4709],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;b&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4828,4871],"source":"\\n<p>\\n<em>b</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4872,4878],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;b&lt;/em&gt; is not 16 bytes long.","pos":[4975,5014],"source":"\\n<p>\\n<em>b</em> is not 16 bytes long."},{"content":"&lt;/p&gt;\\n","pos":[5015,5021],"source":" </p>\\n"},{"pos":[5760,5833],"content":"Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)","needQuote":true,"nodes":[{"content":"Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)","pos":[0,73]}]},{"content":"\\n&lt;p&gt;The first 4 bytes of the GUID.","pos":[6831,6866],"source":"\\n<p>The first 4 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[6867,6873],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next 2 bytes of the GUID.","pos":[6932,6966],"source":"\\n<p>The next 2 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[6967,6973],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next 2 bytes of the GUID.","pos":[7032,7066],"source":"\\n<p>The next 2 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7067,7073],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7131,7162],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7163,7169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7227,7258],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7259,7265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7323,7354],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7355,7361],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7419,7450],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7451,7457],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7515,7546],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7547,7553],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7611,7642],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7643,7649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7707,7738],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7739,7745],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[7803,7834],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[7835,7841],"source":" </p>\\n"},{"pos":[8287,8320],"content":"Guid(Int32, Int16, Int16, Byte[])","needQuote":true,"nodes":[{"content":"Guid(Int32, Int16, Int16, Byte[])","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The first 4 bytes of the GUID.","pos":[9104,9139],"source":"\\n<p>The first 4 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[9140,9146],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next 2 bytes of the GUID.","pos":[9205,9239],"source":"\\n<p>The next 2 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[9240,9246],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next 2 bytes of the GUID.","pos":[9305,9339],"source":"\\n<p>The next 2 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[9340,9346],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The remaining 8 bytes of the GUID.","pos":[9406,9445],"source":"\\n<p>The remaining 8 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[9446,9452],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9571,9614],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9615,9621],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is not 8 bytes long.","pos":[9718,9756],"source":"\\n<p>\\n<em>d</em> is not 8 bytes long."},{"content":"&lt;/p&gt;\\n","pos":[9757,9763],"source":" </p>\\n"},{"pos":[10244,10256],"content":"Guid(String)","needQuote":true,"nodes":[{"content":"Guid(String)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;g&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12319,12362],"source":"\\n<p>\\n<em>g</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12363,12369],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The format of &lt;em&gt;g&lt;/em&gt; is invalid.","pos":[12462,12503],"source":"\\n<p>The format of <em>g</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[12504,12510],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The format of &lt;em&gt;g&lt;/em&gt; is invalid.","pos":[12607,12648],"source":"\\n<p>The format of <em>g</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[12649,12655],"source":" </p>\\n"},{"pos":[13295,13371],"content":"Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)","needQuote":true,"nodes":[{"content":"Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;The first 4 bytes of the GUID.","pos":[14463,14498],"source":"\\n<p>The first 4 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[14499,14505],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next 2 bytes of the GUID.","pos":[14565,14599],"source":"\\n<p>The next 2 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[14600,14606],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next 2 bytes of the GUID.","pos":[14666,14700],"source":"\\n<p>The next 2 bytes of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[14701,14707],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[14765,14796],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[14797,14803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[14861,14892],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[14893,14899],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[14957,14988],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[14989,14995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[15053,15084],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[15085,15091],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[15149,15180],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[15181,15187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[15245,15276],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[15277,15283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[15341,15372],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[15373,15379],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The next byte of the GUID.","pos":[15437,15468],"source":"\\n<p>The next byte of the GUID."},{"content":"&lt;/p&gt;\\n","pos":[15469,15475],"source":" </p>\\n"},{"pos":[15986,16001],"content":"CompareTo(Guid)","needQuote":true,"nodes":[{"content":"CompareTo(Guid)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An object to compare to this instance.&lt;/p&gt;\\n","pos":[16727,16776],"source":"\\n<p>An object to compare to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;A signed number indicating the relative values of this instance and &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than &lt;em&gt;value&lt;/em&gt;.","pos":[16835,17080],"source":"\\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\\n<p>Return value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>A negative integer </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is equal to &lt;em&gt;value&lt;/em&gt;.","pos":[17081,17176],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than &lt;em&gt;value&lt;/em&gt;.","pos":[17177,17290],"source":" </p>\\n</td></tr><tr><td>\\n<p>A positive integer </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[17291,17325],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[17664,17676],"content":"Equals(Guid)","needQuote":true,"nodes":[{"content":"Equals(Guid)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An object to compare to this instance.&lt;/p&gt;\\n","pos":[18379,18428],"source":"\\n<p>An object to compare to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;g&lt;/em&gt; is equal to this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18489,18599],"source":"\\n<p>\\n<strong>true</strong> if <em>g</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19140,19154],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.","pos":[19799,19845],"source":"\\n<p>The object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[19846,19852],"source":" </p>\\n"},{"pos":[20436,20449],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for this instance.&lt;/p&gt;\\n","pos":[21096,21139],"source":"\\n<p>The hash code for this instance.</p>\\n"},{"pos":[21437,21446],"content":"NewGuid()","needQuote":true,"nodes":[{"content":"NewGuid()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A new GUID object.&lt;/p&gt;\\n","pos":[22146,22175],"source":"\\n<p>A new GUID object.</p>\\n"},{"pos":[22508,22528],"content":"Equality(Guid, Guid)","needQuote":true,"nodes":[{"content":"Equality(Guid, Guid)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[23254,23287],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[23288,23294],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[23352,23386],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[23387,23393],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23454,23563],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23913,23935],"content":"Inequality(Guid, Guid)","needQuote":true,"nodes":[{"content":"Inequality(Guid, Guid)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[24670,24703],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[24704,24710],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[24768,24802],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[24803,24809],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24870,24983],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25281,25294],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The string to convert.&lt;/p&gt;\\n","pos":[26000,26033],"source":"\\n<p>The string to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains the value that was parsed.&lt;/p&gt;\\n","pos":[26091,26154],"source":"\\n<p>A structure that contains the value that was parsed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26273,26326],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not in a recognized format.&lt;/p&gt;\\n","pos":[26419,26477],"source":"\\n<p>\\n<em>input</em> is not in a recognized format.</p>\\n"},{"pos":[27028,27054],"content":"ParseExact(String, String)","needQuote":true,"nodes":[{"content":"ParseExact(String, String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The GUID to convert.&lt;/p&gt;\\n","pos":[27881,27912],"source":"\\n<p>The GUID to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains the value that was parsed.&lt;/p&gt;\\n","pos":[28188,28251],"source":"\\n<p>A structure that contains the value that was parsed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28370,28442],"source":"\\n<p>\\n<em>input</em> or <em>format</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not in the format specified by &lt;em&gt;format&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28535,28613],"source":"\\n<p>\\n<em>input</em> is not in the format specified by <em>format</em>.</p>\\n"},{"pos":[29172,29201],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[30409,30455],"content":"IFormattable.ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"IFormattable.ToString(String, IFormatProvider)","pos":[0,46]}]},{"pos":[31697,31710],"content":"ToByteArray()","needQuote":true,"nodes":[{"content":"ToByteArray()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 16-element byte array.&lt;/p&gt;\\n","pos":[32296,32331],"source":"\\n<p>A 16-element byte array.</p>\\n"},{"pos":[32562,32572],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[34158,34174],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"pos":[36037,36063],"content":"TryParse(String, out Guid)","needQuote":true,"nodes":[{"content":"TryParse(String, out Guid)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The GUID to convert.&lt;/p&gt;\\n","pos":[36841,36872],"source":"\\n<p>The GUID to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the parse operation was successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37356,37464],"source":"\\n<p>\\n<strong>true</strong> if the parse operation was successful; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[38138,38177],"content":"TryParseExact(String, String, out Guid)","needQuote":true,"nodes":[{"content":"TryParseExact(String, String, out Guid)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The GUID to convert.&lt;/p&gt;\\n","pos":[39075,39106],"source":"\\n<p>The GUID to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the parse operation was successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39807,39915],"source":"\\n<p>\\n<strong>true</strong> if the parse operation was successful; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[40463,40469],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[40605,40616],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[40809,40826],"content":"IComparable<Guid>","needQuote":true,"nodes":[{"content":"IComparable&lt;Guid&gt;","pos":[0,17],"source":"IComparable<Guid>"}]},{"pos":[41008,41019],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[41063,41064],"content":"<","needQuote":true,"nodes":[]},{"pos":[41112,41116],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[41226,41237],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[41282,41285]},{"pos":[41340,41344],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[41381,41382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41617,41633],"content":"IEquatable<Guid>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Guid&gt;","pos":[0,16],"source":"IEquatable<Guid>"}]},{"pos":[41811,41821],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[41864,41865],"content":"<","needQuote":true,"nodes":[]},{"pos":[41913,41917],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[42026,42036],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[42080,42083]},{"pos":[42138,42142],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[42179,42180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42387,42399],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[42604,42626],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[42774,42780],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42847,42848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42898,42904],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42965,42966]},{"pos":[43021,43027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43087,43088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43185,43191],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43258,43259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43309,43315],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43376,43377]},{"pos":[43432,43438],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43498,43499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43744,43775],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[43941,43956],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[44032,44033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44083,44089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44150,44151]},{"pos":[44206,44212],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44272,44273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44379,44394],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[44470,44471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44521,44527],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44588,44589]},{"pos":[44644,44650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44710,44711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44937,44946],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[45039,45046],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[45114,45115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45142,45143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45212,45219],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[45287,45288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45315,45316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45459,45473],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[45632,45643],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[45687,45688],"content":"<","needQuote":true,"nodes":[]},{"pos":[45715,45716],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[45816,45827],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[45872,45875]},{"pos":[45909,45910],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[45937,45938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46114,46127],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[46282,46292],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[46335,46336],"content":"<","needQuote":true,"nodes":[]},{"pos":[46363,46364],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[46463,46473],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[46517,46520]},{"pos":[46554,46555],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[46582,46583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46767,46773],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46916,46920],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[47022,47028],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[47148,47152],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[47211,47213]},{"pos":[47276,47280],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47338,47340],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[47472,47477],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[47618,47623],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[47763,47767],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47906,47912],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[48057,48063],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[48208,48214],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[48454,48469],"content":"CompareTo(Guid)","needQuote":true,"nodes":[{"content":"CompareTo(Guid)","pos":[0,15]}]},{"pos":[48679,48688],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[48755,48756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48804,48808],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[48845,48846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48928,48937],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[49007,49008],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49056,49060],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[49097,49098],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49361,49373],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[49543,49552],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[49609,49610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49637,49638],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[49665,49666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49748,49757],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[49817,49818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49845,49846],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[49873,49874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50187,50199],"content":"Equals(Guid)","needQuote":true,"nodes":[{"content":"Equals(Guid)","pos":[0,12]}]},{"pos":[50397,50403],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50466,50467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50515,50519],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[50556,50557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50635,50641],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50707,50708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50756,50760],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[50797,50798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51046,51053],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51201,51210],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[51368,51374],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51427,51428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51455,51456],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[51483,51484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51562,51568],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51624,51625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51652,51653],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[51680,51681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51930,51944],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[52069,52075],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52124,52125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52175,52181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52241,52242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52328,52334],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52383,52384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52434,52440],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52500,52501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52682,52691],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[52870,52883],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[52990,53001],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[53055,53056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53083,53084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53160,53171],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[53225,53226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53253,53254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53462,53479],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[53614,53623],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[53677,53678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53728,53734],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53794,53795],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53886,53895],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[53949,53950],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54000,54006],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54066,54067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54320,54353],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[54535,54543],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[54597,54598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54648,54654],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[54715,54716]},{"pos":[54780,54795],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[54843,54844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54958,54966],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[55020,55021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55071,55077],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[55138,55139]},{"pos":[55203,55218],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[55266,55267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55504,55519],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[55713,55723],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[55824,55832],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[55883,55884],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55911,55912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55985,55993],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[56044,56045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56072,56073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56232,56253],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[56454,56471],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[56658,56673],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[56839,56856],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]}],"content":"items:\n- uid: System.Guid\n  commentId: T:System.Guid\n  id: Guid\n  parent: System\n  children:\n  - System.Guid.#ctor(System.Byte[])\n  - System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)\n  - System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])\n  - System.Guid.#ctor(System.String)\n  - System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)\n  - System.Guid.CompareTo(System.Guid)\n  - System.Guid.Empty\n  - System.Guid.Equals(System.Guid)\n  - System.Guid.Equals(System.Object)\n  - System.Guid.GetHashCode\n  - System.Guid.NewGuid\n  - System.Guid.op_Equality(System.Guid,System.Guid)\n  - System.Guid.op_Inequality(System.Guid,System.Guid)\n  - System.Guid.Parse(System.String)\n  - System.Guid.ParseExact(System.String,System.String)\n  - System.Guid.System#IComparable#CompareTo(System.Object)\n  - System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  - System.Guid.ToByteArray\n  - System.Guid.ToString\n  - System.Guid.ToString(System.String)\n  - System.Guid.TryParse(System.String,System.Guid@)\n  - System.Guid.TryParseExact(System.String,System.String,System.Guid@)\n  langs:\n  - csharp\n  - vb\n  name: Guid\n  fullName: System.Guid\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Guid\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 15\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a globally unique identifier (GUID).</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      [Serializable]\n\n      [ComVisible(true)]\n\n      [NonVersionable]\n\n      public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      <Serializable>\n\n      <ComVisible(True)>\n\n      <NonVersionable>\n\n      Public Structure Guid\n          Implements IFormattable, IComparable, IComparable(Of Guid), IEquatable(Of Guid)\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Guid}\n  - System.IEquatable{System.Guid}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Guid\n- uid: System.Guid.Empty\n  commentId: F:System.Guid.Empty\n  id: Empty\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Guid.Empty\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Empty\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 22\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>A read-only instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is all zeros.</p>\\n\"\n  syntax:\n    content: public static readonly Guid Empty\n    content.vb: Public Shared ReadOnly Empty As Guid\n    return:\n      type: System.Guid\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Guid.Empty\n- uid: System.Guid.#ctor(System.Byte[])\n  commentId: M:System.Guid.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Guid(Byte[])\n  fullName: System.Guid.Guid(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 46\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by using the specified array of bytes.</p>\\n\"\n  syntax:\n    content: public Guid(byte[] b)\n    content.vb: Public Sub New(b As Byte())\n    parameters:\n    - id: b\n      type: System.Byte[]\n      description: \"\\n<p>A 16-element byte array containing values with which to initialize the GUID. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>b</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>b</em> is not 16 bytes long. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Guid.Guid(System.Byte())\n  name.vb: Guid(Byte())\n  nameWithType: Guid.Guid(Byte[])\n  nameWithType.vb: Guid.Guid(Byte())\n- uid: System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)\n  commentId: M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)\n  id: '#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)'\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)\n  fullName: System.Guid.Guid(System.Int32, System.Int16, System.Int16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 111\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by using the specified integers and bytes.</p>\\n\"\n  syntax:\n    content: public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k)\n    content.vb: Public Sub New(a As Integer, b As Short, c As Short, d As Byte, e As Byte, f As Byte, g As Byte, h As Byte, i As Byte, j As Byte, k As Byte)\n    parameters:\n    - id: a\n      type: System.Int32\n      description: \"\\n<p>The first 4 bytes of the GUID. </p>\\n\"\n    - id: b\n      type: System.Int16\n      description: \"\\n<p>The next 2 bytes of the GUID. </p>\\n\"\n    - id: c\n      type: System.Int16\n      description: \"\\n<p>The next 2 bytes of the GUID. </p>\\n\"\n    - id: d\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: e\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: f\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: g\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: h\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: i\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: j\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: k\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)\n- uid: System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])\n  commentId: M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])\n  id: '#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])'\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Guid(Int32, Int16, Int16, Byte[])\n  fullName: System.Guid.Guid(System.Int32, System.Int16, System.Int16, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by using the specified integers and byte array.</p>\\n\"\n  syntax:\n    content: public Guid(int a, short b, short c, byte[] d)\n    content.vb: Public Sub New(a As Integer, b As Short, c As Short, d As Byte())\n    parameters:\n    - id: a\n      type: System.Int32\n      description: \"\\n<p>The first 4 bytes of the GUID. </p>\\n\"\n    - id: b\n      type: System.Int16\n      description: \"\\n<p>The next 2 bytes of the GUID. </p>\\n\"\n    - id: c\n      type: System.Int16\n      description: \"\\n<p>The next 2 bytes of the GUID. </p>\\n\"\n    - id: d\n      type: System.Byte[]\n      description: \"\\n<p>The remaining 8 bytes of the GUID. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>d</em> is not 8 bytes long. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Guid.Guid(System.Int32, System.Int16, System.Int16, System.Byte())\n  name.vb: Guid(Int32, Int16, Int16, Byte())\n  nameWithType: Guid.Guid(Int32, Int16, Int16, Byte[])\n  nameWithType.vb: Guid.Guid(Int32, Int16, Int16, Byte())\n- uid: System.Guid.#ctor(System.String)\n  commentId: M:System.Guid.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Guid(String)\n  fullName: System.Guid.Guid(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 230\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by using the value represented by the specified string.</p>\\n\"\n  syntax:\n    content: public Guid(string g)\n    content.vb: Public Sub New(g As String)\n    parameters:\n    - id: g\n      type: System.String\n      description: \"\\n<p>A string that contains a GUID in one of the following formats (\\\"d\\\" represents a hexadecimal digit whose case is ignored): </p>\\n<p>32 contiguous digits: </p>\\n<p>dddddddddddddddddddddddddddddddd </p>\\n<p>-or- </p>\\n<p>Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses: </p>\\n<p>dddddddd-dddd-dddd-dddd-dddddddddddd </p>\\n<p>-or- </p>\\n<p>{dddddddd-dddd-dddd-dddd-dddddddddddd} </p>\\n<p>-or- </p>\\n<p>(dddddddd-dddd-dddd-dddd-dddddddddddd) </p>\\n<p>-or- </p>\\n<p>Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by \\\"0x\\\" or \\\"0X\\\", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces: </p>\\n<p>{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} </p>\\n<p>All braces, commas, and \\\"0x\\\" prefixes are required. All embedded spaces are ignored. All leading zeros in a group are ignored.</p>\\n<p>The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low-order digits of the group. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>g</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The format of <em>g</em> is invalid. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The format of <em>g</em> is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.Guid(String)\n- uid: System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)\n  commentId: M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)\n  id: '#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)'\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)\n  fullName: System.Guid.Guid(System.UInt32, System.UInt16, System.UInt16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 67\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by using the specified unsigned integers and bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(a As UInteger, b As UShort, c As UShort, d As Byte, e As Byte, f As Byte, g As Byte, h As Byte, i As Byte, j As Byte, k As Byte)\n    parameters:\n    - id: a\n      type: System.UInt32\n      description: \"\\n<p>The first 4 bytes of the GUID. </p>\\n\"\n    - id: b\n      type: System.UInt16\n      description: \"\\n<p>The next 2 bytes of the GUID. </p>\\n\"\n    - id: c\n      type: System.UInt16\n      description: \"\\n<p>The next 2 bytes of the GUID. </p>\\n\"\n    - id: d\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: e\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: f\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: g\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: h\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: i\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: j\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n    - id: k\n      type: System.Byte\n      description: \"\\n<p>The next byte of the GUID. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)\n- uid: System.Guid.CompareTo(System.Guid)\n  commentId: M:System.Guid.CompareTo(System.Guid)\n  id: CompareTo(System.Guid)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Guid)\n  fullName: System.Guid.CompareTo(System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 1060\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance to a specified <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(Guid value)\n    content.vb: Public Function CompareTo(value As Guid) As Integer\n    parameters:\n    - id: value\n      type: System.Guid\n      description: \"\\n<p>An object to compare to this instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\\n<p>Return value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>A negative integer </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>A positive integer </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable{System.Guid}.CompareTo(System.Guid)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.CompareTo(Guid)\n- uid: System.Guid.Equals(System.Guid)\n  commentId: M:System.Guid.Equals(System.Guid)\n  id: Equals(System.Guid)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Equals(Guid)\n  fullName: System.Guid.Equals(System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 968\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance and a specified <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represent the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(Guid g)\n    content.vb: Public Function Equals(g As Guid) As Boolean\n    parameters:\n    - id: g\n      type: System.Guid\n      description: \"\\n<p>An object to compare to this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>g</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Guid.Equals(System.Object)\n    commentId: M:System.Guid.Equals(System.Object)\n  - type: System.Guid.CompareTo(System.Guid)\n    commentId: M:System.Guid.CompareTo(System.Guid)\n  implements:\n  - System.IEquatable{System.Guid}.Equals(System.Guid)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.Equals(Guid)\n- uid: System.Guid.Equals(System.Object)\n  commentId: M:System.Guid.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Guid.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 933\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the same value as this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Guid.Equals(Object)\n- uid: System.Guid.GetHashCode\n  commentId: M:System.Guid.GetHashCode\n  id: GetHashCode\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Guid.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 923\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for this instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Guid.GetHashCode()\n- uid: System.Guid.NewGuid\n  commentId: M:System.Guid.NewGuid\n  id: NewGuid\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: NewGuid()\n  fullName: System.Guid.NewGuid()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NewGuid\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 1145\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static Guid NewGuid()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function NewGuid As Guid\n    return:\n      type: System.Guid\n      description: \"\\n<p>A new GUID object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Guid.NewGuid()\n- uid: System.Guid.op_Equality(System.Guid,System.Guid)\n  commentId: M:System.Guid.op_Equality(System.Guid,System.Guid)\n  id: op_Equality(System.Guid,System.Guid)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Equality(Guid, Guid)\n  fullName: System.Guid.Equality(System.Guid, System.Guid)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 1109\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the values of two specified <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(Guid a, Guid b)\n    content.vb: Public Shared Operator =(a As Guid, b As Guid) As Boolean\n    parameters:\n    - id: a\n      type: System.Guid\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: b\n      type: System.Guid\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Guid.Equality(Guid, Guid)\n- uid: System.Guid.op_Inequality(System.Guid,System.Guid)\n  commentId: M:System.Guid.op_Inequality(System.Guid,System.Guid)\n  id: op_Inequality(System.Guid,System.Guid)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Guid, Guid)\n  fullName: System.Guid.Inequality(System.Guid, System.Guid)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 1138\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the values of two specified <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(Guid a, Guid b)\n    content.vb: Public Shared Operator <>(a As Guid, b As Guid) As Boolean\n    parameters:\n    - id: a\n      type: System.Guid\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: b\n      type: System.Guid\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> and <em>b</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Guid.Inequality(Guid, Guid)\n- uid: System.Guid.Parse(System.String)\n  commentId: M:System.Guid.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Guid.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 249\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a GUID to the equivalent <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static Guid Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As Guid\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to convert.</p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>A structure that contains the value that was parsed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not in a recognized format.</p>\\n\"\n  seealso:\n  - type: System.Guid.TryParse(System.String,System.Guid@)\n    commentId: M:System.Guid.TryParse(System.String,System.Guid@)\n  - type: System.Guid.ToString\n    commentId: M:System.Guid.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Guid.Parse(String)\n- uid: System.Guid.ParseExact(System.String,System.String)\n  commentId: M:System.Guid.ParseExact(System.String,System.String)\n  id: ParseExact(System.String,System.String)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String)\n  fullName: System.Guid.ParseExact(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 280\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a GUID to the equivalent <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, provided that the string is in the specified format.</p>\\n\"\n  syntax:\n    content: public static Guid ParseExact(string input, string format)\n    content.vb: Public Shared Function ParseExact(input As String, format As String) As Guid\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The GUID to convert.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>One of the following specifiers that indicates the exact format to use when interpreting <em>input</em>: \\\"N\\\", \\\"D\\\", \\\"B\\\", \\\"P\\\", or \\\"X\\\".</p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>A structure that contains the value that was parsed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>format</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not in the format specified by <em>format</em>.</p>\\n\"\n  seealso:\n  - type: System.Guid.TryParseExact(System.String,System.String,System.Guid@)\n    commentId: M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Guid.ParseExact(String, String)\n- uid: System.Guid.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Guid.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Guid.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 941\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Guid.IComparable.CompareTo(Object)\n  nameWithType.vb: Guid.System.IComparable.CompareTo(Object)\n- uid: System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: IFormattable.ToString(String, IFormatProvider)\n  fullName: System.Guid.System.IFormattable.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IFormattable.ToString\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 942\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: string IFormattable.ToString(string format, IFormatProvider provider)\n    content.vb: Function System.IFormattable.ToString(format As String, provider As IFormatProvider) As String Implements IFormattable.ToString\n    parameters:\n    - id: format\n      type: System.String\n    - id: provider\n      type: System.IFormatProvider\n    return:\n      type: System.String\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  name.vb: System.IFormattable.ToString(String, IFormatProvider)\n  nameWithType: Guid.IFormattable.ToString(String, IFormatProvider)\n  nameWithType.vb: Guid.System.IFormattable.ToString(String, IFormatProvider)\n- uid: System.Guid.ToByteArray\n  commentId: M:System.Guid.ToByteArray\n  id: ToByteArray\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: ToByteArray()\n  fullName: System.Guid.ToByteArray()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByteArray\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 892\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a 16-element byte array that contains the value of this instance.</p>\\n\"\n  syntax:\n    content: public byte[] ToByteArray()\n    content.vb: Public Function ToByteArray As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A 16-element byte array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.ToByteArray()\n- uid: System.Guid.ToString\n  commentId: M:System.Guid.ToString\n  id: ToString\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Guid.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 918\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a string representation of the value of this instance in registry format.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The value of this <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, formatted by using the \\\"D\\\" format specifier as follows: </p>\\n<p>\\n<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx </code>\\n</p>\\n<p>where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is \\\"382c74c3-721d-4f34-80e5-57657b6cbc27\\\". To convert the hexadecimal digits from a through f to uppercase, call the <xref href=\\\"System.String.ToUpper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  method on the returned string.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Guid.ToString()\n- uid: System.Guid.ToString(System.String)\n  commentId: M:System.Guid.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Guid.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 1157\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a string representation of the value of this <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance, according to the provided format specifier.</p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A single format specifier that indicates how to format the value of this <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <em>format</em> parameter can be \\\"N\\\", \\\"D\\\", \\\"B\\\", \\\"P\\\", or \\\"X\\\". If <em>format</em> is <strong>null</strong> or an empty string (\\\"\\\"), \\\"D\\\" is used. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of this <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, represented as a series of lowercase hexadecimal digits in the specified format. </p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of <em>format</em> is not <strong>null</strong>, an empty string (\\\"\\\"), \\\"N\\\", \\\"D\\\", \\\"B\\\", \\\"P\\\", or \\\"X\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Guid.ToString(String)\n- uid: System.Guid.TryParse(System.String,System.Guid@)\n  commentId: M:System.Guid.TryParse(System.String,System.Guid@)\n  id: TryParse(System.String,System.Guid@)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out Guid)\n  fullName: System.Guid.TryParse(System.String, out System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 266\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a GUID to the equivalent <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out Guid result)\n    content.vb: Public Shared Function TryParse(input As String, ByRef result As Guid) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The GUID to convert.</p>\\n\"\n    - id: result\n      type: System.Guid\n      description: \"\\n<p>The structure that will contain the parsed value. If the method returns <strong>true</strong>, <em>result</em> contains a valid <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the method returns <strong>false</strong>, <em>result</em> equals <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the parse operation was successful; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Guid.Parse(System.String)\n    commentId: M:System.Guid.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Guid.TryParse(System.String, ByRef System.Guid)\n  name.vb: TryParse(String, ByRef Guid)\n  nameWithType: Guid.TryParse(String, out Guid)\n  nameWithType.vb: Guid.TryParse(String, ByRef Guid)\n- uid: System.Guid.TryParseExact(System.String,System.String,System.Guid@)\n  commentId: M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)\n  id: TryParseExact(System.String,System.String,System.Guid@)\n  parent: System.Guid\n  langs:\n  - csharp\n  - vb\n  name: TryParseExact(String, String, out Guid)\n  fullName: System.Guid.TryParseExact(System.String, System.String, out System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Guid.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParseExact\n    path: src/mscorlib/src/System/Guid.cs\n    startLine: 324\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a GUID to the equivalent <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, provided that the string is in the specified format.</p>\\n\"\n  syntax:\n    content: public static bool TryParseExact(string input, string format, out Guid result)\n    content.vb: Public Shared Function TryParseExact(input As String, format As String, ByRef result As Guid) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The GUID to convert.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>One of the following specifiers that indicates the exact format to use when interpreting <em>input</em>: \\\"N\\\", \\\"D\\\", \\\"B\\\", \\\"P\\\", or \\\"X\\\".</p>\\n\"\n    - id: result\n      type: System.Guid\n      description: \"\\n<p>The structure that will contain the parsed value. If the method returns <strong>true</strong>, <em>result</em> contains a valid <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the method returns <strong>false</strong>, <em>result</em> equals <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the parse operation was successful; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Guid.ParseExact(System.String,System.String)\n    commentId: M:System.Guid.ParseExact(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Guid.TryParseExact(System.String, System.String, ByRef System.Guid)\n  name.vb: TryParseExact(String, String, ByRef Guid)\n  nameWithType: Guid.TryParseExact(String, String, out Guid)\n  nameWithType.vb: Guid.TryParseExact(String, String, ByRef Guid)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.Guid}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<Guid>\n  fullName: System.IComparable<System.Guid>\n  fullname.vb: System.IComparable(Of System.Guid)\n  name.vb: IComparable(Of Guid)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Guid>\n  nameWithType.vb: IComparable(Of Guid)\n  commentId: T:System.IComparable{System.Guid}\n- uid: System.IEquatable{System.Guid}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Guid>\n  fullName: System.IEquatable<System.Guid>\n  fullname.vb: System.IEquatable(Of System.Guid)\n  name.vb: IEquatable(Of Guid)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Guid>\n  nameWithType.vb: IEquatable(Of Guid)\n  commentId: T:System.IEquatable{System.Guid}\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IComparable{System.Guid}.CompareTo(System.Guid)\n  parent: System.IComparable{System.Guid}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(Guid)\n  fullName: System.IComparable<System.Guid>.CompareTo(System.Guid)\n  fullname.vb: System.IComparable(Of System.Guid).CompareTo(System.Guid)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Guid>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Guid).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Guid>.CompareTo(Guid)\n  nameWithType.vb: IComparable(Of Guid).CompareTo(Guid)\n  commentId: M:System.IComparable{System.Guid}.CompareTo(System.Guid)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.IEquatable{System.Guid}.Equals(System.Guid)\n  parent: System.IEquatable{System.Guid}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Guid)\n  fullName: System.IEquatable<System.Guid>.Equals(System.Guid)\n  fullname.vb: System.IEquatable(Of System.Guid).Equals(System.Guid)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Guid>.Equals\n  - name: (\n    fullName: (\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Guid).Equals\n  - name: (\n    fullName: (\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Guid>.Equals(Guid)\n  nameWithType.vb: IEquatable(Of Guid).Equals(Guid)\n  commentId: M:System.IEquatable{System.Guid}.Equals(System.Guid)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n"}