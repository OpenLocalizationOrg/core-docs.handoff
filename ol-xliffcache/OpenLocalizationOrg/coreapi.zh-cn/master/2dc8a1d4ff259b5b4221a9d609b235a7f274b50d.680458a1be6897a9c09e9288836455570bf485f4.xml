{"nodes":[{"pos":[2132,2150],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[3795,3810],"content":"MaxBinaryLength","needQuote":true,"nodes":[{"content":"MaxBinaryLength","pos":[0,15]}]},{"pos":[5002,5017],"content":"MinBinaryLength","needQuote":true,"nodes":[{"content":"MinBinaryLength","pos":[0,15]}]},{"pos":[6265,6298],"content":"SecurityIdentifier(Byte[], Int32)","needQuote":true,"nodes":[{"content":"SecurityIdentifier(Byte[], Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The byte array that represents the SID.&lt;/p&gt;\\n","pos":[7298,7348],"source":"\\n<p>The byte array that represents the SID.</p>\\n"},{"content":"\\n&lt;p&gt;The byte offset to use as the starting index in &lt;em&gt;binaryForm&lt;/em&gt;.","pos":[7412,7485],"source":"\\n<p>The byte offset to use as the starting index in <em>binaryForm</em>."},{"content":"&lt;/p&gt;\\n","pos":[7486,7492],"source":" </p>\\n"},{"pos":[8119,8145],"content":"SecurityIdentifier(IntPtr)","needQuote":true,"nodes":[{"content":"SecurityIdentifier(IntPtr)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An integer that represents the binary form of a SID.&lt;/p&gt;\\n","pos":[9109,9172],"source":"\\n<p>An integer that represents the binary form of a SID.</p>\\n"},{"pos":[9917,9973],"content":"SecurityIdentifier(WellKnownSidType, SecurityIdentifier)","needQuote":true,"nodes":[{"content":"SecurityIdentifier(WellKnownSidType, SecurityIdentifier)","pos":[0,56]}]},{"pos":[13902,13928],"content":"SecurityIdentifier(String)","needQuote":true,"nodes":[{"content":"SecurityIdentifier(String)","pos":[0,26]}]},{"pos":[15456,15472],"content":"AccountDomainSid","needQuote":true,"nodes":[{"content":"AccountDomainSid","pos":[0,16]}]},{"pos":[17394,17406],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[18842,18847],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[20562,20591],"content":"CompareTo(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"CompareTo(SecurityIdentifier)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[21663,21720],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"content":"\\n&lt;p&gt;A signed number indicating the relative values of this instance and &lt;em&gt;sid&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;Return Value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than &lt;em&gt;sid&lt;/em&gt;.","pos":[21779,22016],"source":"\\n<p>A signed number indicating the relative values of this instance and <em>sid</em>.</p>\\n<p>Return Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than <em>sid</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is equal to &lt;em&gt;sid&lt;/em&gt;.","pos":[22017,22110],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>sid</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than &lt;em&gt;sid&lt;/em&gt;.","pos":[22111,22221],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than <em>sid</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[22222,22256],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[22794,22808],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24801,24827],"content":"Equals(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"Equals(SecurityIdentifier)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[25904,25961],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[26691,26719],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The byte array to receive the copied SID.&lt;/p&gt;\\n","pos":[27730,27782],"source":"\\n<p>The byte array to receive the copied SID.</p>\\n"},{"content":"\\n&lt;p&gt;The byte offset to use as the starting index in &lt;em&gt;binaryForm&lt;/em&gt;.","pos":[27846,27919],"source":"\\n<p>The byte offset to use as the starting index in <em>binaryForm</em>."},{"content":"&lt;/p&gt;\\n","pos":[27920,27926],"source":" </p>\\n"},{"pos":[28504,28517],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30170,30184],"content":"IsAccountSid()","needQuote":true,"nodes":[{"content":"IsAccountSid()","pos":[0,14]}]},{"pos":[31847,31883],"content":"IsEqualDomainSid(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"IsEqualDomainSid(SecurityIdentifier)","pos":[0,36]}]},{"pos":[33871,33894],"content":"IsValidTargetType(Type)","needQuote":true,"nodes":[{"content":"IsValidTargetType(Type)","pos":[0,23]}]},{"pos":[36239,36268],"content":"IsWellKnown(WellKnownSidType)","needQuote":true,"nodes":[{"content":"IsWellKnown(WellKnownSidType)","pos":[0,29]}]},{"pos":[38377,38425],"content":"Equality(SecurityIdentifier, SecurityIdentifier)","needQuote":true,"nodes":[{"content":"Equality(SecurityIdentifier, SecurityIdentifier)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The left operand to use for the equality comparison.","pos":[39775,39832],"source":"\\n<p>The left operand to use for the equality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39833,39883],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The right operand to use for the equality comparison.","pos":[39978,40036],"source":"\\n<p>The right operand to use for the equality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40037,40087],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40148,40264],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[40953,41003],"content":"Inequality(SecurityIdentifier, SecurityIdentifier)","needQuote":true,"nodes":[{"content":"Inequality(SecurityIdentifier, SecurityIdentifier)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The left operand to use for the inequality comparison.","pos":[42403,42462],"source":"\\n<p>The left operand to use for the inequality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42463,42513],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The right operand to use for the inequality comparison.","pos":[42608,42668],"source":"\\n<p>The right operand to use for the inequality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42669,42719],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42780,42900],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[43303,43313],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[44943,44958],"content":"Translate(Type)","needQuote":true,"nodes":[{"content":"Translate(Type)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The converted identity.&lt;/p&gt;\\n","pos":[46478,46512],"source":"\\n<p>The converted identity.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;targetType &lt;/em&gt;is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46712,46770],"source":"\\n<p>\\n<em>targetType </em>is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Some or all identity references could not be translated.&lt;/p&gt;\\n","pos":[47172,47239],"source":"\\n<p>Some or all identity references could not be translated.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error code was returned.&lt;/p&gt;\\n","pos":[47332,47375],"source":"\\n<p>A Win32 error code was returned.</p>\\n"},{"pos":[47714,47739],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[47927,47933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48127,48144],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[48426,48457],"content":"IComparable<SecurityIdentifier>","needQuote":true,"nodes":[{"content":"IComparable&lt;SecurityIdentifier&gt;","pos":[0,31],"source":"IComparable<SecurityIdentifier>"}]},{"pos":[48719,48730],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[48795,48796],"content":"<","needQuote":true,"nodes":[]},{"pos":[48877,48895],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[49038,49049],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[49115,49118]},{"pos":[49206,49224],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[49294,49295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49602,49624],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49772,49778],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49845,49846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49896,49902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49963,49964]},{"pos":[50019,50025],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50085,50086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50183,50189],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50256,50257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50307,50313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50374,50375]},{"pos":[50430,50436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50496,50497],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50742,50773],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[50939,50954],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51030,51031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51081,51087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51148,51149]},{"pos":[51204,51210],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51270,51271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51377,51392],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51468,51469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51519,51525],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51586,51587]},{"pos":[51642,51648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51708,51709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51935,51944],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52037,52044],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52112,52113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52140,52141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52210,52217],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52285,52286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52313,52314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52489,52506],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[52615,52630],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52706,52707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52734,52735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52812,52827],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52903,52904],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52931,52932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53077,53083],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[53204,53218],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[53377,53388],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[53432,53433],"content":"<","needQuote":true,"nodes":[]},{"pos":[53460,53461],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[53561,53572],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[53617,53620]},{"pos":[53654,53655],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[53682,53683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53869,53874],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[53979,53985],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[54105,54109],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[54168,54170]},{"pos":[54233,54237],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[54295,54297],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[54430,54436],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[54629,54645],"content":"WellKnownSidType","needQuote":true,"nodes":[{"content":"WellKnownSidType","pos":[0,16]}]},{"pos":[54908,54926],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[55145,55151],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[55369,55374],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[55802,55831],"content":"CompareTo(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"CompareTo(SecurityIdentifier)","pos":[0,29]}]},{"pos":[56173,56182],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[56303,56304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56385,56403],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[56473,56474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56556,56565],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[56689,56690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56771,56789],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[56859,56860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57245,57257],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[57427,57436],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[57493,57494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57521,57522],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57549,57550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57632,57641],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[57701,57702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57729,57730],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57757,57758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58073,58087],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[58266,58272],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58348,58349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58399,58405],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58465,58466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58579,58585],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58661,58662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58712,58718],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58778,58779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58993,59000],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[59227,59240],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[59401,59412],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[59493,59494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59521,59522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59625,59636],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[59717,59718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59745,59746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60045,60068],"content":"IsValidTargetType(Type)","needQuote":true,"nodes":[{"content":"IsValidTargetType(Type)","pos":[0,23]}]},{"pos":[60265,60282],"content":"IsValidTargetType","needQuote":true,"nodes":[{"content":"IsValidTargetType","pos":[0,17]}]},{"pos":[60369,60370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60418,60422],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[60480,60481],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60603,60620],"content":"IsValidTargetType","needQuote":true,"nodes":[{"content":"IsValidTargetType","pos":[0,17]}]},{"pos":[60707,60708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60756,60760],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[60818,60819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61048,61052],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[61267,61277],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[61432,61440],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[61518,61519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61546,61547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61647,61655],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[61733,61734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61761,61762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62047,62062],"content":"Translate(Type)","needQuote":true,"nodes":[{"content":"Translate(Type)","pos":[0,15]}]},{"pos":[62243,62252],"content":"Translate","needQuote":true,"nodes":[{"content":"Translate","pos":[0,9]}]},{"pos":[62331,62332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62380,62384],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[62442,62443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62557,62566],"content":"Translate","needQuote":true,"nodes":[{"content":"Translate","pos":[0,9]}]},{"pos":[62645,62646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62694,62698],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[62756,62757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62970,62991],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[63192,63209],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[63409,63435],"content":"IdentityNotMappedException","needQuote":true,"nodes":[{"content":"IdentityNotMappedException","pos":[0,26]}]},{"pos":[63686,63701],"content":"SystemException","needQuote":true,"nodes":[{"content":"SystemException","pos":[0,15]}]}],"content":"items:\n- uid: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  id: SecurityIdentifier\n  parent: System.Security.Principal\n  children:\n  - System.Security.Principal.SecurityIdentifier.#ctor(System.Byte[],System.Int32)\n  - System.Security.Principal.SecurityIdentifier.#ctor(System.IntPtr)\n  - System.Security.Principal.SecurityIdentifier.#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.SecurityIdentifier.#ctor(System.String)\n  - System.Security.Principal.SecurityIdentifier.AccountDomainSid\n  - System.Security.Principal.SecurityIdentifier.BinaryLength\n  - System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.SecurityIdentifier.Equals(System.Object)\n  - System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.Principal.SecurityIdentifier.GetHashCode\n  - System.Security.Principal.SecurityIdentifier.IsAccountSid\n  - System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)\n  - System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)\n  - System.Security.Principal.SecurityIdentifier.MaxBinaryLength\n  - System.Security.Principal.SecurityIdentifier.MinBinaryLength\n  - System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.SecurityIdentifier.ToString\n  - System.Security.Principal.SecurityIdentifier.Translate(System.Type)\n  - System.Security.Principal.SecurityIdentifier.Value\n  langs:\n  - csharp\n  - vb\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SecurityIdentifier\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 71\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Represents a security identifier (SID) and provides marshaling and comparison operations for SIDs.</p>\\n\"\n  syntax:\n    content: 'public sealed class SecurityIdentifier : IdentityReference, IComparable<SecurityIdentifier>'\n    content.vb: >-\n      Public NotInheritable Class SecurityIdentifier\n          Inherits IdentityReference\n          Implements IComparable(Of SecurityIdentifier)\n  inheritance:\n  - System.Object\n  - System.Security.Principal.IdentityReference\n  implements:\n  - System.IComparable{System.Security.Principal.SecurityIdentifier}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: SecurityIdentifier\n- uid: System.Security.Principal.SecurityIdentifier.MaxBinaryLength\n  commentId: F:System.Security.Principal.SecurityIdentifier.MaxBinaryLength\n  id: MaxBinaryLength\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: MaxBinaryLength\n  fullName: System.Security.Principal.SecurityIdentifier.MaxBinaryLength\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxBinaryLength\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 73\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the maximum size, in bytes, of the binary representation of the security identifier.</p>\\n\"\n  syntax:\n    content: public static readonly int MaxBinaryLength\n    content.vb: Public Shared ReadOnly MaxBinaryLength As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SecurityIdentifier.MaxBinaryLength\n- uid: System.Security.Principal.SecurityIdentifier.MinBinaryLength\n  commentId: F:System.Security.Principal.SecurityIdentifier.MinBinaryLength\n  id: MinBinaryLength\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: MinBinaryLength\n  fullName: System.Security.Principal.SecurityIdentifier.MinBinaryLength\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinBinaryLength\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 74\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the minimum size, in bytes, of the binary representation of the security identifier.</p>\\n\"\n  syntax:\n    content: public static readonly int MinBinaryLength\n    content.vb: Public Shared ReadOnly MinBinaryLength As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SecurityIdentifier.MinBinaryLength\n- uid: System.Security.Principal.SecurityIdentifier.#ctor(System.Byte[],System.Int32)\n  commentId: M:System.Security.Principal.SecurityIdentifier.#ctor(System.Byte[],System.Int32)\n  id: '#ctor(System.Byte[],System.Int32)'\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: SecurityIdentifier(Byte[], Int32)\n  fullName: System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 75\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using a specified binary representation of a security identifier (SID).</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier(byte[] binaryForm, int offset)\n    content.vb: Public Sub New(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array that represents the SID.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The byte offset to use as the starting index in <em>binaryForm</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.Byte(), System.Int32)\n  name.vb: SecurityIdentifier(Byte(), Int32)\n  nameWithType: SecurityIdentifier.SecurityIdentifier(Byte[], Int32)\n  nameWithType.vb: SecurityIdentifier.SecurityIdentifier(Byte(), Int32)\n- uid: System.Security.Principal.SecurityIdentifier.#ctor(System.IntPtr)\n  commentId: M:System.Security.Principal.SecurityIdentifier.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: SecurityIdentifier(IntPtr)\n  fullName: System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 76\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using an integer that represents the binary form of a security identifier (SID).</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier(IntPtr binaryForm)\n    content.vb: Public Sub New(binaryForm As IntPtr)\n    parameters:\n    - id: binaryForm\n      type: System.IntPtr\n      description: \"\\n<p>An integer that represents the binary form of a SID.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.SecurityIdentifier(IntPtr)\n- uid: System.Security.Principal.SecurityIdentifier.#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.SecurityIdentifier.#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)\n  id: '#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)'\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: SecurityIdentifier(WellKnownSidType, SecurityIdentifier)\n  fullName: System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.Security.Principal.WellKnownSidType, System.Security.Principal.SecurityIdentifier)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 77\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified well known security identifier (SID) type and domain SID.</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier(WellKnownSidType sidType, SecurityIdentifier domainSid)\n    content.vb: Public Sub New(sidType As WellKnownSidType, domainSid As SecurityIdentifier)\n    parameters:\n    - id: sidType\n      type: System.Security.Principal.WellKnownSidType\n      description: \"\\n<p>One of the enumeration values. This value must not be <xref href=\\\"System.Security.Principal.WellKnownSidType.LogonIdsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: domainSid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The domain SID. This value is required for the following <xref href=\\\"System.Security.Principal.WellKnownSidType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. This parameter is ignored for any other <xref href=\\\"System.Security.Principal.WellKnownSidType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountAdministratorSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountGuestSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountKrbtgtSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountDomainAdminsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountDomainUsersSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountDomainGuestsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountComputersSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountControllersSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountCertAdminsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountSchemaAdminsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountEnterpriseAdminsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountPolicyAdminsSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.WellKnownSidType.AccountRasAndIasServersSid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.SecurityIdentifier(WellKnownSidType, SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier.#ctor(System.String)\n  commentId: M:System.Security.Principal.SecurityIdentifier.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: SecurityIdentifier(String)\n  fullName: System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 78\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified security identifier (SID) in Security Descriptor Definition Language (SDDL) format.</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier(string sddlForm)\n    content.vb: Public Sub New(sddlForm As String)\n    parameters:\n    - id: sddlForm\n      type: System.String\n      description: \"\\n<p>SDDL string for the SID used to create the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.SecurityIdentifier(String)\n- uid: System.Security.Principal.SecurityIdentifier.AccountDomainSid\n  commentId: P:System.Security.Principal.SecurityIdentifier.AccountDomainSid\n  id: AccountDomainSid\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: AccountDomainSid\n  fullName: System.Security.Principal.SecurityIdentifier.AccountDomainSid\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccountDomainSid\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 79\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the account domain security identifier (SID) portion from the SID represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object if the SID represents a Windows account SID. If the SID does not represent a Windows account SID, this property returns <xref href=\\\"System.ArgumentNullException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier AccountDomainSid { get; }\n    content.vb: Public ReadOnly Property AccountDomainSid As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The account domain SID portion from the SID represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object if the SID represents a Windows account SID; otherwise, it returns <xref href=\\\"System.ArgumentNullException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SecurityIdentifier.AccountDomainSid\n- uid: System.Security.Principal.SecurityIdentifier.BinaryLength\n  commentId: P:System.Security.Principal.SecurityIdentifier.BinaryLength\n  id: BinaryLength\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.Principal.SecurityIdentifier.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 80\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the length, in bytes, of the security identifier (SID) represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int BinaryLength { get; }\n    content.vb: Public ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the SID represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SecurityIdentifier.BinaryLength\n- uid: System.Security.Principal.SecurityIdentifier.Value\n  commentId: P:System.Security.Principal.SecurityIdentifier.Value\n  id: Value\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Security.Principal.SecurityIdentifier.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 81\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns an uppercase Security Descriptor Definition Language (SDDL) string for the security identifier (SID) represented by this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string Value { get; }\n    content.vb: Public Overrides ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>An uppercase SDDL string for the SID represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.Value\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SecurityIdentifier.Value\n- uid: System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)\n  id: CompareTo(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SecurityIdentifier)\n  fullName: System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SecurityIdentifier sid)\n    content.vb: Public Function CompareTo(sid As SecurityIdentifier) As Integer\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of this instance and <em>sid</em>.</p>\\n<p>Return Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than <em>sid</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>sid</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than <em>sid</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable{System.Security.Principal.SecurityIdentifier}.CompareTo(System.Security.Principal.SecurityIdentifier)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.CompareTo(SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier.Equals(System.Object)\n  commentId: M:System.Security.Principal.SecurityIdentifier.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Principal.SecurityIdentifier.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 83\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An object to compare with this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is an object with the same underlying type and value as this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SecurityIdentifier.Equals(Object)\n- uid: System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)\n  id: Equals(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Equals(SecurityIdentifier)\n  fullName: System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(SecurityIdentifier sid)\n    content.vb: Public Function Equals(sid As SecurityIdentifier) As Boolean\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>sid</em> is equal to the value of the current <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.Equals(SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Copies the binary representation of the specified security identifier (SID) represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to a byte array.</p>\\n\"\n  syntax:\n    content: public void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to receive the copied SID.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The byte offset to use as the starting index in <em>binaryForm</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: SecurityIdentifier.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: SecurityIdentifier.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.Principal.SecurityIdentifier.GetHashCode\n  commentId: M:System.Security.Principal.SecurityIdentifier.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Principal.SecurityIdentifier.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The <xref href=\\\"System.Security.Principal.SecurityIdentifier.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is suitable for hashing algorithms and data structures like a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash value for the current <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SecurityIdentifier.GetHashCode()\n- uid: System.Security.Principal.SecurityIdentifier.IsAccountSid\n  commentId: M:System.Security.Principal.SecurityIdentifier.IsAccountSid\n  id: IsAccountSid\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: IsAccountSid()\n  fullName: System.Security.Principal.SecurityIdentifier.IsAccountSid()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAccountSid\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the security identifier (SID) represented by this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a valid Windows account SID.</p>\\n\"\n  syntax:\n    content: public bool IsAccountSid()\n    content.vb: Public Function IsAccountSid As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SID represented by this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a valid Windows account SID; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.IsAccountSid()\n- uid: System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)\n  id: IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: IsEqualDomainSid(SecurityIdentifier)\n  fullName: System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEqualDomainSid\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the security identifier (SID) represented by this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is from the same domain as the specified SID.</p>\\n\"\n  syntax:\n    content: public bool IsEqualDomainSid(SecurityIdentifier sid)\n    content.vb: Public Function IsEqualDomainSid(sid As SecurityIdentifier) As Boolean\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The SID to compare with this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SID represented by this <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is in the same domain as the <em>sid</em> SID; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.IsEqualDomainSid(SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)\n  commentId: M:System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)\n  id: IsValidTargetType(System.Type)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: IsValidTargetType(Type)\n  fullName: System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValidTargetType\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the specified type is a valid translation type for the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public override bool IsValidTargetType(Type targetType)\n    content.vb: Public Overrides Function IsValidTargetType(targetType As Type) As Boolean\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The type being queried for validity to serve as a conversion from <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The following target types are valid:</p>\\n<p>- <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>targetType</em> is a valid translation type for the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SecurityIdentifier.IsValidTargetType(Type)\n- uid: System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)\n  commentId: M:System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)\n  id: IsWellKnown(System.Security.Principal.WellKnownSidType)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: IsWellKnown(WellKnownSidType)\n  fullName: System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsWellKnown\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 90\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the specified well known security identifier (SID) type. </p>\\n\"\n  syntax:\n    content: public bool IsWellKnown(WellKnownSidType type)\n    content.vb: Public Function IsWellKnown(type As WellKnownSidType) As Boolean\n    parameters:\n    - id: type\n      type: System.Security.Principal.WellKnownSidType\n      description: \"\\n<p>A value to compare with the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>type</em> is the SID type for the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecurityIdentifier.IsWellKnown(WellKnownSidType)\n- uid: System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  id: op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Equality(SecurityIdentifier, SecurityIdentifier)\n  fullName: System.Security.Principal.SecurityIdentifier.Equality(System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 91\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to determine whether they are equal. They are considered equal if they have the same canonical representation as the one returned by the <xref href=\\\"System.Security.Principal.SecurityIdentifier.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property or if they are both <strong>null</strong>. </p>\\n\"\n  syntax:\n    content: public static bool operator ==(SecurityIdentifier left, SecurityIdentifier right)\n    content.vb: Public Shared Operator =(left As SecurityIdentifier, right As SecurityIdentifier) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The left operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    - id: right\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The right operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SecurityIdentifier.Equality(SecurityIdentifier, SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  id: op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SecurityIdentifier, SecurityIdentifier)\n  fullName: System.Security.Principal.SecurityIdentifier.Inequality(System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 92\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <xref href=\\\"System.Security.Principal.SecurityIdentifier.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property or if one of the objects is <strong>null</strong> and the other is not.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(SecurityIdentifier left, SecurityIdentifier right)\n    content.vb: Public Shared Operator <>(left As SecurityIdentifier, right As SecurityIdentifier) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The left operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    - id: right\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The right operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SecurityIdentifier.Inequality(SecurityIdentifier, SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier.ToString\n  commentId: M:System.Security.Principal.SecurityIdentifier.ToString\n  id: ToString\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Principal.SecurityIdentifier.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 93\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the security identifier (SID), in Security Descriptor Definition Language (SDDL) format, for the account represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. An example of the SDDL format is S-1-5-9. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The SID, in SDDL format, for the account represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SecurityIdentifier.ToString()\n- uid: System.Security.Principal.SecurityIdentifier.Translate(System.Type)\n  commentId: M:System.Security.Principal.SecurityIdentifier.Translate(System.Type)\n  id: Translate(System.Type)\n  parent: System.Security.Principal.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Translate(Type)\n  fullName: System.Security.Principal.SecurityIdentifier.Translate(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Translate\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 94\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Translates the account name represented by the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into another <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>-derived type.</p>\\n\"\n  syntax:\n    content: public override IdentityReference Translate(Type targetType)\n    content.vb: Public Overrides Function Translate(targetType As Type) As IdentityReference\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The target type for the conversion from <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The target type must be a type that is considered valid by the <xref href=\\\"System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n    return:\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The converted identity.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.Translate(System.Type)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>targetType </em>is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>targetType </em>is not an <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.Security.Principal.IdentityNotMappedException\n    commentId: T:System.Security.Principal.IdentityNotMappedException\n    description: \"\\n<p>Some or all identity references could not be translated.</p>\\n\"\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: \"\\n<p>A Win32 error code was returned.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SecurityIdentifier.Translate(Type)\nreferences:\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.IComparable{System.Security.Principal.SecurityIdentifier}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<SecurityIdentifier>\n  fullName: System.IComparable<System.Security.Principal.SecurityIdentifier>\n  fullname.vb: System.IComparable(Of System.Security.Principal.SecurityIdentifier)\n  name.vb: IComparable(Of SecurityIdentifier)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Principal.SecurityIdentifier\n    name: SecurityIdentifier\n    fullName: System.Security.Principal.SecurityIdentifier\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Principal.SecurityIdentifier\n    name: SecurityIdentifier\n    fullName: System.Security.Principal.SecurityIdentifier\n  - name: )\n    fullName: )\n  commentId: T:System.IComparable{System.Security.Principal.SecurityIdentifier}\n  nameWithType: IComparable<SecurityIdentifier>\n  nameWithType.vb: IComparable(Of SecurityIdentifier)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IComparable`1\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  commentId: T:System.IntPtr\n  nameWithType: IntPtr\n- uid: System.Security.Principal.WellKnownSidType\n  parent: System.Security.Principal\n  isExternal: false\n  name: WellKnownSidType\n  fullName: System.Security.Principal.WellKnownSidType\n  commentId: T:System.Security.Principal.WellKnownSidType\n  nameWithType: WellKnownSidType\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Principal.IdentityReference.Value\n  parent: System.Security.Principal.IdentityReference\n  isExternal: false\n  name: Value\n  fullName: System.Security.Principal.IdentityReference.Value\n  commentId: P:System.Security.Principal.IdentityReference.Value\n  nameWithType: IdentityReference.Value\n- uid: System.IComparable{System.Security.Principal.SecurityIdentifier}.CompareTo(System.Security.Principal.SecurityIdentifier)\n  parent: System.IComparable{System.Security.Principal.SecurityIdentifier}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(SecurityIdentifier)\n  fullName: System.IComparable<System.Security.Principal.SecurityIdentifier>.CompareTo(System.Security.Principal.SecurityIdentifier)\n  fullname.vb: System.IComparable(Of System.Security.Principal.SecurityIdentifier).CompareTo(System.Security.Principal.SecurityIdentifier)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Security.Principal.SecurityIdentifier>.CompareTo\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Principal.SecurityIdentifier\n    name: SecurityIdentifier\n    fullName: System.Security.Principal.SecurityIdentifier\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Security.Principal.SecurityIdentifier).CompareTo\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Principal.SecurityIdentifier\n    name: SecurityIdentifier\n    fullName: System.Security.Principal.SecurityIdentifier\n  - name: )\n    fullName: )\n  commentId: M:System.IComparable{System.Security.Principal.SecurityIdentifier}.CompareTo(System.Security.Principal.SecurityIdentifier)\n  nameWithType: IComparable<SecurityIdentifier>.CompareTo(SecurityIdentifier)\n  nameWithType.vb: IComparable(Of SecurityIdentifier).CompareTo(SecurityIdentifier)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IComparable`1.CompareTo(`0)\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n- uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n  parent: System.Security.Principal.IdentityReference\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.Principal.IdentityReference.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.Principal.IdentityReference.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.Principal.IdentityReference.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.Equals(System.Object)\n  nameWithType: IdentityReference.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Principal.IdentityReference.GetHashCode\n  parent: System.Security.Principal.IdentityReference\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.Principal.IdentityReference.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.Principal.IdentityReference.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.Principal.IdentityReference.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.GetHashCode\n  nameWithType: IdentityReference.GetHashCode()\n- uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  parent: System.Security.Principal.IdentityReference\n  isExternal: true\n  name: IsValidTargetType(Type)\n  fullName: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n    name: IsValidTargetType\n    fullName: System.Security.Principal.IdentityReference.IsValidTargetType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n    name: IsValidTargetType\n    fullName: System.Security.Principal.IdentityReference.IsValidTargetType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  nameWithType: IdentityReference.IsValidTargetType(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Security.Principal.IdentityReference.ToString\n  parent: System.Security.Principal.IdentityReference\n  isExternal: false\n  name: ToString()\n  fullName: System.Security.Principal.IdentityReference.ToString()\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.ToString\n    name: ToString\n    fullName: System.Security.Principal.IdentityReference.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.ToString\n    name: ToString\n    fullName: System.Security.Principal.IdentityReference.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.ToString\n  nameWithType: IdentityReference.ToString()\n- uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n  parent: System.Security.Principal.IdentityReference\n  isExternal: true\n  name: Translate(Type)\n  fullName: System.Security.Principal.IdentityReference.Translate(System.Type)\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n    name: Translate\n    fullName: System.Security.Principal.IdentityReference.Translate\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n    name: Translate\n    fullName: System.Security.Principal.IdentityReference.Translate\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.Translate(System.Type)\n  nameWithType: IdentityReference.Translate(Type)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Security.Principal.IdentityNotMappedException\n  isExternal: false\n  name: IdentityNotMappedException\n  fullName: System.Security.Principal.IdentityNotMappedException\n  nameWithType: IdentityNotMappedException\n  commentId: T:System.Security.Principal.IdentityNotMappedException\n- uid: System.SystemException\n  parent: System\n  isExternal: true\n  name: SystemException\n  fullName: System.SystemException\n  commentId: T:System.SystemException\n  nameWithType: SystemException\n"}