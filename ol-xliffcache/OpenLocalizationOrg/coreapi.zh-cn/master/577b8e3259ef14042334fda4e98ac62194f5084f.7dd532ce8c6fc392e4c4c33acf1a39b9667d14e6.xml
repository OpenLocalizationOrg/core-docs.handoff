{"nodes":[{"pos":[4112,4137],"content":"CustomAttributeExtensions","needQuote":true,"nodes":[{"content":"CustomAttributeExtensions","pos":[0,25]}]},{"pos":[5634,5668],"content":"GetCustomAttribute(Assembly, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttribute(Assembly, Type)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The assembly to inspect.&lt;/p&gt;\\n","pos":[6634,6669],"source":"\\n<p>The assembly to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[6739,6786],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;attributeType&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[6849,6971],"source":"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7090,7165],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7166,7172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[7534,7591],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[7592,7598],"source":" </p>\\n"},{"pos":[8171,8207],"content":"GetCustomAttribute(MemberInfo, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttribute(MemberInfo, Type)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[9179,9212],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[9282,9329],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;attributeType&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[9392,9514],"source":"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9633,9708],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9709,9715],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[10051,10137],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[10138,10144],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[10275,10332],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[10333,10339],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[10436,10482],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[10483,10489],"source":" </p>\\n"},{"pos":[11109,11154],"content":"GetCustomAttribute(MemberInfo, Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttribute(MemberInfo, Type, Boolean)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[12230,12263],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[12333,12380],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[12447,12556],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12557,12563],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;attributeType&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[12626,12748],"source":"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12867,12942],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12943,12949],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[13285,13371],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[13372,13378],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[13509,13566],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[13567,13573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[13670,13716],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[13717,13723],"source":" </p>\\n"},{"pos":[14295,14327],"content":"GetCustomAttribute(Module, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttribute(Module, Type)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The module to inspect.&lt;/p&gt;\\n","pos":[15284,15317],"source":"\\n<p>The module to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[15387,15434],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;attributeType&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[15497,15619],"source":"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[15738,15813],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15814,15820],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[16182,16239],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[16240,16246],"source":" </p>\\n"},{"pos":[16826,16865],"content":"GetCustomAttribute(ParameterInfo, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttribute(ParameterInfo, Type)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[17852,17888],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[17958,18005],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;attributeType&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[18068,18190],"source":"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18309,18384],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18385,18391],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[18753,18810],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[18811,18817],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[18914,18960],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[18961,18967],"source":" </p>\\n"},{"pos":[19599,19647],"content":"GetCustomAttribute(ParameterInfo, Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttribute(ParameterInfo, Type, Boolean)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[20741,20777],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[20847,20894],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[20961,21070],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21071,21077],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute matching &lt;em&gt;attributeType&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[21140,21258],"source":"\\n<p>A custom attribute matching <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21377,21452],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21453,21459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[21821,21878],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[21879,21885],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[21982,22028],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[22029,22035],"source":" </p>\\n"},{"pos":[22589,22620],"content":"GetCustomAttribute<T>(Assembly)","needQuote":true,"nodes":[{"content":"GetCustomAttribute&lt;T&gt;(Assembly)","pos":[0,31],"source":"GetCustomAttribute<T>(Assembly)"}]},{"content":"\\n&lt;p&gt;The assembly to inspect.&lt;/p&gt;\\n","pos":[23560,23595],"source":"\\n<p>The assembly to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[23649,23696],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;T&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[23748,23858],"source":"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[23977,24026],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24027,24033],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[24164,24221],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[24222,24228],"source":" </p>\\n"},{"pos":[25009,25042],"content":"GetCustomAttribute<T>(MemberInfo)","needQuote":true,"nodes":[{"content":"GetCustomAttribute&lt;T&gt;(MemberInfo)","pos":[0,33],"source":"GetCustomAttribute<T>(MemberInfo)"}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[25988,26021],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[26075,26122],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;T&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[26174,26284],"source":"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26403,26452],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26453,26459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[26564,26650],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[26651,26657],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[26788,26845],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[26846,26852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[26949,26995],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[26996,27002],"source":" </p>\\n"},{"pos":[27836,27878],"content":"GetCustomAttribute<T>(MemberInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttribute&lt;T&gt;(MemberInfo, Boolean)","pos":[0,42],"source":"GetCustomAttribute<T>(MemberInfo, Boolean)"}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[28928,28961],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[29028,29137],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[29138,29153],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[29207,29254],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;T&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[29306,29416],"source":"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29535,29584],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29585,29591],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[29696,29782],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[29783,29789],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[29920,29977],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[29978,29984],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[30081,30127],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[30128,30134],"source":" </p>\\n"},{"pos":[30954,30983],"content":"GetCustomAttribute<T>(Module)","needQuote":true,"nodes":[{"content":"GetCustomAttribute&lt;T&gt;(Module)","pos":[0,29],"source":"GetCustomAttribute<T>(Module)"}]},{"content":"\\n&lt;p&gt;The module to inspect.&lt;/p&gt;\\n","pos":[31914,31947],"source":"\\n<p>The module to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[32001,32048],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;T&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[32100,32210],"source":"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32329,32378],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32379,32385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[32516,32573],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[32574,32580],"source":" </p>\\n"},{"pos":[33362,33398],"content":"GetCustomAttribute<T>(ParameterInfo)","needQuote":true,"nodes":[{"content":"GetCustomAttribute&lt;T&gt;(ParameterInfo)","pos":[0,36],"source":"GetCustomAttribute<T>(ParameterInfo)"}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[34359,34395],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[34449,34496],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;T&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[34548,34658],"source":"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34777,34826],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34827,34833],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[34938,35024],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[35025,35031],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[35162,35219],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[35220,35226],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[35323,35369],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[35370,35376],"source":" </p>\\n"},{"pos":[36231,36276],"content":"GetCustomAttribute<T>(ParameterInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttribute&lt;T&gt;(ParameterInfo, Boolean)","pos":[0,45],"source":"GetCustomAttribute<T>(ParameterInfo, Boolean)"}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[37344,37380],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[37447,37556],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[37557,37572],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[37626,37673],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute that matches &lt;em&gt;T&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if no such attribute is found.&lt;/p&gt;\\n","pos":[37725,37835],"source":"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[37954,38003],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38004,38010],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[38115,38201],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[38202,38208],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;More than one of the requested attributes was found.","pos":[38339,38396],"source":"\\n<p>More than one of the requested attributes was found."},{"content":"&lt;/p&gt;\\n","pos":[38397,38403],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[38500,38546],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[38547,38553],"source":" </p>\\n"},{"pos":[39385,39414],"content":"GetCustomAttributes(Assembly)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Assembly)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The assembly to inspect.&lt;/p&gt;\\n","pos":[40353,40388],"source":"\\n<p>The assembly to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[40491,40623],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[40624,40630],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[40749,40798],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[40799,40805],"source":" </p>\\n"},{"pos":[41370,41405],"content":"GetCustomAttributes(Assembly, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Assembly, Type)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The assembly to inspect.&lt;/p&gt;\\n","pos":[42420,42455],"source":"\\n<p>The assembly to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n","pos":[42525,42572],"source":"\\n<p>The type of attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;attributeType&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[42675,42845],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[42846,42852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[42971,43046],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43047,43053],"source":" </p>\\n"},{"pos":[43825,43856],"content":"GetCustomAttributes(MemberInfo)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(MemberInfo)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[44801,44834],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[44937,45069],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[45070,45076],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45195,45244],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45245,45251],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[45356,45442],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[45443,45449],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[45546,45592],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[45593,45599],"source":" </p>\\n"},{"pos":[46181,46221],"content":"GetCustomAttributes(MemberInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(MemberInfo, Boolean)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[47270,47303],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[47370,47479],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[47480,47495],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; that match the specified criteria, or an empty collection if no such attributes exist.","pos":[47598,47764],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> that match the specified criteria, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[47765,47771],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47890,47939],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47940,47946],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[48051,48137],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[48138,48144],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[48241,48287],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[48288,48294],"source":" </p>\\n"},{"pos":[48876,48913],"content":"GetCustomAttributes(MemberInfo, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(MemberInfo, Type)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[49935,49968],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[50038,50094],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;attributeType&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[50197,50367],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[50368,50374],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50493,50568],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50569,50575],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[50911,50997],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[50998,51004],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[51101,51147],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[51148,51154],"source":" </p>\\n"},{"pos":[51778,51824],"content":"GetCustomAttributes(MemberInfo, Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(MemberInfo, Type, Boolean)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[52950,52983],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[53053,53109],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[53176,53285],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[53286,53301],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;attributeType&lt;/em&gt;, or an empty collection if no such attributes exist.&lt;/p&gt;\\n","pos":[53404,53580],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[53699,53774],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53775,53781],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[54117,54203],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[54204,54210],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[54307,54353],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[54354,54360],"source":" </p>\\n"},{"pos":[54900,54927],"content":"GetCustomAttributes(Module)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Module)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The module to inspect.&lt;/p&gt;\\n","pos":[55857,55890],"source":"\\n<p>The module to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[55993,56125],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[56126,56132],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[56251,56300],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[56301,56307],"source":" </p>\\n"},{"pos":[56864,56897],"content":"GetCustomAttributes(Module, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Module, Type)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The module to inspect.&lt;/p&gt;\\n","pos":[57903,57936],"source":"\\n<p>The module to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[58006,58062],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;attributeType&lt;/em&gt;, or an empty collection if no such attributes exist.&lt;/p&gt;\\n","pos":[58165,58341],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[58460,58535],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[58536,58542],"source":" </p>\\n"},{"pos":[59321,59355],"content":"GetCustomAttributes(ParameterInfo)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(ParameterInfo)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[60315,60351],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[60454,60586],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[60587,60593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[60712,60761],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[60762,60768],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[60873,60959],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[60960,60966],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[61063,61109],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[61110,61116],"source":" </p>\\n"},{"pos":[61710,61753],"content":"GetCustomAttributes(ParameterInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(ParameterInfo, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[62820,62856],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[62923,63032],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[63033,63048],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[63151,63283],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[63284,63290],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[63409,63458],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[63459,63465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[63570,63656],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[63657,63663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[63760,63806],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[63807,63813],"source":" </p>\\n"},{"pos":[64407,64447],"content":"GetCustomAttributes(ParameterInfo, Type)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(ParameterInfo, Type)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[65484,65520],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[65590,65646],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;attributeType&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[65749,65919],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[65920,65926],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66045,66120],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66121,66127],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[66463,66549],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[66550,66556],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[66653,66699],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[66700,66706],"source":" </p>\\n"},{"pos":[67342,67391],"content":"GetCustomAttributes(ParameterInfo, Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(ParameterInfo, Type, Boolean)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[68535,68571],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[68641,68697],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[68764,68873],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[68874,68889],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;attributeType&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[68992,69162],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[69163,69169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[69288,69363],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[69364,69370],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[69706,69792],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[69793,69799],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[69896,69942],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[69943,69949],"source":" </p>\\n"},{"pos":[70507,70539],"content":"GetCustomAttributes<T>(Assembly)","needQuote":true,"nodes":[{"content":"GetCustomAttributes&lt;T&gt;(Assembly)","pos":[0,32],"source":"GetCustomAttributes<T>(Assembly)"}]},{"content":"\\n&lt;p&gt;The assembly to inspect.&lt;/p&gt;\\n","pos":[71530,71565],"source":"\\n<p>The assembly to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[71619,71675],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;T&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[71765,71923],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[71924,71930],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[72049,72098],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[72099,72105],"source":" </p>\\n"},{"pos":[72893,72927],"content":"GetCustomAttributes<T>(MemberInfo)","needQuote":true,"nodes":[{"content":"GetCustomAttributes&lt;T&gt;(MemberInfo)","pos":[0,34],"source":"GetCustomAttributes<T>(MemberInfo)"}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[73923,73956],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[74010,74066],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;T&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[74156,74314],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[74315,74321],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[74440,74489],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[74490,74496],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[74601,74687],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[74688,74694],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[74791,74837],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[74838,74844],"source":" </p>\\n"},{"pos":[75685,75728],"content":"GetCustomAttributes<T>(MemberInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes&lt;T&gt;(MemberInfo, Boolean)","pos":[0,43],"source":"GetCustomAttributes<T>(MemberInfo, Boolean)"}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[76828,76861],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[76928,77037],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[77038,77053],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[77107,77163],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;T&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[77253,77411],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[77412,77418],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[77537,77586],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[77587,77593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[77698,77784],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[77785,77791],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[77888,77934],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[77935,77941],"source":" </p>\\n"},{"pos":[78768,78798],"content":"GetCustomAttributes<T>(Module)","needQuote":true,"nodes":[{"content":"GetCustomAttributes&lt;T&gt;(Module)","pos":[0,30],"source":"GetCustomAttributes<T>(Module)"}]},{"content":"\\n&lt;p&gt;The module to inspect.&lt;/p&gt;\\n","pos":[79779,79812],"source":"\\n<p>The module to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[79866,79922],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;T&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[80012,80170],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[80171,80177],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[80296,80345],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[80346,80352],"source":" </p>\\n"},{"pos":[81141,81178],"content":"GetCustomAttributes<T>(ParameterInfo)","needQuote":true,"nodes":[{"content":"GetCustomAttributes&lt;T&gt;(ParameterInfo)","pos":[0,37],"source":"GetCustomAttributes<T>(ParameterInfo)"}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[82189,82225],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[82279,82335],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;T&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[82425,82583],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[82584,82590],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[82709,82758],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[82759,82765],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[82870,82956],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[82957,82963],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[83060,83106],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[83107,83113],"source":" </p>\\n"},{"pos":[83975,84021],"content":"GetCustomAttributes<T>(ParameterInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes&lt;T&gt;(ParameterInfo, Boolean)","pos":[0,46],"source":"GetCustomAttributes<T>(ParameterInfo, Boolean)"}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[85139,85175],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[85242,85351],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[85352,85367],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[85421,85477],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A collection of the custom attributes that are applied to &lt;em&gt;element&lt;/em&gt; and that match &lt;em&gt;T&lt;/em&gt;, or an empty collection if no such attributes exist.","pos":[85567,85725],"source":"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist."},{"content":"&lt;/p&gt;\\n","pos":[85726,85732],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[85851,85900],"source":"\\n<p>\\n<em>element</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[85901,85907],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[86012,86098],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[86099,86105],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom attribute type cannot be loaded.","pos":[86202,86248],"source":"\\n<p>A custom attribute type cannot be loaded."},{"content":"&lt;/p&gt;\\n","pos":[86249,86255],"source":" </p>\\n"},{"pos":[87097,87122],"content":"IsDefined(Assembly, Type)","needQuote":true,"nodes":[{"content":"IsDefined(Assembly, Type)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The assembly to inspect.&lt;/p&gt;\\n","pos":[88049,88084],"source":"\\n<p>The assembly to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the attribute to search for.&lt;/p&gt;\\n","pos":[88154,88205],"source":"\\n<p>The type of the attribute to search for.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an attribute of the specified type is applied to &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[88266,88405],"source":"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[88524,88599],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[88600,88606],"source":" </p>\\n"},{"pos":[89374,89401],"content":"IsDefined(MemberInfo, Type)","needQuote":true,"nodes":[{"content":"IsDefined(MemberInfo, Type)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[90334,90367],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[90437,90493],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an attribute of the specified type is applied to &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[90554,90693],"source":"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[90812,90887],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[90888,90894],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[91230,91316],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[91317,91323],"source":" </p>\\n"},{"pos":[91907,91943],"content":"IsDefined(MemberInfo, Type, Boolean)","needQuote":true,"nodes":[{"content":"IsDefined(MemberInfo, Type, Boolean)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The member to inspect.&lt;/p&gt;\\n","pos":[92969,93002],"source":"\\n<p>The member to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[93072,93132],"source":"\\n<p>The type of the attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[93199,93308],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[93309,93324],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an attribute of the specified type is applied to &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[93385,93524],"source":"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[93643,93718],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[93719,93725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; is not a constructor, method, property, event, type, or field.","pos":[94061,94147],"source":"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field."},{"content":"&lt;/p&gt;\\n","pos":[94148,94154],"source":" </p>\\n"},{"pos":[94690,94713],"content":"IsDefined(Module, Type)","needQuote":true,"nodes":[{"content":"IsDefined(Module, Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The module to inspect.&lt;/p&gt;\\n","pos":[95631,95664],"source":"\\n<p>The module to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[95734,95790],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an attribute of the specified type is applied to &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[95851,95990],"source":"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[96109,96184],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[96185,96191],"source":" </p>\\n"},{"pos":[96966,96996],"content":"IsDefined(ParameterInfo, Type)","needQuote":true,"nodes":[{"content":"IsDefined(ParameterInfo, Type)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[97944,97980],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[98050,98106],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an attribute of the specified type is applied to &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[98167,98306],"source":"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[98425,98500],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[98501,98507],"source":" </p>\\n"},{"pos":[99334,99373],"content":"IsDefined(ParameterInfo, Type, Boolean)","needQuote":true,"nodes":[{"content":"IsDefined(ParameterInfo, Type, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The parameter to inspect.&lt;/p&gt;\\n","pos":[100414,100450],"source":"\\n<p>The parameter to inspect.</p>\\n"},{"content":"\\n&lt;p&gt;The type of attribute to search for.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[100520,100576],"source":"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inspect the ancestors of &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[100643,100752],"source":"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[100753,100768],"source":" </p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an attribute of the specified type is applied to &lt;em&gt;element&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100829,100968],"source":"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;element&lt;/em&gt; or &lt;em&gt;attributeType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[101087,101162],"source":"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[101163,101169],"source":" </p>\\n"},{"pos":[101629,101646],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[101810,101816],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101976,101986],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[102081,102089],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[102158,102159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102186,102187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102257,102265],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[102334,102335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102362,102363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102546,102560],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[102679,102685],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102752,102753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102803,102809],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102869,102870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102953,102959],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[103026,103027],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103077,103083],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103143,103144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103358,103380],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[103528,103534],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[103601,103602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103652,103658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103719,103720]},{"pos":[103775,103781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103841,103842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103939,103945],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[104012,104013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104063,104069],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[104130,104131]},{"pos":[104186,104192],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104252,104253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104498,104529],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[104695,104710],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[104786,104787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104837,104843],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[104904,104905]},{"pos":[104960,104966],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[105026,105027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105133,105148],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[105224,105225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105275,105281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[105342,105343]},{"pos":[105398,105404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[105464,105465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105695,105708],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[105809,105820],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[105892,105893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105920,105921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105994,106005],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[106077,106078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106105,106106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106281,106290],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[106383,106390],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[106458,106459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106486,106487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106556,106563],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[106631,106632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106659,106660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106835,106852],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[106961,106976],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[107052,107053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107080,107081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107158,107173],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[107249,107250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107277,107278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107423,107429],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[107584,107592],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[107763,107767],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[107909,107918],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[108098,108108],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[108288,108295],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[108465,108471],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[108667,108680],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"pos":[108839,108840],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[108929,108930],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[109127,109149],"content":"IEnumerable<Attribute>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Attribute&gt;","pos":[0,22],"source":"IEnumerable<Attribute>"}]},{"pos":[109406,109417],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[109502,109503],"content":"<","needQuote":true,"nodes":[]},{"pos":[109556,109565],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[109721,109732],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[109818,109821]},{"pos":[109881,109890],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[109953,109954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110203,110217],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[110436,110447],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[110511,110512],"content":"<","needQuote":true,"nodes":[]},{"pos":[110539,110540],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[110660,110671],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[110736,110739]},{"pos":[110773,110774],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[110801,110802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111005,111031],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[111307,111321],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[111540,111551],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[111615,111616],"content":"<","needQuote":true,"nodes":[]},{"pos":[111643,111644],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[111764,111775],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[111840,111843]},{"pos":[111877,111878],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[111905,111906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112113,112134],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[112335,112352],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[112541,112564],"content":"AmbiguousMatchException","needQuote":true,"nodes":[{"content":"AmbiguousMatchException","pos":[0,23]}]},{"pos":[112797,112818],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[113019,113036],"content":"TypeLoadException","needQuote":true,"nodes":[{"content":"TypeLoadException","pos":[0,17]}]}],"content":"items:\n- uid: System.Reflection.CustomAttributeExtensions\n  commentId: T:System.Reflection.CustomAttributeExtensions\n  id: CustomAttributeExtensions\n  parent: System.Reflection\n  children:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  langs:\n  - csharp\n  - vb\n  name: CustomAttributeExtensions\n  fullName: System.Reflection.CustomAttributeExtensions\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomAttributeExtensions\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 7\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Contains static methods for retrieving custom attributes.</p>\\n\"\n  syntax:\n    content: public class CustomAttributeExtensions\n    content.vb: Public Class CustomAttributeExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CustomAttributeExtensions\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  id: GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute(Assembly, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 10\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified assembly.</p>\\n\"\n  syntax:\n    content: public static Attribute GetCustomAttribute(this Assembly element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(element As Assembly, attributeType As Type) As Attribute\n    parameters:\n    - id: element\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Assembly, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  id: GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute(MemberInfo, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member.</p>\\n\"\n  syntax:\n    content: public static Attribute GetCustomAttribute(this MemberInfo element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(element As MemberInfo, attributeType As Type) As Attribute\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  id: GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 44\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.</p>\\n\"\n  syntax:\n    content: public static Attribute GetCustomAttribute(this MemberInfo element, Type attributeType, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(element As MemberInfo, attributeType As Type, inherit As Boolean) As Attribute\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)\n  id: GetCustomAttribute(System.Reflection.Module,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute(Module, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 14\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified module.</p>\\n\"\n  syntax:\n    content: public static Attribute GetCustomAttribute(this Module element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(element As  Module, attributeType As Type) As Attribute\n    parameters:\n    - id: element\n      type: System.Reflection.Module\n      description: \"\\n<p>The module to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Module, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  id: GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute(ParameterInfo, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 22\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter.</p>\\n\"\n  syntax:\n    content: public static Attribute GetCustomAttribute(this ParameterInfo element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(element As ParameterInfo, attributeType As Type) As Attribute\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  id: GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 48\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\\n\"\n  syntax:\n    content: public static Attribute GetCustomAttribute(this ParameterInfo element, Type attributeType, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(element As ParameterInfo, attributeType As Type, inherit As Boolean) As Attribute\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>A custom attribute matching <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)\n  id: GetCustomAttribute``1(System.Reflection.Assembly)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute<T>(Assembly)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified assembly.</p>\\n\"\n  syntax:\n    content: 'public static T GetCustomAttribute<T>(this Assembly element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As Assembly) As T\n    parameters:\n    - id: element\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.Assembly)\n  name.vb: GetCustomAttribute(Of T)(Assembly)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Assembly)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  id: GetCustomAttribute``1(System.Reflection.MemberInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute<T>(MemberInfo)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.MemberInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 35\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member.</p>\\n\"\n  syntax:\n    content: 'public static T GetCustomAttribute<T>(this MemberInfo element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As MemberInfo) As T\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.MemberInfo)\n  name.vb: GetCustomAttribute(Of T)(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  id: GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.MemberInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 53\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.</p>\\n\"\n  syntax:\n    content: 'public static T GetCustomAttribute<T>(this MemberInfo element, bool inherit)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As MemberInfo, inherit As Boolean) As T\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.MemberInfo, System.Boolean)\n  name.vb: GetCustomAttribute(Of T)(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)\n  id: GetCustomAttribute``1(System.Reflection.Module)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute<T>(Module)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.Module)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 31\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified module.</p>\\n\"\n  syntax:\n    content: 'public static T GetCustomAttribute<T>(this Module element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As  Module) As T\n    parameters:\n    - id: element\n      type: System.Reflection.Module\n      description: \"\\n<p>The module to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.Module)\n  name.vb: GetCustomAttribute(Of T)(Module)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Module)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(Module)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)\n  id: GetCustomAttribute``1(System.Reflection.ParameterInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute<T>(ParameterInfo)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.ParameterInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 39\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter.</p>\\n\"\n  syntax:\n    content: 'public static T GetCustomAttribute<T>(this ParameterInfo element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As ParameterInfo) As T\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.ParameterInfo)\n  name.vb: GetCustomAttribute(Of T)(ParameterInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(ParameterInfo)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(ParameterInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)\n  id: GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttribute<T>(ParameterInfo, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.ParameterInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttribute\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 57\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\\n\"\n  syntax:\n    content: 'public static T GetCustomAttribute<T>(this ParameterInfo element, bool inherit)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As ParameterInfo, inherit As Boolean) As T\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one of the requested attributes was found. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.ParameterInfo, System.Boolean)\n  name.vb: GetCustomAttribute(Of T)(ParameterInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(ParameterInfo, Boolean)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(ParameterInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)\n  id: GetCustomAttributes(System.Reflection.Assembly)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(Assembly)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 64\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes that are applied to a specified assembly.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this Assembly element)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As Assembly) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly to inspect.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  id: GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(Assembly, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 92\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this Assembly element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As Assembly, attributeType As Type) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  id: GetCustomAttributes(System.Reflection.MemberInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(MemberInfo)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 72\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes that are applied to a specified member.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As MemberInfo) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 81\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the ancestors of that member.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As MemberInfo, inherit As Boolean) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> that match the specified criteria, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(MemberInfo, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 100\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As MemberInfo, attributeType As Type) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 126\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member, and optionally inspects the ancestors of that member.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, Type attributeType, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As MemberInfo, attributeType As Type, inherit As Boolean) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)\n  id: GetCustomAttributes(System.Reflection.Module)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(Module)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 68\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes that are applied to a specified module.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this Module element)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As  Module) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.Module\n      description: \"\\n<p>The module to inspect.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)\n  id: GetCustomAttributes(System.Reflection.Module,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(Module, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 96\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified module.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this Module element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As  Module, attributeType As Type) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.Module\n      description: \"\\n<p>The module to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)\n  id: GetCustomAttributes(System.Reflection.ParameterInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(ParameterInfo)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 76\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes that are applied to a specified parameter.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As ParameterInfo) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(ParameterInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 85\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As ParameterInfo, inherit As Boolean) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(ParameterInfo, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 104\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As ParameterInfo, attributeType As Type) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 130\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, Type attributeType, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(element As ParameterInfo, attributeType As Type, inherit As Boolean) As IEnumerable(Of Attribute)\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Attribute}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)\n  id: GetCustomAttributes``1(System.Reflection.Assembly)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes<T>(Assembly)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 109\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly. </p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> GetCustomAttributes<T>(this Assembly element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As Assembly) As IEnumerable(Of T)\n    parameters:\n    - id: element\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.Assembly)\n  name.vb: GetCustomAttributes(Of T)(Assembly)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Assembly)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  id: GetCustomAttributes``1(System.Reflection.MemberInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes<T>(MemberInfo)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.MemberInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 117\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> GetCustomAttributes<T>(this MemberInfo element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As MemberInfo) As IEnumerable(Of T)\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.MemberInfo)\n  name.vb: GetCustomAttributes(Of T)(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  id: GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.MemberInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 135\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member, and optionally inspects the ancestors of that member.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> GetCustomAttributes<T>(this MemberInfo element, bool inherit)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As MemberInfo, inherit As Boolean) As IEnumerable(Of T)\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.MemberInfo, System.Boolean)\n  name.vb: GetCustomAttributes(Of T)(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)\n  id: GetCustomAttributes``1(System.Reflection.Module)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes<T>(Module)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.Module)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 113\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified module.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> GetCustomAttributes<T>(this Module element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As  Module) As IEnumerable(Of T)\n    parameters:\n    - id: element\n      type: System.Reflection.Module\n      description: \"\\n<p>The module to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.Module)\n  name.vb: GetCustomAttributes(Of T)(Module)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Module)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(Module)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)\n  id: GetCustomAttributes``1(System.Reflection.ParameterInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes<T>(ParameterInfo)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.ParameterInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 121\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> GetCustomAttributes<T>(this ParameterInfo element)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As ParameterInfo) As IEnumerable(Of T)\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.ParameterInfo)\n  name.vb: GetCustomAttributes(Of T)(ParameterInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(ParameterInfo)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(ParameterInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)\n  id: GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetCustomAttributes<T>(ParameterInfo, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.ParameterInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCustomAttributes\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 139\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> GetCustomAttributes<T>(this ParameterInfo element, bool inherit)where T : Attribute'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As ParameterInfo, inherit As Boolean) As IEnumerable(Of T)\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>A custom attribute type cannot be loaded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.ParameterInfo, System.Boolean)\n  name.vb: GetCustomAttributes(Of T)(ParameterInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(ParameterInfo, Boolean)\n  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(ParameterInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)\n  id: IsDefined(System.Reflection.Assembly,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(Assembly, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 146\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether custom attributes of a specified type are applied to a specified assembly.</p>\\n\"\n  syntax:\n    content: public static bool IsDefined(this Assembly element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsDefined(element As Assembly, attributeType As Type) As Boolean\n    parameters:\n    - id: element\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of the attribute to search for.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.IsDefined(Assembly, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  id: IsDefined(System.Reflection.MemberInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(MemberInfo, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 154\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether custom attributes of a specified type are applied to a specified member.</p>\\n\"\n  syntax:\n    content: public static bool IsDefined(this MemberInfo element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsDefined(element As MemberInfo, attributeType As Type) As Boolean\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  id: IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(MemberInfo, Type, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 163\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally, applied to its ancestors.</p>\\n\"\n  syntax:\n    content: public static bool IsDefined(this MemberInfo element, Type attributeType, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsDefined(element As MemberInfo, attributeType As Type, inherit As Boolean) As Boolean\n    parameters:\n    - id: element\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of the attribute to search for.</p>\\n<p></p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)\n  id: IsDefined(System.Reflection.Module,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(Module, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 150\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether custom attributes of a specified type are applied to a specified module.</p>\\n\"\n  syntax:\n    content: public static bool IsDefined(this Module element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsDefined(element As  Module, attributeType As Type) As Boolean\n    parameters:\n    - id: element\n      type: System.Reflection.Module\n      description: \"\\n<p>The module to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.IsDefined(Module, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  id: IsDefined(System.Reflection.ParameterInfo,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(ParameterInfo, Type)\n  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 158\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether custom attributes of a specified type are applied to a specified parameter.</p>\\n\"\n  syntax:\n    content: public static bool IsDefined(this ParameterInfo element, Type attributeType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsDefined(element As ParameterInfo, attributeType As Type) As Boolean\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.IsDefined(ParameterInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  id: IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.CustomAttributeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Reflection/CustomAttributeExtensions.cs\n    startLine: 167\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether custom attributes of a specified type are applied to a specified parameter, and, optionally, applied to its ancestors.</p>\\n\"\n  syntax:\n    content: public static bool IsDefined(this ParameterInfo element, Type attributeType, bool inherit)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsDefined(element As ParameterInfo, attributeType As Type, inherit As Boolean) As Boolean\n    parameters:\n    - id: element\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>The parameter to inspect.</p>\\n\"\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The type of attribute to search for.</p>\\n<p></p>\\n\"\n    - id: inherit\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>attributeType</em> is not derived from <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeExtensions.IsDefined(ParameterInfo, Type, Boolean)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  fullName: System.Reflection.Assembly\n  nameWithType: Assembly\n  commentId: T:System.Reflection.Assembly\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.Module\n  nameWithType: Module\n  commentId: T:System.Reflection.Module\n- uid: System.Reflection.ParameterInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n  nameWithType: ParameterInfo\n  commentId: T:System.Reflection.ParameterInfo\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.IEnumerable{System.Attribute}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Attribute>\n  fullName: System.Collections.Generic.IEnumerable<System.Attribute>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Attribute)\n  name.vb: IEnumerable(Of Attribute)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Attribute>\n  nameWithType.vb: IEnumerable(Of Attribute)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Attribute}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Reflection.AmbiguousMatchException\n  isExternal: false\n  name: AmbiguousMatchException\n  fullName: System.Reflection.AmbiguousMatchException\n  nameWithType: AmbiguousMatchException\n  commentId: T:System.Reflection.AmbiguousMatchException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  fullName: System.TypeLoadException\n  nameWithType: TypeLoadException\n  commentId: T:System.TypeLoadException\n"}