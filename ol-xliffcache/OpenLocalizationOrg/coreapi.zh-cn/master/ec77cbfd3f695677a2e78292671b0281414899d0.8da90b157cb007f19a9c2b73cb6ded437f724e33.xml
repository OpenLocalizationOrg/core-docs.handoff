{"nodes":[{"pos":[666,675],"content":"PublicKey","needQuote":true,"nodes":[{"content":"PublicKey","pos":[0,9]}]},{"pos":[2539,2585],"content":"PublicKey(Oid, AsnEncodedData, AsnEncodedData)","needQuote":true,"nodes":[{"content":"PublicKey(Oid, AsnEncodedData, AsnEncodedData)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;An object identifier (OID) object that represents the public key.&lt;/p&gt;\\n","pos":[3943,4019],"source":"\\n<p>An object identifier (OID) object that represents the public key.</p>\\n"},{"content":"\\n&lt;p&gt;An ASN.1-encoded representation of the public key parameters.&lt;/p&gt;\\n","pos":[4118,4190],"source":"\\n<p>An ASN.1-encoded representation of the public key parameters.</p>\\n"},{"content":"\\n&lt;p&gt;An ASN.1-encoded representation of the public key value.&lt;/p&gt;\\n","pos":[4287,4354],"source":"\\n<p>An ASN.1-encoded representation of the public key value.</p>\\n"},{"pos":[4776,4791],"content":"EncodedKeyValue","needQuote":true,"nodes":[{"content":"EncodedKeyValue","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The ASN.1-encoded representation of the public key value.&lt;/p&gt;\\n","pos":[5717,5785],"source":"\\n<p>The ASN.1-encoded representation of the public key value.</p>\\n"},{"pos":[6203,6220],"content":"EncodedParameters","needQuote":true,"nodes":[{"content":"EncodedParameters","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The ASN.1-encoded representation of the public key parameters.&lt;/p&gt;\\n","pos":[7159,7232],"source":"\\n<p>The ASN.1-encoded representation of the public key parameters.</p>\\n"},{"pos":[7610,7613],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object identifier (OID) object of the public key.&lt;/p&gt;\\n","pos":[8453,8516],"source":"\\n<p>An object identifier (OID) object of the public key.</p>\\n"},{"pos":[8720,8765],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[9013,9019],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9179,9189],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9284,9292],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9361,9362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9389,9390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9460,9468],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9537,9538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9565,9566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9749,9763],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9882,9888],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9955,9956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10006,10012],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10072,10073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10156,10162],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10229,10230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10280,10286],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10346,10347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10561,10583],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10731,10737],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10804,10805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10855,10861],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10922,10923]},{"pos":[10978,10984],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11044,11045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11142,11148],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11215,11216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11266,11272],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11333,11334]},{"pos":[11389,11395],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11455,11456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11701,11732],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11898,11913],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11989,11990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12040,12046],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12107,12108]},{"pos":[12163,12169],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12229,12230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12336,12351],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12427,12428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12478,12484],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12545,12546]},{"pos":[12601,12607],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12667,12668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12898,12911],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13012,13023],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13095,13096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13123,13124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13197,13208],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13280,13281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13308,13309],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13484,13493],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13586,13593],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13661,13662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13689,13690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13759,13766],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13834,13835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13862,13863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14038,14055],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14164,14179],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14255,14256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14283,14284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14361,14376],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14452,14453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14480,14481],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14626,14632],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14804,14807],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[15039,15053],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[15264,15292],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.PublicKey\n  commentId: T:System.Security.Cryptography.X509Certificates.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.PublicKey.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)\n  - System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue\n  - System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters\n  - System.Security.Cryptography.X509Certificates.PublicKey.Oid\n  langs:\n  - csharp\n  - vb\n  name: PublicKey\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PublicKey\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 32\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Represents a certificate's public key information. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public sealed class PublicKey\n    content.vb: Public NotInheritable Class PublicKey\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: PublicKey\n- uid: System.Security.Cryptography.X509Certificates.PublicKey.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)\n  commentId: M:System.Security.Cryptography.X509Certificates.PublicKey.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)\n  id: '#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)'\n  parent: System.Security.Cryptography.X509Certificates.PublicKey\n  langs:\n  - csharp\n  - vb\n  name: PublicKey(Oid, AsnEncodedData, AsnEncodedData)\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey.PublicKey(System.Security.Cryptography.Oid, System.Security.Cryptography.AsnEncodedData, System.Security.Cryptography.AsnEncodedData)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 34\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.PublicKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an object identifier (OID) object of the public key, an ASN.1-encoded representation of the public key parameters, and an ASN.1-encoded representation of the public key value. </p>\\n\"\n  syntax:\n    content: public PublicKey(Oid oid, AsnEncodedData parameters, AsnEncodedData keyValue)\n    content.vb: Public Sub New(oid As Oid, parameters As AsnEncodedData, keyValue As AsnEncodedData)\n    parameters:\n    - id: oid\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An object identifier (OID) object that represents the public key.</p>\\n\"\n    - id: parameters\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>An ASN.1-encoded representation of the public key parameters.</p>\\n\"\n    - id: keyValue\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>An ASN.1-encoded representation of the public key value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PublicKey.PublicKey(Oid, AsnEncodedData, AsnEncodedData)\n- uid: System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue\n  commentId: P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue\n  id: EncodedKeyValue\n  parent: System.Security.Cryptography.X509Certificates.PublicKey\n  langs:\n  - csharp\n  - vb\n  name: EncodedKeyValue\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EncodedKeyValue\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the ASN.1-encoded representation of the public key value.</p>\\n\"\n  syntax:\n    content: public AsnEncodedData EncodedKeyValue { get; }\n    content.vb: Public ReadOnly Property EncodedKeyValue As AsnEncodedData\n    parameters: []\n    return:\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The ASN.1-encoded representation of the public key value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PublicKey.EncodedKeyValue\n- uid: System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters\n  commentId: P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters\n  id: EncodedParameters\n  parent: System.Security.Cryptography.X509Certificates.PublicKey\n  langs:\n  - csharp\n  - vb\n  name: EncodedParameters\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EncodedParameters\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 36\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the ASN.1-encoded representation of the public key parameters.</p>\\n\"\n  syntax:\n    content: public AsnEncodedData EncodedParameters { get; }\n    content.vb: Public ReadOnly Property EncodedParameters As AsnEncodedData\n    parameters: []\n    return:\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The ASN.1-encoded representation of the public key parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PublicKey.EncodedParameters\n- uid: System.Security.Cryptography.X509Certificates.PublicKey.Oid\n  commentId: P:System.Security.Cryptography.X509Certificates.PublicKey.Oid\n  id: Oid\n  parent: System.Security.Cryptography.X509Certificates.PublicKey\n  langs:\n  - csharp\n  - vb\n  name: Oid\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey.Oid\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Oid\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 37\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets an object identifier (OID) object of the public key.</p>\\n\"\n  syntax:\n    content: public Oid Oid { get; }\n    content.vb: Public ReadOnly Property Oid As Oid\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An object identifier (OID) object of the public key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PublicKey.Oid\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  fullName: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  nameWithType: Oid\n- uid: System.Security.Cryptography.AsnEncodedData\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsnEncodedData\n  fullName: System.Security.Cryptography.AsnEncodedData\n  commentId: T:System.Security.Cryptography.AsnEncodedData\n  nameWithType: AsnEncodedData\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n"}