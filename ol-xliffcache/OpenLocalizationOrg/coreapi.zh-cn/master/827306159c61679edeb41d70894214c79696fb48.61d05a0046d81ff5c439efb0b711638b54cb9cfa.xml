{"nodes":[{"pos":[2441,2464],"content":"TraceListenerCollection","needQuote":true,"nodes":[{"content":"TraceListenerCollection","pos":[0,23]}]},{"pos":[4962,4967],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of listeners in the list.&lt;/p&gt;\\n","pos":[5674,5721],"source":"\\n<p>The number of listeners in the list.</p>\\n"},{"pos":[6860,6871],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8195,8241],"source":"\\n<p>The value is <strong>null</strong>.</p>\\n"},{"pos":[9484,9496],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[12342,12368],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"content":"\\n&lt;p&gt;Always &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13392,13432],"source":"\\n<p>Always <strong>true</strong>.</p>\\n"},{"pos":[14104,14124],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[15875,15892],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"content":"\\n&lt;p&gt;Always &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16848,16889],"source":"\\n<p>Always <strong>false</strong>.</p>\\n"},{"pos":[17513,17529],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"content":"\\n&lt;p&gt;Always &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18475,18516],"source":"\\n<p>Always <strong>false</strong>.</p>\\n"},{"pos":[19160,19177],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the &lt;em&gt;value&lt;/em&gt; to get.&lt;/p&gt;\\n","pos":[20235,20296],"source":"\\n<p>The zero-based index of the <em>value</em> to get.</p>\\n"},{"pos":[21191,21209],"content":"Add(TraceListener)","needQuote":true,"nodes":[{"content":"Add(TraceListener)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The position at which the new listener was inserted.&lt;/p&gt;\\n","pos":[22253,22316],"source":"\\n<p>The position at which the new listener was inserted.</p>\\n"},{"pos":[23470,23495],"content":"AddRange(TraceListener[])","needQuote":true,"nodes":[{"content":"AddRange(TraceListener[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24639,24692],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[26086,26119],"content":"AddRange(TraceListenerCollection)","needQuote":true,"nodes":[{"content":"AddRange(TraceListenerCollection)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27326,27379],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[28431,28438],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[30221,30244],"content":"Contains(TraceListener)","needQuote":true,"nodes":[{"content":"Contains(TraceListener)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the listener is in the list; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31257,31358],"source":"\\n<p>\\n<strong>true</strong> if the listener is in the list; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[32550,32580],"content":"CopyTo(TraceListener[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(TraceListener[], Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The starting index number in the current list to copy from.","pos":[33756,33820],"source":"\\n<p>The starting index number in the current list to copy from."},{"content":"&lt;/p&gt;\\n","pos":[33821,33827],"source":" </p>\\n"},{"pos":[35131,35146],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[37202,37224],"content":"IndexOf(TraceListener)","needQuote":true,"nodes":[{"content":"IndexOf(TraceListener)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The index of the listener, if it can be found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[38215,38299],"source":"\\n<p>The index of the listener, if it can be found in the list; otherwise, -1.</p>\\n"},{"pos":[39484,39512],"content":"Insert(Int32, TraceListener)","needQuote":true,"nodes":[{"content":"Insert(Int32, TraceListener)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; is not a valid index in the list.","pos":[40815,40872],"source":"\\n<p>The <em>index</em> is not a valid index in the list."},{"content":"&lt;/p&gt;\\n","pos":[40873,40879],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;listener&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40976,41032],"source":"\\n<p>\\n<em>listener</em> is <strong>null</strong>.</p>\\n"},{"pos":[42184,42205],"content":"Remove(TraceListener)","needQuote":true,"nodes":[{"content":"Remove(TraceListener)","pos":[0,21]}]},{"pos":[44304,44318],"content":"Remove(String)","needQuote":true,"nodes":[{"content":"Remove(String)","pos":[0,14]}]},{"pos":[46383,46398],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; is not a valid index in the list.","pos":[47522,47579],"source":"\\n<p>The <em>index</em> is not a valid index in the list."},{"content":"&lt;/p&gt;\\n","pos":[47580,47586],"source":" </p>\\n"},{"pos":[48877,48909],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[50420,50494],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"pos":[51158,51175],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The position into which the new trace listener was inserted.&lt;/p&gt;\\n","pos":[52280,52351],"source":"\\n<p>The position into which the new trace listener was inserted.</p>\\n"},{"pos":[53270,53292],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"pos":[55349,55370],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"pos":[57353,57380],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[58443,58518],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"pos":[59720,59740],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"pos":[61117,61135],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[61302,61308],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61476,61481],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[61676,61687],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[61900,61911],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62110,62120],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[62215,62223],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[62292,62293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62320,62321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62391,62399],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[62468,62469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62496,62497],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62680,62694],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[62813,62819],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62886,62887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62937,62943],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63003,63004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63087,63093],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63160,63161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63211,63217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63277,63278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63492,63514],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[63662,63668],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63735,63736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63786,63792],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63853,63854]},{"pos":[63909,63915],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63975,63976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64073,64079],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[64146,64147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64197,64203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64264,64265]},{"pos":[64320,64326],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64386,64387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64632,64663],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[64829,64844],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[64920,64921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64971,64977],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[65038,65039]},{"pos":[65094,65100],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65160,65161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65267,65282],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[65358,65359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65409,65415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[65476,65477]},{"pos":[65532,65538],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65598,65599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65829,65842],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[65943,65954],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[66026,66027],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66054,66055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66128,66139],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[66211,66212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66239,66240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66415,66424],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[66517,66524],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[66592,66593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66620,66621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66690,66697],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[66765,66766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66793,66794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66969,66986],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[67095,67110],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[67186,67187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67214,67215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67292,67307],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[67383,67384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67411,67412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67707,67720],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[67837,67848],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[67907,67908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67935,67936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68017,68028],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[68087,68088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68115,68116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68471,68483],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[68616,68626],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[68693,68694],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68721,68722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68811,68821],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[68888,68889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68916,68917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69258,69273],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[69477,69490],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[69552,69553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69580,69581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69659,69675],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[69740,69741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69768,69769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70147,70164],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[70376,70391],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[70455,70456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70483,70484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70564,70582],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[70649,70650],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70677,70678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70913,70919],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[71038,71056],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[71257,71281],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[71460,71471],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[71530,71531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71598,71609],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[71686,71687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71800,71811],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[71870,71871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71938,71949],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72026,72027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72255,72264],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[72470,72493],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[72688,72698],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[72765,72766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72833,72844],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72921,72922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73043,73053],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[73120,73121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73188,73199],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[73276,73277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73530,73548],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[73770,73796],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[74103,74116],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[74178,74179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74246,74257],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[74334,74335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74445,74461],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[74526,74527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74594,74605],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[74682,74683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74972,74982],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[75182,75210],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[75525,75540],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[75604,75605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75672,75683],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75760,75761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75873,75891],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[75958,75959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76026,76037],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[76114,76115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76377,76388],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[76581,76586],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[76787,76792],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76965,76978],"content":"TraceListener","needQuote":true,"nodes":[{"content":"TraceListener","pos":[0,13]}]},{"pos":[77168,77174],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[77375,77389],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[77619,77626],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[77824,77832],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[78084,78095],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[78337,78347],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[78593,78604],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[78821,78825],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[78881,78882]},{"pos":[78934,78939],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[78999,79000]},{"pos":[79094,79098],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[79153,79154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79203,79208],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79267,79268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79465,79480],"content":"TraceListener[]","needQuote":true,"nodes":[{"content":"TraceListener[]","pos":[0,15]}]},{"pos":[79672,79685],"content":"TraceListener","needQuote":true,"nodes":[{"content":"TraceListener","pos":[0,13]}]},{"content":"[]","pos":[79744,79746]},{"pos":[79830,79843],"content":"TraceListener","needQuote":true,"nodes":[{"content":"TraceListener","pos":[0,13]}]},{"pos":[79901,79903],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[80095,80118],"content":"TraceListenerCollection","needQuote":true,"nodes":[{"content":"TraceListenerCollection","pos":[0,23]}]},{"pos":[80373,80380],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[80491,80496],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[80552,80553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80580,80581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80659,80664],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[80720,80721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80748,80749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80963,80978],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[81117,81130],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[81200,81201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81228,81229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81321,81334],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[81404,81405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81432,81433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81649,81660],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[81895,81910],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[82053,82061],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[82120,82121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82170,82175],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82234,82235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82330,82338],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[82397,82398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82447,82452],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82511,82512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82770,82790],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[82968,82974],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[83037,83038],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83087,83092],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[83131,83132]},{"pos":[83186,83191],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83250,83251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83363,83369],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[83432,83433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83482,83487],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[83526,83527]},{"pos":[83581,83586],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83645,83646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83857,83862],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[84051,84062],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[84197,84200],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[84254,84255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84305,84311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84371,84372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84463,84466],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[84520,84521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84571,84577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84637,84638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84866,84882],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[85027,85035],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[85094,85095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85145,85151],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85211,85212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85308,85316],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[85375,85376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85426,85432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85492,85493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85730,85745],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[85888,85895],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[85953,85954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86004,86010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86070,86071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86166,86173],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[86231,86232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86282,86288],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86348,86349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86596,86617],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[86785,86791],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[86848,86849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86898,86903],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[86963,86964]},{"pos":[87019,87025],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87085,87086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87193,87199],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[87256,87257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87306,87311],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[87371,87372]},{"pos":[87427,87433],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87493,87494],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87746,87760],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[87901,87907],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[87964,87965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88015,88021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88081,88082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88176,88182],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[88239,88240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88290,88296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88356,88357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88537,88558],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[88752,88779],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[88998,89015],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Diagnostics.TraceListenerCollection\n  commentId: T:System.Diagnostics.TraceListenerCollection\n  id: TraceListenerCollection\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  - System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  - System.Diagnostics.TraceListenerCollection.Clear\n  - System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  - System.Diagnostics.TraceListenerCollection.Count\n  - System.Diagnostics.TraceListenerCollection.GetEnumerator\n  - System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  - System.Diagnostics.TraceListenerCollection.Item(System.String)\n  - System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  - System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized\n  - System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceListenerCollection\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 13\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a thread-safe list of <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: 'public class TraceListenerCollection : IList, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class TraceListenerCollection\n          Implements IList, ICollection, IEnumerable\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TraceListenerCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Diagnostics.TraceListenerCollection.Count\n  commentId: P:System.Diagnostics.TraceListenerCollection.Count\n  id: Count\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Diagnostics.TraceListenerCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 61\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the number of listeners in the list.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of listeners in the list.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TraceListenerCollection.Count\n- uid: System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  commentId: P:System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Diagnostics.TraceListenerCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 26\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public TraceListener this[int i] { get; set; }\n    content.vb: Public Property Item(i As Integer) As TraceListener\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get from the list. </p>\\n\"\n    return:\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: TraceListenerCollection.Item[Int32]\n  nameWithType.vb: TraceListenerCollection.Item(Int32)\n- uid: System.Diagnostics.TraceListenerCollection.Item(System.String)\n  commentId: P:System.Diagnostics.TraceListenerCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Diagnostics.TraceListenerCollection.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 43\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the first <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the list with the specified name.</p>\\n\"\n  syntax:\n    content: public TraceListener this[string name] { get; }\n    content.vb: Public ReadOnly Property Item(name As String) As TraceListener\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get from the list. </p>\\n\"\n    return:\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>The first <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the list with the given <xref href=\\\"System.Diagnostics.TraceListener.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This item returns <strong>null</strong> if no <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given name can be found.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Diagnostics.TraceListenerCollection.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: TraceListenerCollection.Item[String]\n  nameWithType.vb: TraceListenerCollection.Item(String)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 310\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Always <strong>true</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: TraceListenerCollection.ICollection.IsSynchronized\n  nameWithType.vb: TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 301\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The current <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: TraceListenerCollection.ICollection.SyncRoot\n  nameWithType.vb: TraceListenerCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 241\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Always <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: TraceListenerCollection.IList.IsFixedSize\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.IsFixedSize\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly\n  commentId: P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 232\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only</p>\\n\"\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Always <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: TraceListenerCollection.IList.IsReadOnly\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.IsReadOnly\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.this[]\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 214\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <em>value</em> to get.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: TraceListenerCollection.IList.Item[Int32]\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.Item(Int32)\n- uid: System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  commentId: M:System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  id: Add(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 72\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the list.</p>\\n\"\n  syntax:\n    content: public int Add(TraceListener listener)\n    content.vb: Public Function Add(listener As TraceListener) As Integer\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the list. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position at which the new listener was inserted.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.Add(TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  commentId: M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  id: AddRange(System.Diagnostics.TraceListener[])\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: AddRange(TraceListener[])\n  fullName: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddRange\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 85\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Adds an array of <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to the list.</p>\\n\"\n  syntax:\n    content: public void AddRange(TraceListener[] value)\n    content.vb: Public Sub AddRange(value As TraceListener())\n    parameters:\n    - id: value\n      type: System.Diagnostics.TraceListener[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to add to the list. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener())\n  name.vb: AddRange(TraceListener())\n  nameWithType: TraceListenerCollection.AddRange(TraceListener[])\n  nameWithType.vb: TraceListenerCollection.AddRange(TraceListener())\n- uid: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  commentId: M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  id: AddRange(System.Diagnostics.TraceListenerCollection)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: AddRange(TraceListenerCollection)\n  fullName: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddRange\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 100\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Adds the contents of another <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the list.</p>\\n\"\n  syntax:\n    content: public void AddRange(TraceListenerCollection value)\n    content.vb: Public Sub AddRange(value As TraceListenerCollection)\n    parameters:\n    - id: value\n      type: System.Diagnostics.TraceListenerCollection\n      description: \"\\n<p>Another <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose contents are added to the list. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.AddRange(TraceListenerCollection)\n- uid: System.Diagnostics.TraceListenerCollection.Clear\n  commentId: M:System.Diagnostics.TraceListenerCollection.Clear\n  id: Clear\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Diagnostics.TraceListenerCollection.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 119\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Clears all the listeners from the list.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  implements:\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.Clear()\n- uid: System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  commentId: M:System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  id: Contains(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 128\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks whether the list contains the specified listener.</p>\\n\"\n  syntax:\n    content: public bool Contains(TraceListener listener)\n    content.vb: Public Function Contains(listener As TraceListener) As Boolean\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find in the list. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the listener is in the list; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.Contains(TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  commentId: M:System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  id: CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(TraceListener[], Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 137\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Copies a section of the current <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> list to the specified array at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(TraceListener[] listeners, int index)\n    content.vb: Public Sub CopyTo(listeners As TraceListener(), index As Integer)\n    parameters:\n    - id: listeners\n      type: System.Diagnostics.TraceListener[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy the elements into. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index number in the current list to copy from. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener(), System.Int32)\n  name.vb: CopyTo(TraceListener(), Int32)\n  nameWithType: TraceListenerCollection.CopyTo(TraceListener[], Int32)\n  nameWithType.vb: TraceListenerCollection.CopyTo(TraceListener(), Int32)\n- uid: System.Diagnostics.TraceListenerCollection.GetEnumerator\n  commentId: M:System.Diagnostics.TraceListenerCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Diagnostics.TraceListenerCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 147\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets an enumerator for this list.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator of type <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.GetEnumerator()\n- uid: System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  commentId: M:System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  id: IndexOf(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 164\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the index of the specified listener.</p>\\n\"\n  syntax:\n    content: public int IndexOf(TraceListener listener)\n    content.vb: Public Function IndexOf(listener As TraceListener) As Integer\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find in the list. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the listener, if it can be found in the list; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.IndexOf(TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)\n  commentId: M:System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)\n  id: Insert(System.Int32,System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Insert(System.Int32, System.Diagnostics.TraceListener)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 172\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Inserts the listener at the specified index.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, TraceListener listener)\n    content.vb: Public Sub Insert(index As Integer, listener As TraceListener)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in the list to insert the new <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert in the list. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>index</em> is not a valid index in the list. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>listener</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.Insert(Int32, TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  commentId: M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  id: Remove(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 186\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Removes from the collection the specified <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Remove(TraceListener listener)\n    content.vb: Public Sub Remove(listener As TraceListener)\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the list. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.Remove(TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  commentId: M:System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(String)\n  fullName: System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 195\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Removes from the collection the first <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name.</p>\\n\"\n  syntax:\n    content: public void Remove(string name)\n    content.vb: Public Sub Remove(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the list. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.Remove(String)\n- uid: System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  commentId: M:System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 205\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Removes from the collection the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the list. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>index</em> is not a valid index in the list. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListenerCollection.RemoveAt(Int32)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 319\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Copies a section of the current <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the specified array of <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. </p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional array of <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that is the destination of the elements copied from the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The array must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: TraceListenerCollection.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: TraceListenerCollection.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Add\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 250\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Adds a trace listener to the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to add to the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position into which the new trace listener was inserted.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is not a <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: TraceListenerCollection.IList.Add(Object)\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.Add(Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Contains\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 265\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific object.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is found in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: TraceListenerCollection.IList.Contains(Object)\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.Contains(Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IndexOf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 271\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines the index of a specific object in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>value</em> if found in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, -1.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: TraceListenerCollection.IList.IndexOf(Object)\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Insert\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 277\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Inserts a <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified position in the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to insert into the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is not a <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: TraceListenerCollection.IList.Insert(Int32, Object)\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.Insert(Int32, Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Remove\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListeners.cs\n    startLine: 292\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Removes an object from the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to remove from the <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: TraceListenerCollection.IList.Remove(Object)\n  nameWithType.vb: TraceListenerCollection.System.Collections.IList.Remove(Object)\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Diagnostics.TraceListener\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListener\n  fullName: System.Diagnostics.TraceListener\n  nameWithType: TraceListener\n  commentId: T:System.Diagnostics.TraceListener\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Diagnostics.TraceListener[]\n  name: TraceListener[]\n  fullName: System.Diagnostics.TraceListener[]\n  fullname.vb: System.Diagnostics.TraceListener()\n  name.vb: TraceListener()\n  spec.csharp:\n  - uid: System.Diagnostics.TraceListener\n    name: TraceListener\n    fullName: System.Diagnostics.TraceListener\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Diagnostics.TraceListener\n    name: TraceListener\n    fullName: System.Diagnostics.TraceListener\n  - name: ()\n    fullName: ()\n  nameWithType: TraceListener[]\n  nameWithType.vb: TraceListener()\n- uid: System.Diagnostics.TraceListenerCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  commentId: T:System.Diagnostics.TraceListenerCollection\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}