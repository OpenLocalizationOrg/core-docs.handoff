{"nodes":[{"pos":[1000,1011],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[2963,3010],"content":"CngProperty(String, Byte[], CngPropertyOptions)","needQuote":true,"nodes":[{"content":"CngProperty(String, Byte[], CngPropertyOptions)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The property name to initialize.&lt;/p&gt;\\n","pos":[4004,4047],"source":"\\n<p>The property name to initialize.</p>\\n"},{"content":"\\n&lt;p&gt;The property value to initialize.&lt;/p&gt;\\n","pos":[4111,4155],"source":"\\n<p>The property value to initialize.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify how the property is stored.&lt;/p&gt;\\n","pos":[4255,4354],"source":"\\n<p>A bitwise combination of the enumeration values that specify how the property is stored.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4473,4525],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[5157,5161],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[6495,6502],"content":"Options","needQuote":true,"nodes":[{"content":"Options","pos":[0,7]}]},{"pos":[7974,7988],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9880,9899],"content":"Equals(CngProperty)","needQuote":true,"nodes":[{"content":"Equals(CngProperty)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;other&lt;/em&gt; parameter represents the same property as the current object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11149,11302],"source":"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter represents the same property as the current object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11769,11782],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13160,13170],"content":"GetValue()","needQuote":true,"nodes":[{"content":"GetValue()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An array that represents the value stored in the property.&lt;/p&gt;\\n","pos":[13988,14057],"source":"\\n<p>An array that represents the value stored in the property.</p>\\n"},{"pos":[14637,14671],"content":"Equality(CngProperty, CngProperty)","needQuote":true,"nodes":[{"content":"Equality(CngProperty, CngProperty)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.&lt;/p&gt;\\n","pos":[15733,15836],"source":"\\n<p>An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[15927,16034],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects specify the same property; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16095,16210],"source":"\\n<p>\\n<strong>true</strong> if the two objects specify the same property; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16842,16878],"content":"Inequality(CngProperty, CngProperty)","needQuote":true,"nodes":[{"content":"Inequality(CngProperty, CngProperty)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.&lt;/p&gt;\\n","pos":[17952,18055],"source":"\\n<p>An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[18146,18253],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects do not specify the same property; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18314,18436],"source":"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same property; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18659,18687],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[18944,18967],"content":"IEquatable<CngProperty>","needQuote":true,"nodes":[{"content":"IEquatable&lt;CngProperty&gt;","pos":[0,23],"source":"IEquatable<CngProperty>"}]},{"pos":[19210,19220],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[19284,19285],"content":"<","needQuote":true,"nodes":[]},{"pos":[19362,19373],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[19511,19521],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[19586,19589]},{"pos":[19673,19684],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[19750,19751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20017,20027],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20128,20136],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20187,20188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20215,20216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20289,20297],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20348,20349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20376,20377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20580,20602],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20750,20756],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20823,20824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20874,20880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20941,20942]},{"pos":[20997,21003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21063,21064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21161,21167],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21234,21235],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21285,21291],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21352,21353]},{"pos":[21408,21414],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21474,21475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21720,21751],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21917,21932],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22008,22009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22059,22065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22126,22127]},{"pos":[22182,22188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22248,22249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22355,22370],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22446,22447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22497,22503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22564,22565]},{"pos":[22620,22626],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22686,22687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22913,22922],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23015,23022],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23090,23091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23118,23119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23188,23195],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23263,23264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23291,23292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23434,23447],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[23602,23612],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[23655,23656],"content":"<","needQuote":true,"nodes":[]},{"pos":[23683,23684],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23783,23793],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[23837,23840]},{"pos":[23874,23875],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23902,23903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24063,24069],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24203,24212],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[24366,24372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24517,24523],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24631,24637],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[24757,24761],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[24820,24822]},{"pos":[24885,24889],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24947,24949],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[25138,25156],"content":"CngPropertyOptions","needQuote":true,"nodes":[{"content":"CngPropertyOptions","pos":[0,18]}]},{"pos":[25415,25429],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[25554,25560],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25609,25610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25660,25666],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25726,25727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25813,25819],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25868,25869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25919,25925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25985,25986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26165,26172],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26493,26512],"content":"Equals(CngProperty)","needQuote":true,"nodes":[{"content":"Equals(CngProperty)","pos":[0,19]}]},{"pos":[26826,26832],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26945,26946],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27023,27034],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[27100,27101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27179,27185],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27301,27302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27379,27390],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[27456,27457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27839,27850],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[28054,28063],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[28221,28227],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28280,28281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28308,28309],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28336,28337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28415,28421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28477,28478],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28505,28506],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28533,28534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28774,28787],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28894,28905],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28959,28960],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28987,28988],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29064,29075],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29129,29130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29157,29158],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29324,29329],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29469,29490],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.CngProperty\n  commentId: T:System.Security.Cryptography.CngProperty\n  id: CngProperty\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngProperty.Equals(System.Object)\n  - System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)\n  - System.Security.Cryptography.CngProperty.GetHashCode\n  - System.Security.Cryptography.CngProperty.GetValue\n  - System.Security.Cryptography.CngProperty.Name\n  - System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  - System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  - System.Security.Cryptography.CngProperty.Options\n  langs:\n  - csharp\n  - vb\n  name: CngProperty\n  fullName: System.Security.Cryptography.CngProperty\n  type: Struct\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CngProperty\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 197\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encapsulates a property of a Cryptography Next Generation (CNG) key or provider.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct CngProperty : IEquatable<CngProperty>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure CngProperty\n          Implements IEquatable(Of CngProperty)\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngProperty}\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: CngProperty\n- uid: System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)\n  commentId: M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)\n  id: '#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)'\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: CngProperty(String, Byte[], CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngProperty.CngProperty(System.String, System.Byte[], System.Security.Cryptography.CngPropertyOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 200\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CngProperty(string name, byte[] value, CngPropertyOptions options)\n    content.vb: Public Sub New(name As String, value As Byte(), options As CngPropertyOptions)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The property name to initialize.</p>\\n\"\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>The property value to initialize.</p>\\n\"\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify how the property is stored.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.CngProperty.CngProperty(System.String, System.Byte(), System.Security.Cryptography.CngPropertyOptions)\n  name.vb: CngProperty(String, Byte(), CngPropertyOptions)\n  nameWithType: CngProperty.CngProperty(String, Byte[], CngPropertyOptions)\n  nameWithType.vb: CngProperty.CngProperty(String, Byte(), CngPropertyOptions)\n- uid: System.Security.Cryptography.CngProperty.Name\n  commentId: P:System.Security.Cryptography.CngProperty.Name\n  id: Name\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Security.Cryptography.CngProperty.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 201\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the property name that the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The property name that is set in the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngProperty.Name\n- uid: System.Security.Cryptography.CngProperty.Options\n  commentId: P:System.Security.Cryptography.CngProperty.Options\n  id: Options\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: Options\n  fullName: System.Security.Cryptography.CngProperty.Options\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Options\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 202\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the property options that the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public CngPropertyOptions Options { get; }\n    content.vb: Public ReadOnly Property Options As CngPropertyOptions\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: \"\\n<p>An object that specifies the options that are set in the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngProperty.Options\n- uid: System.Security.Cryptography.CngProperty.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.CngProperty.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.CngProperty.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 203\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified object to the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the same property as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngProperty.Equals(Object)\n- uid: System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)\n  commentId: M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)\n  id: Equals(System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: Equals(CngProperty)\n  fullName: System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 204\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(CngProperty other)\n    content.vb: Public Function Equals(other As CngProperty) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter represents the same property as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngProperty}.Equals(System.Security.Cryptography.CngProperty)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngProperty.Equals(CngProperty)\n- uid: System.Security.Cryptography.CngProperty.GetHashCode\n  commentId: M:System.Security.Cryptography.CngProperty.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.CngProperty.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 205\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a hash value for the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash value of the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngProperty.GetHashCode()\n- uid: System.Security.Cryptography.CngProperty.GetValue\n  commentId: M:System.Security.Cryptography.CngProperty.GetValue\n  id: GetValue\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: GetValue()\n  fullName: System.Security.Cryptography.CngProperty.GetValue()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValue\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 206\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the property value that the current <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public byte[] GetValue()\n    content.vb: Public Function GetValue As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array that represents the value stored in the property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngProperty.GetValue()\n- uid: System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  commentId: M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  id: op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: Equality(CngProperty, CngProperty)\n  fullName: System.Security.Cryptography.CngProperty.Equality(System.Security.Cryptography.CngProperty, System.Security.Cryptography.CngProperty)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 207\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects specify the same property name, value, and options.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CngProperty left, CngProperty right)\n    content.vb: Public Shared Operator =(left As CngProperty, right As CngProperty) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects specify the same property; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngProperty.Equality(CngProperty, CngProperty)\n- uid: System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  commentId: M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  id: op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngProperty\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CngProperty, CngProperty)\n  fullName: System.Security.Cryptography.CngProperty.Inequality(System.Security.Cryptography.CngProperty, System.Security.Cryptography.CngProperty)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 208\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngProperty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects do not specify the same property name, value, and options.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CngProperty left, CngProperty right)\n    content.vb: Public Shared Operator <>(left As CngProperty, right As CngProperty) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same property; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngProperty.Inequality(CngProperty, CngProperty)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.IEquatable{System.Security.Cryptography.CngProperty}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<CngProperty>\n  fullName: System.IEquatable<System.Security.Cryptography.CngProperty>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProperty)\n  name.vb: IEquatable(Of CngProperty)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.CngProperty\n    name: CngProperty\n    fullName: System.Security.Cryptography.CngProperty\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.CngProperty\n    name: CngProperty\n    fullName: System.Security.Cryptography.CngProperty\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.CngProperty}\n  nameWithType: IEquatable<CngProperty>\n  nameWithType.vb: IEquatable(Of CngProperty)\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.CngPropertyOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngPropertyOptions\n  fullName: System.Security.Cryptography.CngPropertyOptions\n  commentId: T:System.Security.Cryptography.CngPropertyOptions\n  nameWithType: CngPropertyOptions\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Security.Cryptography.CngProperty}.Equals(System.Security.Cryptography.CngProperty)\n  parent: System.IEquatable{System.Security.Cryptography.CngProperty}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(CngProperty)\n  fullName: System.IEquatable<System.Security.Cryptography.CngProperty>.Equals(System.Security.Cryptography.CngProperty)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProperty).Equals(System.Security.Cryptography.CngProperty)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.CngProperty>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngProperty\n    name: CngProperty\n    fullName: System.Security.Cryptography.CngProperty\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.CngProperty).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngProperty\n    name: CngProperty\n    fullName: System.Security.Cryptography.CngProperty\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.CngProperty}.Equals(System.Security.Cryptography.CngProperty)\n  nameWithType: IEquatable<CngProperty>.Equals(CngProperty)\n  nameWithType.vb: IEquatable(Of CngProperty).Equals(CngProperty)\n- uid: System.Security.Cryptography.CngProperty\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProperty\n  fullName: System.Security.Cryptography.CngProperty\n  commentId: T:System.Security.Cryptography.CngProperty\n  nameWithType: CngProperty\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}