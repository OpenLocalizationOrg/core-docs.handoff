{"nodes":[{"pos":[1028,1060],"content":"ObjectFlowControl.ForLoopControl","needQuote":true,"nodes":[{"content":"ObjectFlowControl.ForLoopControl","pos":[0,32]}]},{"pos":[2833,2903],"content":"ForLoopInitObj(Object, Object, Object, Object, ref Object, ref Object)","needQuote":true,"nodes":[{"content":"ForLoopInitObj(Object, Object, Object, Object, ref Object, ref Object)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The loop counter variable.&lt;/p&gt;\\n","pos":[3998,4035],"source":"\\n<p>The loop counter variable.</p>\\n"},{"content":"\\n&lt;p&gt;The initial value of the loop counter.&lt;/p&gt;\\n","pos":[4099,4148],"source":"\\n<p>The initial value of the loop counter.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;strong&gt;To&lt;/strong&gt; option.&lt;/p&gt;\\n","pos":[4212,4267],"source":"\\n<p>The value of the <strong>To</strong> option.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;strong&gt;Step&lt;/strong&gt; option.&lt;/p&gt;\\n","pos":[4335,4392],"source":"\\n<p>The value of the <strong>Step</strong> option.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains verified values for loop values.&lt;/p&gt;\\n","pos":[4464,4531],"source":"\\n<p>An object that contains verified values for loop values.</p>\\n"},{"content":"\\n&lt;p&gt;The counter value for the next loop iteration.&lt;/p&gt;\\n","pos":[4603,4660],"source":"\\n<p>The counter value for the next loop iteration.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;False&lt;/strong&gt; if the loop has terminated; otherwise, &lt;strong&gt;True&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4721,4818],"source":"\\n<p>\\n<strong>False</strong> if the loop has terminated; otherwise, <strong>True</strong>.</p>\\n"},{"pos":[5912,5954],"content":"ForNextCheckDec(Decimal, Decimal, Decimal)","needQuote":true,"nodes":[{"content":"ForNextCheckDec(Decimal, Decimal, Decimal)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;Required.","pos":[6912,6926],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Decimal&lt;/strong&gt; value that represents the initial value passed for the loop counter variable.&lt;/p&gt;\\n","pos":[6927,7037],"source":" A <strong>Decimal</strong> value that represents the initial value passed for the loop counter variable.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[7102,7116],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Decimal&lt;/strong&gt; value that represents the value passed by using the &lt;strong&gt;To&lt;/strong&gt; keyword.&lt;/p&gt;\\n","pos":[7117,7230],"source":" A <strong>Decimal</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[7299,7313],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Decimal&lt;/strong&gt; value that represents the value passed by using the &lt;strong&gt;Step&lt;/strong&gt; keyword.&lt;/p&gt;\\n","pos":[7314,7429],"source":" A <strong>Decimal</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;StepValue&lt;/em&gt; is greater than zero and &lt;em&gt;count&lt;/em&gt; is less than or equal to &lt;em&gt;limit&lt;/em&gt; or &lt;em&gt;StepValue&lt;/em&gt; is less than or equal to zero and &lt;em&gt;count&lt;/em&gt; is greater than or equal to &lt;em&gt;limit&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7490,7776],"source":"\\n<p>\\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em> or <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[8419,8462],"content":"ForNextCheckObj(Object, Object, ref Object)","needQuote":true,"nodes":[{"content":"ForNextCheckObj(Object, Object, ref Object)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The loop counter variable.&lt;/p&gt;\\n","pos":[9388,9425],"source":"\\n<p>The loop counter variable.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains verified values for loop values.&lt;/p&gt;\\n","pos":[9491,9558],"source":"\\n<p>An object that contains verified values for loop values.</p>\\n"},{"content":"\\n&lt;p&gt;The counter value for the next loop iteration.&lt;/p&gt;\\n","pos":[9630,9687],"source":"\\n<p>The counter value for the next loop iteration.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;False&lt;/strong&gt; if the loop has terminated; otherwise, &lt;strong&gt;True&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9748,9845],"source":"\\n<p>\\n<strong>False</strong> if the loop has terminated; otherwise, <strong>True</strong>.</p>\\n"},{"pos":[10792,10830],"content":"ForNextCheckR4(Single, Single, Single)","needQuote":true,"nodes":[{"content":"ForNextCheckR4(Single, Single, Single)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;Required.","pos":[11771,11785],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Single&lt;/strong&gt; value that represents the initial value passed for the loop counter variable.&lt;/p&gt;\\n","pos":[11786,11895],"source":" A <strong>Single</strong> value that represents the initial value passed for the loop counter variable.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[11959,11973],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Single&lt;/strong&gt; value that represents the value passed by using the &lt;strong&gt;To&lt;/strong&gt; keyword.&lt;/p&gt;\\n","pos":[11974,12086],"source":" A <strong>Single</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[12154,12168],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Single&lt;/strong&gt; value that represents the value passed by using the &lt;strong&gt;Step&lt;/strong&gt; keyword.&lt;/p&gt;\\n","pos":[12169,12283],"source":" A <strong>Single</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;StepValue&lt;/em&gt; is greater than zero and &lt;em&gt;count&lt;/em&gt; is less than or equal to &lt;em&gt;limit&lt;/em&gt;, or if &lt;em&gt;StepValue&lt;/em&gt; is less than or equal to zero and &lt;em&gt;count&lt;/em&gt; is greater than or equal to &lt;em&gt;limit&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12344,12634],"source":"\\n<p>\\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em>, or if <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[13267,13305],"content":"ForNextCheckR8(Double, Double, Double)","needQuote":true,"nodes":[{"content":"ForNextCheckR8(Double, Double, Double)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;Required.","pos":[14249,14263],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Double&lt;/strong&gt; value that represents the initial value passed for the loop counter variable.&lt;/p&gt;\\n","pos":[14264,14373],"source":" A <strong>Double</strong> value that represents the initial value passed for the loop counter variable.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[14437,14451],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Double&lt;/strong&gt; value that represents the value passed by using the &lt;strong&gt;To&lt;/strong&gt; keyword.&lt;/p&gt;\\n","pos":[14452,14564],"source":" A <strong>Double</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[14632,14646],"source":"\\n<p>Required."},{"content":"A &lt;strong&gt;Double&lt;/strong&gt; value that represents the value passed by using the &lt;strong&gt;Step&lt;/strong&gt; keyword.&lt;/p&gt;\\n","pos":[14647,14761],"source":" A <strong>Double</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;StepValue&lt;/em&gt; is greater than zero and &lt;em&gt;count&lt;/em&gt; is less than or equal to &lt;em&gt;limit&lt;/em&gt;, or if &lt;em&gt;StepValue&lt;/em&gt; is less than or equal to zero and &lt;em&gt;count&lt;/em&gt; is greater than or equal to &lt;em&gt;limit&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14822,15112],"source":"\\n<p>\\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em>, or if <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[15368,15406],"content":"Microsoft.VisualBasic.CompilerServices","needQuote":true,"nodes":[{"content":"Microsoft.VisualBasic.CompilerServices","pos":[0,38]}]},{"pos":[15633,15639],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15799,15809],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15904,15912],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15981,15982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16009,16010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16080,16088],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16157,16158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16185,16186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16369,16383],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16502,16508],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16575,16576],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16626,16632],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16692,16693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16776,16782],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16849,16850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16900,16906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16966,16967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17181,17203],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17351,17357],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17424,17425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17475,17481],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17542,17543]},{"pos":[17598,17604],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17664,17665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17762,17768],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17835,17836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17886,17892],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17953,17954]},{"pos":[18009,18015],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18075,18076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18321,18352],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18518,18533],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18609,18610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18660,18666],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18727,18728]},{"pos":[18783,18789],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18849,18850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18956,18971],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19047,19048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19098,19104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19165,19166]},{"pos":[19221,19227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19287,19288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19518,19531],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19632,19643],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19715,19716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19743,19744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19817,19828],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19900,19901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19928,19929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20104,20113],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20206,20213],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20281,20282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20309,20310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20379,20386],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20454,20455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20482,20483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20658,20675],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20784,20799],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20875,20876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20903,20904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20981,20996],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21072,21073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21100,21101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21246,21252],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21384,21391],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21540,21547],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[21695,21701],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[21846,21852],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]}],"content":"items:\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  commentId: T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  id: ObjectFlowControl.ForLoopControl\n  parent: Microsoft.VisualBasic.CompilerServices\n  children:\n  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)\n  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)\n  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)\n  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)\n  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)\n  langs:\n  - csharp\n  - vb\n  name: ObjectFlowControl.ForLoopControl\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  type: Class\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForLoopControl\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 139\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Provides services to the Visual Basic compiler for compiling <strong>For...Next</strong> loops.</p>\\n\"\n  syntax:\n    content: public sealed class ForLoopControl\n    content.vb: Public NotInheritable Class ForLoopControl\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ObjectFlowControl.ForLoopControl\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)\n  id: ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  langs:\n  - csharp\n  - vb\n  name: ForLoopInitObj(Object, Object, Object, Object, ref Object, ref Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object, System.Object, System.Object, System.Object, ref System.Object, ref System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForLoopInitObj\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 143\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Initializes a <strong>For...Next</strong> loop.</p>\\n\"\n  syntax:\n    content: public static bool ForLoopInitObj(object Counter, object Start, object Limit, object StepValue, ref object LoopForResult, ref object CounterResult)\n    content.vb: Public Shared Function ForLoopInitObj(Counter As Object, Start As Object, Limit As Object, StepValue As Object, ByRef LoopForResult As Object, ByRef CounterResult As Object) As Boolean\n    parameters:\n    - id: Counter\n      type: System.Object\n      description: \"\\n<p>The loop counter variable.</p>\\n\"\n    - id: Start\n      type: System.Object\n      description: \"\\n<p>The initial value of the loop counter.</p>\\n\"\n    - id: Limit\n      type: System.Object\n      description: \"\\n<p>The value of the <strong>To</strong> option.</p>\\n\"\n    - id: StepValue\n      type: System.Object\n      description: \"\\n<p>The value of the <strong>Step</strong> option.</p>\\n\"\n    - id: LoopForResult\n      type: System.Object\n      description: \"\\n<p>An object that contains verified values for loop values.</p>\\n\"\n    - id: CounterResult\n      type: System.Object\n      description: \"\\n<p>The counter value for the next loop iteration.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>False</strong> if the loop has terminated; otherwise, <strong>True</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object, System.Object, System.Object, System.Object, ByRef System.Object, ByRef System.Object)\n  name.vb: ForLoopInitObj(Object, Object, Object, Object, ByRef Object, ByRef Object)\n  nameWithType: ObjectFlowControl.ForLoopControl.ForLoopInitObj(Object, Object, Object, Object, ref Object, ref Object)\n  nameWithType.vb: ObjectFlowControl.ForLoopControl.ForLoopInitObj(Object, Object, Object, Object, ByRef Object, ByRef Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)\n  id: ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  langs:\n  - csharp\n  - vb\n  name: ForNextCheckDec(Decimal, Decimal, Decimal)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal, System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForNextCheckDec\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 144\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Checks for valid values for the loop counter, <strong>Step</strong>, and <strong>To</strong> values.</p>\\n\"\n  syntax:\n    content: public static bool ForNextCheckDec(decimal count, decimal limit, decimal StepValue)\n    content.vb: Public Shared Function ForNextCheckDec(count As Decimal, limit As Decimal, StepValue As Decimal) As Boolean\n    parameters:\n    - id: count\n      type: System.Decimal\n      description: \"\\n<p>Required. A <strong>Decimal</strong> value that represents the initial value passed for the loop counter variable.</p>\\n\"\n    - id: limit\n      type: System.Decimal\n      description: \"\\n<p>Required. A <strong>Decimal</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\\n\"\n    - id: StepValue\n      type: System.Decimal\n      description: \"\\n<p>Required. A <strong>Decimal</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em> or <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ObjectFlowControl.ForLoopControl.ForNextCheckDec(Decimal, Decimal, Decimal)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)\n  id: ForNextCheckObj(System.Object,System.Object,System.Object@)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  langs:\n  - csharp\n  - vb\n  name: ForNextCheckObj(Object, Object, ref Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object, System.Object, ref System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForNextCheckObj\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 145\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Increments a <strong>For...Next</strong> loop.</p>\\n\"\n  syntax:\n    content: public static bool ForNextCheckObj(object Counter, object LoopObj, ref object CounterResult)\n    content.vb: Public Shared Function ForNextCheckObj(Counter As Object, LoopObj As Object, ByRef CounterResult As Object) As Boolean\n    parameters:\n    - id: Counter\n      type: System.Object\n      description: \"\\n<p>The loop counter variable.</p>\\n\"\n    - id: LoopObj\n      type: System.Object\n      description: \"\\n<p>An object that contains verified values for loop values.</p>\\n\"\n    - id: CounterResult\n      type: System.Object\n      description: \"\\n<p>The counter value for the next loop iteration.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>False</strong> if the loop has terminated; otherwise, <strong>True</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object, System.Object, ByRef System.Object)\n  name.vb: ForNextCheckObj(Object, Object, ByRef Object)\n  nameWithType: ObjectFlowControl.ForLoopControl.ForNextCheckObj(Object, Object, ref Object)\n  nameWithType.vb: ObjectFlowControl.ForLoopControl.ForNextCheckObj(Object, Object, ByRef Object)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)\n  id: ForNextCheckR4(System.Single,System.Single,System.Single)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  langs:\n  - csharp\n  - vb\n  name: ForNextCheckR4(Single, Single, Single)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single, System.Single, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForNextCheckR4\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 146\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Checks for valid values for the loop counter, <strong>Step</strong>, and <strong>To</strong> values.</p>\\n\"\n  syntax:\n    content: public static bool ForNextCheckR4(float count, float limit, float StepValue)\n    content.vb: Public Shared Function ForNextCheckR4(count As Single, limit As Single, StepValue As Single) As Boolean\n    parameters:\n    - id: count\n      type: System.Single\n      description: \"\\n<p>Required. A <strong>Single</strong> value that represents the initial value passed for the loop counter variable.</p>\\n\"\n    - id: limit\n      type: System.Single\n      description: \"\\n<p>Required. A <strong>Single</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\\n\"\n    - id: StepValue\n      type: System.Single\n      description: \"\\n<p>Required. A <strong>Single</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em>, or if <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ObjectFlowControl.ForLoopControl.ForNextCheckR4(Single, Single, Single)\n- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)\n  id: ForNextCheckR8(System.Double,System.Double,System.Double)\n  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl\n  langs:\n  - csharp\n  - vb\n  name: ForNextCheckR8(Double, Double, Double)\n  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double, System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForNextCheckR8\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 147\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Checks for valid values for the loop counter, <strong>Step</strong>, and <strong>To</strong> values.</p>\\n\"\n  syntax:\n    content: public static bool ForNextCheckR8(double count, double limit, double StepValue)\n    content.vb: Public Shared Function ForNextCheckR8(count As Double, limit As Double, StepValue As Double) As Boolean\n    parameters:\n    - id: count\n      type: System.Double\n      description: \"\\n<p>Required. A <strong>Double</strong> value that represents the initial value passed for the loop counter variable.</p>\\n\"\n    - id: limit\n      type: System.Double\n      description: \"\\n<p>Required. A <strong>Double</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\\n\"\n    - id: StepValue\n      type: System.Double\n      description: \"\\n<p>Required. A <strong>Double</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em>, or if <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ObjectFlowControl.ForLoopControl.ForNextCheckR8(Double, Double, Double)\nreferences:\n- uid: Microsoft.VisualBasic.CompilerServices\n  isExternal: false\n  name: Microsoft.VisualBasic.CompilerServices\n  fullName: Microsoft.VisualBasic.CompilerServices\n  commentId: N:Microsoft.VisualBasic.CompilerServices\n  nameWithType: Microsoft.VisualBasic.CompilerServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n"}