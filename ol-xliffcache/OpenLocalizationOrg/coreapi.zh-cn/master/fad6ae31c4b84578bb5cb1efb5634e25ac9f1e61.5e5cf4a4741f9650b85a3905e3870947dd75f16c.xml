{"nodes":[{"pos":[1454,1470],"content":"BackgroundWorker","needQuote":true,"nodes":[{"content":"BackgroundWorker","pos":[0,16]}]},{"pos":[2870,2888],"content":"BackgroundWorker()","needQuote":true,"nodes":[{"content":"BackgroundWorker()","pos":[0,18]}]},{"pos":[3996,4015],"content":"CancellationPending","needQuote":true,"nodes":[{"content":"CancellationPending","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the application has requested cancellation of a background operation; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[4871,5007],"source":"\\n<p>\\n<strong>true</strong> if the application has requested cancellation of a background operation; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5008,5052],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[5397,5403],"content":"IsBusy","needQuote":true,"nodes":[{"content":"IsBusy","pos":[0,6]}]},{"pos":[7219,7240],"content":"WorkerReportsProgress","needQuote":true,"nodes":[{"content":"WorkerReportsProgress","pos":[0,21]}]},{"pos":[8987,9013],"content":"WorkerSupportsCancellation","needQuote":true,"nodes":[{"content":"WorkerSupportsCancellation","pos":[0,26]}]},{"pos":[10694,10700],"content":"DoWork","needQuote":true,"nodes":[{"content":"DoWork","pos":[0,6]}]},{"pos":[11869,11884],"content":"ProgressChanged","needQuote":true,"nodes":[{"content":"ProgressChanged","pos":[0,15]}]},{"pos":[13148,13166],"content":"RunWorkerCompleted","needQuote":true,"nodes":[{"content":"RunWorkerCompleted","pos":[0,18]}]},{"pos":[14382,14395],"content":"CancelAsync()","needQuote":true,"nodes":[{"content":"CancelAsync()","pos":[0,13]}]},{"pos":[15796,15821],"content":"OnDoWork(DoWorkEventArgs)","needQuote":true,"nodes":[{"content":"OnDoWork(DoWorkEventArgs)","pos":[0,25]}]},{"pos":[17407,17450],"content":"OnProgressChanged(ProgressChangedEventArgs)","needQuote":true,"nodes":[{"content":"OnProgressChanged(ProgressChangedEventArgs)","pos":[0,43]}]},{"pos":[19301,19350],"content":"OnRunWorkerCompleted(RunWorkerCompletedEventArgs)","needQuote":true,"nodes":[{"content":"OnRunWorkerCompleted(RunWorkerCompletedEventArgs)","pos":[0,49]}]},{"pos":[21111,21132],"content":"ReportProgress(Int32)","needQuote":true,"nodes":[{"content":"ReportProgress(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The percentage, from 0 to 100, of the background operation that is complete.","pos":[22036,22117],"source":"\\n<p>The percentage, from 0 to 100, of the background operation that is complete."},{"content":"&lt;/p&gt;\\n","pos":[22118,22124],"source":" </p>\\n"},{"pos":[22864,22893],"content":"ReportProgress(Int32, Object)","needQuote":true,"nodes":[{"content":"ReportProgress(Int32, Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The percentage, from 0 to 100, of the background operation that is complete.&lt;/p&gt;\\n","pos":[23851,23938],"source":"\\n<p>The percentage, from 0 to 100, of the background operation that is complete.</p>\\n"},{"pos":[24837,24853],"content":"RunWorkerAsync()","needQuote":true,"nodes":[{"content":"RunWorkerAsync()","pos":[0,16]}]},{"pos":[26311,26333],"content":"RunWorkerAsync(Object)","needQuote":true,"nodes":[{"content":"RunWorkerAsync(Object)","pos":[0,22]}]},{"pos":[28065,28074],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[29055,29071],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[29994,30015],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[30191,30197],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30347,30358],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[30533,30543],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30638,30646],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30715,30716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30743,30744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30814,30822],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30891,30892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30919,30920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31103,31117],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31236,31242],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31309,31310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31360,31366],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31426,31427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31510,31516],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31583,31584],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31634,31640],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31700,31701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31915,31937],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32085,32091],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32158,32159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32209,32215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32276,32277]},{"pos":[32332,32338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32398,32399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32496,32502],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32569,32570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32620,32626],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32687,32688]},{"pos":[32743,32749],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32809,32810],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33055,33086],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33252,33267],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33343,33344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33394,33400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33461,33462]},{"pos":[33517,33523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33583,33584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33690,33705],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33781,33782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33832,33838],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33899,33900]},{"pos":[33955,33961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34021,34022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34252,34265],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34366,34377],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34449,34450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34477,34478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34551,34562],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34634,34635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34662,34663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34838,34847],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[34940,34947],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35015,35016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35043,35044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35113,35120],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35188,35189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35216,35217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35392,35409],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[35518,35533],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35609,35610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35637,35638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35715,35730],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35806,35807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35834,35835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35980,35986],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36118,36125],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36315,36333],"content":"DoWorkEventHandler","needQuote":true,"nodes":[{"content":"DoWorkEventHandler","pos":[0,18]}]},{"pos":[36595,36622],"content":"ProgressChangedEventHandler","needQuote":true,"nodes":[{"content":"ProgressChangedEventHandler","pos":[0,27]}]},{"pos":[36914,36944],"content":"RunWorkerCompletedEventHandler","needQuote":true,"nodes":[{"content":"RunWorkerCompletedEventHandler","pos":[0,30]}]},{"pos":[37230,37245],"content":"DoWorkEventArgs","needQuote":true,"nodes":[{"content":"DoWorkEventArgs","pos":[0,15]}]},{"pos":[37495,37519],"content":"ProgressChangedEventArgs","needQuote":true,"nodes":[{"content":"ProgressChangedEventArgs","pos":[0,24]}]},{"pos":[37799,37826],"content":"RunWorkerCompletedEventArgs","needQuote":true,"nodes":[{"content":"RunWorkerCompletedEventArgs","pos":[0,27]}]},{"pos":[38063,38068],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38235,38244],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[38347,38354],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[38406,38407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38434,38435],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38509,38516],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[38568,38569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38596,38597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38779,38804],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.ComponentModel.BackgroundWorker\n  commentId: T:System.ComponentModel.BackgroundWorker\n  id: BackgroundWorker\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.BackgroundWorker.#ctor\n  - System.ComponentModel.BackgroundWorker.CancelAsync\n  - System.ComponentModel.BackgroundWorker.CancellationPending\n  - System.ComponentModel.BackgroundWorker.Dispose\n  - System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  - System.ComponentModel.BackgroundWorker.DoWork\n  - System.ComponentModel.BackgroundWorker.IsBusy\n  - System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  - System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  - System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  - System.ComponentModel.BackgroundWorker.ProgressChanged\n  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  - System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  - System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  - System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  - System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  - System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  langs:\n  - csharp\n  - vb\n  name: BackgroundWorker\n  fullName: System.ComponentModel.BackgroundWorker\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BackgroundWorker\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 10\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Executes an operation on a separate thread.</p>\\n\"\n  syntax:\n    content: 'public class BackgroundWorker : IDisposable'\n    content.vb: >-\n      Public Class BackgroundWorker\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: BackgroundWorker\n- uid: System.ComponentModel.BackgroundWorker.#ctor\n  commentId: M:System.ComponentModel.BackgroundWorker.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: BackgroundWorker()\n  fullName: System.ComponentModel.BackgroundWorker.BackgroundWorker()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 21\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public BackgroundWorker()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.BackgroundWorker()\n- uid: System.ComponentModel.BackgroundWorker.CancellationPending\n  commentId: P:System.ComponentModel.BackgroundWorker.CancellationPending\n  id: CancellationPending\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: CancellationPending\n  fullName: System.ComponentModel.BackgroundWorker.CancellationPending\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CancellationPending\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 39\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the application has requested cancellation of a background operation.</p>\\n\"\n  syntax:\n    content: public bool CancellationPending { get; }\n    content.vb: Public ReadOnly Property CancellationPending As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the application has requested cancellation of a background operation; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BackgroundWorker.CancellationPending\n- uid: System.ComponentModel.BackgroundWorker.IsBusy\n  commentId: P:System.ComponentModel.BackgroundWorker.IsBusy\n  id: IsBusy\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: IsBusy\n  fullName: System.ComponentModel.BackgroundWorker.IsBusy\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsBusy\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 59\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is running an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public bool IsBusy { get; }\n    content.vb: Public ReadOnly Property IsBusy As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>, if the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is running an asynchronous operation; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n    commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  - type: System.EventArgs\n    commentId: T:System.EventArgs\n  - type: System.ComponentModel.BackgroundWorker.RunWorkerAsync\n    commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BackgroundWorker.IsBusy\n- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  commentId: P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  id: WorkerReportsProgress\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: WorkerReportsProgress\n  fullName: System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WorkerReportsProgress\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 155\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets a value indicating whether the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can report progress updates.</p>\\n\"\n  syntax:\n    content: public bool WorkerReportsProgress { get; set; }\n    content.vb: Public Property WorkerReportsProgress As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> supports progress updates; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n    commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.WorkerReportsProgress\n- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  commentId: P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  id: WorkerSupportsCancellation\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: WorkerSupportsCancellation\n  fullName: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WorkerSupportsCancellation\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 168\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets a value indicating whether the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> supports asynchronous cancellation.</p>\\n\"\n  syntax:\n    content: public bool WorkerSupportsCancellation { get; set; }\n    content.vb: Public Property WorkerSupportsCancellation As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.ComponentModel.BackgroundWorker\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> supports cancellation; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.CancelAsync\n    commentId: M:System.ComponentModel.BackgroundWorker.CancelAsync\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.WorkerSupportsCancellation\n- uid: System.ComponentModel.BackgroundWorker.DoWork\n  commentId: E:System.ComponentModel.BackgroundWorker.DoWork\n  id: DoWork\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: DoWork\n  fullName: System.ComponentModel.BackgroundWorker.DoWork\n  type: Event\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DoWork\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 57\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Occurs when <xref href=\\\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is called.</p>\\n\"\n  syntax:\n    content: public event DoWorkEventHandler DoWork\n    content.vb: Public Event DoWork As DoWorkEventHandler\n    return:\n      type: System.ComponentModel.DoWorkEventHandler\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.DoWork\n- uid: System.ComponentModel.BackgroundWorker.ProgressChanged\n  commentId: E:System.ComponentModel.BackgroundWorker.ProgressChanged\n  id: ProgressChanged\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: ProgressChanged\n  fullName: System.ComponentModel.BackgroundWorker.ProgressChanged\n  type: Event\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProgressChanged\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 94\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Occurs when <xref href=\\\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is called.</p>\\n\"\n  syntax:\n    content: public event ProgressChangedEventHandler ProgressChanged\n    content.vb: Public Event ProgressChanged As ProgressChangedEventHandler\n    return:\n      type: System.ComponentModel.ProgressChangedEventHandler\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.ProgressChanged\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  id: RunWorkerCompleted\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: RunWorkerCompleted\n  fullName: System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  type: Event\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RunWorkerCompleted\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 153\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Occurs when the background operation has completed, has been canceled, or has raised an exception.</p>\\n\"\n  syntax:\n    content: public event RunWorkerCompletedEventHandler RunWorkerCompleted\n    content.vb: Public Event RunWorkerCompleted As RunWorkerCompletedEventHandler\n    return:\n      type: System.ComponentModel.RunWorkerCompletedEventHandler\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.RunWorkerCompleted\n- uid: System.ComponentModel.BackgroundWorker.CancelAsync\n  commentId: M:System.ComponentModel.BackgroundWorker.CancelAsync\n  id: CancelAsync\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: CancelAsync()\n  fullName: System.ComponentModel.BackgroundWorker.CancelAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CancelAsync\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 47\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Requests cancellation of a pending background operation.</p>\\n\"\n  syntax:\n    content: public void CancelAsync()\n    content.vb: Public Sub CancelAsync\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<xref href=\\\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.CancelAsync()\n- uid: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  commentId: M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  id: OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: OnDoWork(DoWorkEventArgs)\n  fullName: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnDoWork\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 67\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Raises the <xref href=\\\"System.ComponentModel.BackgroundWorker.DoWork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event. </p>\\n\"\n  syntax:\n    content: protected virtual void OnDoWork(DoWorkEventArgs e)\n    content.vb: Protected Overridable Sub OnDoWork(e As DoWorkEventArgs)\n    parameters:\n    - id: e\n      type: System.ComponentModel.DoWorkEventArgs\n      description: \"\\n<p>An <xref href=\\\"System.EventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the event data.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BackgroundWorker.OnDoWork(DoWorkEventArgs)\n- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  commentId: M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  id: OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: OnProgressChanged(ProgressChangedEventArgs)\n  fullName: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnProgressChanged\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 85\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Raises the <xref href=\\\"System.ComponentModel.BackgroundWorker.ProgressChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: protected virtual void OnProgressChanged(ProgressChangedEventArgs e)\n    content.vb: Protected Overridable Sub OnProgressChanged(e As ProgressChangedEventArgs)\n    parameters:\n    - id: e\n      type: System.ComponentModel.ProgressChangedEventArgs\n      description: \"\\n<p>An <xref href=\\\"System.EventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the event data. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.ProgressChanged\n    commentId: E:System.ComponentModel.BackgroundWorker.ProgressChanged\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)\n- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  commentId: M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  id: OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n  fullName: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnRunWorkerCompleted\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 76\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Raises the <xref href=\\\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: protected virtual void OnRunWorkerCompleted(RunWorkerCompletedEventArgs e)\n    content.vb: Protected Overridable Sub OnRunWorkerCompleted(e As RunWorkerCompletedEventArgs)\n    parameters:\n    - id: e\n      type: System.ComponentModel.RunWorkerCompletedEventArgs\n      description: \"\\n<p>An <xref href=\\\"System.EventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the event data. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n    commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  id: ReportProgress(System.Int32)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: ReportProgress(Int32)\n  fullName: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReportProgress\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 103\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Raises the <xref href=\\\"System.ComponentModel.BackgroundWorker.ProgressChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: public void ReportProgress(int percentProgress)\n    content.vb: Public Sub ReportProgress(percentProgress As Integer)\n    parameters:\n    - id: percentProgress\n      type: System.Int32\n      description: \"\\n<p>The percentage, from 0 to 100, of the background operation that is complete. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is set to <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.ReportProgress(Int32)\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  id: ReportProgress(System.Int32,System.Object)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: ReportProgress(Int32, Object)\n  fullName: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReportProgress\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 109\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Raises the <xref href=\\\"System.ComponentModel.BackgroundWorker.ProgressChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: public void ReportProgress(int percentProgress, object userState)\n    content.vb: Public Sub ReportProgress(percentProgress As Integer, userState As Object)\n    parameters:\n    - id: percentProgress\n      type: System.Int32\n      description: \"\\n<p>The percentage, from 0 to 100, of the background operation that is complete.</p>\\n\"\n    - id: userState\n      type: System.Object\n      description: \"\\n<p>The state object passed to <xref href=\\\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is set to <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.ReportProgress(Int32, Object)\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  id: RunWorkerAsync\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: RunWorkerAsync()\n  fullName: System.ComponentModel.BackgroundWorker.RunWorkerAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RunWorkerAsync\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 128\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Starts execution of a background operation.</p>\\n\"\n  syntax:\n    content: public void RunWorkerAsync()\n    content.vb: Public Sub RunWorkerAsync\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<xref href=\\\"System.ComponentModel.BackgroundWorker.IsBusy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>true</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.DoWork\n    commentId: E:System.ComponentModel.BackgroundWorker.DoWork\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.RunWorkerAsync()\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  id: RunWorkerAsync(System.Object)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: RunWorkerAsync(Object)\n  fullName: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RunWorkerAsync\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 133\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Starts execution of a background operation.</p>\\n\"\n  syntax:\n    content: public void RunWorkerAsync(object argument)\n    content.vb: Public Sub RunWorkerAsync(argument As Object)\n    parameters:\n    - id: argument\n      type: System.Object\n      description: \"\\n<p>A parameter for use by the background operation to be executed in the <xref href=\\\"System.ComponentModel.BackgroundWorker.DoWork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event handler. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<xref href=\\\"System.ComponentModel.BackgroundWorker.IsBusy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>true</strong>. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker.DoWork\n    commentId: E:System.ComponentModel.BackgroundWorker.DoWork\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.RunWorkerAsync(Object)\n- uid: System.ComponentModel.BackgroundWorker.Dispose\n  commentId: M:System.ComponentModel.BackgroundWorker.Dispose\n  id: Dispose\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.ComponentModel.BackgroundWorker.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 211\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BackgroundWorker.Dispose()\n- uid: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  commentId: M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs\n    startLine: 217\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BackgroundWorker.Dispose(Boolean)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ComponentModel.DoWorkEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: DoWorkEventHandler\n  fullName: System.ComponentModel.DoWorkEventHandler\n  nameWithType: DoWorkEventHandler\n  commentId: T:System.ComponentModel.DoWorkEventHandler\n- uid: System.ComponentModel.ProgressChangedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: ProgressChangedEventHandler\n  fullName: System.ComponentModel.ProgressChangedEventHandler\n  nameWithType: ProgressChangedEventHandler\n  commentId: T:System.ComponentModel.ProgressChangedEventHandler\n- uid: System.ComponentModel.RunWorkerCompletedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: RunWorkerCompletedEventHandler\n  fullName: System.ComponentModel.RunWorkerCompletedEventHandler\n  nameWithType: RunWorkerCompletedEventHandler\n  commentId: T:System.ComponentModel.RunWorkerCompletedEventHandler\n- uid: System.ComponentModel.DoWorkEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: DoWorkEventArgs\n  fullName: System.ComponentModel.DoWorkEventArgs\n  nameWithType: DoWorkEventArgs\n  commentId: T:System.ComponentModel.DoWorkEventArgs\n- uid: System.ComponentModel.ProgressChangedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: ProgressChangedEventArgs\n  fullName: System.ComponentModel.ProgressChangedEventArgs\n  nameWithType: ProgressChangedEventArgs\n  commentId: T:System.ComponentModel.ProgressChangedEventArgs\n- uid: System.ComponentModel.RunWorkerCompletedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: RunWorkerCompletedEventArgs\n  fullName: System.ComponentModel.RunWorkerCompletedEventArgs\n  nameWithType: RunWorkerCompletedEventArgs\n  commentId: T:System.ComponentModel.RunWorkerCompletedEventArgs\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}