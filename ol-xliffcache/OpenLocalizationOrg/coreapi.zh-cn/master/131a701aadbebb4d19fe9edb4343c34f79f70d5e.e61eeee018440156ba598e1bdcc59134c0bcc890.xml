{"nodes":[{"pos":[335,338],"content":"Dns","needQuote":true,"nodes":[{"content":"Dns","pos":[0,3]}]},{"pos":[1523,1552],"content":"GetHostAddressesAsync(String)","needQuote":true,"nodes":[{"content":"GetHostAddressesAsync(String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The host name or IP address to resolve.&lt;/p&gt;\\n","pos":[2417,2467],"source":"\\n<p>The host name or IP address to resolve.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hostNameOrAddress&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3197,3256],"source":"\\n<p>\\n<em>hostNameOrAddress</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3257,3263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;hostNameOrAddress&lt;/em&gt; is greater than 255 characters.","pos":[3380,3457],"source":"\\n<p>The length of <em>hostNameOrAddress</em> is greater than 255 characters."},{"content":"&lt;/p&gt;\\n","pos":[3458,3464],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error is encountered when resolving &lt;em&gt;hostNameOrAddress&lt;/em&gt;.","pos":[3581,3652],"source":"\\n<p>An error is encountered when resolving <em>hostNameOrAddress</em>."},{"content":"&lt;/p&gt;\\n","pos":[3653,3659],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hostNameOrAddress&lt;/em&gt; is an invalid IP address.&lt;/p&gt;\\n","pos":[3756,3821],"source":"\\n<p>\\n<em>hostNameOrAddress</em> is an invalid IP address.</p>\\n"},{"pos":[4191,4219],"content":"GetHostEntryAsync(IPAddress)","needQuote":true,"nodes":[{"content":"GetHostEntryAsync(IPAddress)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An IP address.&lt;/p&gt;\\n","pos":[5111,5136],"source":"\\n<p>An IP address.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5839,5888],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5889,5895],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error is encountered when resolving &lt;em&gt;address&lt;/em&gt;.","pos":[6012,6073],"source":"\\n<p>An error is encountered when resolving <em>address</em>."},{"content":"&lt;/p&gt;\\n","pos":[6074,6080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is an invalid IP address.&lt;/p&gt;\\n","pos":[6177,6232],"source":"\\n<p>\\n<em>address</em> is an invalid IP address.</p>\\n"},{"pos":[6580,6605],"content":"GetHostEntryAsync(String)","needQuote":true,"nodes":[{"content":"GetHostEntryAsync(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The host name or IP address to resolve.&lt;/p&gt;\\n","pos":[7519,7569],"source":"\\n<p>The host name or IP address to resolve.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;hostNameOrAddress&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8282,8353],"source":"\\n<p>The <em>hostNameOrAddress</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8354,8360],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;hostNameOrAddress&lt;/em&gt; parameter is greater than 255 characters.","pos":[8477,8564],"source":"\\n<p>The length of <em>hostNameOrAddress</em> parameter is greater than 255 characters."},{"content":"&lt;/p&gt;\\n","pos":[8565,8571],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error was encountered when resolving the &lt;em&gt;hostNameOrAddress&lt;/em&gt; parameter.","pos":[8688,8774],"source":"\\n<p>An error was encountered when resolving the <em>hostNameOrAddress</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[8775,8781],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;hostNameOrAddress&lt;/em&gt; parameter is an invalid IP address.","pos":[8878,8949],"source":"\\n<p>The <em>hostNameOrAddress</em> parameter is an invalid IP address."},{"content":"&lt;/p&gt;\\n","pos":[8950,8956],"source":" </p>\\n"},{"pos":[9238,9251],"content":"GetHostName()","needQuote":true,"nodes":[{"content":"GetHostName()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains the DNS host name of the local computer.&lt;/p&gt;\\n","pos":[9897,9971],"source":"\\n<p>A string that contains the DNS host name of the local computer.</p>\\n"},{"content":"\\n&lt;p&gt;An error is encountered when resolving the local host name.","pos":[10102,10166],"source":"\\n<p>An error is encountered when resolving the local host name."},{"content":"&lt;/p&gt;\\n","pos":[10167,10173],"source":" </p>\\n"},{"pos":[10431,10441],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[10584,10590],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10750,10760],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10855,10863],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10932,10933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10960,10961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11031,11039],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11108,11109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11136,11137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11320,11334],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11453,11459],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11526,11527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11577,11583],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11643,11644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11727,11733],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11800,11801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11851,11857],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11917,11918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12132,12154],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12302,12308],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12375,12376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12426,12432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12493,12494]},{"pos":[12549,12555],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12615,12616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12713,12719],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12786,12787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12837,12843],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12904,12905]},{"pos":[12960,12966],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13026,13027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13272,13303],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13469,13484],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13560,13561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13611,13617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13678,13679]},{"pos":[13734,13740],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13800,13801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13907,13922],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13998,13999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14049,14055],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14116,14117]},{"pos":[14172,14178],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14238,14239],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14469,14482],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14583,14594],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14666,14667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14694,14695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14768,14779],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14851,14852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14879,14880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15055,15064],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15157,15164],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15232,15233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15260,15261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15330,15337],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15405,15406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15433,15434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15609,15626],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15735,15750],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15826,15827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15854,15855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15932,15947],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16023,16024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16051,16052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16197,16203],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16334,16340],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16563,16580],"content":"Task<IPAddress[]>","needQuote":true,"nodes":[{"content":"Task&lt;IPAddress[]&gt;","pos":[0,17],"source":"Task<IPAddress[]>"}]},{"pos":[16811,16815],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[16889,16890],"content":"<","needQuote":true,"nodes":[]},{"pos":[16947,16956],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"content":"[]","pos":[17024,17026]},{"pos":[17139,17143],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[17218,17221]},{"pos":[17285,17294],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[17361,17363],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[17391,17392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17615,17628],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[17825,17829],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[17882,17883],"content":"<","needQuote":true,"nodes":[]},{"pos":[17910,17917],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[18032,18036],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[18090,18093]},{"pos":[18127,18134],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[18167,18168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18354,18376],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[18566,18575],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[18815,18832],"content":"Task<IPHostEntry>","needQuote":true,"nodes":[{"content":"Task&lt;IPHostEntry&gt;","pos":[0,17],"source":"Task<IPHostEntry>"}]},{"pos":[19063,19067],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[19141,19142],"content":"<","needQuote":true,"nodes":[]},{"pos":[19201,19212],"content":"IPHostEntry","needQuote":true,"nodes":[{"content":"IPHostEntry","pos":[0,11]}]},{"pos":[19342,19346],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[19421,19424]},{"pos":[19490,19501],"content":"IPHostEntry","needQuote":true,"nodes":[{"content":"IPHostEntry","pos":[0,11]}]},{"pos":[19549,19550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19772,19793],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[19987,20014],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[20226,20241],"content":"SocketException","needQuote":true,"nodes":[{"content":"SocketException","pos":[0,15]}]},{"pos":[20448,20465],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Net.Dns\n  commentId: T:System.Net.Dns\n  id: Dns\n  parent: System.Net\n  children:\n  - System.Net.Dns.GetHostAddressesAsync(System.String)\n  - System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  - System.Net.Dns.GetHostEntryAsync(System.String)\n  - System.Net.Dns.GetHostName\n  langs:\n  - csharp\n  - vb\n  name: Dns\n  fullName: System.Net.Dns\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dns\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 10\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Provides simple domain name resolution functionality.</p>\\n\"\n  syntax:\n    content: public class Dns\n    content.vb: Public Class Dns\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Dns\n- uid: System.Net.Dns.GetHostAddressesAsync(System.String)\n  commentId: M:System.Net.Dns.GetHostAddressesAsync(System.String)\n  id: GetHostAddressesAsync(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  - vb\n  name: GetHostAddressesAsync(String)\n  fullName: System.Net.Dns.GetHostAddressesAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHostAddressesAsync\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 12\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public static Task<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress)\n    content.vb: Public Shared Function GetHostAddressesAsync(hostNameOrAddress As String) As Task(Of IPAddress())\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: \"\\n<p>The host name or IP address to resolve.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPAddress[]}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property on the task object returns an array of type <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that holds the IP addresses for the host that is specified by the <em>hostNameOrAddress</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hostNameOrAddress</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of <em>hostNameOrAddress</em> is greater than 255 characters. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error is encountered when resolving <em>hostNameOrAddress</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hostNameOrAddress</em> is an invalid IP address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Dns.GetHostAddressesAsync(String)\n- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  commentId: M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  id: GetHostEntryAsync(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  - vb\n  name: GetHostEntryAsync(IPAddress)\n  fullName: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHostEntryAsync\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 13\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Resolves an IP address to an <xref href=\\\"System.Net.IPHostEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public static Task<IPHostEntry> GetHostEntryAsync(IPAddress address)\n    content.vb: Public Shared Function GetHostEntryAsync(address As IPAddress) As Task(Of IPHostEntry)\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An IP address.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property on the task object returns an <xref href=\\\"System.Net.IPHostEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains address information about the host specified in <em>address</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error is encountered when resolving <em>address</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>address</em> is an invalid IP address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Dns.GetHostEntryAsync(IPAddress)\n- uid: System.Net.Dns.GetHostEntryAsync(System.String)\n  commentId: M:System.Net.Dns.GetHostEntryAsync(System.String)\n  id: GetHostEntryAsync(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  - vb\n  name: GetHostEntryAsync(String)\n  fullName: System.Net.Dns.GetHostEntryAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHostEntryAsync\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 14\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Resolves a host name or IP address to an <xref href=\\\"System.Net.IPHostEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public static Task<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress)\n    content.vb: Public Shared Function GetHostEntryAsync(hostNameOrAddress As String) As Task(Of IPHostEntry)\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: \"\\n<p>The host name or IP address to resolve.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property on the task object returns an <xref href=\\\"System.Net.IPHostEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains address information about the host specified in <em>hostNameOrAddress</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>hostNameOrAddress</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of <em>hostNameOrAddress</em> parameter is greater than 255 characters. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error was encountered when resolving the <em>hostNameOrAddress</em> parameter. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>hostNameOrAddress</em> parameter is an invalid IP address. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Dns.GetHostEntryAsync(String)\n- uid: System.Net.Dns.GetHostName\n  commentId: M:System.Net.Dns.GetHostName\n  id: GetHostName\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  - vb\n  name: GetHostName()\n  fullName: System.Net.Dns.GetHostName()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHostName\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 15\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Gets the host name of the local computer.</p>\\n\"\n  syntax:\n    content: public static string GetHostName()\n    content.vb: Public Shared Function GetHostName As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the DNS host name of the local computer.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error is encountered when resolving the local host name. </p>\\n\"\n  see:\n  - type: System.Net.DnsPermission\n    commentId: T:System.Net.DnsPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Dns.GetHostName()\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Threading.Tasks.Task{System.Net.IPAddress[]}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<IPAddress[]>\n  fullName: System.Threading.Tasks.Task<System.Net.IPAddress[]>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.IPAddress())\n  name.vb: Task(Of IPAddress())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    fullName: System.Net.IPAddress\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    fullName: System.Net.IPAddress\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.IPAddress[]}\n  nameWithType: Task<IPAddress[]>\n  nameWithType.vb: Task(Of IPAddress())\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<IPHostEntry>\n  fullName: System.Threading.Tasks.Task<System.Net.IPHostEntry>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.IPHostEntry)\n  name.vb: Task(Of IPHostEntry)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.IPHostEntry\n    name: IPHostEntry\n    fullName: System.Net.IPHostEntry\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.IPHostEntry\n    name: IPHostEntry\n    fullName: System.Net.IPHostEntry\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.IPHostEntry}\n  nameWithType: Task<IPHostEntry>\n  nameWithType.vb: Task(Of IPHostEntry)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Net.Sockets.SocketException\n  isExternal: false\n  name: SocketException\n  fullName: System.Net.Sockets.SocketException\n  commentId: T:System.Net.Sockets.SocketException\n  nameWithType: SocketException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}