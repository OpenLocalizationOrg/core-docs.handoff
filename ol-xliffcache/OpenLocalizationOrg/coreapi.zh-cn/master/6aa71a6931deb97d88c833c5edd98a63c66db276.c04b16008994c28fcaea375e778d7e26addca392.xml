{"nodes":[{"pos":[5721,5726],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[7534,7540],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[9509,9513],"content":"Rank","needQuote":true,"nodes":[{"content":"Rank","pos":[0,4]}]},{"pos":[11125,11142],"content":"ICollection.Count","needQuote":true,"nodes":[{"content":"ICollection.Count","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The number of elements contained in the collection.&lt;/p&gt;\\n","pos":[11914,11976],"source":"\\n<p>The number of elements contained in the collection.</p>\\n"},{"pos":[12504,12530],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[13745,13765],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[14917,14934],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"pos":[16056,16072],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"pos":[17209,17226],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The index of the element to get or set.&lt;/p&gt;\\n","pos":[17946,17996],"source":"\\n<p>The index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[18056,18102],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[19307,19348],"content":"BinarySearch(Array, Int32, Int32, Object)","needQuote":true,"nodes":[{"content":"BinarySearch(Array, Int32, Int32, Object)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The starting index of the range to search.&lt;/p&gt;\\n","pos":[20667,20720],"source":"\\n<p>The starting index of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The length of the range to search.&lt;/p&gt;\\n","pos":[20784,20829],"source":"\\n<p>The length of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[20893,20929],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[20988,21125],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[21126,21353],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[21354,21549],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21550,21742],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21861,21914],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[22003,22051],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[22168,22301],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22398,22604],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[23725,23777],"content":"BinarySearch(Array, Int32, Int32, Object, IComparer)","needQuote":true,"nodes":[{"content":"BinarySearch(Array, Int32, Int32, Object, IComparer)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The starting index of the range to search.&lt;/p&gt;\\n","pos":[25181,25234],"source":"\\n<p>The starting index of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The length of the range to search.&lt;/p&gt;\\n","pos":[25298,25343],"source":"\\n<p>The length of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[25407,25443],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[25902,26039],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[26040,26267],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[26268,26463],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26464,26656],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26775,26828],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[26917,26965],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[27082,27215],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[27312,27566],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[28662,28689],"content":"BinarySearch(Array, Object)","needQuote":true,"nodes":[{"content":"BinarySearch(Array, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[29918,29954],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[30013,30150],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[30151,30378],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[30379,30574],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[30575,30776],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30895,30948],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[31037,31085],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31182,31282],"source":"\\n<p>\\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[32311,32349],"content":"BinarySearch(Array, Object, IComparer)","needQuote":true,"nodes":[{"content":"BinarySearch(Array, Object, IComparer)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[33590,33626],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[34085,34222],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[34223,34450],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[34451,34646],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34647,34839],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34958,35011],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[35100,35148],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35245,35393],"source":"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[36433,36456],"content":"BinarySearch<T>(T[], T)","needQuote":true,"nodes":[{"content":"BinarySearch&lt;T&gt;(T[], T)","pos":[0,23],"source":"BinarySearch<T>(T[], T)"}]},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[37738,37774],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[37828,37877],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[37936,38073],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[38074,38301],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[38302,38497],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38498,38690],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38809,38862],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"pos":[39884,39921],"content":"BinarySearch<T>(T[], T, IComparer<T>)","needQuote":true,"nodes":[{"content":"BinarySearch&lt;T&gt;(T[], T, IComparer&lt;T&gt;)","pos":[0,37],"source":"BinarySearch<T>(T[], T, IComparer<T>)"}]},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[41177,41213],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[41692,41741],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[41800,41937],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[41938,42165],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[42166,42361],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[42362,42554],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42673,42726],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[42823,42971],"source":"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[44189,44226],"content":"BinarySearch<T>(T[], Int32, Int32, T)","needQuote":true,"nodes":[{"content":"BinarySearch&lt;T&gt;(T[], Int32, Int32, T)","pos":[0,37],"source":"BinarySearch<T>(T[], Int32, Int32, T)"}]},{"content":"\\n&lt;p&gt;The starting index of the range to search.&lt;/p&gt;\\n","pos":[45606,45659],"source":"\\n<p>The starting index of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The length of the range to search.&lt;/p&gt;\\n","pos":[45723,45768],"source":"\\n<p>The length of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[45824,45860],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[45914,45963],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[46022,46159],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[46160,46387],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[46388,46583],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46584,46776],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46895,46948],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[47065,47198],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[47295,47501],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[48671,48722],"content":"BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)","needQuote":true,"nodes":[{"content":"BinarySearch&lt;T&gt;(T[], Int32, Int32, T, IComparer&lt;T&gt;)","pos":[0,51],"source":"BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)"}]},{"content":"\\n&lt;p&gt;The starting index of the range to search.&lt;/p&gt;\\n","pos":[50088,50141],"source":"\\n<p>The starting index of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The length of the range to search.&lt;/p&gt;\\n","pos":[50205,50250],"source":"\\n<p>The length of the range to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to search for.&lt;/p&gt;\\n","pos":[50306,50342],"source":"\\n<p>The object to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[50821,50870],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the specified &lt;em&gt;value&lt;/em&gt; in the specified &lt;em&gt;array&lt;/em&gt;, if &lt;em&gt;value&lt;/em&gt; is found; otherwise, a negative number.","pos":[50929,51066],"source":"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is less than one or more elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of the index of the first element that is larger than &lt;em&gt;value&lt;/em&gt;.","pos":[51067,51294],"source":" If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is not found and &lt;em&gt;value&lt;/em&gt; is greater than all elements in &lt;em&gt;array&lt;/em&gt;, the negative number returned is the bitwise complement of (the index of the last element plus 1).","pos":[51295,51490],"source":" If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1)."},{"content":"If this method is called with a non-sorted &lt;em&gt;array&lt;/em&gt;, the return value can be incorrect and a negative number could be returned, even if &lt;em&gt;value&lt;/em&gt; is present in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51491,51683],"source":" If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51802,51855],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[51972,52105],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;value&lt;/em&gt; is of a type that is not compatible with the elements of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[52202,52456],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n"},{"pos":[53724,53750],"content":"Clear(Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"Clear(Array, Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The array whose elements need to be cleared.&lt;/p&gt;\\n","pos":[54646,54701],"source":"\\n<p>The array whose elements need to be cleared.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the range of elements to clear.&lt;/p&gt;\\n","pos":[54764,54828],"source":"\\n<p>The starting index of the range of elements to clear.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to clear.&lt;/p&gt;\\n","pos":[54892,54935],"source":"\\n<p>The number of elements to clear.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55054,55107],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; is greater than the size of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[55218,55462],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The sum of <em>index</em> and <em>length</em> is greater than the size of <em>array</em>.</p>\\n"},{"pos":[55723,55730],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[57250,57300],"content":"ConstrainedCopy(Array, Int32, Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"ConstrainedCopy(Array, Int32, Array, Int32, Int32)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the index in the &lt;em&gt;sourceArray&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[58923,59029],"source":"\\n<p>A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the index in the &lt;em&gt;destinationArray&lt;/em&gt; at which storing begins.&lt;/p&gt;\\n","pos":[59288,59399],"source":"\\n<p>A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the number of elements to copy.&lt;/p&gt;\\n","pos":[59463,59538],"source":"\\n<p>A 32-bit integer that represents the number of elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59657,59791],"source":"\\n<p>\\n<em>sourceArray</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationArray</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; and &lt;em&gt;destinationArray&lt;/em&gt; have different ranks.&lt;/p&gt;\\n","pos":[59880,59965],"source":"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;sourceArray&lt;/em&gt; type is neither the same as nor derived from the &lt;em&gt;destinationArray&lt;/em&gt; type.&lt;/p&gt;\\n","pos":[60080,60196],"source":"\\n<p>The <em>sourceArray</em> type is neither the same as nor derived from the <em>destinationArray</em> type.</p>\\n"},{"content":"\\n&lt;p&gt;At least one element in &lt;em&gt;sourceArray&lt;/em&gt; cannot be cast to the type of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60299,60411],"source":"\\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt; is less than the lower bound of the first dimension of &lt;em&gt;sourceArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationIndex&lt;/em&gt; is less than the lower bound of the first dimension of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[60528,60827],"source":"\\n<p>\\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is greater than the number of elements from &lt;em&gt;sourceIndex&lt;/em&gt; to the end of &lt;em&gt;sourceArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is greater than the number of elements from &lt;em&gt;destinationIndex&lt;/em&gt; to the end of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60924,61203],"source":"\\n<p>\\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>.</p>\\n"},{"pos":[62088,62113],"content":"Copy(Array, Array, Int32)","needQuote":true,"nodes":[{"content":"Copy(Array, Array, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the number of elements to copy.&lt;/p&gt;\\n","pos":[63693,63768],"source":"\\n<p>A 32-bit integer that represents the number of elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63887,64021],"source":"\\n<p>\\n<em>sourceArray</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationArray</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; and &lt;em&gt;destinationArray&lt;/em&gt; have different ranks.&lt;/p&gt;\\n","pos":[64110,64195],"source":"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; and &lt;em&gt;destinationArray&lt;/em&gt; are of incompatible types.&lt;/p&gt;\\n","pos":[64310,64400],"source":"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types.</p>\\n"},{"content":"\\n&lt;p&gt;At least one element in &lt;em&gt;sourceArray&lt;/em&gt; cannot be cast to the type of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[64503,64615],"source":"\\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[64732,64779],"source":"\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is greater than the number of elements in &lt;em&gt;sourceArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is greater than the number of elements in &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[64876,65076],"source":"\\n<p>\\n<em>length</em> is greater than the number of elements in <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is greater than the number of elements in <em>destinationArray</em>.</p>\\n"},{"pos":[65824,65863],"content":"Copy(Array, Int32, Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(Array, Int32, Array, Int32, Int32)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the index in the &lt;em&gt;sourceArray&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[67420,67526],"source":"\\n<p>A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the index in the &lt;em&gt;destinationArray&lt;/em&gt; at which storing begins.&lt;/p&gt;\\n","pos":[67785,67896],"source":"\\n<p>A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the number of elements to copy.&lt;/p&gt;\\n","pos":[67960,68035],"source":"\\n<p>A 32-bit integer that represents the number of elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[68154,68288],"source":"\\n<p>\\n<em>sourceArray</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationArray</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; and &lt;em&gt;destinationArray&lt;/em&gt; have different ranks.&lt;/p&gt;\\n","pos":[68377,68462],"source":"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceArray&lt;/em&gt; and &lt;em&gt;destinationArray&lt;/em&gt; are of incompatible types.&lt;/p&gt;\\n","pos":[68577,68667],"source":"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types.</p>\\n"},{"content":"\\n&lt;p&gt;At least one element in &lt;em&gt;sourceArray&lt;/em&gt; cannot be cast to the type of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[68770,68882],"source":"\\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt; is less than the lower bound of the first dimension of &lt;em&gt;sourceArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationIndex&lt;/em&gt; is less than the lower bound of the first dimension of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[68999,69298],"source":"\\n<p>\\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is greater than the number of elements from &lt;em&gt;sourceIndex&lt;/em&gt; to the end of &lt;em&gt;sourceArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is greater than the number of elements from &lt;em&gt;destinationIndex&lt;/em&gt; to the end of &lt;em&gt;destinationArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69395,69674],"source":"\\n<p>\\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>.</p>\\n"},{"pos":[70325,70345],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The one-dimensional array that is the destination of the elements copied from the current array.&lt;/p&gt;\\n","pos":[71120,71227],"source":"\\n<p>The one-dimensional array that is the destination of the elements copied from the current array.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[71290,71386],"source":"\\n<p>A 32-bit integer that represents the index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[71505,71558],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[71675,71750],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The number of elements in the source array is greater than the available number of elements from &lt;em&gt;index&lt;/em&gt; to the end of the destination &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[71847,72074],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source array is greater than the available number of elements from <em>index</em> to the end of the destination <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The source array is multidimensional.&lt;/p&gt;\\n","pos":[72460,72508],"source":"\\n<p>The source array is multidimensional.</p>\\n"},{"pos":[73451,73478],"content":"CreateInstance(Type, Int32)","needQuote":true,"nodes":[{"content":"CreateInstance(Type, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;elementType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[75214,75273],"source":"\\n<p>\\n<em>elementType</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[75936,75983],"source":"\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"pos":[76356,76385],"content":"CreateInstance(Type, Int32[])","needQuote":true,"nodes":[{"content":"CreateInstance(Type, Int32[])","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;elementType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;lengths&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[78312,78437],"source":"\\n<p>\\n<em>elementType</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>lengths</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Any value in &lt;em&gt;lengths&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[79181,79240],"source":"\\n<p>Any value in <em>lengths</em> is less than zero.</p>\\n"},{"pos":[79828,79866],"content":"CreateInstance(Type, Int32[], Int32[])","needQuote":true,"nodes":[{"content":"CreateInstance(Type, Int32[], Int32[])","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;elementType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;lengths&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;lowerBounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82020,82215],"source":"\\n<p>\\n<em>elementType</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>lengths</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>lowerBounds</em> is <strong>null</strong>.</p>\\n"},{"pos":[83847,83857],"content":"Empty<T>()","needQuote":true,"nodes":[{"content":"Empty&lt;T&gt;()","pos":[0,10],"source":"Empty<T>()"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[84555,84604],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"pos":[85209,85237],"content":"Exists<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"Exists&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,28],"source":"Exists<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[86388,86437],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;array&lt;/em&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86498,86677],"source":"\\n<p>\\n<strong>true</strong> if <em>array</em> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86796,86913],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[88500,88526],"content":"Find<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"Find&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,26],"source":"Find<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The one-dimensional, zero-based array to search.&lt;/p&gt;\\n","pos":[89350,89409],"source":"\\n<p>The one-dimensional, zero-based array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The predicate that defines the conditions of the element to search for.&lt;/p&gt;\\n","pos":[89481,89563],"source":"\\n<p>The predicate that defines the conditions of the element to search for.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[89617,89666],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[89718,89870],"source":"\\n<p>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[89989,90106],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[91559,91588],"content":"FindAll<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"FindAll&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,29],"source":"FindAll<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[92708,92757],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[93210,93327],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[94870,94915],"content":"FindIndex<T>(T[], Int32, Int32, Predicate<T>)","needQuote":true,"nodes":[{"content":"FindIndex&lt;T&gt;(T[], Int32, Int32, Predicate&lt;T&gt;)","pos":[0,45],"source":"FindIndex<T>(T[], Int32, Int32, Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.&lt;/p&gt;\\n","pos":[96180,96235],"source":"\\n<p>The zero-based starting index of the search.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.&lt;/p&gt;\\n","pos":[96298,96357],"source":"\\n<p>The number of elements in the section to search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[96634,96683],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;em&gt;match&lt;/em&gt;, if found; otherwise, -1.&lt;/p&gt;\\n","pos":[96742,96891],"source":"\\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[97010,97127],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[97244,97503],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n"},{"pos":[99218,99256],"content":"FindIndex<T>(T[], Int32, Predicate<T>)","needQuote":true,"nodes":[{"content":"FindIndex&lt;T&gt;(T[], Int32, Predicate&lt;T&gt;)","pos":[0,38],"source":"FindIndex<T>(T[], Int32, Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.&lt;/p&gt;\\n","pos":[100455,100510],"source":"\\n<p>The zero-based starting index of the search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[100787,100836],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;em&gt;match&lt;/em&gt;, if found; otherwise, -1.&lt;/p&gt;\\n","pos":[100895,101044],"source":"\\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[101163,101280],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[101397,101487],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n"},{"pos":[103128,103159],"content":"FindIndex<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"FindIndex&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,31],"source":"FindIndex<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[104438,104487],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;em&gt;match&lt;/em&gt;, if found; otherwise, -1.&lt;/p&gt;\\n","pos":[104546,104695],"source":"\\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[104814,104931],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[106534,106564],"content":"FindLast<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"FindLast&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,30],"source":"FindLast<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[107806,107855],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[107907,108058],"source":"\\n<p>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[108177,108294],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[109851,109900],"content":"FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)","needQuote":true,"nodes":[{"content":"FindLastIndex&lt;T&gt;(T[], Int32, Int32, Predicate&lt;T&gt;)","pos":[0,49],"source":"FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.&lt;/p&gt;\\n","pos":[111178,111242],"source":"\\n<p>The zero-based starting index of the backward search.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.&lt;/p&gt;\\n","pos":[111305,111364],"source":"\\n<p>The number of elements in the section to search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[111641,111690],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;em&gt;match&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[111749,111897],"source":"\\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[112016,112133],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[112250,112509],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n"},{"pos":[114252,114294],"content":"FindLastIndex<T>(T[], Int32, Predicate<T>)","needQuote":true,"nodes":[{"content":"FindLastIndex&lt;T&gt;(T[], Int32, Predicate&lt;T&gt;)","pos":[0,42],"source":"FindLastIndex<T>(T[], Int32, Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.&lt;/p&gt;\\n","pos":[115509,115573],"source":"\\n<p>The zero-based starting index of the backward search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[115850,115899],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;em&gt;match&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[115958,116106],"source":"\\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[116225,116342],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[116459,116549],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n"},{"pos":[118218,118253],"content":"FindLastIndex<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"FindLastIndex&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,35],"source":"FindLastIndex<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[119547,119596],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;em&gt;match&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[119655,119803],"source":"\\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[119922,120039],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[121577,121592],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[122858,122874],"content":"GetLength(Int32)","needQuote":true,"nodes":[{"content":"GetLength(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A 32-bit integer that represents the number of elements in the specified dimension.&lt;/p&gt;\\n","pos":[123855,123949],"source":"\\n<p>A 32-bit integer that represents the number of elements in the specified dimension.</p>\\n"},{"pos":[124919,124939],"content":"GetLowerBound(Int32)","needQuote":true,"nodes":[{"content":"GetLowerBound(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A zero-based dimension of the array whose starting index needs to be determined.&lt;/p&gt;\\n","pos":[125781,125872],"source":"\\n<p>A zero-based dimension of the array whose starting index needs to be determined.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first element of the specified dimension in the array.&lt;/p&gt;\\n","pos":[125931,126013],"source":"\\n<p>The index of the first element of the specified dimension in the array.</p>\\n"},{"pos":[126819,126839],"content":"GetUpperBound(Int32)","needQuote":true,"nodes":[{"content":"GetUpperBound(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A zero-based dimension of the array whose upper bound needs to be determined.&lt;/p&gt;\\n","pos":[127680,127768],"source":"\\n<p>A zero-based dimension of the array whose upper bound needs to be determined.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.","pos":[127827,127945],"source":"\\n<p>The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty."},{"content":"&lt;/p&gt;\\n","pos":[127946,127952],"source":" </p>\\n"},{"pos":[128743,128758],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"pos":[131084,131101],"content":"GetValue(Int32[])","needQuote":true,"nodes":[{"content":"GetValue(Int32[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;indices&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[132492,132547],"source":"\\n<p>\\n<em>indices</em> is <strong>null</strong>.</p>\\n"},{"pos":[133940,133962],"content":"IndexOf(Array, Object)","needQuote":true,"nodes":[{"content":"IndexOf(Array, Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to search.&lt;/p&gt;\\n","pos":[134854,134901],"source":"\\n<p>The one-dimensional array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[134965,135015],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first occurrence of &lt;em&gt;value&lt;/em&gt; in &lt;em&gt;array&lt;/em&gt;, if found; otherwise, the lower bound of the array minus 1.&lt;/p&gt;\\n","pos":[135074,135214],"source":"\\n<p>The index of the first occurrence of <em>value</em> in <em>array</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[135333,135386],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[135475,135523],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[136053,136082],"content":"IndexOf(Array, Object, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(Array, Object, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to search.&lt;/p&gt;\\n","pos":[137117,137164],"source":"\\n<p>The one-dimensional array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[137228,137278],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the search.","pos":[137346,137384],"source":"\\n<p>The starting index of the search."},{"content":"0 (zero) is valid in an empty array.&lt;/p&gt;\\n","pos":[137385,137427],"source":" 0 (zero) is valid in an empty array.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if it’s found, within the range of elements in &lt;em&gt;array&lt;/em&gt; that extends from &lt;em&gt;startIndex&lt;/em&gt; to the last element; otherwise, the lower bound of the array minus 1.&lt;/p&gt;\\n","pos":[137486,137719],"source":"\\n<p>The index of the first occurrence of <em>value</em>, if it’s found, within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element; otherwise, the lower bound of the array minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[137838,137891],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[138008,138098],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[138187,138235],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[138811,138847],"content":"IndexOf(Array, Object, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(Array, Object, Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to search.&lt;/p&gt;\\n","pos":[139996,140043],"source":"\\n<p>The one-dimensional array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[140107,140157],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the search.","pos":[140225,140263],"source":"\\n<p>The starting index of the search."},{"content":"0 (zero) is valid in an empty array.&lt;/p&gt;\\n","pos":[140264,140306],"source":" 0 (zero) is valid in an empty array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to search.&lt;/p&gt;\\n","pos":[140369,140413],"source":"\\n<p>The number of elements to search.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if it’s found in the &lt;em&gt;array&lt;/em&gt; from index &lt;em&gt;startIndex&lt;/em&gt; to &lt;em&gt;startIndex&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1; otherwise, the lower bound of the array minus 1.&lt;/p&gt;\\n","pos":[140472,140696],"source":"\\n<p>The index of the first occurrence of <em>value</em>, if it’s found in the <em>array</em> from index <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1; otherwise, the lower bound of the array minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[140815,140868],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[140985,141244],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[141333,141381],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[141844,141862],"content":"IndexOf<T>(T[], T)","needQuote":true,"nodes":[{"content":"IndexOf&lt;T&gt;(T[], T)","pos":[0,18],"source":"IndexOf<T>(T[], T)"}]},{"content":"\\n&lt;p&gt;The one-dimensional, zero-based array to search.&lt;/p&gt;\\n","pos":[142558,142617],"source":"\\n<p>The one-dimensional, zero-based array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[142673,142723],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[142777,142826],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt; in the entire &lt;em&gt;array&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[142885,143013],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em> in the entire <em>array</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[143132,143185],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"pos":[143799,143824],"content":"IndexOf<T>(T[], T, Int32)","needQuote":true,"nodes":[{"content":"IndexOf&lt;T&gt;(T[], T, Int32)","pos":[0,25],"source":"IndexOf<T>(T[], T, Int32)"}]},{"content":"\\n&lt;p&gt;The one-dimensional, zero-based array to search.&lt;/p&gt;\\n","pos":[144663,144722],"source":"\\n<p>The one-dimensional, zero-based array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[144778,144828],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[144896,144945],"source":"\\n<p>The zero-based starting index of the search."},{"content":"0 (zero) is valid in an empty array.&lt;/p&gt;\\n","pos":[144946,144988],"source":" 0 (zero) is valid in an empty array.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[145042,145091],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt; within the range of elements in &lt;em&gt;array&lt;/em&gt; that extends from &lt;em&gt;startIndex&lt;/em&gt; to the last element, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[145150,145354],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[145473,145526],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[145643,145733],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n"},{"pos":[146421,146453],"content":"IndexOf<T>(T[], T, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf&lt;T&gt;(T[], T, Int32, Int32)","pos":[0,32],"source":"IndexOf<T>(T[], T, Int32, Int32)"}]},{"content":"\\n&lt;p&gt;The one-dimensional, zero-based array to search.&lt;/p&gt;\\n","pos":[147346,147405],"source":"\\n<p>The one-dimensional, zero-based array to search.</p>\\n"},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[147461,147511],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[147579,147628],"source":"\\n<p>The zero-based starting index of the search."},{"content":"0 (zero) is valid in an empty array.&lt;/p&gt;\\n","pos":[147629,147671],"source":" 0 (zero) is valid in an empty array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.&lt;/p&gt;\\n","pos":[147734,147793],"source":"\\n<p>The number of elements in the section to search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[147847,147896],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt; within the range of elements in &lt;em&gt;array&lt;/em&gt; that starts at &lt;em&gt;startIndex&lt;/em&gt; and contains the number of elements specified in &lt;em&gt;count&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[147955,148200],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that starts at <em>startIndex</em> and contains the number of elements specified in <em>count</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[148319,148372],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[148489,148748],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n"},{"pos":[149360,149372],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[150331,150357],"content":"LastIndexOf(Array, Object)","needQuote":true,"nodes":[{"content":"LastIndexOf(Array, Object)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[151522,151572],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the last occurrence of &lt;em&gt;value&lt;/em&gt; within the entire &lt;em&gt;array&lt;/em&gt;, if found; otherwise, the lower bound of the array minus 1.&lt;/p&gt;\\n","pos":[151631,151785],"source":"\\n<p>The index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[151904,151957],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[152046,152094],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[152632,152665],"content":"LastIndexOf(Array, Object, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(Array, Object, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[153960,154010],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the backward search.&lt;/p&gt;\\n","pos":[154078,154131],"source":"\\n<p>The starting index of the backward search.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the last occurrence of &lt;em&gt;value&lt;/em&gt; within the range of elements in &lt;em&gt;array&lt;/em&gt; that extends from the first element to &lt;em&gt;startIndex&lt;/em&gt;, if found; otherwise, the lower bound of the array minus 1.&lt;/p&gt;\\n","pos":[154190,154417],"source":"\\n<p>The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[154536,154589],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[154706,154796],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[154885,154933],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[155517,155557],"content":"LastIndexOf(Array, Object, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(Array, Object, Int32, Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[156975,157025],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the backward search.&lt;/p&gt;\\n","pos":[157093,157146],"source":"\\n<p>The starting index of the backward search.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.&lt;/p&gt;\\n","pos":[157209,157268],"source":"\\n<p>The number of elements in the section to search.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the last occurrence of &lt;em&gt;value&lt;/em&gt; within the range of elements in &lt;em&gt;array&lt;/em&gt; that contains the number of elements specified in &lt;em&gt;count&lt;/em&gt; and ends at &lt;em&gt;startIndex&lt;/em&gt;, if found; otherwise, the lower bound of the array minus 1.&lt;/p&gt;\\n","pos":[157327,157592],"source":"\\n<p>The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[157711,157764],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[157881,158140],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[158229,158277],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[158748,158770],"content":"LastIndexOf<T>(T[], T)","needQuote":true,"nodes":[{"content":"LastIndexOf&lt;T&gt;(T[], T)","pos":[0,22],"source":"LastIndexOf<T>(T[], T)"}]},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[159727,159777],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[159831,159880],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt; within the entire &lt;em&gt;array&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[159939,160070],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[160189,160242],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"pos":[160876,160905],"content":"LastIndexOf<T>(T[], T, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf&lt;T&gt;(T[], T, Int32)","pos":[0,29],"source":"LastIndexOf<T>(T[], T, Int32)"}]},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[161992,162042],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.&lt;/p&gt;\\n","pos":[162110,162174],"source":"\\n<p>The zero-based starting index of the backward search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[162228,162277],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt; within the range of elements in &lt;em&gt;array&lt;/em&gt; that extends from the first element to &lt;em&gt;startIndex&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[162336,162540],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[162659,162712],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[162829,162919],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n"},{"pos":[163627,163663],"content":"LastIndexOf<T>(T[], T, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf&lt;T&gt;(T[], T, Int32, Int32)","pos":[0,36],"source":"LastIndexOf<T>(T[], T, Int32, Int32)"}]},{"content":"\\n&lt;p&gt;The object to locate in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[164813,164863],"source":"\\n<p>The object to locate in <em>array</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.&lt;/p&gt;\\n","pos":[164931,164995],"source":"\\n<p>The zero-based starting index of the backward search.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.&lt;/p&gt;\\n","pos":[165058,165117],"source":"\\n<p>The number of elements in the section to search.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[165171,165220],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt; within the range of elements in &lt;em&gt;array&lt;/em&gt; that contains the number of elements specified in &lt;em&gt;count&lt;/em&gt; and ends at &lt;em&gt;startIndex&lt;/em&gt;, if found; otherwise, –1.&lt;/p&gt;\\n","pos":[165279,165521],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, –1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165640,165693],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[165810,166069],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n"},{"pos":[166749,166774],"content":"Resize<T>(ref T[], Int32)","needQuote":true,"nodes":[{"content":"Resize&lt;T&gt;(ref T[], Int32)","pos":[0,25],"source":"Resize<T>(ref T[], Int32)"}]},{"content":"\\n&lt;p&gt;The one-dimensional, zero-based array to resize, or &lt;strong&gt;null&lt;/strong&gt; to create a new array with the specified size.&lt;/p&gt;\\n","pos":[167631,167762],"source":"\\n<p>The one-dimensional, zero-based array to resize, or <strong>null</strong> to create a new array with the specified size.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the new array.&lt;/p&gt;\\n","pos":[167827,167864],"source":"\\n<p>The size of the new array.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[167918,167967],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newSize&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[168098,168146],"source":"\\n<p>\\n<em>newSize</em> is less than zero.</p>\\n"},{"pos":[168618,168632],"content":"Reverse(Array)","needQuote":true,"nodes":[{"content":"Reverse(Array)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[169729,169776],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[169777,169783],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.","pos":[169872,169914],"source":"\\n<p>\\n<em>array</em> is multidimensional."},{"content":"&lt;/p&gt;\\n","pos":[169915,169921],"source":" </p>\\n"},{"pos":[170296,170324],"content":"Reverse(Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"Reverse(Array, Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The starting index of the section to reverse.&lt;/p&gt;\\n","pos":[171529,171585],"source":"\\n<p>The starting index of the section to reverse.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to reverse.&lt;/p&gt;\\n","pos":[171649,171709],"source":"\\n<p>The number of elements in the section to reverse.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[171828,171881],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[171970,172018],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[172135,172268],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[172365,172460],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n"},{"pos":[172816,172839],"content":"SetValue(Object, Int32)","needQuote":true,"nodes":[{"content":"SetValue(Object, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The new value for the specified element.&lt;/p&gt;\\n","pos":[173703,173754],"source":"\\n<p>The new value for the specified element.</p>\\n"},{"pos":[175395,175420],"content":"SetValue(Object, Int32[])","needQuote":true,"nodes":[{"content":"SetValue(Object, Int32[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The new value for the specified element.&lt;/p&gt;\\n","pos":[176327,176378],"source":"\\n<p>The new value for the specified element.</p>\\n"},{"content":"\\n&lt;p&gt;A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.&lt;/p&gt;\\n","pos":[176445,176572],"source":"\\n<p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;indices&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[176691,176746],"source":"\\n<p>\\n<em>indices</em> is <strong>null</strong>.</p>\\n"},{"pos":[178353,178364],"content":"Sort(Array)","needQuote":true,"nodes":[{"content":"Sort(Array)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[179626,179679],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[179768,179816],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[180676,180694],"content":"Sort(Array, Array)","needQuote":true,"nodes":[{"content":"Sort(Array, Array)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[182571,182623],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;items&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;, and the length of &lt;em&gt;keys&lt;/em&gt; is greater than the length of &lt;em&gt;items&lt;/em&gt;.&lt;/p&gt;\\n","pos":[183063,183198],"source":"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n"},{"pos":[184316,184345],"content":"Sort(Array, Array, IComparer)","needQuote":true,"nodes":[{"content":"Sort(Array, Array, IComparer)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[186687,186739],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;items&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;, and the length of &lt;em&gt;keys&lt;/em&gt; is greater than the length of &lt;em&gt;items&lt;/em&gt;.","pos":[187179,187308],"source":"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The implementation of &lt;em&gt;comparer&lt;/em&gt; caused an error during the sort.","pos":[187309,187403],"source":" </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparer&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[187404,187495],"source":" For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[188661,188693],"content":"Sort(Array, Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"Sort(Array, Array, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[190625,190676],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[190740,190795],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[190914,190966],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[191426,191558],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"pos":[193323,193366],"content":"Sort(Array, Array, Int32, Int32, IComparer)","needQuote":true,"nodes":[{"content":"Sort(Array, Array, Int32, Int32, IComparer)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[195424,195475],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[195539,195594],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[196112,196164],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[196624,196756],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"pos":[198886,198908],"content":"Sort(Array, IComparer)","needQuote":true,"nodes":[{"content":"Sort(Array, IComparer)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to sort.&lt;/p&gt;\\n","pos":[199913,199958],"source":"\\n<p>The one-dimensional array to sort.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[200387,200440],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[200529,200577],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;The implementation of &lt;em&gt;comparer&lt;/em&gt; caused an error during the sort.","pos":[200997,201074],"source":"\\n<p>The implementation of <em>comparer</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparer&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[201075,201166],"source":" For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[201888,201913],"content":"Sort(Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"Sort(Array, Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[203222,203273],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[203337,203392],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[203511,203564],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[203653,203701],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[203818,203951],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[204048,204143],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n"},{"pos":[205143,205179],"content":"Sort(Array, Int32, Int32, IComparer)","needQuote":true,"nodes":[{"content":"Sort(Array, Int32, Int32, IComparer)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[206470,206521],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[206585,206640],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[207158,207211],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[207300,207348],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[207465,207598],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.","pos":[207695,207784],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The implementation of &lt;em&gt;comparer&lt;/em&gt; caused an error during the sort.","pos":[207785,207879],"source":" </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparer&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[207880,207971],"source":" For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[208940,208952],"content":"Sort<T>(T[])","needQuote":true,"nodes":[{"content":"Sort&lt;T&gt;(T[])","pos":[0,12],"source":"Sort<T>(T[])"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[210159,210208],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[210327,210380],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"pos":[211442,211468],"content":"Sort<T>(T[], IComparer<T>)","needQuote":true,"nodes":[{"content":"Sort&lt;T&gt;(T[], IComparer&lt;T&gt;)","pos":[0,26],"source":"Sort<T>(T[], IComparer<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[213116,213165],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[213284,213337],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The implementation of &lt;em&gt;comparer&lt;/em&gt; caused an error during the sort.","pos":[213767,213844],"source":"\\n<p>The implementation of <em>comparer</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparer&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[213845,213936],"source":" For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[214855,214882],"content":"Sort<T>(T[], Comparison<T>)","needQuote":true,"nodes":[{"content":"Sort&lt;T&gt;(T[], Comparison&lt;T&gt;)","pos":[0,27],"source":"Sort<T>(T[], Comparison<T>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[216079,216128],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;comparison&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[216247,216369],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>comparison</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The implementation of &lt;em&gt;comparison&lt;/em&gt; caused an error during the sort.","pos":[216466,216545],"source":"\\n<p>The implementation of <em>comparison</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparison&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[216546,216639],"source":" For example, <em>comparison</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[217444,217470],"content":"Sort<T>(T[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Sort&lt;T&gt;(T[], Int32, Int32)","pos":[0,26],"source":"Sort<T>(T[], Int32, Int32)"}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[218789,218840],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[218904,218959],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[219013,219062],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[219181,219234],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[219351,219484],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219581,219676],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n"},{"pos":[220886,220926],"content":"Sort<T>(T[], Int32, Int32, IComparer<T>)","needQuote":true,"nodes":[{"content":"Sort&lt;T&gt;(T[], Int32, Int32, IComparer&lt;T&gt;)","pos":[0,40],"source":"Sort<T>(T[], Int32, Int32, IComparer<T>)"}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[222316,222367],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[222431,222486],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[222980,223029],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[223148,223201],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[223318,223451],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.","pos":[223548,223637],"source":"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The implementation of &lt;em&gt;comparer&lt;/em&gt; caused an error during the sort.","pos":[223638,223732],"source":" </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparer&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[223733,223824],"source":" For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[225095,225131],"content":"Sort<TKey, TValue>(TKey[], TValue[])","needQuote":true,"nodes":[{"content":"Sort&lt;TKey, TValue&gt;(TKey[], TValue[])","pos":[0,36],"source":"Sort<TKey, TValue>(TKey[], TValue[])"}]},{"content":"\\n&lt;p&gt;The type of the elements of the key array.&lt;/p&gt;\\n","pos":[226836,226889],"source":"\\n<p>The type of the elements of the key array.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the items array.&lt;/p&gt;\\n","pos":[226928,226983],"source":"\\n<p>The type of the elements of the items array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[227102,227154],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;items&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;, and the lower bound of &lt;em&gt;keys&lt;/em&gt; does not match the lower bound of &lt;em&gt;items&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;items&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;, and the length of &lt;em&gt;keys&lt;/em&gt; is greater than the length of &lt;em&gt;items&lt;/em&gt;.&lt;/p&gt;\\n","pos":[227251,227541],"source":"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n"},{"pos":[228901,228954],"content":"Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)","needQuote":true,"nodes":[{"content":"Sort&lt;TKey, TValue&gt;(TKey[], TValue[], IComparer&lt;TKey&gt;)","pos":[0,53],"source":"Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the key array.&lt;/p&gt;\\n","pos":[231205,231258],"source":"\\n<p>The type of the elements of the key array.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the items array.&lt;/p&gt;\\n","pos":[231297,231352],"source":"\\n<p>The type of the elements of the items array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[231471,231523],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;items&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;, and the lower bound of &lt;em&gt;keys&lt;/em&gt; does not match the lower bound of &lt;em&gt;items&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;items&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;, and the length of &lt;em&gt;keys&lt;/em&gt; is greater than the length of &lt;em&gt;items&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The implementation of &lt;em&gt;comparer&lt;/em&gt; caused an error during the sort.","pos":[231620,231998],"source":"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort."},{"content":"For example, &lt;em&gt;comparer&lt;/em&gt; might not return 0 when comparing an item with itself.&lt;/p&gt;\\n","pos":[231999,232090],"source":" For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n"},{"pos":[233552,233602],"content":"Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Sort&lt;TKey, TValue&gt;(TKey[], TValue[], Int32, Int32)","pos":[0,50],"source":"Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)"}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[235424,235475],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[235539,235594],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the key array.&lt;/p&gt;\\n","pos":[235651,235704],"source":"\\n<p>The type of the elements of the key array.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the items array.&lt;/p&gt;\\n","pos":[235743,235798],"source":"\\n<p>The type of the elements of the items array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[235917,235969],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[236086,236218],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"pos":[238416,238483],"content":"Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"Sort&lt;TKey, TValue&gt;(TKey[], TValue[], Int32, Int32, IComparer&lt;TKey&gt;)","pos":[0,67],"source":"Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The starting index of the range to sort.&lt;/p&gt;\\n","pos":[240468,240519],"source":"\\n<p>The starting index of the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to sort.&lt;/p&gt;\\n","pos":[240583,240638],"source":"\\n<p>The number of elements in the range to sort.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the key array.&lt;/p&gt;\\n","pos":[241138,241191],"source":"\\n<p>The type of the elements of the key array.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the items array.&lt;/p&gt;\\n","pos":[241230,241285],"source":"\\n<p>The type of the elements of the items array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[241404,241456],"source":"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[241573,241705],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n"},{"pos":[244222,244239],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;Adding a value to an array is not supported.","pos":[245192,245241],"source":"\\n<p>Adding a value to an array is not supported."},{"content":"No value is returned.","pos":[245242,245263]},{"content":"&lt;/p&gt;\\n","pos":[245264,245270],"source":" </p>\\n"},{"pos":[245939,245952],"content":"IList.Clear()","needQuote":true,"nodes":[{"content":"IList.Clear()","pos":[0,13]}]},{"pos":[247263,247285],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The object to locate in the current list.","pos":[248068,248114],"source":"\\n<p>The object to locate in the current list."},{"content":"The element to locate can be &lt;strong&gt;null&lt;/strong&gt; for reference types.&lt;/p&gt;\\n","pos":[248115,248192],"source":" The element to locate can be <strong>null</strong> for reference types.</p>\\n"},{"pos":[248946,248967],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The object to locate in the current list.&lt;/p&gt;\\n","pos":[249751,249803],"source":"\\n<p>The object to locate in the current list.</p>\\n"},{"content":"\\n&lt;p&gt;The index of value if found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[249862,249928],"source":"\\n<p>The index of value if found in the list; otherwise, -1.</p>\\n"},{"pos":[250464,250491],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[251296,251360],"source":"\\n<p>The index at which <em>value</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The object to insert.&lt;/p&gt;\\n","pos":[251424,251456],"source":"\\n<p>The object to insert.</p>\\n"},{"pos":[252849,252869],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"pos":[254629,254650],"content":"IList.RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"IList.RemoveAt(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The index of the element to remove.&lt;/p&gt;\\n","pos":[255413,255459],"source":"\\n<p>The index of the element to remove.</p>\\n"},{"pos":[256709,256759],"content":"IStructuralComparable.CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"IStructuralComparable.CompareTo(Object, IComparer)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.&lt;/p&gt;\\n","pos":[257709,257768],"source":"\\n<p>The object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that compares the current object and &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n","pos":[257850,257923],"source":"\\n<p>An object that compares the current object and <em>other</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An integer that indicates the relationship of the current collection object to other, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance precedes &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance and &lt;em&gt;other&lt;/em&gt; are equal.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance follows &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[257982,258474],"source":"\\n<p>An integer that indicates the relationship of the current collection object to other, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>-1</p>\\n</td><td>\\n<p>The current instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>0</p>\\n</td><td>\\n<p>The current instance and <em>other</em> are equal.</p>\\n</td></tr><tr><td>\\n<p>1</p>\\n</td><td>\\n<p>The current instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[259261,259315],"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.&lt;/p&gt;\\n","pos":[260197,260256],"source":"\\n<p>The object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that determines whether the current instance and &lt;em&gt;other&lt;/em&gt; are equal.","pos":[260346,260435],"source":"\\n<p>An object that determines whether the current instance and <em>other</em> are equal."},{"content":"&lt;/p&gt;\\n","pos":[260436,260442],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[260503,260602],"source":"\\n<p>\\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[261378,261429],"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;An object that computes the hash code of the current object.&lt;/p&gt;\\n","pos":[262298,262369],"source":"\\n<p>An object that computes the hash code of the current object.</p>\\n"},{"content":"\\n&lt;p&gt;The hash code for the current instance.&lt;/p&gt;\\n","pos":[262428,262478],"source":"\\n<p>The hash code for the current instance.</p>\\n"},{"pos":[263081,263113],"content":"TrueForAll<T>(T[], Predicate<T>)","needQuote":true,"nodes":[{"content":"TrueForAll&lt;T&gt;(T[], Predicate&lt;T&gt;)","pos":[0,32],"source":"TrueForAll<T>(T[], Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The predicate that defines the conditions to check against the elements.&lt;/p&gt;\\n","pos":[264082,264165],"source":"\\n<p>The predicate that defines the conditions to check against the elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the array.&lt;/p&gt;\\n","pos":[264219,264268],"source":"\\n<p>The type of the elements of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if every element in &lt;em&gt;array&lt;/em&gt; matches the conditions defined by the specified predicate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[264329,264486],"source":"\\n<p>\\n<strong>true</strong> if every element in <em>array</em> matches the conditions defined by the specified predicate; otherwise, <strong>false</strong>."},{"content":"If there are no elements in the array, the return value is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[264487,264574],"source":" If there are no elements in the array, the return value is <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[264693,264810],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[265396,265402],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[265533,265539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[265707,265712],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[265907,265918],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[266131,266142],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[266365,266386],"content":"IStructuralComparable","needQuote":true,"nodes":[{"content":"IStructuralComparable","pos":[0,21]}]},{"pos":[266638,266658],"content":"IStructuralEquatable","needQuote":true,"nodes":[{"content":"IStructuralEquatable","pos":[0,20]}]},{"pos":[266884,266894],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[266989,266997],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[267066,267067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[267094,267095],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[267165,267173],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[267242,267243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[267270,267271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[267454,267468],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[267587,267593],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[267660,267661],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[267711,267717],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[267777,267778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[267861,267867],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[267934,267935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[267985,267991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[268051,268052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[268266,268288],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[268436,268442],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[268509,268510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[268560,268566],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[268627,268628]},{"pos":[268683,268689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[268749,268750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[268847,268853],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[268920,268921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[268971,268977],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[269038,269039]},{"pos":[269094,269100],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[269160,269161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[269406,269437],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[269603,269618],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[269694,269695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[269745,269751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[269812,269813]},{"pos":[269868,269874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[269934,269935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[270041,270056],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[270132,270133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[270183,270189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[270250,270251]},{"pos":[270306,270312],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[270372,270373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[270603,270616],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[270717,270728],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[270800,270801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[270828,270829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[270902,270913],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[270985,270986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[271013,271014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[271189,271198],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[271291,271298],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[271366,271367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[271394,271395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[271464,271471],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[271539,271540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[271567,271568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[271743,271760],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[271869,271884],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[271960,271961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[271988,271989],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[272066,272081],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[272157,272158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[272185,272186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[272343,272361],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[272527,272532],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[272721,272726],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[272984,272998],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[273228,273235],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[273433,273441],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[273693,273704],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[273946,273956],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[274202,274213],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[274430,274434],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[274490,274491]},{"pos":[274543,274548],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[274608,274609]},{"pos":[274703,274707],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[274762,274763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[274812,274817],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[274876,274877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[275089,275094],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[275263,275272],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[275407,275410],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[275486,275487],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[275515,275517]},{"pos":[275559,275560],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[275587,275589],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[275687,275688],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[275777,275778],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[275958,275970],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[276181,276190],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[276252,276253],"content":"<","needQuote":true,"nodes":[]},{"pos":[276280,276281],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[276399,276408],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[276471,276474]},{"pos":[276508,276509],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[276536,276537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[276749,276761],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[276972,276981],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[277043,277044],"content":"<","needQuote":true,"nodes":[]},{"pos":[277071,277072],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[277190,277199],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[277262,277265]},{"pos":[277299,277300],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[277327,277328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[277525,277551],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[277816,277836],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[278014,278020],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[278083,278084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[278133,278138],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[278177,278178]},{"pos":[278232,278237],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[278296,278297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[278409,278415],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[278478,278479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[278528,278533],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[278572,278573]},{"pos":[278627,278632],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[278691,278692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[278902,278906],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[279009,279016],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[279140,279145],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[279205,279207]},{"pos":[279271,279276],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[279335,279337],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[279493,279505],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[279656,279665],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[279707,279708],"content":"<","needQuote":true,"nodes":[]},{"pos":[279735,279736],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[279834,279843],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[279886,279889]},{"pos":[279923,279924],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[279951,279952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[280124,280136],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[280287,280296],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[280338,280339],"content":"<","needQuote":true,"nodes":[]},{"pos":[280366,280367],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[280465,280474],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[280517,280520]},{"pos":[280554,280555],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[280582,280583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[280819,280834],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[280973,280986],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[281056,281057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[281084,281085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[281177,281190],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[281260,281261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[281288,281289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[281505,281516],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[281723,281736],"content":"Comparison<T>","needQuote":true,"nodes":[{"content":"Comparison&lt;T&gt;","pos":[0,13],"source":"Comparison<T>"}]},{"pos":[281891,281901],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"pos":[281944,281945],"content":"<","needQuote":true,"nodes":[]},{"pos":[281972,281973],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[282072,282082],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"content":"(Of","pos":[282126,282129]},{"pos":[282163,282164],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[282191,282192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[282368,282381],"content":"Comparison<T>","needQuote":true,"nodes":[{"content":"Comparison&lt;T&gt;","pos":[0,13],"source":"Comparison<T>"}]},{"pos":[282536,282546],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"pos":[282589,282590],"content":"<","needQuote":true,"nodes":[]},{"pos":[282617,282618],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[282717,282727],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"content":"(Of","pos":[282771,282774]},{"pos":[282808,282809],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[282836,282837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[282981,282987],"content":"TKey[]","needQuote":true,"nodes":[{"content":"TKey[]","pos":[0,6]}]},{"pos":[283072,283076],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":"[]","pos":[283107,283109]},{"pos":[283151,283155],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[283185,283187],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[283282,283290],"content":"TValue[]","needQuote":true,"nodes":[{"content":"TValue[]","pos":[0,8]}]},{"pos":[283381,283387],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"content":"[]","pos":[283420,283422]},{"pos":[283464,283470],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[283502,283504],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[283725,283740],"content":"IComparer<TKey>","needQuote":true,"nodes":[{"content":"IComparer&lt;TKey&gt;","pos":[0,15],"source":"IComparer<TKey>"}]},{"pos":[283960,283969],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[284031,284032],"content":"<","needQuote":true,"nodes":[]},{"pos":[284059,284063],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[284184,284193],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[284256,284259]},{"pos":[284293,284297],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[284327,284328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[284585,284596],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[284731,284734],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[284788,284789],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[284839,284845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[284905,284906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[284997,285000],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[285054,285055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[285105,285111],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[285171,285172],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[285383,285390],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[285501,285506],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[285562,285563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[285590,285591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[285669,285674],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[285730,285731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[285758,285759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[285970,285986],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[286131,286139],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[286198,286199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[286249,286255],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[286315,286316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[286412,286420],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[286479,286480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[286530,286536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[286596,286597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[286834,286849],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[286992,286999],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[287057,287058],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[287108,287114],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[287174,287175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[287270,287277],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[287335,287336],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[287386,287392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[287452,287453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[287700,287721],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[287889,287895],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[287952,287953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[288002,288007],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[288067,288068]},{"pos":[288123,288129],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[288189,288190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[288297,288303],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[288360,288361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[288410,288415],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[288475,288476]},{"pos":[288531,288537],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[288597,288598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[288850,288864],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[289005,289011],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[289068,289069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[289119,289125],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[289185,289186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[289280,289286],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[289343,289344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[289394,289400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[289460,289461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[289694,289709],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[289852,289860],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[289919,289920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[289969,289974],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[290033,290034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[290129,290137],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[290196,290197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[290246,290251],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[290310,290311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[290609,290637],"content":"CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"CompareTo(Object, IComparer)","pos":[0,28]}]},{"pos":[290875,290884],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[290960,290961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[291011,291017],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[291078,291079]},{"pos":[291149,291158],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[291212,291213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[291355,291364],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[291440,291441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[291491,291497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[291558,291559]},{"pos":[291629,291638],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[291692,291693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[292070,292103],"content":"Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Equals(Object, IEqualityComparer)","pos":[0,33]}]},{"pos":[292349,292355],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[292427,292428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[292478,292484],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[292545,292546]},{"pos":[292624,292641],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[292703,292704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[292850,292856],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[292928,292929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[292979,292985],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[293046,293047]},{"pos":[293125,293142],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[293204,293205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[293508,293525],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[293836,293866],"content":"GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"GetHashCode(IEqualityComparer)","pos":[0,30]}]},{"pos":[294093,294104],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[294181,294182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[294255,294272],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[294334,294335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[294472,294483],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[294560,294561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[294634,294651],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[294713,294714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[294964,294981],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[295163,295190],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[295409,295426],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[295602,295623],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[295803,295816],"content":"RankException","needQuote":true,"nodes":[{"content":"RankException","pos":[0,13]}]},{"pos":[296001,296026],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[296229,296253],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[296455,296481],"content":"ArrayTypeMismatchException","needQuote":true,"nodes":[{"content":"ArrayTypeMismatchException","pos":[0,26]}]},{"pos":[296683,296703],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[296905,296926],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[297115,297137],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]}],"content":"items:\n- uid: System.Array\n  commentId: T:System.Array\n  id: Array\n  parent: System\n  children:\n  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  - System.Array.BinarySearch(System.Array,System.Object)\n  - System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)\n  - System.Array.BinarySearch``1(``0[],``0)\n  - System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})\n  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)\n  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})\n  - System.Array.Clear(System.Array,System.Int32,System.Int32)\n  - System.Array.Clone\n  - System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  - System.Array.Copy(System.Array,System.Array,System.Int32)\n  - System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  - System.Array.CopyTo(System.Array,System.Int32)\n  - System.Array.CreateInstance(System.Type,System.Int32)\n  - System.Array.CreateInstance(System.Type,System.Int32[])\n  - System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])\n  - System.Array.Empty``1\n  - System.Array.Exists``1(``0[],System.Predicate{``0})\n  - System.Array.Find``1(``0[],System.Predicate{``0})\n  - System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  - System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})\n  - System.Array.FindIndex``1(``0[],System.Predicate{``0})\n  - System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})\n  - System.Array.FindLastIndex``1(``0[],System.Predicate{``0})\n  - System.Array.GetEnumerator\n  - System.Array.GetLength(System.Int32)\n  - System.Array.GetLowerBound(System.Int32)\n  - System.Array.GetUpperBound(System.Int32)\n  - System.Array.GetValue(System.Int32)\n  - System.Array.GetValue(System.Int32[])\n  - System.Array.IndexOf(System.Array,System.Object)\n  - System.Array.IndexOf(System.Array,System.Object,System.Int32)\n  - System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  - System.Array.IndexOf``1(``0[],``0)\n  - System.Array.IndexOf``1(``0[],``0,System.Int32)\n  - System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)\n  - System.Array.Initialize\n  - System.Array.LastIndexOf(System.Array,System.Object)\n  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32)\n  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  - System.Array.LastIndexOf``1(``0[],``0)\n  - System.Array.LastIndexOf``1(``0[],``0,System.Int32)\n  - System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)\n  - System.Array.Length\n  - System.Array.Rank\n  - System.Array.Resize``1(``0[]@,System.Int32)\n  - System.Array.Reverse(System.Array)\n  - System.Array.Reverse(System.Array,System.Int32,System.Int32)\n  - System.Array.SetValue(System.Object,System.Int32)\n  - System.Array.SetValue(System.Object,System.Int32[])\n  - System.Array.Sort(System.Array)\n  - System.Array.Sort(System.Array,System.Array)\n  - System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)\n  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)\n  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  - System.Array.Sort(System.Array,System.Collections.IComparer)\n  - System.Array.Sort(System.Array,System.Int32,System.Int32)\n  - System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  - System.Array.Sort``1(``0[])\n  - System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})\n  - System.Array.Sort``1(``0[],System.Comparison{``0})\n  - System.Array.Sort``1(``0[],System.Int32,System.Int32)\n  - System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  - System.Array.Sort``2(``0[],``1[])\n  - System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\n  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)\n  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  - System.Array.System#Collections#ICollection#Count\n  - System.Array.System#Collections#ICollection#IsSynchronized\n  - System.Array.System#Collections#ICollection#SyncRoot\n  - System.Array.System#Collections#IList#Add(System.Object)\n  - System.Array.System#Collections#IList#Clear\n  - System.Array.System#Collections#IList#Contains(System.Object)\n  - System.Array.System#Collections#IList#IndexOf(System.Object)\n  - System.Array.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Array.System#Collections#IList#IsFixedSize\n  - System.Array.System#Collections#IList#IsReadOnly\n  - System.Array.System#Collections#IList#Item(System.Int32)\n  - System.Array.System#Collections#IList#Remove(System.Object)\n  - System.Array.System#Collections#IList#RemoveAt(System.Int32)\n  - System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  - System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  - System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  - System.Array.TrueForAll``1(``0[],System.Predicate{``0})\n  langs:\n  - csharp\n  - vb\n  name: Array\n  fullName: System.Array\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Array\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 26\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class Array : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class Array\n          Implements ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Type\n    commentId: T:System.Type\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  - System.Collections.IStructuralComparable\n  - System.Collections.IStructuralEquatable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Array\n- uid: System.Array.Length\n  commentId: P:System.Array.Length\n  id: Length\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Array.Length\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the total number of elements in all the dimensions of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      public int Length\n\n      {\n          [SecuritySafeCritical]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public ReadOnly Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The total number of elements in all the dimensions of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; zero if there are no elements in the array.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The array is multidimensional and contains more than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements.</p>\\n\"\n  seealso:\n  - type: System.Array.GetLength(System.Int32)\n    commentId: M:System.Array.GetLength(System.Int32)\n  - type: System.Array.GetUpperBound(System.Int32)\n    commentId: M:System.Array.GetUpperBound(System.Int32)\n  - type: System.Array.GetLowerBound(System.Int32)\n    commentId: M:System.Array.GetLowerBound(System.Int32)\n  - type: System.Array.LongLength\n    commentId: P:System.Array.LongLength\n  - type: System.Collections.ICollection.Count\n    commentId: P:System.Collections.ICollection.Count\n  - type: System.Array.Rank\n    commentId: P:System.Array.Rank\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Array.Length\n- uid: System.Array.Rank\n  commentId: P:System.Array.Rank\n  id: Rank\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Rank\n  fullName: System.Array.Rank\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the rank (number of dimensions) of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on. </p>\\n\"\n  syntax:\n    content: >-\n      public int Rank\n\n      {\n          [SecuritySafeCritical]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public ReadOnly Property Rank As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The rank (number of dimensions) of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.Length\n    commentId: P:System.Array.Length\n  - type: System.Array.GetLength(System.Int32)\n    commentId: M:System.Array.GetLength(System.Int32)\n  - type: System.Array.LongLength\n    commentId: P:System.Array.LongLength\n  - type: System.Array.GetLongLength(System.Int32)\n    commentId: M:System.Array.GetLongLength(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Array.Rank\n- uid: System.Array.System#Collections#ICollection#Count\n  commentId: P:System.Array.System#Collections#ICollection#Count\n  id: System#Collections#ICollection#Count\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: ICollection.Count\n  fullName: System.Array.System.Collections.ICollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.Count\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 663\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int ICollection.Count { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the collection.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.Count\n  nameWithType: Array.ICollection.Count\n  nameWithType.vb: Array.System.Collections.ICollection.Count\n- uid: System.Array.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Array.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Array.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 73\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: Array.ICollection.IsSynchronized\n  nameWithType.vb: Array.System.Collections.ICollection.IsSynchronized\n- uid: System.Array.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Array.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Array.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 74\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: Array.ICollection.SyncRoot\n  nameWithType.vb: Array.System.Collections.ICollection.SyncRoot\n- uid: System.Array.System#Collections#IList#IsFixedSize\n  commentId: P:System.Array.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Array.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 75\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: Array.IList.IsFixedSize\n  nameWithType.vb: Array.System.Collections.IList.IsFixedSize\n- uid: System.Array.System#Collections#IList#IsReadOnly\n  commentId: P:System.Array.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Array.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 76\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: Array.IList.IsReadOnly\n  nameWithType.vb: Array.System.Collections.IList.IsReadOnly\n- uid: System.Array.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Array.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Array.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.this[]\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 688\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the element to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ICollection.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> does not have exactly one dimension.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Array.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: Array.IList.Item[Int32]\n  nameWithType.vb: Array.System.Collections.IList.Item(Int32)\n- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Array, Int32, Int32, Object)\n  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 846\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface implemented by each element of the array and by the specified value.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch(Array array, int index, int length, object value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The sorted one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to search.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The length of the range to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, and the search encounters an element that does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object)\n- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Array, Int32, Int32, Object, IComparer)\n  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 891\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object, comparer As IComparer) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The sorted one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to search.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The length of the range to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, <em>value</em> does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, and the search encounters an element that does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)\n- uid: System.Array.BinarySearch(System.Array,System.Object)\n  commentId: M:System.Array.BinarySearch(System.Array,System.Object)\n  id: BinarySearch(System.Array,System.Object)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Array, Object)\n  fullName: System.Array.BinarySearch(System.Array, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 822\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches an entire one-dimensional sorted array for a specific element, using the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface implemented by each element of the array and by the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch(Array array, object value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(array As Array, value As Object) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The sorted one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n<p></p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, and the search encounters an element that does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.BinarySearch(Array, Object)\n- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)\n  commentId: M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)\n  id: BinarySearch(System.Array,System.Object,System.Collections.IComparer)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Array, Object, IComparer)\n  fullName: System.Array.BinarySearch(System.Array, System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 866\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches an entire one-dimensional sorted array for a value using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch(Array array, object value, IComparer comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(array As Array, value As Object, comparer As IComparer) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The sorted one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, <em>value</em> does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, and the search encounters an element that does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.BinarySearch(Array, Object, IComparer)\n- uid: System.Array.BinarySearch``1(``0[],``0)\n  commentId: M:System.Array.BinarySearch``1(``0[],``0)\n  id: BinarySearch``1(``0[],``0)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch<T>(T[], T)\n  fullName: System.Array.BinarySearch<T>(T[], T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 966\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches an entire one-dimensional sorted array for a specific element, using the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implemented by each element of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and by the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch<T>(T[] array, T value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(Of T)(array As T(), value As T) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The sorted one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>T</em> does not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.BinarySearch(Of T)(T(), T)\n  name.vb: BinarySearch(Of T)(T(), T)\n  nameWithType: Array.BinarySearch<T>(T[], T)\n  nameWithType.vb: Array.BinarySearch(Of T)(T(), T)\n- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})\n  commentId: M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})\n  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch<T>(T[], T, IComparer<T>)\n  fullName: System.Array.BinarySearch<T>(T[], T, System.Collections.Generic.IComparer<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 975\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches an entire one-dimensional sorted array for a value using the specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(Of T)(array As T(), value As T, comparer As IComparer(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The sorted one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search. </p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>T</em> does not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.BinarySearch(Of T)(T(), T, System.Collections.Generic.IComparer(Of T))\n  name.vb: BinarySearch(Of T)(T(), T, IComparer(Of T))\n  nameWithType: Array.BinarySearch<T>(T[], T, IComparer<T>)\n  nameWithType.vb: Array.BinarySearch(Of T)(T(), T, IComparer(Of T))\n- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)\n  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)\n  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch<T>(T[], Int32, Int32, T)\n  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 984\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implemented by each element of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and by the specified value.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch<T>(T[] array, int index, int length, T value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The sorted one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to search.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The length of the range to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>T</em> does not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T)\n  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T)\n  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T)\n  nameWithType.vb: Array.BinarySearch(Of T)(T(), Int32, Int32, T)\n- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})\n  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})\n  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)\n  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 990\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The sorted one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to search.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The length of the range to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to search for.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and <em>T</em> does not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.Sort(System.Array)\n    commentId: M:System.Array.Sort(System.Array)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))\n  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))\n  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)\n  nameWithType.vb: Array.BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))\n- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)\n  commentId: M:System.Array.Clear(System.Array,System.Int32,System.Int32)\n  id: Clear(System.Array,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Clear(Array, Int32, Int32)\n  fullName: System.Array.Clear(System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sets a range of elements in an array to the default value of each element type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void Clear(Array array, int index, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub Clear(array As Array, index As Integer, length As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The array whose elements need to be cleared.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range of elements to clear.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements to clear.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The sum of <em>index</em> and <em>length</em> is greater than the size of <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Clear(Array, Int32, Int32)\n- uid: System.Array.Clone\n  commentId: M:System.Array.Clone\n  id: Clone\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Array.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clone\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 730\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates a shallow copy of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public object Clone()\n    content.vb: Public Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.Copy(System.Array,System.Array,System.Int32)\n    commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)\n  - type: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n    commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.Clone()\n- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)\n  fullName: System.Array.ConstrainedCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConstrainedCopy\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 305\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a range of elements from an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> starting at the specified source index and pastes them to another <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub ConstrainedCopy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)\n    parameters:\n    - id: sourceArray\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the data to copy.</p>\\n\"\n    - id: sourceIndex\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.</p>\\n\"\n    - id: destinationArray\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that receives the data.</p>\\n\"\n    - id: destinationIndex\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the number of elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>sourceArray</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationArray</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\\n\"\n  - type: System.ArrayTypeMismatchException\n    commentId: T:System.ArrayTypeMismatchException\n    description: \"\\n<p>The <em>sourceArray</em> type is neither the same as nor derived from the <em>destinationArray</em> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.Copy(System.Array,System.Array,System.Int32)\n    commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)\n  - type: System.Array.Clone\n    commentId: M:System.Array.Clone\n  - type: System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n    commentId: T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n  - type: System.Runtime.ConstrainedExecution.Cer\n    commentId: T:System.Runtime.ConstrainedExecution.Cer\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)\n- uid: System.Array.Copy(System.Array,System.Array,System.Int32)\n  commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)\n  id: Copy(System.Array,System.Array,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Copy(Array, Array, Int32)\n  fullName: System.Array.Copy(System.Array, System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 262\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a range of elements from an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> starting at the first element and pastes them into another <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> starting at the first element. The length is specified as a 32-bit integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Copy(Array sourceArray, Array destinationArray, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Copy(sourceArray As Array, destinationArray As Array, length As Integer)\n    parameters:\n    - id: sourceArray\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the data to copy.</p>\\n\"\n    - id: destinationArray\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that receives the data.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the number of elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>sourceArray</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationArray</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\\n\"\n  - type: System.ArrayTypeMismatchException\n    commentId: T:System.ArrayTypeMismatchException\n    description: \"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>length</em> is greater than the number of elements in <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is greater than the number of elements in <em>destinationArray</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n    commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  - type: System.Array.Clone\n    commentId: M:System.Array.Clone\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Copy(Array, Array, Int32)\n- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Copy(Array, Int32, Array, Int32, Int32)\n  fullName: System.Array.Copy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 284\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a range of elements from an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> starting at the specified source index and pastes them to another <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Copy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)\n    parameters:\n    - id: sourceArray\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the data to copy.</p>\\n\"\n    - id: sourceIndex\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.</p>\\n\"\n    - id: destinationArray\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that receives the data.</p>\\n\"\n    - id: destinationIndex\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the number of elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>sourceArray</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationArray</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\\n\"\n  - type: System.ArrayTypeMismatchException\n    commentId: T:System.ArrayTypeMismatchException\n    description: \"\\n<p>\\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n    commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  - type: System.Array.Clone\n    commentId: M:System.Array.Clone\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Copy(Array, Int32, Array, Int32, Int32)\n- uid: System.Array.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Array.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Array.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1030\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Array array, int index)\n    content.vb: Public Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional array that is the destination of the elements copied from the current array.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source array is greater than the available number of elements from <em>index</em> to the end of the destination <em>array</em>.</p>\\n\"\n  - type: System.ArrayTypeMismatchException\n    commentId: T:System.ArrayTypeMismatchException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>The source array is multidimensional.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>At least one element in the source <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast to the type of destination <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Array.Copy(System.Array,System.Array,System.Int32)\n    commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.CopyTo(Array, Int32)\n- uid: System.Array.CreateInstance(System.Type,System.Int32)\n  commentId: M:System.Array.CreateInstance(System.Type,System.Int32)\n  id: CreateInstance(System.Type,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(Type, Int32)\n  fullName: System.Array.CreateInstance(System.Type, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateInstance\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and length, with zero-based indexing.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static Array CreateInstance(Type elementType, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function CreateInstance(elementType As Type, length As Integer) As Array\n    parameters:\n    - id: elementType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The size of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    return:\n      type: System.Array\n      description: \"\\n<p>A new one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified length, using zero-based indexing.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>elementType</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>elementType</em> is not a valid <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>elementType</em> is not supported. For example, <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported.</p>\\n<p>-or-</p>\\n<p>\\n<em>elementType</em> is an open generic type.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.CreateInstance(Type, Int32)\n- uid: System.Array.CreateInstance(System.Type,System.Int32[])\n  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[])\n  id: CreateInstance(System.Type,System.Int32[])\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(Type, Int32[])\n  fullName: System.Array.CreateInstance(System.Type, System.Int32[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateInstance\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 132\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates a multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static Array CreateInstance(Type elementType, params int[] lengths)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function CreateInstance(elementType As Type, ParamArray lengths As Integer()) As Array\n    parameters:\n    - id: elementType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    - id: lengths\n      type: System.Int32[]\n      description: \"\\n<p>An array of 32-bit integers that represent the size of each dimension of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    return:\n      type: System.Array\n      description: \"\\n<p>A new multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified length for each dimension, using zero-based indexing.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>elementType</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>lengths</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>elementType</em> is not a valid <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The <em>lengths</em> array contains less than one element.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>elementType</em> is not supported. For example, <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported. </p>\\n<p>-or-</p>\\n<p>\\n<em>elementType</em> is an open generic type.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Any value in <em>lengths</em> is less than zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32())\n  name.vb: CreateInstance(Type, Int32())\n  nameWithType: Array.CreateInstance(Type, Int32[])\n  nameWithType.vb: Array.CreateInstance(Type, Int32())\n- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])\n  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])\n  id: CreateInstance(System.Type,System.Int32[],System.Int32[])\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(Type, Int32[], Int32[])\n  fullName: System.Array.CreateInstance(System.Type, System.Int32[], System.Int32[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateInstance\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 186\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates a multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and dimension lengths, with the specified lower bounds.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function CreateInstance(elementType As Type, lengths As Integer(), lowerBounds As Integer()) As Array\n    parameters:\n    - id: elementType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    - id: lengths\n      type: System.Int32[]\n      description: \"\\n<p>A one-dimensional array that contains the size of each dimension of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    - id: lowerBounds\n      type: System.Int32[]\n      description: \"\\n<p>A one-dimensional array that contains the lower bound (starting index) of each dimension of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create.</p>\\n\"\n    return:\n      type: System.Array\n      description: \"\\n<p>A new multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified length and lower bound for each dimension.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>elementType</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>lengths</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>lowerBounds</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>elementType</em> is not a valid <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The <em>lengths</em> array contains less than one element.</p>\\n<p>-or-</p>\\n<p>The <em>lengths</em> and <em>lowerBounds</em> arrays do not contain the same number of elements.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>elementType</em> is not supported. For example, <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported. </p>\\n<p>-or-</p>\\n<p>\\n<em>elementType</em> is an open generic type.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Any value in <em>lengths</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>Any value in <em>lowerBounds</em> is very large, such that the sum of a dimension's lower bound and length is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32(), System.Int32())\n  name.vb: CreateInstance(Type, Int32(), Int32())\n  nameWithType: Array.CreateInstance(Type, Int32[], Int32[])\n  nameWithType.vb: Array.CreateInstance(Type, Int32(), Int32())\n- uid: System.Array.Empty``1\n  commentId: M:System.Array.Empty``1\n  id: Empty``1\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Empty<T>()\n  fullName: System.Array.Empty<T>()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Empty\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1051\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an empty array.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static T[] Empty<T>()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function Empty(Of T) As T()\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: '{T}[]'\n      description: \"\\n<p>Returns an empty <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Empty(Of T)()\n  name.vb: Empty(Of T)()\n  nameWithType: Array.Empty<T>()\n  nameWithType.vb: Array.Empty(Of T)()\n- uid: System.Array.Exists``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  id: Exists``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Exists<T>(T[], Predicate<T>)\n  fullName: System.Array.Exists<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exists\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1062\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</p>\\n\"\n  syntax:\n    content: public static bool Exists<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function Exists(Of T)(array As T(), match As Predicate(Of T)) As Boolean\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the elements to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>array</em> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Array.TrueForAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Exists(Of T)(T(), System.Predicate(Of T))\n  name.vb: Exists(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.Exists<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.Exists(Of T)(T(), Predicate(Of T))\n- uid: System.Array.Find``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  id: Find``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Find<T>(T[], Predicate<T>)\n  fullName: System.Array.Find<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Find\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1066\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static T Find<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function Find(Of T)(array As T(), match As Predicate(Of T)) As T\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based array to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The predicate that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Find(Of T)(T(), System.Predicate(Of T))\n  name.vb: Find(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.Find<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.Find(Of T)(T(), Predicate(Of T))\n- uid: System.Array.FindAll``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  id: FindAll``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindAll<T>(T[], Predicate<T>)\n  fullName: System.Array.FindAll<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindAll\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1084\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\\n\"\n  syntax:\n    content: public static T[] FindAll<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function FindAll(Of T)(array As T(), match As Predicate(Of T)) As T()\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the elements to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: '{T}[]'\n      description: \"\\n<p>An <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindAll(Of T)(T(), System.Predicate(Of T))\n  name.vb: FindAll(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.FindAll<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.FindAll(Of T)(T(), Predicate(Of T))\n- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)\n  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindIndex\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1123\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that starts at the specified index and contains the specified number of elements.</p>\\n\"\n  syntax:\n    content: public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)\n    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))\n  name.vb: FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))\n  nameWithType: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)\n  nameWithType.vb: Array.FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))\n- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})\n  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})\n  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindIndex<T>(T[], Int32, Predicate<T>)\n  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindIndex\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1113\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the specified index to the last element.</p>\\n\"\n  syntax:\n    content: public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match)\n    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Predicate(Of T))\n  name.vb: FindIndex(Of T)(T(), Int32, Predicate(Of T))\n  nameWithType: Array.FindIndex<T>(T[], Int32, Predicate<T>)\n  nameWithType.vb: Array.FindIndex(Of T)(T(), Int32, Predicate(Of T))\n- uid: System.Array.FindIndex``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.FindIndex``1(``0[],System.Predicate{``0})\n  id: FindIndex``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindIndex<T>(T[], Predicate<T>)\n  fullName: System.Array.FindIndex<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindIndex\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1103\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static int FindIndex<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function FindIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Predicate(Of T))\n  name.vb: FindIndex(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.FindIndex<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.FindIndex(Of T)(T(), Predicate(Of T))\n- uid: System.Array.FindLast``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  id: FindLast``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindLast<T>(T[], Predicate<T>)\n  fullName: System.Array.FindLast<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindLast\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1149\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static T FindLast<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function FindLast(Of T)(array As T(), match As Predicate(Of T)) As T\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindLast(Of T)(T(), System.Predicate(Of T))\n  name.vb: FindLast(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.FindLast<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.FindLast(Of T)(T(), Predicate(Of T))\n- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)\n  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindLastIndex\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1185\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified number of elements and ends at the specified index.</p>\\n\"\n  syntax:\n    content: public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)\n    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))\n  name.vb: FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))\n  nameWithType: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)\n  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))\n- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})\n  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})\n  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindLastIndex<T>(T[], Int32, Predicate<T>)\n  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindLastIndex\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1176\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the first element to the specified index.</p>\\n\"\n  syntax:\n    content: public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match)\n    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Predicate(Of T))\n  name.vb: FindLastIndex(Of T)(T(), Int32, Predicate(Of T))\n  nameWithType: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)\n  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Int32, Predicate(Of T))\n- uid: System.Array.FindLastIndex``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})\n  id: FindLastIndex``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: FindLastIndex<T>(T[], Predicate<T>)\n  fullName: System.Array.FindLastIndex<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindLastIndex\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1167\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static int FindLastIndex<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Predicate`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that defines the conditions of the element to search for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Array.Find``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})\n  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Predicate(Of T))\n  name.vb: FindLastIndex(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.FindLastIndex<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Predicate(Of T))\n- uid: System.Array.GetEnumerator\n  commentId: M:System.Array.GetEnumerator\n  id: GetEnumerator\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Array.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1241\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.GetEnumerator()\n- uid: System.Array.GetLength(System.Int32)\n  commentId: M:System.Array.GetLength(System.Int32)\n  id: GetLength(System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: GetLength(Int32)\n  fullName: System.Array.GetLength(System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public int GetLength(int dimension)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Function GetLength(dimension As Integer) As Integer\n    parameters:\n    - id: dimension\n      type: System.Int32\n      description: \"\\n<p>A zero-based dimension of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose length needs to be determined.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the number of elements in the specified dimension.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>dimension</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>dimension</em> is equal to or greater than <xref href=\\\"System.Array.Rank\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.Length\n    commentId: P:System.Array.Length\n  - type: System.Array.GetLongLength(System.Int32)\n    commentId: M:System.Array.GetLongLength(System.Int32)\n  - type: System.Collections.ICollection.Count\n    commentId: P:System.Collections.ICollection.Count\n  - type: System.Array.Rank\n    commentId: P:System.Array.Rank\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.GetLength(Int32)\n- uid: System.Array.GetLowerBound(System.Int32)\n  commentId: M:System.Array.GetLowerBound(System.Int32)\n  id: GetLowerBound(System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: GetLowerBound(Int32)\n  fullName: System.Array.GetLowerBound(System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the index of the first element of the specified dimension in the array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public int GetLowerBound(int dimension)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Function GetLowerBound(dimension As Integer) As Integer\n    parameters:\n    - id: dimension\n      type: System.Int32\n      description: \"\\n<p>A zero-based dimension of the array whose starting index needs to be determined.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the first element of the specified dimension in the array.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>dimension</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>dimension</em> is equal to or greater than <xref href=\\\"System.Array.Rank\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.GetUpperBound(System.Int32)\n    commentId: M:System.Array.GetUpperBound(System.Int32)\n  - type: System.Array.Rank\n    commentId: P:System.Array.Rank\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.GetLowerBound(Int32)\n- uid: System.Array.GetUpperBound(System.Int32)\n  commentId: M:System.Array.GetUpperBound(System.Int32)\n  id: GetUpperBound(System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: GetUpperBound(Int32)\n  fullName: System.Array.GetUpperBound(System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the index of the last element of the specified dimension in the array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public int GetUpperBound(int dimension)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Function GetUpperBound(dimension As Integer) As Integer\n    parameters:\n    - id: dimension\n      type: System.Int32\n      description: \"\\n<p>A zero-based dimension of the array whose upper bound needs to be determined.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty. </p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>dimension</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>dimension</em> is equal to or greater than <xref href=\\\"System.Array.Rank\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.GetLowerBound(System.Int32)\n    commentId: M:System.Array.GetLowerBound(System.Int32)\n  - type: System.Array.Rank\n    commentId: P:System.Array.Rank\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.GetUpperBound(Int32)\n- uid: System.Array.GetValue(System.Int32)\n  commentId: M:System.Array.GetValue(System.Int32)\n  id: GetValue(System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Int32)\n  fullName: System.Array.GetValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 359\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value at the specified position in the one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The index is specified as a 32-bit integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public object GetValue(int index)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function GetValue(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the position of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> element to get.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value at the specified position in the one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> does not have exactly one dimension.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.GetLowerBound(System.Int32)\n    commentId: M:System.Array.GetLowerBound(System.Int32)\n  - type: System.Array.GetUpperBound(System.Int32)\n    commentId: M:System.Array.GetUpperBound(System.Int32)\n  - type: System.Array.SetValue(System.Object,System.Int32)\n    commentId: M:System.Array.SetValue(System.Object,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.GetValue(Int32)\n- uid: System.Array.GetValue(System.Int32[])\n  commentId: M:System.Array.GetValue(System.Int32[])\n  id: GetValue(System.Int32[])\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Int32[])\n  fullName: System.Array.GetValue(System.Int32[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 344\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value at the specified position in the multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The indexes are specified as an array of 32-bit integers.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public object GetValue(params int[] indices)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function GetValue(ParamArray indices As Integer()) As Object\n    parameters:\n    - id: indices\n      type: System.Int32[]\n      description: \"\\n<p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> element to get.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value at the specified position in the multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>indices</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of dimensions in the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not equal to the number of elements in <em>indices</em>.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Any element in <em>indices</em> is outside the range of valid indexes for the corresponding dimension of the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.GetLowerBound(System.Int32)\n    commentId: M:System.Array.GetLowerBound(System.Int32)\n  - type: System.Array.GetUpperBound(System.Int32)\n    commentId: M:System.Array.GetUpperBound(System.Int32)\n  - type: System.Array.SetValue(System.Object,System.Int32)\n    commentId: M:System.Array.SetValue(System.Object,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Array.GetValue(System.Int32())\n  name.vb: GetValue(Int32())\n  nameWithType: Array.GetValue(Int32[])\n  nameWithType.vb: Array.GetValue(Int32())\n- uid: System.Array.IndexOf(System.Array,System.Object)\n  commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  id: IndexOf(System.Array,System.Object)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Array, Object)\n  fullName: System.Array.IndexOf(System.Array, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1254\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int IndexOf(Array array, object value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function IndexOf(array As Array, value As Object) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional array to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the first occurrence of <em>value</em> in <em>array</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  seealso:\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.IndexOf(Array, Object)\n- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)\n  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32)\n  id: IndexOf(System.Array,System.Object,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Array, Object, Int32)\n  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1270\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int IndexOf(Array array, object value, int startIndex)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional array to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting index of the search. 0 (zero) is valid in an empty array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the first occurrence of <em>value</em>, if it’s found, within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element; otherwise, the lower bound of the array minus 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  seealso:\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.IndexOf(Array, Object, Int32)\n- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  id: IndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Array, Object, Int32, Int32)\n  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1286\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int IndexOf(Array array, object value, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional array to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting index of the search. 0 (zero) is valid in an empty array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to search.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the first occurrence of <em>value</em>, if it’s found in the <em>array</em> from index <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1; otherwise, the lower bound of the array minus 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  seealso:\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.IndexOf(Array, Object, Int32, Int32)\n- uid: System.Array.IndexOf``1(``0[],``0)\n  commentId: M:System.Array.IndexOf``1(``0[],``0)\n  id: IndexOf``1(``0[],``0)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IndexOf<T>(T[], T)\n  fullName: System.Array.IndexOf<T>(T[], T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1341\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\\n\"\n  syntax:\n    content: public static int IndexOf<T>(T[] array, T value)\n    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based array to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> in the entire <em>array</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.IndexOf(Of T)(T(), T)\n  name.vb: IndexOf(Of T)(T(), T)\n  nameWithType: Array.IndexOf<T>(T[], T)\n  nameWithType.vb: Array.IndexOf(Of T)(T(), T)\n- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)\n  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32)\n  id: IndexOf``1(``0[],``0,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IndexOf<T>(T[], T, Int32)\n  fullName: System.Array.IndexOf<T>(T[], T, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1353\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\\n\"\n  syntax:\n    content: public static int IndexOf<T>(T[] array, T value, int startIndex)\n    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based array to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty array.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32)\n  name.vb: IndexOf(Of T)(T(), T, Int32)\n  nameWithType: Array.IndexOf<T>(T[], T, Int32)\n  nameWithType.vb: Array.IndexOf(Of T)(T(), T, Int32)\n- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)\n  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)\n  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IndexOf<T>(T[], T, Int32, Int32)\n  fullName: System.Array.IndexOf<T>(T[], T, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1363\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.</p>\\n\"\n  syntax:\n    content: public static int IndexOf<T>(T[] array, T value, int startIndex, int count)\n    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based array to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that starts at <em>startIndex</em> and contains the number of elements specified in <em>count</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.LastIndexOf(System.Array,System.Object)\n    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32, System.Int32)\n  name.vb: IndexOf(Of T)(T(), T, Int32, Int32)\n  nameWithType: Array.IndexOf<T>(T[], T, Int32, Int32)\n  nameWithType.vb: Array.IndexOf(Of T)(T(), T, Int32, Int32)\n- uid: System.Array.Initialize\n  commentId: M:System.Array.Initialize\n  id: Initialize\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Initialize()\n  fullName: System.Array.Initialize()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes every element of the value-type <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by calling the default constructor of the value type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public void Initialize()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub Initialize\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.Initialize()\n- uid: System.Array.LastIndexOf(System.Array,System.Object)\n  commentId: M:System.Array.LastIndexOf(System.Array,System.Object)\n  id: LastIndexOf(System.Array,System.Object)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Array, Object)\n  fullName: System.Array.LastIndexOf(System.Array, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1391\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int LastIndexOf(Array array, object value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function LastIndexOf(array As Array, value As Object) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  seealso:\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.LastIndexOf(Array, Object)\n- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)\n  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)\n  id: LastIndexOf(System.Array,System.Object,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Array, Object, Int32)\n  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1406\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the first element to the specified index.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int LastIndexOf(Array array, object value, int startIndex)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting index of the backward search.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  seealso:\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.LastIndexOf(Array, Object, Int32)\n- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  id: LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Array, Object, Int32, Int32)\n  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1422\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified number of elements and ends at the specified index.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int LastIndexOf(Array array, object value, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting index of the backward search.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  seealso:\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.LastIndexOf(Array, Object, Int32, Int32)\n- uid: System.Array.LastIndexOf``1(``0[],``0)\n  commentId: M:System.Array.LastIndexOf``1(``0[],``0)\n  id: LastIndexOf``1(``0[],``0)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf<T>(T[], T)\n  fullName: System.Array.LastIndexOf<T>(T[], T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1478\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of the last occurrence within the entire <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static int LastIndexOf<T>(T[] array, T value)\n    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T)\n  name.vb: LastIndexOf(Of T)(T(), T)\n  nameWithType: Array.LastIndexOf<T>(T[], T)\n  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T)\n- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)\n  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)\n  id: LastIndexOf``1(``0[],``0,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf<T>(T[], T, Int32)\n  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1488\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the first element to the specified index.</p>\\n\"\n  syntax:\n    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex)\n    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32)\n  name.vb: LastIndexOf(Of T)(T(), T, Int32)\n  nameWithType: Array.LastIndexOf<T>(T[], T, Int32)\n  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T, Int32)\n- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)\n  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)\n  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf<T>(T[], T, Int32, Int32)\n  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1498\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified number of elements and ends at the specified index.</p>\\n\"\n  syntax:\n    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count)\n    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to search.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in <em>array</em>.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, –1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array.IndexOf(System.Array,System.Object)\n    commentId: M:System.Array.IndexOf(System.Array,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32, System.Int32)\n  name.vb: LastIndexOf(Of T)(T(), T, Int32, Int32)\n  nameWithType: Array.LastIndexOf<T>(T[], T, Int32, Int32)\n  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T, Int32, Int32)\n- uid: System.Array.Resize``1(``0[]@,System.Int32)\n  commentId: M:System.Array.Resize``1(``0[]@,System.Int32)\n  id: Resize``1(``0[]@,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Resize<T>(ref T[], Int32)\n  fullName: System.Array.Resize<T>(ref T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Resize\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 44\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Changes the number of elements of a one-dimensional array to the specified new size.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Resize<T>(ref T[] array, int newSize)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Resize(Of T)(ByRef array As T(), newSize As Integer)\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based array to resize, or <strong>null</strong> to create a new array with the specified size.</p>\\n\"\n    - id: newSize\n      type: System.Int32\n      description: \"\\n<p>The size of the new array.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>newSize</em> is less than zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Resize(Of T)(ByRef T(), System.Int32)\n  name.vb: Resize(Of T)(ByRef T(), Int32)\n  nameWithType: Array.Resize<T>(ref T[], Int32)\n  nameWithType.vb: Array.Resize(Of T)(ByRef T(), Int32)\n- uid: System.Array.Reverse(System.Array)\n  commentId: M:System.Array.Reverse(System.Array)\n  id: Reverse(System.Array)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Reverse(Array)\n  fullName: System.Array.Reverse(System.Array)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reverse\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1545\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reverses the sequence of the elements in the entire one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Reverse(Array array)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Reverse(array As Array)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to reverse.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Reverse(Array)\n- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)\n  commentId: M:System.Array.Reverse(System.Array,System.Int32,System.Int32)\n  id: Reverse(System.Array,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Reverse(Array, Int32, Int32)\n  fullName: System.Array.Reverse(System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reverse\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1559\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reverses the sequence of the elements in a range of elements in the one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Reverse(Array array, int index, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Reverse(array As Array, index As Integer, length As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to reverse.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the section to reverse.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to reverse.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Reverse(Array, Int32, Int32)\n- uid: System.Array.SetValue(System.Object,System.Int32)\n  commentId: M:System.Array.SetValue(System.Object,System.Int32)\n  id: SetValue(System.Object,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: SetValue(Object, Int32)\n  fullName: System.Array.SetValue(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 463\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sets a value to the element at the specified position in the one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The index is specified as a 32-bit integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void SetValue(object value, int index)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub SetValue(value As Object, index As Integer)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new value for the specified element.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer that represents the position of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> element to set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> does not have exactly one dimension.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> cannot be cast to the element type of the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.GetLowerBound(System.Int32)\n    commentId: M:System.Array.GetLowerBound(System.Int32)\n  - type: System.Array.GetUpperBound(System.Int32)\n    commentId: M:System.Array.GetUpperBound(System.Int32)\n  - type: System.Array.GetValue(System.Int32)\n    commentId: M:System.Array.GetValue(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Array.SetValue(Object, Int32)\n- uid: System.Array.SetValue(System.Object,System.Int32[])\n  commentId: M:System.Array.SetValue(System.Object,System.Int32[])\n  id: SetValue(System.Object,System.Int32[])\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: SetValue(Object, Int32[])\n  fullName: System.Array.SetValue(System.Object, System.Int32[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 508\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sets a value to the element at the specified position in the multidimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The indexes are specified as an array of 32-bit integers.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void SetValue(object value, params int[] indices)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub SetValue(value As Object, ParamArray indices As Integer())\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new value for the specified element.</p>\\n\"\n    - id: indices\n      type: System.Int32[]\n      description: \"\\n<p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>indices</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of dimensions in the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not equal to the number of elements in <em>indices</em>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> cannot be cast to the element type of the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Any element in <em>indices</em> is outside the range of valid indexes for the corresponding dimension of the current <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array.GetLowerBound(System.Int32)\n    commentId: M:System.Array.GetLowerBound(System.Int32)\n  - type: System.Array.GetUpperBound(System.Int32)\n    commentId: M:System.Array.GetUpperBound(System.Int32)\n  - type: System.Array.GetValue(System.Int32)\n    commentId: M:System.Array.GetValue(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Array.SetValue(System.Object, System.Int32())\n  name.vb: SetValue(Object, Int32())\n  nameWithType: Array.SetValue(Object, Int32[])\n  nameWithType.vb: Array.SetValue(Object, Int32())\n- uid: System.Array.Sort(System.Array)\n  commentId: M:System.Array.Sort(System.Array)\n  id: Sort(System.Array)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array)\n  fullName: System.Array.Sort(System.Array)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1609\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in an entire one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array array)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(array As Array)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array)\n- uid: System.Array.Sort(System.Array,System.Array)\n  commentId: M:System.Array.Sort(System.Array,System.Array)\n  id: Sort(System.Array,System.Array)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, Array)\n  fullName: System.Array.Sort(System.Array, System.Array)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1623\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a pair of one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each key.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array keys, Array items)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(keys As Array, items As Array)\n    parameters:\n    - id: keys\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort.</p>\\n\"\n    - id: items\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to sort only the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>The <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, Array)\n- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)\n  commentId: M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)\n  id: Sort(System.Array,System.Array,System.Collections.IComparer)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, Array, IComparer)\n  fullName: System.Array.Sort(System.Array, System.Array, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1673\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a pair of one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array keys, Array items, IComparer comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(keys As Array, items As Array, comparer As IComparer)\n    parameters:\n    - id: keys\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort.</p>\\n\"\n    - id: items\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to sort only the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>The <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>. </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, Array, IComparer)\n- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)\n  id: Sort(System.Array,System.Array,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, Array, Int32, Int32)\n  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1646\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a range of elements in a pair of one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each key.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array keys, Array items, int index, int length)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer)\n    parameters:\n    - id: keys\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort.</p>\\n\"\n    - id: items\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to sort only the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>The <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, Array, Int32, Int32)\n- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  id: Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, Array, Int32, Int32, IComparer)\n  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1700\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a range of elements in a pair of one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array keys, Array items, int index, int length, IComparer comparer)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer, comparer As IComparer)\n    parameters:\n    - id: keys\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort.</p>\\n\"\n    - id: items\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to sort only the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>The <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, Array, Int32, Int32, IComparer)\n- uid: System.Array.Sort(System.Array,System.Collections.IComparer)\n  commentId: M:System.Array.Sort(System.Array,System.Collections.IComparer)\n  id: Sort(System.Array,System.Collections.IComparer)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, IComparer)\n  fullName: System.Array.Sort(System.Array, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1657\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array array, IComparer comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(array As Array, comparer As IComparer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional array to sort.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The implementation to use when comparing elements.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, IComparer)\n- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)\n  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32)\n  id: Sort(System.Array,System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, Int32, Int32)\n  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1635\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in a range of elements in a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array array, int index, int length)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(array As Array, index As Integer, length As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, Int32, Int32)\n- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  id: Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort(Array, Int32, Int32, IComparer)\n  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1687\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in a range of elements in a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort(Array array, int index, int length, IComparer comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(array As Array, index As Integer, length As Integer, comparer As IComparer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or-</p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>. </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Array.Sort(Array, Int32, Int32, IComparer)\n- uid: System.Array.Sort``1(``0[])\n  commentId: M:System.Array.Sort``1(``0[])\n  id: Sort``1(``0[])\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<T>(T[])\n  fullName: System.Array.Sort<T>(T[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1744\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in an entire <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each element of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<T>(T[] array)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of T)(array As T())\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of T)(T())\n  name.vb: Sort(Of T)(T())\n  nameWithType: Array.Sort<T>(T[])\n  nameWithType.vb: Array.Sort(Of T)(T())\n- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})\n  commentId: M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})\n  id: Sort``1(``0[],System.Collections.Generic.IComparer{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<T>(T[], IComparer<T>)\n  fullName: System.Array.Sort<T>(T[], System.Collections.Generic.IComparer<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1770\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<T>(T[] array, IComparer<T> comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of T)(array As T(), comparer As IComparer(Of T))\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-base <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each element.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of T)(T(), System.Collections.Generic.IComparer(Of T))\n  name.vb: Sort(Of T)(T(), IComparer(Of T))\n  nameWithType: Array.Sort<T>(T[], IComparer<T>)\n  nameWithType.vb: Array.Sort(Of T)(T(), IComparer(Of T))\n- uid: System.Array.Sort``1(``0[],System.Comparison{``0})\n  commentId: M:System.Array.Sort``1(``0[],System.Comparison{``0})\n  id: Sort``1(``0[],System.Comparison{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<T>(T[], Comparison<T>)\n  fullName: System.Array.Sort<T>(T[], System.Comparison<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1836\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Comparison`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static void Sort<T>(T[] array, Comparison<T> comparison)\n    content.vb: Public Shared Sub Sort(Of T)(array As T(), comparison As Comparison(Of T))\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort</p>\\n\"\n    - id: comparison\n      type: System.Comparison{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Comparison`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use when comparing elements.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>comparison</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The implementation of <em>comparison</em> caused an error during the sort. For example, <em>comparison</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  seealso:\n  - type: System.Comparison`1\n    commentId: T:System.Comparison`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of T)(T(), System.Comparison(Of T))\n  name.vb: Sort(Of T)(T(), Comparison(Of T))\n  nameWithType: Array.Sort<T>(T[], Comparison<T>)\n  nameWithType.vb: Array.Sort(Of T)(T(), Comparison(Of T))\n- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)\n  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32)\n  id: Sort``1(``0[],System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<T>(T[], Int32, Int32)\n  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1760\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in a range of elements in an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each element of the <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<T>(T[] array, int index, int length)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer)\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32)\n  name.vb: Sort(Of T)(T(), Int32, Int32)\n  nameWithType: Array.Sort<T>(T[], Int32, Int32)\n  nameWithType.vb: Array.Sort(Of T)(T(), Int32, Int32)\n- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<T>(T[], Int32, Int32, IComparer<T>)\n  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1786\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts the elements in a range of elements in an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to sort.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each element.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>. </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))\n  name.vb: Sort(Of T)(T(), Int32, Int32, IComparer(Of T))\n  nameWithType: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)\n  nameWithType.vb: Array.Sort(Of T)(T(), Int32, Int32, IComparer(Of T))\n- uid: System.Array.Sort``2(``0[],``1[])\n  commentId: M:System.Array.Sort``2(``0[],``1[])\n  id: Sort``2(``0[],``1[])\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<TKey, TValue>(TKey[], TValue[])\n  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1752\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a pair of <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each key.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue())\n    parameters:\n    - id: keys\n      type: '{TKey}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort. </p>\\n\"\n    - id: items\n      type: '{TValue}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\\n\"\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The type of the elements of the key array.</p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The type of the elements of the items array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  - type: System.Collections.Generic.IDictionary`2\n    commentId: T:System.Collections.Generic.IDictionary`2\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue())\n  name.vb: Sort(Of TKey, TValue)(TKey(), TValue())\n  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[])\n  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue())\n- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\n  commentId: M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\n  id: Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)\n  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1778\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a pair of <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), comparer As IComparer(Of TKey))\n    parameters:\n    - id: keys\n      type: '{TKey}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort. </p>\\n\"\n    - id: items\n      type: '{TValue}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each element.</p>\\n\"\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The type of the elements of the key array.</p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The type of the elements of the items array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))\n  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)\n  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))\n- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)\n  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)\n  id: Sort``2(``0[],``1[],System.Int32,System.Int32)\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)\n  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1765\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a range of elements in a pair of <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each key.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer)\n    parameters:\n    - id: keys\n      type: '{TKey}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort. </p>\\n\"\n    - id: items\n      type: '{TValue}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The type of the elements of the key array.</p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The type of the elements of the items array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>One or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32)\n  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)\n  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)\n  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)\n- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  id: Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)\n  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1808\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sorts a range of elements in a pair of <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer, comparer As IComparer(Of TKey))\n    parameters:\n    - id: keys\n      type: '{TKey}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys to sort. </p>\\n\"\n    - id: items\n      type: '{TValue}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index of the range to sort.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to sort.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface implementation of each element.</p>\\n\"\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The type of the elements of the key array.</p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The type of the elements of the items array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keys</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not implement the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of TKey))\n  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))\n  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)\n  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))\n- uid: System.Array.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Array.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.Array.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Add\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 693\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Calling this method always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception. </p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be added to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Adding a value to an array is not supported. No value is returned. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: Array.IList.Add(Object)\n  nameWithType.vb: Array.System.Collections.IList.Add(Object)\n- uid: System.Array.System#Collections#IList#Clear\n  commentId: M:System.Array.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.Clear()\n  fullName: System.Array.System.Collections.IList.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Clear\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 703\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all items from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Clear()\n    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Clear\n  name.vb: System.Collections.IList.Clear()\n  nameWithType: Array.IList.Clear()\n  nameWithType.vb: Array.System.Collections.IList.Clear()\n- uid: System.Array.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Array.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.Array.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Contains\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 698\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether an element is in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in the current list. The element to locate can be <strong>null</strong> for reference types.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is found in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: Array.IList.Contains(Object)\n  nameWithType.vb: Array.System.Collections.IList.Contains(Object)\n- uid: System.Array.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Array.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.Array.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IndexOf\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 708\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines the index of a specific item in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in the current list.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of value if found in the list; otherwise, -1.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: Array.IList.IndexOf(Object)\n  nameWithType.vb: Array.System.Collections.IList.IndexOf(Object)\n- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.Array.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Insert\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 713\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Inserts an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to insert.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<em>value</em> is null reference in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: Array.IList.Insert(Int32, Object)\n  nameWithType.vb: Array.System.Collections.IList.Insert(Int32, Object)\n- uid: System.Array.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Array.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.Array.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Remove\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 718\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to remove from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: Array.IList.Remove(Object)\n  nameWithType.vb: Array.System.Collections.IList.Remove(Object)\n- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)\n  commentId: M:System.Array.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IList.RemoveAt(Int32)\n  fullName: System.Array.System.Collections.IList.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.RemoveAt\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 723\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> item at the specified index.</p>\\n\"\n  syntax:\n    content: void IList.RemoveAt(int index)\n    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the element to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>index is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  name.vb: System.Collections.IList.RemoveAt(Int32)\n  nameWithType: Array.IList.RemoveAt(Int32)\n  nameWithType.vb: Array.System.Collections.IList.RemoveAt(Int32)\n- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  commentId: M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IStructuralComparable.CompareTo(Object, IComparer)\n  fullName: System.Array.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralComparable.CompareTo\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 735\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\\n\"\n  syntax:\n    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)\n    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>An object that compares the current object and <em>other</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that indicates the relationship of the current collection object to other, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>-1</p>\\n</td><td>\\n<p>The current instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>0</p>\\n</td><td>\\n<p>The current instance and <em>other</em> are equal.</p>\\n</td></tr><tr><td>\\n<p>1</p>\\n</td><td>\\n<p>The current instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType: Array.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType.vb: Array.System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  commentId: M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  fullName: System.Array.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.Equals\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 760\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether an object is equal to the current instance.</p>\\n\"\n  syntax:\n    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object that determines whether the current instance and <em>other</em> are equal. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType.vb: Array.System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  commentId: M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  fullName: System.Array.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.GetHashCode\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 795\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a hash code for the current instance.</p>\\n\"\n  syntax:\n    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode\n    parameters:\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object that computes the hash code of the current object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the current instance.</p>\\n\"\n  implements:\n  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType.vb: Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n- uid: System.Array.TrueForAll``1(``0[],System.Predicate{``0})\n  commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})\n  id: TrueForAll``1(``0[],System.Predicate{``0})\n  parent: System.Array\n  langs:\n  - csharp\n  - vb\n  name: TrueForAll<T>(T[], Predicate<T>)\n  fullName: System.Array.TrueForAll<T>(T[], System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Array.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TrueForAll\n    path: src/mscorlib/src/System/Array.cs\n    startLine: 1850\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether every element in the array matches the conditions defined by the specified predicate.</p>\\n\"\n  syntax:\n    content: public static bool TrueForAll<T>(T[] array, Predicate<T> match)\n    content.vb: Public Shared Function TrueForAll(Of T)(array As T(), match As Predicate(Of T)) As Boolean\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional, zero-based <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to check against the conditions.</p>\\n\"\n    - id: match\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The predicate that defines the conditions to check against the elements.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements of the array.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if every element in <em>array</em> matches the conditions defined by the specified predicate; otherwise, <strong>false</strong>. If there are no elements in the array, the return value is <strong>true</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array.Exists``1(``0[],System.Predicate{``0})\n    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})\n  - type: System.Predicate`1\n    commentId: T:System.Predicate`1\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Array.TrueForAll(Of T)(T(), System.Predicate(Of T))\n  name.vb: TrueForAll(Of T)(T(), Predicate(Of T))\n  nameWithType: Array.TrueForAll<T>(T[], Predicate<T>)\n  nameWithType.vb: Array.TrueForAll(Of T)(T(), Predicate(Of T))\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Collections.IStructuralComparable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralComparable\n  fullName: System.Collections.IStructuralComparable\n  nameWithType: IStructuralComparable\n  commentId: T:System.Collections.IStructuralComparable\n- uid: System.Collections.IStructuralEquatable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralEquatable\n  fullName: System.Collections.IStructuralEquatable\n  nameWithType: IStructuralEquatable\n  commentId: T:System.Collections.IStructuralEquatable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.IComparer{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n  commentId: T:System.Collections.Generic.IComparer{``0}\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n  commentId: T:System.Collections.Generic.IComparer`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Predicate{{T}}\n  parent: System\n  definition: System.Predicate`1\n  name: Predicate<T>\n  fullName: System.Predicate<T>\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n  commentId: T:System.Predicate{``0}\n- uid: System.Predicate`1\n  isExternal: false\n  name: Predicate<T>\n  fullName: System.Predicate<T>\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n  commentId: T:System.Predicate`1\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Comparison{{T}}\n  parent: System\n  definition: System.Comparison`1\n  name: Comparison<T>\n  fullName: System.Comparison<T>\n  fullname.vb: System.Comparison(Of T)\n  name.vb: Comparison(Of T)\n  spec.csharp:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Comparison<T>\n  nameWithType.vb: Comparison(Of T)\n  commentId: T:System.Comparison{``0}\n- uid: System.Comparison`1\n  isExternal: false\n  name: Comparison<T>\n  fullName: System.Comparison<T>\n  fullname.vb: System.Comparison(Of T)\n  name.vb: Comparison(Of T)\n  spec.csharp:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Comparison<T>\n  nameWithType.vb: Comparison(Of T)\n  commentId: T:System.Comparison`1\n- uid: '{TKey}[]'\n  name: TKey[]\n  fullName: TKey[]\n  fullname.vb: TKey()\n  name.vb: TKey()\n  spec.csharp:\n  - name: TKey\n    fullName: TKey\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: TKey\n    fullName: TKey\n  - name: ()\n    fullName: ()\n  nameWithType: TKey[]\n  nameWithType.vb: TKey()\n- uid: '{TValue}[]'\n  name: TValue[]\n  fullName: TValue[]\n  fullname.vb: TValue()\n  name.vb: TValue()\n  spec.csharp:\n  - name: TValue\n    fullName: TValue\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: TValue\n    fullName: TValue\n  - name: ()\n    fullName: ()\n  nameWithType: TValue[]\n  nameWithType.vb: TValue()\n- uid: System.Collections.Generic.IComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  fullname.vb: System.Collections.Generic.IComparer(Of TKey)\n  name.vb: IComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  nameWithType: IComparer<TKey>\n  nameWithType.vb: IComparer(Of TKey)\n  commentId: T:System.Collections.Generic.IComparer{``1}\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  parent: System.Collections.IStructuralComparable\n  isExternal: true\n  name: CompareTo(Object, IComparer)\n  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)\n  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: true\n  name: Equals(Object, IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: GetHashCode(IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.RankException\n  isExternal: false\n  name: RankException\n  fullName: System.RankException\n  nameWithType: RankException\n  commentId: T:System.RankException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.ArrayTypeMismatchException\n  isExternal: false\n  name: ArrayTypeMismatchException\n  fullName: System.ArrayTypeMismatchException\n  nameWithType: ArrayTypeMismatchException\n  commentId: T:System.ArrayTypeMismatchException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n"}