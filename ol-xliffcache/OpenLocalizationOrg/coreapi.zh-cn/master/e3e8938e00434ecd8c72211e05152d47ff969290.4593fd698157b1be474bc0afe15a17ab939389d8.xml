{"nodes":[{"pos":[407,424],"content":"MemberListBinding","needQuote":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[2019,2031],"content":"Initializers","needQuote":true,"nodes":[{"content":"Initializers","pos":[0,12]}]},{"pos":[3761,3793],"content":"Update(IEnumerable<ElementInit>)","needQuote":true,"nodes":[{"content":"Update(IEnumerable&lt;ElementInit&gt;)","pos":[0,32],"source":"Update(IEnumerable<ElementInit>)"}]},{"content":"\\n&lt;p&gt;This expression if no children are changed or an expression with the updated children.&lt;/p&gt;\\n","pos":[5053,5150],"source":"\\n<p>This expression if no children are changed or an expression with the updated children.</p>\\n"},{"pos":[5612,5635],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[5817,5823],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6009,6022],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[6289,6300],"content":"BindingType","needQuote":true,"nodes":[{"content":"BindingType","pos":[0,11]}]},{"pos":[6598,6604],"content":"Member","needQuote":true,"nodes":[{"content":"Member","pos":[0,6]}]},{"pos":[6889,6899],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7042,7050],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7122,7123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7150,7151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7245,7253],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7325,7326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7353,7354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7568,7582],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7701,7707],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7774,7775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7825,7831],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7891,7892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7975,7981],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8048,8049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8099,8105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8165,8166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8380,8402],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8550,8556],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8623,8624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8674,8680],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8741,8742]},{"pos":[8797,8803],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8863,8864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8961,8967],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9034,9035],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9085,9091],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9152,9153]},{"pos":[9208,9214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9274,9275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9520,9551],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9717,9732],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9808,9809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9859,9865],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9926,9927]},{"pos":[9982,9988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10048,10049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10155,10170],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10246,10247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10297,10303],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10364,10365]},{"pos":[10420,10426],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10486,10487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10717,10730],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10831,10842],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10914,10915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10942,10943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11016,11027],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11099,11100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11127,11128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11303,11312],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11405,11412],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11480,11481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11508,11509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11578,11585],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11653,11654],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11681,11682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11857,11874],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11983,11998],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12074,12075],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12102,12103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12180,12195],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12271,12272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12299,12300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12445,12451],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12725,12756],"content":"ReadOnlyCollection<ElementInit>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;ElementInit&gt;","pos":[0,31],"source":"ReadOnlyCollection<ElementInit>"}]},{"pos":[13093,13111],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[13207,13208],"content":"<","needQuote":true,"nodes":[]},{"pos":[13280,13291],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[13456,13474],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[13571,13574]},{"pos":[13653,13664],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[13725,13726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14034,14055],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[14314,14332],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[14407,14408],"content":"<","needQuote":true,"nodes":[]},{"pos":[14435,14436],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[14567,14585],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[14661,14664]},{"pos":[14698,14699],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[14726,14727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14959,14989],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[15309,15333],"content":"IEnumerable<ElementInit>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;ElementInit&gt;","pos":[0,24],"source":"IEnumerable<ElementInit>"}]},{"pos":[15630,15641],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[15726,15727],"content":"<","needQuote":true,"nodes":[]},{"pos":[15799,15810],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[15964,15975],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[16061,16064]},{"pos":[16143,16154],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[16215,16216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16523,16540],"content":"MemberListBinding","needQuote":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[16762,16776],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[16995,17006],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[17070,17071],"content":"<","needQuote":true,"nodes":[]},{"pos":[17098,17099],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17219,17230],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[17295,17298]},{"pos":[17332,17333],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17360,17361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17564,17590],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]}],"content":"items:\n- uid: System.Linq.Expressions.MemberListBinding\n  commentId: T:System.Linq.Expressions.MemberListBinding\n  id: MemberListBinding\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.MemberListBinding.Initializers\n  - System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  langs:\n  - csharp\n  - vb\n  name: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberListBinding\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 714\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Represents initializing the elements of a collection member of a newly created object.</p>\\n\"\n  syntax:\n    content: 'public sealed class MemberListBinding : MemberBinding'\n    content.vb: >-\n      Public NotInheritable Class MemberListBinding\n          Inherits MemberBinding\n  inheritance:\n  - System.Object\n  - System.Linq.Expressions.MemberBinding\n  inheritedMembers:\n  - System.Linq.Expressions.MemberBinding.BindingType\n  - System.Linq.Expressions.MemberBinding.Member\n  - System.Linq.Expressions.MemberBinding.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: MemberListBinding\n- uid: System.Linq.Expressions.MemberListBinding.Initializers\n  commentId: P:System.Linq.Expressions.MemberListBinding.Initializers\n  id: Initializers\n  parent: System.Linq.Expressions.MemberListBinding\n  langs:\n  - csharp\n  - vb\n  name: Initializers\n  fullName: System.Linq.Expressions.MemberListBinding.Initializers\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Initializers\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 717\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the element initializers for initializing a collection member of a newly created object.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<ElementInit> Initializers { get; }\n    content.vb: Public ReadOnly Property Initializers As ReadOnlyCollection(Of ElementInit)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to initialize a collection member with.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MemberListBinding.Initializers\n- uid: System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.MemberListBinding\n  langs:\n  - csharp\n  - vb\n  name: Update(IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Update\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 718\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</p>\\n\"\n  syntax:\n    content: public MemberListBinding Update(IEnumerable<ElementInit> initializers)\n    content.vb: Public Function Update(initializers As IEnumerable(Of ElementInit)) As MemberListBinding\n    parameters:\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the result.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>This expression if no children are changed or an expression with the updated children.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))\n  name.vb: Update(IEnumerable(Of ElementInit))\n  nameWithType: MemberListBinding.Update(IEnumerable<ElementInit>)\n  nameWithType.vb: MemberListBinding.Update(IEnumerable(Of ElementInit))\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Linq.Expressions.MemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding\n  commentId: T:System.Linq.Expressions.MemberBinding\n  nameWithType: MemberBinding\n- uid: System.Linq.Expressions.MemberBinding.BindingType\n  parent: System.Linq.Expressions.MemberBinding\n  isExternal: false\n  name: BindingType\n  fullName: System.Linq.Expressions.MemberBinding.BindingType\n  commentId: P:System.Linq.Expressions.MemberBinding.BindingType\n  nameWithType: MemberBinding.BindingType\n- uid: System.Linq.Expressions.MemberBinding.Member\n  parent: System.Linq.Expressions.MemberBinding\n  isExternal: false\n  name: Member\n  fullName: System.Linq.Expressions.MemberBinding.Member\n  commentId: P:System.Linq.Expressions.MemberBinding.Member\n  nameWithType: MemberBinding.Member\n- uid: System.Linq.Expressions.MemberBinding.ToString\n  parent: System.Linq.Expressions.MemberBinding\n  isExternal: false\n  name: ToString()\n  fullName: System.Linq.Expressions.MemberBinding.ToString()\n  spec.csharp:\n  - uid: System.Linq.Expressions.MemberBinding.ToString\n    name: ToString\n    fullName: System.Linq.Expressions.MemberBinding.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Expressions.MemberBinding.ToString\n    name: ToString\n    fullName: System.Linq.Expressions.MemberBinding.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Expressions.MemberBinding.ToString\n  nameWithType: MemberBinding.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<ElementInit>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.ElementInit)\n  name.vb: ReadOnlyCollection(Of ElementInit)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit}\n  nameWithType: ReadOnlyCollection<ElementInit>\n  nameWithType.vb: ReadOnlyCollection(Of ElementInit)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<ElementInit>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit)\n  name.vb: IEnumerable(Of ElementInit)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  nameWithType: IEnumerable<ElementInit>\n  nameWithType.vb: IEnumerable(Of ElementInit)\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n  commentId: T:System.Linq.Expressions.MemberListBinding\n  nameWithType: MemberListBinding\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n"}