{"nodes":[{"pos":[975,981],"content":"OpCode","needQuote":true,"nodes":[{"content":"OpCode","pos":[0,6]}]},{"pos":[2342,2353],"content":"FlowControl","needQuote":true,"nodes":[{"content":"FlowControl","pos":[0,11]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[3094,3109],"source":"\\n<p>Read-only."},{"content":"The type of flow control.&lt;/p&gt;\\n","pos":[3110,3141],"source":" The type of flow control.</p>\\n"},{"pos":[3435,3439],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[4098,4113],"source":"\\n<p>Read-only."},{"content":"The name of the IL instruction.&lt;/p&gt;\\n","pos":[4114,4151],"source":" The name of the IL instruction.</p>\\n"},{"pos":[4456,4466],"content":"OpCodeType","needQuote":true,"nodes":[{"content":"OpCodeType","pos":[0,10]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[5172,5187],"source":"\\n<p>Read-only."},{"content":"The type of intermediate language (IL) instruction.&lt;/p&gt;\\n","pos":[5188,5245],"source":" The type of intermediate language (IL) instruction.</p>\\n"},{"pos":[5559,5570],"content":"OperandType","needQuote":true,"nodes":[{"content":"OperandType","pos":[0,11]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[6294,6309],"source":"\\n<p>Read-only."},{"content":"The operand type of an IL instruction.&lt;/p&gt;\\n","pos":[6310,6354],"source":" The operand type of an IL instruction.</p>\\n"},{"pos":[6648,6652],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[7307,7322],"source":"\\n<p>Read-only."},{"content":"The size of the IL instruction.&lt;/p&gt;\\n","pos":[7323,7360],"source":" The size of the IL instruction.</p>\\n"},{"pos":[7686,7703],"content":"StackBehaviourPop","needQuote":true,"nodes":[{"content":"StackBehaviourPop","pos":[0,17]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[8460,8475],"source":"\\n<p>Read-only."},{"content":"The way the IL instruction pops the stack.&lt;/p&gt;\\n","pos":[8476,8524],"source":" The way the IL instruction pops the stack.</p>\\n"},{"pos":[8866,8884],"content":"StackBehaviourPush","needQuote":true,"nodes":[{"content":"StackBehaviourPush","pos":[0,18]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[9660,9675],"source":"\\n<p>Read-only."},{"content":"The way the IL instruction pushes operand onto the stack.&lt;/p&gt;\\n","pos":[9676,9739],"source":" The way the IL instruction pushes operand onto the stack.</p>\\n"},{"pos":[10043,10048],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;Read-only.","pos":[10722,10737],"source":"\\n<p>Read-only."},{"content":"The numeric value of the IL instruction.&lt;/p&gt;\\n","pos":[10738,10784],"source":" The numeric value of the IL instruction.</p>\\n"},{"pos":[11123,11137],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare to this object.","pos":[11860,11902],"source":"\\n<p>The object to compare to this object."},{"content":"&lt;/p&gt;\\n","pos":[11903,11909],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; is an instance of &lt;strong&gt;Opcode&lt;/strong&gt; and is equal to this object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11970,12126],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <strong>Opcode</strong> and is equal to this object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12581,12595],"content":"Equals(OpCode)","needQuote":true,"nodes":[{"content":"Equals(OpCode)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;obj&lt;/em&gt; is equal to the value of the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13615,13760],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>obj</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14057,14070],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;Returns the hash code for this instance.&lt;/p&gt;\\n","pos":[14748,14799],"source":"\\n<p>Returns the hash code for this instance.</p>\\n"},{"pos":[15348,15372],"content":"Equality(OpCode, OpCode)","needQuote":true,"nodes":[{"content":"Equality(OpCode, OpCode)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16637,16744],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17262,17288],"content":"Inequality(OpCode, OpCode)","needQuote":true,"nodes":[{"content":"Inequality(OpCode, OpCode)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is not equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18562,18673],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18995,19005],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20103,20125],"content":"System.Reflection.Emit","needQuote":true,"nodes":[{"content":"System.Reflection.Emit","pos":[0,22]}]},{"pos":[20346,20368],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20516,20522],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20589,20590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20640,20646],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20707,20708]},{"pos":[20763,20769],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20829,20830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20927,20933],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21000,21001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21051,21057],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21118,21119]},{"pos":[21174,21180],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21240,21241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21486,21517],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21683,21698],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21774,21775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21825,21831],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21892,21893]},{"pos":[21948,21954],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22014,22015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22121,22136],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22212,22213],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22263,22269],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22330,22331]},{"pos":[22386,22392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22452,22453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22679,22688],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22781,22788],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22856,22857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22884,22885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22954,22961],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23029,23030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23057,23058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23211,23217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23338,23344],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23512,23523],"content":"FlowControl","needQuote":true,"nodes":[{"content":"FlowControl","pos":[0,11]}]},{"pos":[23715,23721],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23902,23912],"content":"OpCodeType","needQuote":true,"nodes":[{"content":"OpCodeType","pos":[0,10]}]},{"pos":[24138,24149],"content":"OperandType","needQuote":true,"nodes":[{"content":"OperandType","pos":[0,11]}]},{"pos":[24340,24345],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24527,24541],"content":"StackBehaviour","needQuote":true,"nodes":[{"content":"StackBehaviour","pos":[0,14]}]},{"pos":[24741,24746],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[24922,24936],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[25061,25067],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25116,25117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25167,25173],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25233,25234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25320,25326],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25375,25376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25426,25432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25492,25493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25672,25679],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25830,25839],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[26025,26031],"content":"OpCode","needQuote":true,"nodes":[{"content":"OpCode","pos":[0,6]}]},{"pos":[26233,26246],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[26353,26364],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26418,26419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26446,26447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26523,26534],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26588,26589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26616,26617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26806,26816],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26917,26925],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26976,26977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27004,27005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27078,27086],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27137,27138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27165,27166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Reflection.Emit.OpCode\n  commentId: T:System.Reflection.Emit.OpCode\n  id: OpCode\n  parent: System.Reflection.Emit\n  children:\n  - System.Reflection.Emit.OpCode.Equals(System.Object)\n  - System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)\n  - System.Reflection.Emit.OpCode.FlowControl\n  - System.Reflection.Emit.OpCode.GetHashCode\n  - System.Reflection.Emit.OpCode.Name\n  - System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  - System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  - System.Reflection.Emit.OpCode.OpCodeType\n  - System.Reflection.Emit.OpCode.OperandType\n  - System.Reflection.Emit.OpCode.Size\n  - System.Reflection.Emit.OpCode.StackBehaviourPop\n  - System.Reflection.Emit.OpCode.StackBehaviourPush\n  - System.Reflection.Emit.OpCode.ToString\n  - System.Reflection.Emit.OpCode.Value\n  langs:\n  - csharp\n  - vb\n  name: OpCode\n  fullName: System.Reflection.Emit.OpCode\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpCode\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 10\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Describes an intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public struct OpCode\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Structure OpCode\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: OpCode\n- uid: System.Reflection.Emit.OpCode.FlowControl\n  commentId: P:System.Reflection.Emit.OpCode.FlowControl\n  id: FlowControl\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: FlowControl\n  fullName: System.Reflection.Emit.OpCode.FlowControl\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FlowControl\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 66\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>The flow control characteristics of the intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: public FlowControl FlowControl { get; }\n    content.vb: Public ReadOnly Property FlowControl As FlowControl\n    parameters: []\n    return:\n      type: System.Reflection.Emit.FlowControl\n      description: \"\\n<p>Read-only. The type of flow control.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.FlowControl\n- uid: System.Reflection.Emit.OpCode.Name\n  commentId: P:System.Reflection.Emit.OpCode.Name\n  id: Name\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Reflection.Emit.OpCode.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 232\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>The name of the intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Read-only. The name of the IL instruction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.Name\n- uid: System.Reflection.Emit.OpCode.OpCodeType\n  commentId: P:System.Reflection.Emit.OpCode.OpCodeType\n  id: OpCodeType\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: OpCodeType\n  fullName: System.Reflection.Emit.OpCode.OpCodeType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpCodeType\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 74\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>The type of intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: public OpCodeType OpCodeType { get; }\n    content.vb: Public ReadOnly Property OpCodeType As OpCodeType\n    parameters: []\n    return:\n      type: System.Reflection.Emit.OpCodeType\n      description: \"\\n<p>Read-only. The type of intermediate language (IL) instruction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.OpCodeType\n- uid: System.Reflection.Emit.OpCode.OperandType\n  commentId: P:System.Reflection.Emit.OpCode.OperandType\n  id: OperandType\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: OperandType\n  fullName: System.Reflection.Emit.OpCode.OperandType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OperandType\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 58\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>The operand type of an intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: public OperandType OperandType { get; }\n    content.vb: Public ReadOnly Property OperandType As OperandType\n    parameters: []\n    return:\n      type: System.Reflection.Emit.OperandType\n      description: \"\\n<p>Read-only. The operand type of an IL instruction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.OperandType\n- uid: System.Reflection.Emit.OpCode.Size\n  commentId: P:System.Reflection.Emit.OpCode.Size\n  id: Size\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Size\n  fullName: System.Reflection.Emit.OpCode.Size\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Size\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 99\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>The size of the intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: public int Size { get; }\n    content.vb: Public ReadOnly Property Size As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Read-only. The size of the IL instruction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.Size\n- uid: System.Reflection.Emit.OpCode.StackBehaviourPop\n  commentId: P:System.Reflection.Emit.OpCode.StackBehaviourPop\n  id: StackBehaviourPop\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: StackBehaviourPop\n  fullName: System.Reflection.Emit.OpCode.StackBehaviourPop\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StackBehaviourPop\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 83\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>How the intermediate language (IL) instruction pops the stack.</p>\\n\"\n  syntax:\n    content: public StackBehaviour StackBehaviourPop { get; }\n    content.vb: Public ReadOnly Property StackBehaviourPop As StackBehaviour\n    parameters: []\n    return:\n      type: System.Reflection.Emit.StackBehaviour\n      description: \"\\n<p>Read-only. The way the IL instruction pops the stack.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.StackBehaviourPop\n- uid: System.Reflection.Emit.OpCode.StackBehaviourPush\n  commentId: P:System.Reflection.Emit.OpCode.StackBehaviourPush\n  id: StackBehaviourPush\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: StackBehaviourPush\n  fullName: System.Reflection.Emit.OpCode.StackBehaviourPush\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StackBehaviourPush\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 91\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>How the intermediate language (IL) instruction pushes operand onto the stack.</p>\\n\"\n  syntax:\n    content: public StackBehaviour StackBehaviourPush { get; }\n    content.vb: Public ReadOnly Property StackBehaviourPush As StackBehaviour\n    parameters: []\n    return:\n      type: System.Reflection.Emit.StackBehaviour\n      description: \"\\n<p>Read-only. The way the IL instruction pushes operand onto the stack.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.StackBehaviourPush\n- uid: System.Reflection.Emit.OpCode.Value\n  commentId: P:System.Reflection.Emit.OpCode.Value\n  id: Value\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Reflection.Emit.OpCode.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Value\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 107\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Gets the numeric value of the intermediate language (IL) instruction.</p>\\n\"\n  syntax:\n    content: public short Value { get; }\n    content.vb: Public ReadOnly Property Value As Short\n    parameters: []\n    return:\n      type: System.Int16\n      description: \"\\n<p>Read-only. The numeric value of the IL instruction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OpCode.Value\n- uid: System.Reflection.Emit.OpCode.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.OpCode.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.Emit.OpCode.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 273\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Tests whether the given object is equal to this <strong>Opcode</strong>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to this object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <strong>Opcode</strong> and is equal to this object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: OpCode.Equals(Object)\n- uid: System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)\n  commentId: M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)\n  id: Equals(System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Equals(OpCode)\n  fullName: System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 282\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates whether the current instance is equal to the specified <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Equals(OpCode obj)\n    content.vb: Public Function Equals(obj As OpCode) As Boolean\n    parameters:\n    - id: obj\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>obj</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OpCode.Equals(OpCode)\n- uid: System.Reflection.Emit.OpCode.GetHashCode\n  commentId: M:System.Reflection.Emit.OpCode.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.Emit.OpCode.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 300\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns the generated hash code for this <strong>Opcode</strong>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: OpCode.GetHashCode()\n- uid: System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  commentId: M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  id: op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Equality(OpCode, OpCode)\n  fullName: System.Reflection.Emit.OpCode.Equality(System.Reflection.Emit.OpCode, System.Reflection.Emit.OpCode)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 288\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(OpCode a, OpCode b)\n    content.vb: Public Shared Operator =(a As OpCode, b As OpCode) As Boolean\n    parameters:\n    - id: a\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>b</em>.</p>\\n\"\n    - id: b\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>a</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: OpCode.Equality(OpCode, OpCode)\n- uid: System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  commentId: M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  id: op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: Inequality(OpCode, OpCode)\n  fullName: System.Reflection.Emit.OpCode.Inequality(System.Reflection.Emit.OpCode, System.Reflection.Emit.OpCode)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 294\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(OpCode a, OpCode b)\n    content.vb: Public Shared Operator <>(a As OpCode, b As OpCode) As Boolean\n    parameters:\n    - id: a\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>b</em>.</p>\\n\"\n    - id: b\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.OpCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>a</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: OpCode.Inequality(OpCode, OpCode)\n- uid: System.Reflection.Emit.OpCode.ToString\n  commentId: M:System.Reflection.Emit.OpCode.ToString\n  id: ToString\n  parent: System.Reflection.Emit.OpCode\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.Emit.OpCode.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/Emit/Opcode.cs\n    startLine: 305\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns this <strong>Opcode</strong> as a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the name of this <strong>Opcode</strong>.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: OpCode.ToString()\nreferences:\n- uid: System.Reflection.Emit\n  isExternal: false\n  name: System.Reflection.Emit\n  fullName: System.Reflection.Emit\n  nameWithType: System.Reflection.Emit\n  commentId: N:System.Reflection.Emit\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.Emit.FlowControl\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: FlowControl\n  fullName: System.Reflection.Emit.FlowControl\n  nameWithType: FlowControl\n  commentId: T:System.Reflection.Emit.FlowControl\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Reflection.Emit.OpCodeType\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: OpCodeType\n  fullName: System.Reflection.Emit.OpCodeType\n  nameWithType: OpCodeType\n  commentId: T:System.Reflection.Emit.OpCodeType\n- uid: System.Reflection.Emit.OperandType\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: OperandType\n  fullName: System.Reflection.Emit.OperandType\n  nameWithType: OperandType\n  commentId: T:System.Reflection.Emit.OperandType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.Emit.StackBehaviour\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: StackBehaviour\n  fullName: System.Reflection.Emit.StackBehaviour\n  nameWithType: StackBehaviour\n  commentId: T:System.Reflection.Emit.StackBehaviour\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Reflection.Emit.OpCode\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: OpCode\n  fullName: System.Reflection.Emit.OpCode\n  nameWithType: OpCode\n  commentId: T:System.Reflection.Emit.OpCode\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n"}