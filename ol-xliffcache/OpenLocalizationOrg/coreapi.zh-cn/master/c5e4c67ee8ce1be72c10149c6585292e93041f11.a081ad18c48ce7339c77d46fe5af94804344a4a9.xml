{"nodes":[{"pos":[611,625],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"content":"\\n&lt;p&gt;The type of the elements in the collection.&lt;/p&gt;\\n","pos":[1456,1510],"source":"\\n<p>The type of the elements in the collection.</p>\\n"},{"pos":[2333,2338],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[3680,3690],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[5104,5110],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[6705,6712],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[8121,8132],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[9745,9763],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[11166,11240],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11359,11412],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arrayIndex&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[11529,11577],"source":"\\n<p>\\n<em>arrayIndex</em> is less than 0.</p>\\n"},{"pos":[12382,12391],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[14406,14432],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[14753,14768],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[15004,15017],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[15098,15099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15126,15127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15229,15242],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[15326,15327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15354,15355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15634,15649],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[15885,15898],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[15979,15980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16007,16008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16110,16123],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[16207,16208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16235,16236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16574,16588],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[16807,16818],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[16882,16883],"content":"<","needQuote":true,"nodes":[]},{"pos":[16910,16911],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17031,17042],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[17107,17110]},{"pos":[17144,17145],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17172,17173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17392,17406],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[17625,17636],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[17700,17701],"content":"<","needQuote":true,"nodes":[]},{"pos":[17728,17729],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17849,17860],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[17925,17928]},{"pos":[17962,17963],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17990,17991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18197,18202],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18320,18326],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18458,18465],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18584,18585],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18674,18675],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18731,18734],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[18810,18811],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[18839,18841]},{"pos":[18883,18884],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18911,18913],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19055,19076],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[19264,19285],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[19479,19506],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[19725,19742],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.Generic.ICollection`1\n  commentId: T:System.Collections.Generic.ICollection`1\n  id: ICollection`1\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.ICollection`1.Add(`0)\n  - System.Collections.Generic.ICollection`1.Clear\n  - System.Collections.Generic.ICollection`1.Contains(`0)\n  - System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.ICollection`1.Count\n  - System.Collections.Generic.ICollection`1.IsReadOnly\n  - System.Collections.Generic.ICollection`1.Remove(`0)\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  type: Interface\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ICollection\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Defines methods to manipulate generic collections.</p>\\n\"\n  syntax:\n    content: >-\n      [TypeDependency(\"System.SZArrayHelper\")]\n\n      public interface ICollection<T> : IEnumerable<T>, IEnumerable\n    content.vb: >-\n      <TypeDependency(\"System.SZArrayHelper\")>\n\n      Public Interface ICollection(Of T)\n          Inherits IEnumerable(Of T)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements in the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IDictionary`2\n    commentId: T:System.Collections.Generic.IDictionary`2\n  - type: System.Collections.Generic.IList`1\n    commentId: T:System.Collections.Generic.IList`1\n  - type: System.Collections\n    commentId: N:System.Collections\n  inheritedMembers:\n  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  fullName.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic.ICollection`1.Count\n  commentId: P:System.Collections.Generic.ICollection`1.Count\n  id: Count\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int Count { get; }\n    content.vb: ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool IsReadOnly { get; }\n    content.vb: ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Adds an item to the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void Add(T item)\n    content.vb: Sub Add(item As T)\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to add to the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1.IsReadOnly\n    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n- uid: System.Collections.Generic.ICollection`1.Clear\n  commentId: M:System.Collections.Generic.ICollection`1.Clear\n  id: Clear\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 38\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Removes all items from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void Clear()\n    content.vb: Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1.IsReadOnly\n    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific value.</p>\\n\"\n  syntax:\n    content: bool Contains(T item)\n    content.vb: Function Contains(item As T) As Boolean\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> is found in the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 45\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Copies the elements of the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at a particular <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index.</p>\\n\"\n  syntax:\n    content: void CopyTo(T[] array, int arrayIndex)\n    content.vb: Sub CopyTo(array As T(), arrayIndex As Integer)\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: arrayIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>arrayIndex</em> is less than 0.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the source <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  - vb\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool Remove(T item)\n    content.vb: Function Remove(item As T) As Boolean\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to remove from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> was successfully removed from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>. This method also returns <strong>false</strong> if <em>item</em> is not found in the original <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1.IsReadOnly\n    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  parent: System.Collections.Generic.IEnumerable{{T}}\n  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator\n- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}