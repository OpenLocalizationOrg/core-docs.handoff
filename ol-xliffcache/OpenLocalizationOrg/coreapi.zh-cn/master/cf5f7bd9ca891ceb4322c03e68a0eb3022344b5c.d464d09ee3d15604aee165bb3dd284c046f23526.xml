{"nodes":[{"pos":[1018,1028],"content":"ZipArchive","needQuote":true,"nodes":[{"content":"ZipArchive","pos":[0,10]}]},{"pos":[2474,2492],"content":"ZipArchive(Stream)","needQuote":true,"nodes":[{"content":"ZipArchive(Stream)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The stream that contains the archive to be read.&lt;/p&gt;\\n","pos":[3289,3348],"source":"\\n<p>The stream that contains the archive to be read.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is already closed or does not support reading.&lt;/p&gt;\\n","pos":[3459,3527],"source":"\\n<p>The stream is already closed or does not support reading.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3632,3686],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The contents of the stream are not in the zip archive format.&lt;/p&gt;\\n","pos":[3795,3867],"source":"\\n<p>The contents of the stream are not in the zip archive format.</p>\\n"},{"pos":[4330,4364],"content":"ZipArchive(Stream, ZipArchiveMode)","needQuote":true,"nodes":[{"content":"ZipArchive(Stream, ZipArchiveMode)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The input or output stream.&lt;/p&gt;\\n","pos":[5272,5310],"source":"\\n<p>The input or output stream.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.&lt;/p&gt;\\n","pos":[5396,5519],"source":"\\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is already closed, or the capabilities of the stream do not match the mode.&lt;/p&gt;\\n","pos":[5630,5727],"source":"\\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5832,5886],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mode&lt;/em&gt; is an invalid value.&lt;/p&gt;\\n","pos":[6003,6050],"source":"\\n<p>\\n<em>mode</em> is an invalid value.</p>\\n"},{"pos":[7172,7215],"content":"ZipArchive(Stream, ZipArchiveMode, Boolean)","needQuote":true,"nodes":[{"content":"ZipArchive(Stream, ZipArchiveMode, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The input or output stream.&lt;/p&gt;\\n","pos":[8209,8247],"source":"\\n<p>The input or output stream.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.&lt;/p&gt;\\n","pos":[8333,8456],"source":"\\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is already closed, or the capabilities of the stream do not match the mode.&lt;/p&gt;\\n","pos":[8853,8950],"source":"\\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9055,9109],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mode&lt;/em&gt; is an invalid value.&lt;/p&gt;\\n","pos":[9226,9273],"source":"\\n<p>\\n<em>mode</em> is an invalid value.</p>\\n"},{"pos":[10467,10520],"content":"ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)","needQuote":true,"nodes":[{"content":"ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The input or output stream.&lt;/p&gt;\\n","pos":[11640,11678],"source":"\\n<p>The input or output stream.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.&lt;/p&gt;\\n","pos":[11764,11887],"source":"\\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\\n"},{"content":"\\n&lt;p&gt;The encoding to use when reading or writing entry names in this archive.","pos":[12256,12333],"source":"\\n<p>The encoding to use when reading or writing entry names in this archive."},{"content":"Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.&lt;/p&gt;\\n","pos":[12334,12518],"source":" Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is already closed, or the capabilities of the stream do not match the mode.&lt;/p&gt;\\n","pos":[12629,12726],"source":"\\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12831,12885],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mode&lt;/em&gt; is an invalid value.&lt;/p&gt;\\n","pos":[13002,13049],"source":"\\n<p>\\n<em>mode</em> is an invalid value.</p>\\n"},{"pos":[13984,13991],"content":"Entries","needQuote":true,"nodes":[{"content":"Entries","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The collection of entries that are currently in the zip archive.&lt;/p&gt;\\n","pos":[14815,14890],"source":"\\n<p>The collection of entries that are currently in the zip archive.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive does not support reading.&lt;/p&gt;\\n","pos":[15009,15061],"source":"\\n<p>The zip archive does not support reading.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive has been disposed.&lt;/p&gt;\\n","pos":[15170,15215],"source":"\\n<p>The zip archive has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive is corrupt, and its entries cannot be retrieved.&lt;/p&gt;\\n","pos":[15324,15399],"source":"\\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\\n"},{"pos":[15702,15706],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that describes the type of action (read, create, or update) the zip archive can perform on entries.&lt;/p&gt;\\n","pos":[16438,16578],"source":"\\n<p>One of the enumeration values that describes the type of action (read, create, or update) the zip archive can perform on entries.</p>\\n"},{"pos":[16944,16963],"content":"CreateEntry(String)","needQuote":true,"nodes":[{"content":"CreateEntry(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A path, relative to the root of the archive, that specifies the name of the entry to be created.&lt;/p&gt;\\n","pos":[17740,17847],"source":"\\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\\n"},{"content":"\\n&lt;p&gt;An empty entry in the zip archive.&lt;/p&gt;\\n","pos":[17931,17976],"source":"\\n<p>An empty entry in the zip archive.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;entryName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18307,18364],"source":"\\n<p>\\n<em>entryName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive does not support writing.&lt;/p&gt;\\n","pos":[18469,18521],"source":"\\n<p>The zip archive does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive has been disposed.&lt;/p&gt;\\n","pos":[18630,18675],"source":"\\n<p>The zip archive has been disposed.</p>\\n"},{"pos":[19152,19189],"content":"CreateEntry(String, CompressionLevel)","needQuote":true,"nodes":[{"content":"CreateEntry(String, CompressionLevel)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;A path, relative to the root of the archive, that specifies the name of the entry to be created.&lt;/p&gt;\\n","pos":[20092,20199],"source":"\\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.&lt;/p&gt;\\n","pos":[20299,20435],"source":"\\n<p>One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</p>\\n"},{"content":"\\n&lt;p&gt;An empty entry in the zip archive.&lt;/p&gt;\\n","pos":[20519,20564],"source":"\\n<p>An empty entry in the zip archive.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;entryName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20895,20952],"source":"\\n<p>\\n<em>entryName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive does not support writing.&lt;/p&gt;\\n","pos":[21057,21109],"source":"\\n<p>The zip archive does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive has been disposed.&lt;/p&gt;\\n","pos":[21218,21263],"source":"\\n<p>The zip archive has been disposed.</p>\\n"},{"pos":[21584,21593],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[22644,22660],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to finish writing the archive and release unmanaged and managed resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[23788,23957],"source":"\\n<p>\\n<strong>true</strong> to finish writing the archive and release unmanaged and managed resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[24339,24355],"content":"GetEntry(String)","needQuote":true,"nodes":[{"content":"GetEntry(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A path, relative to the root of the archive, that identifies the entry to retrieve.&lt;/p&gt;\\n","pos":[25098,25192],"source":"\\n<p>A path, relative to the root of the archive, that identifies the entry to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;A wrapper for the specified entry in the archive; &lt;strong&gt;null&lt;/strong&gt; if the entry does not exist in the archive.&lt;/p&gt;\\n","pos":[25276,25402],"source":"\\n<p>A wrapper for the specified entry in the archive; <strong>null</strong> if the entry does not exist in the archive.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;entryName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25733,25790],"source":"\\n<p>\\n<em>entryName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive does not support reading.&lt;/p&gt;\\n","pos":[25895,25947],"source":"\\n<p>The zip archive does not support reading.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive has been disposed.&lt;/p&gt;\\n","pos":[26056,26101],"source":"\\n<p>The zip archive has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The zip archive is corrupt, and its entries cannot be retrieved.&lt;/p&gt;\\n","pos":[26210,26285],"source":"\\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\\n"},{"pos":[26458,26479],"content":"System.IO.Compression","needQuote":true,"nodes":[{"content":"System.IO.Compression","pos":[0,21]}]},{"pos":[26655,26661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26811,26822],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[26997,27007],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27102,27110],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27179,27180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27207,27208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27278,27286],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27355,27356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27383,27384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27567,27581],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27700,27706],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27773,27774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27824,27830],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27890,27891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27974,27980],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28047,28048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28098,28104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28164,28165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28379,28401],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28549,28555],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28622,28623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28673,28679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28740,28741]},{"pos":[28796,28802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28862,28863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28960,28966],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29033,29034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29084,29090],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29151,29152]},{"pos":[29207,29213],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29273,29274],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29519,29550],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29716,29731],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29807,29808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29858,29864],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29925,29926]},{"pos":[29981,29987],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30047,30048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30154,30169],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30245,30246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30296,30302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30363,30364]},{"pos":[30419,30425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30485,30486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30716,30729],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30830,30841],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30913,30914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30941,30942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31015,31026],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31098,31099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31126,31127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31302,31311],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31404,31411],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31479,31480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31507,31508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31577,31584],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31652,31653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31680,31681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31856,31873],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31982,31997],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32073,32074],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32101,32102],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32179,32194],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32270,32271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32298,32299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32444,32450],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[32587,32593],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[32723,32732],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[32910,32924],"content":"ZipArchiveMode","needQuote":true,"nodes":[{"content":"ZipArchiveMode","pos":[0,14]}]},{"pos":[33124,33131],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[33291,33299],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[33441,33452],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[33743,33778],"content":"ReadOnlyCollection<ZipArchiveEntry>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;ZipArchiveEntry&gt;","pos":[0,35],"source":"ReadOnlyCollection<ZipArchiveEntry>"}]},{"pos":[34123,34141],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[34237,34238],"content":"<","needQuote":true,"nodes":[]},{"pos":[34312,34327],"content":"ZipArchiveEntry","needQuote":true,"nodes":[{"content":"ZipArchiveEntry","pos":[0,15]}]},{"pos":[34494,34512],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[34609,34612]},{"pos":[34693,34708],"content":"ZipArchiveEntry","needQuote":true,"nodes":[{"content":"ZipArchiveEntry","pos":[0,15]}]},{"pos":[34771,34772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35090,35111],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[35370,35388],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[35463,35464],"content":"<","needQuote":true,"nodes":[]},{"pos":[35491,35492],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35623,35641],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[35717,35720]},{"pos":[35754,35755],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35782,35783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36015,36045],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[36248,36254],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36438,36453],"content":"ZipArchiveEntry","needQuote":true,"nodes":[{"content":"ZipArchiveEntry","pos":[0,15]}]},{"pos":[36695,36711],"content":"CompressionLevel","needQuote":true,"nodes":[{"content":"CompressionLevel","pos":[0,16]}]},{"pos":[36941,36950],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[37053,37060],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[37112,37113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37140,37141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37215,37222],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[37274,37275],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37302,37303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37477,37494],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[37670,37691],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[37881,37901],"content":"InvalidDataException","needQuote":true,"nodes":[{"content":"InvalidDataException","pos":[0,20]}]},{"pos":[38098,38125],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[38348,38369],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[38559,38582],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]}],"content":"items:\n- uid: System.IO.Compression.ZipArchive\n  commentId: T:System.IO.Compression.ZipArchive\n  id: ZipArchive\n  parent: System.IO.Compression\n  children:\n  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)\n  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)\n  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)\n  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)\n  - System.IO.Compression.ZipArchive.CreateEntry(System.String)\n  - System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)\n  - System.IO.Compression.ZipArchive.Dispose\n  - System.IO.Compression.ZipArchive.Dispose(System.Boolean)\n  - System.IO.Compression.ZipArchive.Entries\n  - System.IO.Compression.ZipArchive.GetEntry(System.String)\n  - System.IO.Compression.ZipArchive.Mode\n  langs:\n  - csharp\n  - vb\n  name: ZipArchive\n  fullName: System.IO.Compression.ZipArchive\n  type: Class\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ZipArchive\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 63\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Represents a package of compressed files in the zip archive format.</p>\\n\"\n  syntax:\n    content: 'public class ZipArchive : IDisposable'\n    content.vb: >-\n      Public Class ZipArchive\n          Implements IDisposable\n  seealso:\n  - type: System.IO.Compression.ZipFile\n    commentId: T:System.IO.Compression.ZipFile\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ZipArchive\n- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)\n  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: ZipArchive(Stream)\n  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 65\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified stream.</p>\\n\"\n  syntax:\n    content: public ZipArchive(Stream stream)\n    content.vb: Public Sub New(stream As Stream)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream that contains the archive to be read.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream is already closed or does not support reading.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.InvalidDataException\n    commentId: T:System.IO.InvalidDataException\n    description: \"\\n<p>The contents of the stream are not in the zip archive format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.ZipArchive(Stream)\n- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)\n  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)\n  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)'\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: ZipArchive(Stream, ZipArchiveMode)\n  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 66\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified stream and with the specified mode.</p>\\n\"\n  syntax:\n    content: public ZipArchive(Stream stream, ZipArchiveMode mode)\n    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The input or output stream.</p>\\n\"\n    - id: mode\n      type: System.IO.Compression.ZipArchiveMode\n      description: \"\\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>mode</em> is an invalid value.</p>\\n\"\n  - type: System.IO.InvalidDataException\n    commentId: T:System.IO.InvalidDataException\n    description: \"\\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.Compression.ZipArchiveMode.Update\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.Compression.ZipArchiveMode.Update\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an entry is too large to fit into memory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.ZipArchive(Stream, ZipArchiveMode)\n- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)\n  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)'\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: ZipArchive(Stream, ZipArchiveMode, Boolean)\n  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 67\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class on the specified stream for the specified mode, and optionally leaves the stream open.</p>\\n\"\n  syntax:\n    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen)\n    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The input or output stream.</p>\\n\"\n    - id: mode\n      type: System.IO.Compression.ZipArchiveMode\n      description: \"\\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\\n\"\n    - id: leaveOpen\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to leave the stream open after the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>mode</em> is an invalid value.</p>\\n\"\n  - type: System.IO.InvalidDataException\n    commentId: T:System.IO.InvalidDataException\n    description: \"\\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.Compression.ZipArchiveMode.Update\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.Compression.ZipArchiveMode.Update\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an entry is too large to fit into memory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.ZipArchive(Stream, ZipArchiveMode, Boolean)\n- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)\n  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)\n  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)'\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)\n  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean, System.Text.Encoding)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 68\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class on the specified stream for the specified mode, uses the specified encoding for entry names, and optionally leaves the stream open.</p>\\n\"\n  syntax:\n    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding)\n    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean, entryNameEncoding As Encoding)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The input or output stream.</p>\\n\"\n    - id: mode\n      type: System.IO.Compression.ZipArchiveMode\n      description: \"\\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\\n\"\n    - id: leaveOpen\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to leave the stream open after the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: entryNameEncoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>mode</em> is an invalid value.</p>\\n\"\n  - type: System.IO.InvalidDataException\n    commentId: T:System.IO.InvalidDataException\n    description: \"\\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.Compression.ZipArchiveMode.Update\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.Compression.ZipArchiveMode.Update\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an entry is too large to fit into memory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)\n- uid: System.IO.Compression.ZipArchive.Entries\n  commentId: P:System.IO.Compression.ZipArchive.Entries\n  id: Entries\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: Entries\n  fullName: System.IO.Compression.ZipArchive.Entries\n  type: Property\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Entries\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 69\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Gets the collection of entries that are currently in the zip archive.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<ZipArchiveEntry> Entries { get; }\n    content.vb: Public ReadOnly Property Entries As ReadOnlyCollection(Of ZipArchiveEntry)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}\n      description: \"\\n<p>The collection of entries that are currently in the zip archive.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The zip archive does not support reading.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The zip archive has been disposed.</p>\\n\"\n  - type: System.IO.InvalidDataException\n    commentId: T:System.IO.InvalidDataException\n    description: \"\\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ZipArchive.Entries\n- uid: System.IO.Compression.ZipArchive.Mode\n  commentId: P:System.IO.Compression.ZipArchive.Mode\n  id: Mode\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: Mode\n  fullName: System.IO.Compression.ZipArchive.Mode\n  type: Property\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mode\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 70\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Gets a value that describes the type of action the zip archive can perform on entries.</p>\\n\"\n  syntax:\n    content: public ZipArchiveMode Mode { get; }\n    content.vb: Public ReadOnly Property Mode As ZipArchiveMode\n    parameters: []\n    return:\n      type: System.IO.Compression.ZipArchiveMode\n      description: \"\\n<p>One of the enumeration values that describes the type of action (read, create, or update) the zip archive can perform on entries.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ZipArchive.Mode\n- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String)\n  commentId: M:System.IO.Compression.ZipArchive.CreateEntry(System.String)\n  id: CreateEntry(System.String)\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: CreateEntry(String)\n  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEntry\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 71\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Creates an empty entry that has the specified path and entry name in the zip archive.</p>\\n\"\n  syntax:\n    content: public ZipArchiveEntry CreateEntry(string entryName)\n    content.vb: Public Function CreateEntry(entryName As String) As ZipArchiveEntry\n    parameters:\n    - id: entryName\n      type: System.String\n      description: \"\\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\\n\"\n    return:\n      type: System.IO.Compression.ZipArchiveEntry\n      description: \"\\n<p>An empty entry in the zip archive.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>entryName</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>entryName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The zip archive does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The zip archive has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.CreateEntry(String)\n- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)\n  commentId: M:System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)\n  id: CreateEntry(System.String,System.IO.Compression.CompressionLevel)\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: CreateEntry(String, CompressionLevel)\n  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String, System.IO.Compression.CompressionLevel)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEntry\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 72\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Creates an empty entry that has the specified entry name and compression level in the zip archive.</p>\\n\"\n  syntax:\n    content: public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel)\n    content.vb: Public Function CreateEntry(entryName As String, compressionLevel As CompressionLevel) As ZipArchiveEntry\n    parameters:\n    - id: entryName\n      type: System.String\n      description: \"\\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\\n\"\n    - id: compressionLevel\n      type: System.IO.Compression.CompressionLevel\n      description: \"\\n<p>One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</p>\\n\"\n    return:\n      type: System.IO.Compression.ZipArchiveEntry\n      description: \"\\n<p>An empty entry in the zip archive.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>entryName</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>entryName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The zip archive does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The zip archive has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.CreateEntry(String, CompressionLevel)\n- uid: System.IO.Compression.ZipArchive.Dispose\n  commentId: M:System.IO.Compression.ZipArchive.Dispose\n  id: Dispose\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.Compression.ZipArchive.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 73\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Releases the resources used by the current instance of the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.Dispose()\n- uid: System.IO.Compression.ZipArchive.Dispose(System.Boolean)\n  commentId: M:System.IO.Compression.ZipArchive.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.Compression.ZipArchive.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 74\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Called by the <xref href=\\\"System.IO.Compression.ZipArchive.Dispose\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Object.Finalize\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods to release the unmanaged resources used by the current instance of the <xref href=\\\"System.IO.Compression.ZipArchive\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, and optionally finishes writing the archive and releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to finish writing the archive and release unmanaged and managed resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ZipArchive.Dispose(Boolean)\n- uid: System.IO.Compression.ZipArchive.GetEntry(System.String)\n  commentId: M:System.IO.Compression.ZipArchive.GetEntry(System.String)\n  id: GetEntry(System.String)\n  parent: System.IO.Compression.ZipArchive\n  langs:\n  - csharp\n  - vb\n  name: GetEntry(String)\n  fullName: System.IO.Compression.ZipArchive.GetEntry(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.Compression/ref/System.IO.Compression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEntry\n    path: src/System.IO.Compression/ref/System.IO.Compression.cs\n    startLine: 75\n  assemblies:\n  - System.IO.Compression\n  namespace: System.IO.Compression\n  summary: \"\\n<p>Retrieves a wrapper for the specified entry in the zip archive.</p>\\n\"\n  syntax:\n    content: public ZipArchiveEntry GetEntry(string entryName)\n    content.vb: Public Function GetEntry(entryName As String) As ZipArchiveEntry\n    parameters:\n    - id: entryName\n      type: System.String\n      description: \"\\n<p>A path, relative to the root of the archive, that identifies the entry to retrieve.</p>\\n\"\n    return:\n      type: System.IO.Compression.ZipArchiveEntry\n      description: \"\\n<p>A wrapper for the specified entry in the archive; <strong>null</strong> if the entry does not exist in the archive.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>entryName</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>entryName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The zip archive does not support reading.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The zip archive has been disposed.</p>\\n\"\n  - type: System.IO.InvalidDataException\n    commentId: T:System.IO.InvalidDataException\n    description: \"\\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ZipArchive.GetEntry(String)\nreferences:\n- uid: System.IO.Compression\n  isExternal: false\n  name: System.IO.Compression\n  fullName: System.IO.Compression\n  commentId: N:System.IO.Compression\n  nameWithType: System.IO.Compression\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.IO.Compression.ZipArchiveMode\n  parent: System.IO.Compression\n  isExternal: false\n  name: ZipArchiveMode\n  fullName: System.IO.Compression.ZipArchiveMode\n  commentId: T:System.IO.Compression.ZipArchiveMode\n  nameWithType: ZipArchiveMode\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  commentId: T:System.Text.Encoding\n  nameWithType: Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  commentId: N:System.Text\n  nameWithType: System.Text\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<ZipArchiveEntry>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.IO.Compression.ZipArchiveEntry)\n  name.vb: ReadOnlyCollection(Of ZipArchiveEntry)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IO.Compression.ZipArchiveEntry\n    name: ZipArchiveEntry\n    fullName: System.IO.Compression.ZipArchiveEntry\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.Compression.ZipArchiveEntry\n    name: ZipArchiveEntry\n    fullName: System.IO.Compression.ZipArchiveEntry\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}\n  nameWithType: ReadOnlyCollection<ZipArchiveEntry>\n  nameWithType.vb: ReadOnlyCollection(Of ZipArchiveEntry)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IO.Compression.ZipArchiveEntry\n  parent: System.IO.Compression\n  isExternal: false\n  name: ZipArchiveEntry\n  fullName: System.IO.Compression.ZipArchiveEntry\n  commentId: T:System.IO.Compression.ZipArchiveEntry\n  nameWithType: ZipArchiveEntry\n- uid: System.IO.Compression.CompressionLevel\n  parent: System.IO.Compression\n  isExternal: false\n  name: CompressionLevel\n  fullName: System.IO.Compression.CompressionLevel\n  commentId: T:System.IO.Compression.CompressionLevel\n  nameWithType: CompressionLevel\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.IO.InvalidDataException\n  isExternal: false\n  name: InvalidDataException\n  fullName: System.IO.InvalidDataException\n  nameWithType: InvalidDataException\n  commentId: T:System.IO.InvalidDataException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n"}