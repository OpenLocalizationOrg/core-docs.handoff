{"nodes":[{"pos":[635,648],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[2396,2397],"content":"D","needQuote":true,"nodes":[{"content":"D","pos":[0,1]}]},{"pos":[3487,3489],"content":"DP","needQuote":true,"nodes":[{"content":"DP","pos":[0,2]}]},{"pos":[4585,4587],"content":"DQ","needQuote":true,"nodes":[{"content":"DQ","pos":[0,2]}]},{"pos":[5701,5709],"content":"Exponent","needQuote":true,"nodes":[{"content":"Exponent","pos":[0,8]}]},{"pos":[6859,6867],"content":"InverseQ","needQuote":true,"nodes":[{"content":"InverseQ","pos":[0,8]}]},{"pos":[8014,8021],"content":"Modulus","needQuote":true,"nodes":[{"content":"Modulus","pos":[0,7]}]},{"pos":[9144,9145],"content":"P","needQuote":true,"nodes":[{"content":"P","pos":[0,1]}]},{"pos":[10232,10233],"content":"Q","needQuote":true,"nodes":[{"content":"Q","pos":[0,1]}]},{"pos":[11188,11216],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[11447,11461],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11586,11592],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11641,11642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11692,11698],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11758,11759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11845,11851],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11900,11901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11951,11957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12017,12018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12221,12234],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12341,12352],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12406,12407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12434,12435],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12511,12522],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12576,12577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12604,12605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12794,12804],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12905,12913],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12964,12965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12992,12993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13066,13074],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13125,13126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13153,13154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13357,13379],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13527,13533],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13600,13601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13651,13657],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13718,13719]},{"pos":[13774,13780],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13840,13841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13938,13944],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14011,14012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14062,14068],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14129,14130]},{"pos":[14185,14191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14251,14252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14497,14528],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14694,14709],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14785,14786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14836,14842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14903,14904]},{"pos":[14959,14965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15025,15026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15132,15147],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15223,15224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15274,15280],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15341,15342]},{"pos":[15397,15403],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15463,15464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15690,15699],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15792,15799],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15867,15868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15895,15896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15965,15972],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16040,16041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16068,16069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16225,16234],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[16388,16394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16515,16521],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16615,16621],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[16741,16745],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[16804,16806]},{"pos":[16869,16873],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16931,16933],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Security.Cryptography.RSAParameters\n  commentId: T:System.Security.Cryptography.RSAParameters\n  id: RSAParameters\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.RSAParameters.D\n  - System.Security.Cryptography.RSAParameters.DP\n  - System.Security.Cryptography.RSAParameters.DQ\n  - System.Security.Cryptography.RSAParameters.Exponent\n  - System.Security.Cryptography.RSAParameters.InverseQ\n  - System.Security.Cryptography.RSAParameters.Modulus\n  - System.Security.Cryptography.RSAParameters.P\n  - System.Security.Cryptography.RSAParameters.Q\n  langs:\n  - csharp\n  - vb\n  name: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n  type: Struct\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RSAParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 246\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the standard parameters for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct RSAParameters\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure RSAParameters\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: RSAParameters\n- uid: System.Security.Cryptography.RSAParameters.D\n  commentId: F:System.Security.Cryptography.RSAParameters.D\n  id: D\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: D\n  fullName: System.Security.Cryptography.RSAParameters.D\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: D\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 249\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>D</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] D\n    content.vb: Public D As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.D\n- uid: System.Security.Cryptography.RSAParameters.DP\n  commentId: F:System.Security.Cryptography.RSAParameters.DP\n  id: DP\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: DP\n  fullName: System.Security.Cryptography.RSAParameters.DP\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DP\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 250\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>DP</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] DP\n    content.vb: Public DP As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.DP\n- uid: System.Security.Cryptography.RSAParameters.DQ\n  commentId: F:System.Security.Cryptography.RSAParameters.DQ\n  id: DQ\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: DQ\n  fullName: System.Security.Cryptography.RSAParameters.DQ\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DQ\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 251\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>DQ</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] DQ\n    content.vb: Public DQ As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.DQ\n- uid: System.Security.Cryptography.RSAParameters.Exponent\n  commentId: F:System.Security.Cryptography.RSAParameters.Exponent\n  id: Exponent\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: Exponent\n  fullName: System.Security.Cryptography.RSAParameters.Exponent\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Exponent\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 252\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>Exponent</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] Exponent\n    content.vb: Public Exponent As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.Exponent\n- uid: System.Security.Cryptography.RSAParameters.InverseQ\n  commentId: F:System.Security.Cryptography.RSAParameters.InverseQ\n  id: InverseQ\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: InverseQ\n  fullName: System.Security.Cryptography.RSAParameters.InverseQ\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InverseQ\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 253\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>InverseQ</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] InverseQ\n    content.vb: Public InverseQ As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.InverseQ\n- uid: System.Security.Cryptography.RSAParameters.Modulus\n  commentId: F:System.Security.Cryptography.RSAParameters.Modulus\n  id: Modulus\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: Modulus\n  fullName: System.Security.Cryptography.RSAParameters.Modulus\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modulus\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 254\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>Modulus</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] Modulus\n    content.vb: Public Modulus As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.Modulus\n- uid: System.Security.Cryptography.RSAParameters.P\n  commentId: F:System.Security.Cryptography.RSAParameters.P\n  id: P\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: P\n  fullName: System.Security.Cryptography.RSAParameters.P\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: P\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 255\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>P</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] P\n    content.vb: Public P As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.P\n- uid: System.Security.Cryptography.RSAParameters.Q\n  commentId: F:System.Security.Cryptography.RSAParameters.Q\n  id: Q\n  parent: System.Security.Cryptography.RSAParameters\n  langs:\n  - csharp\n  - vb\n  name: Q\n  fullName: System.Security.Cryptography.RSAParameters.Q\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Q\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 256\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the <strong>Q</strong> parameter for the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] Q\n    content.vb: Public Q As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAParameters.Q\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n"}