{"nodes":[{"pos":[2049,2057],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[4256,4272],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A collection that contains this assembly's custom attributes.&lt;/p&gt;\\n","pos":[5104,5176],"source":"\\n<p>A collection that contains this assembly's custom attributes.</p>\\n"},{"pos":[5520,5532],"content":"DefinedTypes","needQuote":true,"nodes":[{"content":"DefinedTypes","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A collection of the types defined in this assembly.&lt;/p&gt;\\n","pos":[6305,6367],"source":"\\n<p>A collection of the types defined in this assembly.</p>\\n"},{"pos":[6822,6835],"content":"ExportedTypes","needQuote":true,"nodes":[{"content":"ExportedTypes","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A collection of the public types defined in this assembly that are visible outside the assembly.&lt;/p&gt;\\n","pos":[7634,7741],"source":"\\n<p>A collection of the public types defined in this assembly that are visible outside the assembly.</p>\\n"},{"pos":[8076,8086],"content":"EntryPoint","needQuote":true,"nodes":[{"content":"EntryPoint","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An object that represents the entry point of this assembly.","pos":[8770,8834],"source":"\\n<p>An object that represents the entry point of this assembly."},{"content":"If no entry point is found (for example, the assembly is a DLL), &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[8835,8940],"source":" If no entry point is found (for example, the assembly is a DLL), <strong>null</strong> is returned.</p>\\n"},{"pos":[9266,9274],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The display name of the assembly.&lt;/p&gt;\\n","pos":[9927,9971],"source":"\\n<p>The display name of the assembly.</p>\\n"},{"pos":[10298,10307],"content":"IsDynamic","needQuote":true,"nodes":[{"content":"IsDynamic","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current assembly was generated dynamically in the current process; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11058,11201],"source":"\\n<p>\\n<strong>true</strong> if the current assembly was generated dynamically in the current process; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11544,11558],"content":"ManifestModule","needQuote":true,"nodes":[{"content":"ManifestModule","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The module that contains the manifest for the assembly.","pos":[12330,12390],"source":"\\n<p>The module that contains the manifest for the assembly."},{"content":"&lt;/p&gt;\\n","pos":[12391,12397],"source":" </p>\\n"},{"pos":[12724,12731],"content":"Modules","needQuote":true,"nodes":[{"content":"Modules","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A collection that contains the modules in this assembly.&lt;/p&gt;\\n","pos":[13484,13551],"source":"\\n<p>A collection that contains the modules in this assembly.</p>\\n"},{"pos":[13915,13929],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.","pos":[14617,14663],"source":"\\n<p>The object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[14664,14670],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;o&lt;/em&gt; is equal to this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14731,14841],"source":"\\n<p>\\n<strong>true</strong> if <em>o</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15208,15221],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[15849,15894],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[16331,16362],"content":"GetManifestResourceInfo(String)","needQuote":true,"nodes":[{"content":"GetManifestResourceInfo(String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The case-sensitive name of the resource.","pos":[17182,17227],"source":"\\n<p>The case-sensitive name of the resource."},{"content":"&lt;/p&gt;\\n","pos":[17228,17234],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is populated with information about the resource's topology, or &lt;strong&gt;null&lt;/strong&gt; if the resource is not found.&lt;/p&gt;\\n","pos":[17319,17460],"source":"\\n<p>An object that is populated with information about the resource's topology, or <strong>null</strong> if the resource is not found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;resourceName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17579,17633],"source":"\\n<p>\\n<em>resourceName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17634,17640],"source":" </p>\\n"},{"pos":[18459,18485],"content":"GetManifestResourceNames()","needQuote":true,"nodes":[{"content":"GetManifestResourceNames()","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An array that contains the names of all the resources.&lt;/p&gt;\\n","pos":[19191,19256],"source":"\\n<p>An array that contains the names of all the resources.</p>\\n"},{"pos":[19979,20012],"content":"GetManifestResourceStream(String)","needQuote":true,"nodes":[{"content":"GetManifestResourceStream(String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The case-sensitive name of the manifest resource being requested.","pos":[20776,20846],"source":"\\n<p>The case-sensitive name of the manifest resource being requested."},{"content":"&lt;/p&gt;\\n","pos":[20847,20853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The manifest resource; or &lt;strong&gt;null&lt;/strong&gt; if no resources were specified during compilation or if the resource is not visible to the caller.&lt;/p&gt;\\n","pos":[20916,21073],"source":"\\n<p>The manifest resource; or <strong>null</strong> if no resources were specified during compilation or if the resource is not visible to the caller.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;name&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21192,21250],"source":"\\n<p>The <em>name</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21251,21257],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; was not found.","pos":[21952,21987],"source":"\\n<p>\\n<em>name</em> was not found."},{"content":"&lt;/p&gt;\\n","pos":[21988,21994],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid assembly.","pos":[22103,22148],"source":"\\n<p>\\n<em>name</em> is not a valid assembly."},{"content":"&lt;/p&gt;\\n","pos":[22149,22155],"source":" </p>\\n"},{"pos":[23113,23122],"content":"GetName()","needQuote":true,"nodes":[{"content":"GetName()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An object that contains the fully parsed display name for this assembly.&lt;/p&gt;\\n","pos":[23914,23997],"source":"\\n<p>An object that contains the fully parsed display name for this assembly.</p>\\n"},{"pos":[24467,24482],"content":"GetType(String)","needQuote":true,"nodes":[{"content":"GetType(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The full name of the type.","pos":[25250,25281],"source":"\\n<p>The full name of the type."},{"content":"&lt;/p&gt;\\n","pos":[25282,25288],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified class, or &lt;strong&gt;null&lt;/strong&gt; if the class is not found.&lt;/p&gt;\\n","pos":[25346,25455],"source":"\\n<p>An object that represents the specified class, or <strong>null</strong> if the class is not found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is invalid.","pos":[25566,25598],"source":"\\n<p>\\n<em>name</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[25599,25605],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25710,25756],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25757,25763],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[25874,25949],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[25950,25956],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[26688,26777],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","pos":[26778,26934],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."},{"content":"&lt;/p&gt;\\n","pos":[26935,26941],"source":" </p>\\n"},{"pos":[27383,27416],"content":"GetType(String, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"GetType(String, Boolean, Boolean)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The full name of the type.","pos":[28394,28425],"source":"\\n<p>The full name of the type."},{"content":"&lt;/p&gt;\\n","pos":[28426,28432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception if the type is not found; &lt;strong&gt;false&lt;/strong&gt; to return &lt;strong&gt;null&lt;/strong&gt;.","pos":[28504,28636],"source":"\\n<p>\\n<strong>true</strong> to throw an exception if the type is not found; <strong>false</strong> to return <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28637,28643],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore the case of the type name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[28713,28813],"source":"\\n<p>\\n<strong>true</strong> to ignore the case of the type name; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28814,28820],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified class.&lt;/p&gt;\\n","pos":[28878,28935],"source":"\\n<p>An object that represents the specified class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The length of &lt;em&gt;name&lt;/em&gt; exceeds 1024 characters.","pos":[29046,29153],"source":"\\n<p>\\n<em>name</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The length of <em>name</em> exceeds 1024 characters."},{"content":"&lt;/p&gt;\\n","pos":[29154,29160],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29265,29311],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29312,29318],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;throwOnError&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, and the type cannot be found.&lt;/p&gt;\\n","pos":[29415,29505],"source":"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[29616,29691],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[29692,29698],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;name&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[29801,30050],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[30051,30057],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[30166,30255],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.&lt;/p&gt;\\n","pos":[30256,30418],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n"},{"pos":[30830,30848],"content":"Load(AssemblyName)","needQuote":true,"nodes":[{"content":"Load(AssemblyName)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The object that describes the assembly to be loaded.","pos":[31825,31882],"source":"\\n<p>The object that describes the assembly to be loaded."},{"content":"&lt;/p&gt;\\n","pos":[31883,31889],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The loaded assembly.&lt;/p&gt;\\n","pos":[31962,31993],"source":"\\n<p>The loaded assembly.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;assemblyRef&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32112,32165],"source":"\\n<p>\\n<em>assemblyRef</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32166,32172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;assemblyRef&lt;/em&gt; is not found.","pos":[32283,32324],"source":"\\n<p>\\n<em>assemblyRef</em> is not found."},{"content":"&lt;/p&gt;\\n","pos":[32325,32331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;assemblyRef&lt;/em&gt; is not a valid assembly.","pos":[32861,32913],"source":"\\n<p>\\n<em>assemblyRef</em> is not a valid assembly."},{"content":"-or-&lt;/p&gt;\\n&lt;p&gt;Version 2.0 or later of the common language runtime is currently loaded and &lt;em&gt;assemblyRef&lt;/em&gt; was compiled with a later version.&lt;/p&gt;\\n","pos":[32914,33064],"source":" -or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded and <em>assemblyRef</em> was compiled with a later version.</p>\\n"},{"pos":[33817,33835],"content":"GetEntryAssembly()","needQuote":true,"nodes":[{"content":"GetEntryAssembly()","pos":[0,18]}]},{"pos":[35403,35411],"content":"Location","needQuote":true,"nodes":[{"content":"Location","pos":[0,8]}]},{"pos":[37322,37332],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The full name of the assembly, or the class name if the full name of the assembly cannot be determined.&lt;/p&gt;\\n","pos":[37982,38096],"source":"\\n<p>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</p>\\n"},{"pos":[38437,38445],"content":"CodeBase","needQuote":true,"nodes":[{"content":"CodeBase","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The location of the assembly as specified originally.&lt;/p&gt;\\n","pos":[39297,39361],"source":"\\n<p>The location of the assembly as specified originally.</p>\\n"},{"pos":[39842,39861],"content":"ImageRuntimeVersion","needQuote":true,"nodes":[{"content":"ImageRuntimeVersion","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The CLR version folder name.","pos":[40711,40744],"source":"\\n<p>The CLR version folder name."},{"content":"This is not a full path.&lt;/p&gt;\\n","pos":[40745,40775],"source":" This is not a full path.</p>\\n"},{"pos":[41173,41195],"content":"CreateInstance(String)","needQuote":true,"nodes":[{"content":"CreateInstance(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[42969,43019],"source":"\\n<p>\\n<em>typeName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43020,43026],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;No matching constructor was found.","pos":[43133,43172],"source":"\\n<p>No matching constructor was found."},{"content":"&lt;/p&gt;\\n","pos":[43173,43179],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[43290,43369],"source":"\\n<p>\\n<em>typeName</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[43370,43376],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[43479,43736],"source":"\\n<p>\\n<em>typeName</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>typeName</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[43737,43743],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[43852,43945],"source":"\\n<p>\\n<em>typeName</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.&lt;/p&gt;\\n","pos":[43946,44119],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</p>\\n"},{"pos":[44648,44679],"content":"CreateInstance(String, Boolean)","needQuote":true,"nodes":[{"content":"CreateInstance(String, Boolean)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore the case of the type name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[45719,45819],"source":"\\n<p>\\n<strong>true</strong> to ignore the case of the type name; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45820,45826],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;No matching constructor was found.","pos":[46696,46735],"source":"\\n<p>No matching constructor was found."},{"content":"&lt;/p&gt;\\n","pos":[46736,46742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46847,46897],"source":"\\n<p>\\n<em>typeName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[46898,46904],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[47015,47094],"source":"\\n<p>\\n<em>typeName</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[47095,47101],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[47204,47461],"source":"\\n<p>\\n<em>typeName</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>typeName</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[47462,47468],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[47577,47670],"source":"\\n<p>\\n<em>typeName</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.&lt;/p&gt;\\n","pos":[47671,47844],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</p>\\n"},{"pos":[48394,48429],"content":"CreateQualifiedName(String, String)","needQuote":true,"nodes":[{"content":"CreateQualifiedName(String, String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The display name of an assembly.","pos":[49254,49291],"source":"\\n<p>The display name of an assembly."},{"content":"&lt;/p&gt;\\n","pos":[49292,49298],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The full name of a type.","pos":[49365,49394],"source":"\\n<p>The full name of a type."},{"content":"&lt;/p&gt;\\n","pos":[49395,49401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The full name of the type qualified by the display name of the assembly.&lt;/p&gt;\\n","pos":[49461,49544],"source":"\\n<p>The full name of the type qualified by the display name of the assembly.</p>\\n"},{"pos":[50092,50145],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[51811,51870],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[53434,53452],"content":"GetExportedTypes()","needQuote":true,"nodes":[{"content":"GetExportedTypes()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An array that represents the types defined in this assembly that are visible outside the assembly.&lt;/p&gt;\\n","pos":[54149,54258],"source":"\\n<p>An array that represents the types defined in this assembly that are visible outside the assembly.</p>\\n"},{"content":"\\n&lt;p&gt;The assembly is a dynamic assembly.&lt;/p&gt;\\n","pos":[54377,54423],"source":"\\n<p>The assembly is a dynamic assembly.</p>\\n"},{"pos":[54781,54806],"content":"GetReferencedAssemblies()","needQuote":true,"nodes":[{"content":"GetReferencedAssemblies()","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An array that contains the fully parsed display names of all the assemblies referenced by this assembly.&lt;/p&gt;\\n","pos":[55640,55755],"source":"\\n<p>An array that contains the fully parsed display names of all the assemblies referenced by this assembly.</p>\\n"},{"pos":[56162,56186],"content":"GetType(String, Boolean)","needQuote":true,"nodes":[{"content":"GetType(String, Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The full name of the type.","pos":[57074,57105],"source":"\\n<p>The full name of the type."},{"content":"&lt;/p&gt;\\n","pos":[57106,57112],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception if the type is not found; &lt;strong&gt;false&lt;/strong&gt; to return &lt;strong&gt;null&lt;/strong&gt;.","pos":[57184,57316],"source":"\\n<p>\\n<strong>true</strong> to throw an exception if the type is not found; <strong>false</strong> to return <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[57317,57323],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified class.&lt;/p&gt;\\n","pos":[57381,57438],"source":"\\n<p>An object that represents the specified class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The length of &lt;em&gt;name&lt;/em&gt; exceeds 1024 characters.","pos":[57549,57656],"source":"\\n<p>\\n<em>name</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The length of <em>name</em> exceeds 1024 characters."},{"content":"&lt;/p&gt;\\n","pos":[57657,57663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[57768,57814],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[57815,57821],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;throwOnError&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, and the type cannot be found.&lt;/p&gt;\\n","pos":[57918,58008],"source":"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[58119,58194],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[58195,58201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;name&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[58304,58553],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[58554,58560],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[58669,58758],"source":"\\n<p>\\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.&lt;/p&gt;\\n","pos":[58759,58921],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n"},{"pos":[59240,59250],"content":"GetTypes()","needQuote":true,"nodes":[{"content":"GetTypes()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An array that contains all the types that are defined in this assembly.&lt;/p&gt;\\n","pos":[59870,59952],"source":"\\n<p>An array that contains all the types that are defined in this assembly.</p>\\n"},{"pos":[61268,61317],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[62645,62662],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[62826,62832],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63017,63041],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[63304,63326],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[63474,63480],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63547,63548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63598,63604],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63665,63666]},{"pos":[63721,63727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63787,63788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63885,63891],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63958,63959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64009,64015],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64076,64077]},{"pos":[64132,64138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64198,64199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64444,64475],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[64641,64656],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[64732,64733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64783,64789],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64850,64851]},{"pos":[64906,64912],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64972,64973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65079,65094],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[65170,65171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65221,65227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[65288,65289]},{"pos":[65344,65350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65410,65411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65637,65646],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[65739,65746],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65814,65815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65842,65843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65912,65919],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65987,65988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66015,66016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66191,66208],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[66317,66332],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[66408,66409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66436,66437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66514,66529],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[66605,66606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66633,66634],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66779,66785],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[67035,67067],"content":"IEnumerable<CustomAttributeData>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;CustomAttributeData&gt;","pos":[0,32],"source":"IEnumerable<CustomAttributeData>"}]},{"pos":[67376,67387],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[67472,67473],"content":"<","needQuote":true,"nodes":[]},{"pos":[67547,67566],"content":"CustomAttributeData","needQuote":true,"nodes":[{"content":"CustomAttributeData","pos":[0,19]}]},{"pos":[67722,67733],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[67819,67822]},{"pos":[67903,67922],"content":"CustomAttributeData","needQuote":true,"nodes":[{"content":"CustomAttributeData","pos":[0,19]}]},{"pos":[67985,67986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68276,68290],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[68509,68520],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[68584,68585],"content":"<","needQuote":true,"nodes":[]},{"pos":[68612,68613],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[68733,68744],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[68809,68812]},{"pos":[68846,68847],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[68874,68875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69078,69104],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[69403,69424],"content":"IEnumerable<TypeInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TypeInfo&gt;","pos":[0,21],"source":"IEnumerable<TypeInfo>"}]},{"pos":[69700,69711],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[69796,69797],"content":"<","needQuote":true,"nodes":[]},{"pos":[69860,69868],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[70013,70024],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[70110,70113]},{"pos":[70183,70191],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[70243,70244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70584,70601],"content":"IEnumerable<Type>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Type&gt;","pos":[0,17],"source":"IEnumerable<Type>"}]},{"pos":[70843,70854],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[70939,70940],"content":"<","needQuote":true,"nodes":[]},{"pos":[70988,70992],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[71143,71154],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[71240,71243]},{"pos":[71298,71302],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[71360,71361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71611,71621],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[71800,71806],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[71952,71959],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[72129,72135],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[72408,72427],"content":"IEnumerable<Module>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Module&gt;","pos":[0,19],"source":"IEnumerable<Module>"}]},{"pos":[72697,72708],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72793,72794],"content":"<","needQuote":true,"nodes":[]},{"pos":[72855,72861],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[73004,73015],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[73101,73104]},{"pos":[73172,73178],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[73228,73229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73498,73512],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[73631,73637],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73704,73705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73755,73761],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73821,73822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73905,73911],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73978,73979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74029,74035],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74095,74096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74286,74299],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[74400,74411],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[74483,74484],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74511,74512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74585,74596],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[74668,74669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74696,74697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74857,74862],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75040,75060],"content":"ManifestResourceInfo","needQuote":true,"nodes":[{"content":"ManifestResourceInfo","pos":[0,20]}]},{"pos":[75234,75242],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[75370,75376],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[75437,75439]},{"pos":[75504,75510],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[75570,75572],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[75715,75721],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[75851,75860],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[76028,76040],"content":"AssemblyName","needQuote":true,"nodes":[{"content":"AssemblyName","pos":[0,12]}]},{"pos":[76223,76227],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[76390,76398],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[76586,76596],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[76691,76699],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76768,76769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76796,76797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76867,76875],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76944,76945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76972,76973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77228,77256],"content":"GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Boolean)","pos":[0,28]}]},{"pos":[77461,77480],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[77568,77569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77620,77627],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[77688,77689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77815,77834],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[77922,77923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77974,77981],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[78042,78043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78255,78263],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[78391,78397],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[78458,78460]},{"pos":[78525,78531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78591,78593],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[78842,78876],"content":"GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Type, Boolean)","pos":[0,34]}]},{"pos":[79106,79125],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[79213,79214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79262,79266],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[79325,79326]},{"pos":[79382,79389],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[79450,79451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79589,79608],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[79696,79697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79745,79749],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[79808,79809]},{"pos":[79865,79872],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[79933,79934],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80162,80168],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[80288,80292],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[80330,80332]},{"pos":[80395,80399],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[80436,80438],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[80553,80567],"content":"AssemblyName[]","needQuote":true,"nodes":[{"content":"AssemblyName[]","pos":[0,14]}]},{"pos":[80752,80764],"content":"AssemblyName","needQuote":true,"nodes":[{"content":"AssemblyName","pos":[0,12]}]},{"content":"[]","pos":[80821,80823]},{"pos":[80905,80917],"content":"AssemblyName","needQuote":true,"nodes":[{"content":"AssemblyName","pos":[0,12]}]},{"pos":[80973,80975],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[81226,81250],"content":"IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"IsDefined(Type, Boolean)","pos":[0,24]}]},{"pos":[81460,81469],"content":"IsDefined","needQuote":true,"nodes":[{"content":"IsDefined","pos":[0,9]}]},{"pos":[81547,81548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81596,81600],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[81659,81660]},{"pos":[81716,81723],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[81784,81785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81913,81922],"content":"IsDefined","needQuote":true,"nodes":[{"content":"IsDefined","pos":[0,9]}]},{"pos":[82000,82001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82049,82053],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[82112,82113]},{"pos":[82169,82176],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[82237,82238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82481,82502],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[82703,82720],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[82895,82912],"content":"FileLoadException","needQuote":true,"nodes":[{"content":"FileLoadException","pos":[0,17]}]},{"pos":[83097,83118],"content":"FileNotFoundException","needQuote":true,"nodes":[{"content":"FileNotFoundException","pos":[0,21]}]},{"pos":[83314,83337],"content":"BadImageFormatException","needQuote":true,"nodes":[{"content":"BadImageFormatException","pos":[0,23]}]},{"pos":[83533,83556],"content":"NotImplementedException","needQuote":true,"nodes":[{"content":"NotImplementedException","pos":[0,23]}]},{"pos":[83763,83780],"content":"TypeLoadException","needQuote":true,"nodes":[{"content":"TypeLoadException","pos":[0,17]}]},{"pos":[83973,83994],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[84183,84205],"content":"MissingMethodException","needQuote":true,"nodes":[{"content":"MissingMethodException","pos":[0,22]}]},{"pos":[84413,84440],"content":"ReflectionTypeLoadException","needQuote":true,"nodes":[{"content":"ReflectionTypeLoadException","pos":[0,27]}]}],"content":"items:\n- uid: System.Reflection.Assembly\n  commentId: T:System.Reflection.Assembly\n  id: Assembly\n  parent: System.Reflection\n  children:\n  - System.Reflection.Assembly.CodeBase\n  - System.Reflection.Assembly.CreateInstance(System.String)\n  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  - System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  - System.Reflection.Assembly.CustomAttributes\n  - System.Reflection.Assembly.DefinedTypes\n  - System.Reflection.Assembly.EntryPoint\n  - System.Reflection.Assembly.Equals(System.Object)\n  - System.Reflection.Assembly.ExportedTypes\n  - System.Reflection.Assembly.FullName\n  - System.Reflection.Assembly.GetEntryAssembly\n  - System.Reflection.Assembly.GetExportedTypes\n  - System.Reflection.Assembly.GetHashCode\n  - System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  - System.Reflection.Assembly.GetManifestResourceNames\n  - System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  - System.Reflection.Assembly.GetName\n  - System.Reflection.Assembly.GetReferencedAssemblies\n  - System.Reflection.Assembly.GetType(System.String)\n  - System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  - System.Reflection.Assembly.GetTypes\n  - System.Reflection.Assembly.ImageRuntimeVersion\n  - System.Reflection.Assembly.IsDynamic\n  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  - System.Reflection.Assembly.Location\n  - System.Reflection.Assembly.ManifestModule\n  - System.Reflection.Assembly.Modules\n  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Assembly.ToString\n  langs:\n  - csharp\n  - vb\n  name: Assembly\n  fullName: System.Reflection.Assembly\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assembly\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 49\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_Assembly))]\n\n      [ComVisible(true)]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Unrestricted = true)]\n\n      public abstract class Assembly : _Assembly, IEvidenceFactory, ICustomAttributeProvider, ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_Assembly))>\n\n      <ComVisible(True)>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Unrestricted:=True)>\n\n      Public MustInherit Class Assembly\n          Implements _Assembly, IEvidenceFactory, ICustomAttributeProvider, ISerializable\n  seealso:\n  - type: System.AppDomain\n    commentId: T:System.AppDomain\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Assembly\n- uid: System.Reflection.Assembly.CustomAttributes\n  commentId: P:System.Reflection.Assembly.CustomAttributes\n  id: CustomAttributes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: CustomAttributes\n  fullName: System.Reflection.Assembly.CustomAttributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomAttributes\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 833\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection that contains this assembly's custom attributes.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }\n    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n      description: \"\\n<p>A collection that contains this assembly's custom attributes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.CustomAttributes\n- uid: System.Reflection.Assembly.DefinedTypes\n  commentId: P:System.Reflection.Assembly.DefinedTypes\n  id: DefinedTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: DefinedTypes\n  fullName: System.Reflection.Assembly.DefinedTypes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DefinedTypes\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 702\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the types defined in this assembly.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<TypeInfo> DefinedTypes { get; }\n    content.vb: Public Overridable ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n      description: \"\\n<p>A collection of the types defined in this assembly.</p>\\n\"\n  seealso:\n  - type: System.Reflection.Assembly.GetTypes\n    commentId: M:System.Reflection.Assembly.GetTypes\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Assembly.DefinedTypes\n- uid: System.Reflection.Assembly.ExportedTypes\n  commentId: P:System.Reflection.Assembly.ExportedTypes\n  id: ExportedTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ExportedTypes\n  fullName: System.Reflection.Assembly.ExportedTypes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ExportedTypes\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 689\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the public types defined in this assembly that are visible outside the assembly.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Type> ExportedTypes { get; }\n    content.vb: Public Overridable ReadOnly Property ExportedTypes As IEnumerable(Of Type)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Type}\n      description: \"\\n<p>A collection of the public types defined in this assembly that are visible outside the assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.ExportedTypes\n- uid: System.Reflection.Assembly.EntryPoint\n  commentId: P:System.Reflection.Assembly.EntryPoint\n  id: EntryPoint\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: EntryPoint\n  fullName: System.Reflection.Assembly.EntryPoint\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EntryPoint\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 659\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the entry point of this assembly.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo EntryPoint { get; }\n    content.vb: Public Overridable ReadOnly Property EntryPoint As MethodInfo\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.EntryPoint\n- uid: System.Reflection.Assembly.FullName\n  commentId: P:System.Reflection.Assembly.FullName\n  id: FullName\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: FullName\n  fullName: System.Reflection.Assembly.FullName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FullName\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 651\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the display name of the assembly.</p>\\n\"\n  syntax:\n    content: public virtual string FullName { get; }\n    content.vb: Public Overridable ReadOnly Property FullName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The display name of the assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.FullName\n- uid: System.Reflection.Assembly.IsDynamic\n  commentId: P:System.Reflection.Assembly.IsDynamic\n  id: IsDynamic\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: IsDynamic\n  fullName: System.Reflection.Assembly.IsDynamic\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDynamic\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 1064\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</p>\\n\"\n  syntax:\n    content: public virtual bool IsDynamic { get; }\n    content.vb: Public Overridable ReadOnly Property IsDynamic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current assembly was generated dynamically in the current process; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.IsDynamic\n- uid: System.Reflection.Assembly.ManifestModule\n  commentId: P:System.Reflection.Assembly.ManifestModule\n  id: ManifestModule\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ManifestModule\n  fullName: System.Reflection.Assembly.ManifestModule\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ManifestModule\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 817\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the module that contains the manifest for the current assembly. </p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual Module ManifestModule { get; }\n    content.vb: \"<ComVisible(False)>\\nPublic Overridable ReadOnly Property ManifestModule As \"\n    parameters: []\n    return:\n      type: System.Reflection.Module\n      description: \"\\n<p>The module that contains the manifest for the assembly. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.ManifestModule\n- uid: System.Reflection.Assembly.Modules\n  commentId: P:System.Reflection.Assembly.Modules\n  id: Modules\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: Modules\n  fullName: System.Reflection.Assembly.Modules\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Modules\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 934\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection that contains the modules in this assembly.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Module> Modules { get; }\n    content.vb: Public Overridable ReadOnly Property Modules As IEnumerable(Of  Module)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}\n      description: \"\\n<p>A collection that contains the modules in this assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Assembly.Modules\n- uid: System.Reflection.Assembly.Equals(System.Object)\n  commentId: M:System.Reflection.Assembly.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.Assembly.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 102\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Determines whether this assembly and the specified object are equal.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Assembly.Equals(Object)\n- uid: System.Reflection.Assembly.GetHashCode\n  commentId: M:System.Reflection.Assembly.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.Assembly.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 107\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Assembly.GetHashCode()\n- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  id: GetManifestResourceInfo(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetManifestResourceInfo(String)\n  fullName: System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetManifestResourceInfo\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 1001\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns information about how the given resource has been persisted.</p>\\n\"\n  syntax:\n    content: public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName)\n    content.vb: Public Overridable Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo\n    parameters:\n    - id: resourceName\n      type: System.String\n      description: \"\\n<p>The case-sensitive name of the resource. </p>\\n\"\n    return:\n      type: System.Reflection.ManifestResourceInfo\n      description: \"\\n<p>An object that is populated with information about the resource's topology, or <strong>null</strong> if the resource is not found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>resourceName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>resourceName</em> parameter is an empty string (\\\"\\\"). </p>\\n\"\n  seealso:\n  - type: System.Reflection.Assembly.GetManifestResourceNames\n    commentId: M:System.Reflection.Assembly.GetManifestResourceNames\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetManifestResourceInfo(String)\n- uid: System.Reflection.Assembly.GetManifestResourceNames\n  commentId: M:System.Reflection.Assembly.GetManifestResourceNames\n  id: GetManifestResourceNames\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetManifestResourceNames()\n  fullName: System.Reflection.Assembly.GetManifestResourceNames()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetManifestResourceNames\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 991\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the names of all the resources in this assembly.</p>\\n\"\n  syntax:\n    content: public virtual string[] GetManifestResourceNames()\n    content.vb: Public Overridable Function GetManifestResourceNames As String()\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array that contains the names of all the resources.</p>\\n\"\n  seealso:\n  - type: System.Reflection.Assembly.GetManifestResourceStream(System.String)\n    commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetManifestResourceNames()\n- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  id: GetManifestResourceStream(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetManifestResourceStream(String)\n  fullName: System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetManifestResourceStream\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 756\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Loads the specified manifest resource from this assembly.</p>\\n\"\n  syntax:\n    content: public virtual Stream GetManifestResourceStream(string name)\n    content.vb: Public Overridable Function GetManifestResourceStream(name As String) As Stream\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The case-sensitive name of the manifest resource being requested. </p>\\n\"\n    return:\n      type: System.IO.Stream\n      description: \"\\n<p>The manifest resource; or <strong>null</strong> if no resources were specified during compilation or if the resource is not visible to the caller.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>name</em> parameter is an empty string (\\\"\\\"). </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>A file that was found could not be loaded. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>name</em> was not found. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>name</em> is not a valid assembly. </p>\\n\"\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>Resource length is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.Assembly.GetManifestResourceNames\n    commentId: M:System.Reflection.Assembly.GetManifestResourceNames\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetManifestResourceStream(String)\n- uid: System.Reflection.Assembly.GetName\n  commentId: M:System.Reflection.Assembly.GetName\n  id: GetName\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetName()\n  fullName: System.Reflection.Assembly.GetName()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetName\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 636\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Reflection.AssemblyName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this assembly.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual AssemblyName GetName()\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Function GetName As AssemblyName\n    return:\n      type: System.Reflection.AssemblyName\n      description: \"\\n<p>An object that contains the fully parsed display name for this assembly.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetName()\n- uid: System.Reflection.Assembly.GetType(System.String)\n  commentId: M:System.Reflection.Assembly.GetType(System.String)\n  id: GetType(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetType(String)\n  fullName: System.Reflection.Assembly.GetType(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 674\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name in the assembly instance.</p>\\n\"\n  syntax:\n    content: public virtual Type GetType(string name)\n    content.vb: Public Overridable Function GetType(name As String) As Type\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The full name of the type. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>An object that represents the specified class, or <strong>null</strong> if the class is not found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is invalid. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>\\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetType(String)\n- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  id: GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetType(String, Boolean, Boolean)\n  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 684\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</p>\\n\"\n  syntax:\n    content: public virtual Type GetType(string name, bool throwOnError, bool ignoreCase)\n    content.vb: Public Overridable Function GetType(name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The full name of the type. </p>\\n\"\n    - id: throwOnError\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception if the type is not found; <strong>false</strong> to return <strong>null</strong>. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore the case of the type name; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>An object that represents the specified class.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The length of <em>name</em> exceeds 1024 characters. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetType(String, Boolean, Boolean)\n- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  id: Load(System.Reflection.AssemblyName)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: Load(AssemblyName)\n  fullName: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Load\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 315\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Loads an assembly given its <xref href=\\\"System.Reflection.AssemblyName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Assembly Load(AssemblyName assemblyRef)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function Load(assemblyRef As AssemblyName) As Assembly\n    parameters:\n    - id: assemblyRef\n      type: System.Reflection.AssemblyName\n      description: \"\\n<p>The object that describes the assembly to be loaded. </p>\\n\"\n    return:\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The loaded assembly.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>assemblyRef</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>assemblyRef</em> is not found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>A file that was found could not be loaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>assemblyRef</em> is not a valid assembly. -or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded and <em>assemblyRef</em> was compiled with a later version.</p>\\n\"\n  seealso:\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  - type: System.Net.WebPermission\n    commentId: T:System.Net.WebPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Assembly.Load(AssemblyName)\n- uid: System.Reflection.Assembly.GetEntryAssembly\n  commentId: M:System.Reflection.Assembly.GetEntryAssembly\n  id: GetEntryAssembly\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetEntryAssembly()\n  fullName: System.Reflection.Assembly.GetEntryAssembly()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEntryAssembly\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 590\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <xref href=\\\"System.AppDomain.ExecuteAssembly(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static Assembly GetEntryAssembly()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetEntryAssembly As Assembly\n    return:\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The assembly that is the process executable in the default application domain, or the first executable that was executed by <xref href=\\\"System.AppDomain.ExecuteAssembly(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Can return <strong>null</strong> when called from unmanaged code.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Assembly.GetEntryAssembly()\n- uid: System.Reflection.Assembly.Location\n  commentId: P:System.Reflection.Assembly.Location\n  id: Location\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: Location\n  fullName: System.Reflection.Assembly.Location\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Location\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 1015\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the full path or UNC location of the loaded file that contains the manifest.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string Location\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property Location As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <xref href=\\\"System.Reflection.Assembly.Load(System.Byte[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method overload, the value returned is an empty string (\\\"\\\").</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current assembly is a dynamic assembly, represented by an <xref href=\\\"System.Reflection.Emit.AssemblyBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.Location\n- uid: System.Reflection.Assembly.ToString\n  commentId: M:System.Reflection.Assembly.ToString\n  id: ToString\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.Assembly.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 1006\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the full name of the assembly, also known as the display name.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Assembly.ToString()\n- uid: System.Reflection.Assembly.CodeBase\n  commentId: P:System.Reflection.Assembly.CodeBase\n  id: CodeBase\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: CodeBase\n  fullName: System.Reflection.Assembly.CodeBase\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CodeBase\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 615\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the location of the assembly as specified originally, for example, in an <xref href=\\\"System.Reflection.AssemblyName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string CodeBase\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property CodeBase As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The location of the assembly as specified originally.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.CodeBase\n- uid: System.Reflection.Assembly.ImageRuntimeVersion\n  commentId: P:System.Reflection.Assembly.ImageRuntimeVersion\n  id: ImageRuntimeVersion\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ImageRuntimeVersion\n  fullName: System.Reflection.Assembly.ImageRuntimeVersion\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ImageRuntimeVersion\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 1028\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual string ImageRuntimeVersion { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property ImageRuntimeVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The CLR version folder name. This is not a full path.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Assembly.ImageRuntimeVersion\n- uid: System.Reflection.Assembly.CreateInstance(System.String)\n  commentId: M:System.Reflection.Assembly.CreateInstance(System.String)\n  id: CreateInstance(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(String)\n  fullName: System.Reflection.Assembly.CreateInstance(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateInstance\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 893\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</p>\\n\"\n  syntax:\n    content: public object CreateInstance(string typeName)\n    content.vb: Public Function CreateInstance(typeName As String) As Object\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.Type.FullName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the type to locate. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An instance of the specified type created with the default constructor; or <strong>null</strong> if <em>typeName</em> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\\\"System.Reflection.BindingFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to <strong>Public</strong> or <strong>Instance</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>typeName</em> is an empty string (\\\"\\\") or a string beginning with a null character.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: \"\\n<p>No matching constructor was found. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>typeName</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>typeName</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>typeName</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>typeName</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Assembly.CreateInstance(String)\n- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  id: CreateInstance(System.String,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(String, Boolean)\n  fullName: System.Reflection.Assembly.CreateInstance(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateInstance\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 904\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</p>\\n\"\n  syntax:\n    content: public object CreateInstance(string typeName, bool ignoreCase)\n    content.vb: Public Function CreateInstance(typeName As String, ignoreCase As Boolean) As Object\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.Type.FullName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the type to locate. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore the case of the type name; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An instance of the specified type created with the default constructor; or <strong>null</strong> if <em>typeName</em> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\\\"System.Reflection.BindingFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to <strong>Public</strong> or <strong>Instance</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>typeName</em> is an empty string (\\\"\\\") or a string beginning with a null character. </p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context.</p>\\n\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: \"\\n<p>No matching constructor was found. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>typeName</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>typeName</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>typeName</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>typeName</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Assembly.CreateInstance(String, Boolean)\n- uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  commentId: M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  id: CreateQualifiedName(System.String,System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: CreateQualifiedName(String, String)\n  fullName: System.Reflection.Assembly.CreateQualifiedName(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateQualifiedName\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 64\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Creates the name of a type qualified by the display name of its assembly.</p>\\n\"\n  syntax:\n    content: public static string CreateQualifiedName(string assemblyName, string typeName)\n    content.vb: Public Shared Function CreateQualifiedName(assemblyName As String, typeName As String) As String\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: \"\\n<p>The display name of an assembly. </p>\\n\"\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The full name of a type. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The full name of the type qualified by the display name of the assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Assembly.CreateQualifiedName(String, String)\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 44\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes\n    parameters:\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Object[]\n  implements:\n  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 45\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes\n    parameters:\n    - id: attributeType\n      type: System.Type\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Object[]\n  implements:\n  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Assembly.GetExportedTypes\n  commentId: M:System.Reflection.Assembly.GetExportedTypes\n  id: GetExportedTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetExportedTypes()\n  fullName: System.Reflection.Assembly.GetExportedTypes()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetExportedTypes\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 697\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the public types defined in this assembly that are visible outside the assembly.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetExportedTypes()\n    content.vb: Public Overridable Function GetExportedTypes As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array that represents the types defined in this assembly that are visible outside the assembly.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The assembly is a dynamic assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetExportedTypes()\n- uid: System.Reflection.Assembly.GetReferencedAssemblies\n  commentId: M:System.Reflection.Assembly.GetReferencedAssemblies\n  id: GetReferencedAssemblies\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetReferencedAssemblies()\n  fullName: System.Reflection.Assembly.GetReferencedAssemblies()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetReferencedAssemblies\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 996\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Reflection.AssemblyName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects for all the assemblies referenced by this assembly.</p>\\n\"\n  syntax:\n    content: public virtual AssemblyName[] GetReferencedAssemblies()\n    content.vb: Public Overridable Function GetReferencedAssemblies As AssemblyName()\n    return:\n      type: System.Reflection.AssemblyName[]\n      description: \"\\n<p>An array that contains the fully parsed display names of all the assemblies referenced by this assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetReferencedAssemblies()\n- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  id: GetType(System.String,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetType(String, Boolean)\n  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 679\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</p>\\n\"\n  syntax:\n    content: public virtual Type GetType(string name, bool throwOnError)\n    content.vb: Public Overridable Function GetType(name As String, throwOnError As Boolean) As Type\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The full name of the type. </p>\\n\"\n    - id: throwOnError\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception if the type is not found; <strong>false</strong> to return <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>An object that represents the specified class.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The length of <em>name</em> exceeds 1024 characters. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>name</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>name</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetType(String, Boolean)\n- uid: System.Reflection.Assembly.GetTypes\n  commentId: M:System.Reflection.Assembly.GetTypes\n  id: GetTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: GetTypes()\n  fullName: System.Reflection.Assembly.GetTypes()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Assembly.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypes\n    path: src/mscorlib/src/System/Reflection/Assembly.cs\n    startLine: 724\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the types defined in this assembly.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetTypes()\n    content.vb: Public Overridable Function GetTypes As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array that contains all the types that are defined in this assembly.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: \"\\n<p>The assembly contains one or more types that cannot be loaded. The array returned by the <xref href=\\\"System.Reflection.ReflectionTypeLoadException.Types\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of this exception contains a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for each type that was loaded and <strong>null</strong> for each type that could not be loaded, while the <xref href=\\\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains an exception for each type that could not be loaded.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Assembly.GetTypes()\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.Assembly.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.IsDefined\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 50\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.IsDefined(attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined\n    parameters:\n    - id: attributeType\n      type: System.Type\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Boolean\n  implements:\n  - System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: Assembly.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<CustomAttributeData>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)\n  name.vb: IEnumerable(Of CustomAttributeData)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<CustomAttributeData>\n  nameWithType.vb: IEnumerable(Of CustomAttributeData)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TypeInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)\n  name.vb: IEnumerable(Of TypeInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.TypeInfo\n    name: TypeInfo\n    fullName: System.Reflection.TypeInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.TypeInfo\n    name: TypeInfo\n    fullName: System.Reflection.TypeInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<TypeInfo>\n  nameWithType.vb: IEnumerable(Of TypeInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Type}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Type>\n  fullName: System.Collections.Generic.IEnumerable<System.Type>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)\n  name.vb: IEnumerable(Of Type)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Type>\n  nameWithType.vb: IEnumerable(Of Type)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Type}\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.Module\n  nameWithType: Module\n  commentId: T:System.Reflection.Module\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Module>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Module)\n  name.vb: IEnumerable(Of Module)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.Module\n    name: Module\n    fullName: System.Reflection.Module\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.Module\n    name: Module\n    fullName: System.Reflection.Module\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Module>\n  nameWithType.vb: IEnumerable(Of Module)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.Module}\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.ManifestResourceInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ManifestResourceInfo\n  fullName: System.Reflection.ManifestResourceInfo\n  nameWithType: ManifestResourceInfo\n  commentId: T:System.Reflection.ManifestResourceInfo\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Reflection.AssemblyName\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyName\n  fullName: System.Reflection.AssemblyName\n  nameWithType: AssemblyName\n  commentId: T:System.Reflection.AssemblyName\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  fullName: System.Reflection.Assembly\n  nameWithType: Assembly\n  commentId: T:System.Reflection.Assembly\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: GetCustomAttributes(Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.AssemblyName[]\n  name: AssemblyName[]\n  fullName: System.Reflection.AssemblyName[]\n  fullname.vb: System.Reflection.AssemblyName()\n  name.vb: AssemblyName()\n  spec.csharp:\n  - uid: System.Reflection.AssemblyName\n    name: AssemblyName\n    fullName: System.Reflection.AssemblyName\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.AssemblyName\n    name: AssemblyName\n    fullName: System.Reflection.AssemblyName\n  - name: ()\n    fullName: ()\n  nameWithType: AssemblyName[]\n  nameWithType.vb: AssemblyName()\n- uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: IsDefined(Type, Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n    name: IsDefined\n    fullName: System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n    name: IsDefined\n    fullName: System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.IO.FileLoadException\n  isExternal: false\n  name: FileLoadException\n  fullName: System.IO.FileLoadException\n  nameWithType: FileLoadException\n  commentId: T:System.IO.FileLoadException\n- uid: System.IO.FileNotFoundException\n  isExternal: false\n  name: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n  nameWithType: FileNotFoundException\n  commentId: T:System.IO.FileNotFoundException\n- uid: System.BadImageFormatException\n  isExternal: false\n  name: BadImageFormatException\n  fullName: System.BadImageFormatException\n  nameWithType: BadImageFormatException\n  commentId: T:System.BadImageFormatException\n- uid: System.NotImplementedException\n  isExternal: false\n  name: NotImplementedException\n  fullName: System.NotImplementedException\n  nameWithType: NotImplementedException\n  commentId: T:System.NotImplementedException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  fullName: System.TypeLoadException\n  nameWithType: TypeLoadException\n  commentId: T:System.TypeLoadException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.MissingMethodException\n  isExternal: false\n  name: MissingMethodException\n  fullName: System.MissingMethodException\n  nameWithType: MissingMethodException\n  commentId: T:System.MissingMethodException\n- uid: System.Reflection.ReflectionTypeLoadException\n  isExternal: false\n  name: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n  nameWithType: ReflectionTypeLoadException\n  commentId: T:System.Reflection.ReflectionTypeLoadException\n"}