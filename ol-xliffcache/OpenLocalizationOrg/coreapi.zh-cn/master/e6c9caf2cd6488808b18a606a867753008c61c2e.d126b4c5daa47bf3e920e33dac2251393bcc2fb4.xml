{"nodes":[{"pos":[534,558],"content":"TcpConnectionInformation","needQuote":true,"nodes":[{"content":"TcpConnectionInformation","pos":[0,24]}]},{"pos":[2034,2060],"content":"TcpConnectionInformation()","needQuote":true,"nodes":[{"content":"TcpConnectionInformation()","pos":[0,26]}]},{"pos":[3241,3254],"content":"LocalEndPoint","needQuote":true,"nodes":[{"content":"LocalEndPoint","pos":[0,13]}]},{"pos":[4696,4710],"content":"RemoteEndPoint","needQuote":true,"nodes":[{"content":"RemoteEndPoint","pos":[0,14]}]},{"pos":[6132,6137],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[7315,7344],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[7544,7550],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7710,7720],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7815,7823],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7892,7893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7920,7921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7991,7999],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8068,8069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8096,8097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8280,8294],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8413,8419],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8486,8487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8537,8543],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8603,8604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8687,8693],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8760,8761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8811,8817],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8877,8878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9092,9114],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9262,9268],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9335,9336],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9386,9392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9453,9454]},{"pos":[9509,9515],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9575,9576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9673,9679],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9746,9747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9797,9803],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9864,9865]},{"pos":[9920,9926],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9986,9987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10232,10263],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10429,10444],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10520,10521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10571,10577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10638,10639]},{"pos":[10694,10700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10760,10761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10867,10882],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10958,10959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11009,11015],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11076,11077]},{"pos":[11132,11138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11198,11199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11429,11442],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11543,11554],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11626,11627],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11654,11655],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11728,11739],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11811,11812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11839,11840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12015,12024],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12117,12124],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12192,12193],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12220,12221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12290,12297],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12365,12366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12393,12394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12569,12586],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12695,12710],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12786,12787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12814,12815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12892,12907],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12983,12984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13011,13012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13157,13163],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13285,13295],"content":"IPEndPoint","needQuote":true,"nodes":[{"content":"IPEndPoint","pos":[0,10]}]},{"pos":[13508,13516],"content":"TcpState","needQuote":true,"nodes":[{"content":"TcpState","pos":[0,8]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.TcpConnectionInformation\n  commentId: T:System.Net.NetworkInformation.TcpConnectionInformation\n  id: TcpConnectionInformation\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.TcpConnectionInformation.#ctor\n  - System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint\n  - System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint\n  - System.Net.NetworkInformation.TcpConnectionInformation.State\n  langs:\n  - csharp\n  - vb\n  name: TcpConnectionInformation\n  fullName: System.Net.NetworkInformation.TcpConnectionInformation\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TcpConnectionInformation\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 368\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides information about the Transmission Control Protocol (TCP) connections on the local computer.</p>\\n\"\n  syntax:\n    content: public abstract class TcpConnectionInformation\n    content.vb: Public MustInherit Class TcpConnectionInformation\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TcpConnectionInformation\n- uid: System.Net.NetworkInformation.TcpConnectionInformation.#ctor\n  commentId: M:System.Net.NetworkInformation.TcpConnectionInformation.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.TcpConnectionInformation\n  langs:\n  - csharp\n  - vb\n  name: TcpConnectionInformation()\n  fullName: System.Net.NetworkInformation.TcpConnectionInformation.TcpConnectionInformation()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 370\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.TcpConnectionInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TcpConnectionInformation()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TcpConnectionInformation.TcpConnectionInformation()\n- uid: System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint\n  commentId: P:System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint\n  id: LocalEndPoint\n  parent: System.Net.NetworkInformation.TcpConnectionInformation\n  langs:\n  - csharp\n  - vb\n  name: LocalEndPoint\n  fullName: System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalEndPoint\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 371\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the local endpoint of a Transmission Control Protocol (TCP) connection.</p>\\n\"\n  syntax:\n    content: public abstract IPEndPoint LocalEndPoint { get; }\n    content.vb: Public MustOverride ReadOnly Property LocalEndPoint As IPEndPoint\n    parameters: []\n    return:\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains the IP address and port on the local computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TcpConnectionInformation.LocalEndPoint\n- uid: System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint\n  commentId: P:System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint\n  id: RemoteEndPoint\n  parent: System.Net.NetworkInformation.TcpConnectionInformation\n  langs:\n  - csharp\n  - vb\n  name: RemoteEndPoint\n  fullName: System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoteEndPoint\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 372\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the remote endpoint of a Transmission Control Protocol (TCP) connection.</p>\\n\"\n  syntax:\n    content: public abstract IPEndPoint RemoteEndPoint { get; }\n    content.vb: Public MustOverride ReadOnly Property RemoteEndPoint As IPEndPoint\n    parameters: []\n    return:\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains the IP address and port on the remote computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TcpConnectionInformation.RemoteEndPoint\n- uid: System.Net.NetworkInformation.TcpConnectionInformation.State\n  commentId: P:System.Net.NetworkInformation.TcpConnectionInformation.State\n  id: State\n  parent: System.Net.NetworkInformation.TcpConnectionInformation\n  langs:\n  - csharp\n  - vb\n  name: State\n  fullName: System.Net.NetworkInformation.TcpConnectionInformation.State\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: State\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 373\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the state of this Transmission Control Protocol (TCP) connection.</p>\\n\"\n  syntax:\n    content: public abstract TcpState State { get; }\n    content.vb: Public MustOverride ReadOnly Property State As TcpState\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.TcpState\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.NetworkInformation.TcpState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TcpConnectionInformation.State\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPEndPoint\n  isExternal: false\n  name: IPEndPoint\n  fullName: System.Net.IPEndPoint\n  commentId: T:System.Net.IPEndPoint\n  nameWithType: IPEndPoint\n- uid: System.Net.NetworkInformation.TcpState\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: TcpState\n  fullName: System.Net.NetworkInformation.TcpState\n  commentId: T:System.Net.NetworkInformation.TcpState\n  nameWithType: TcpState\n"}