{"nodes":[{"pos":[1209,1218],"content":"TcpClient","needQuote":true,"nodes":[{"content":"TcpClient","pos":[0,9]}]},{"pos":[3514,3525],"content":"TcpClient()","needQuote":true,"nodes":[{"content":"TcpClient()","pos":[0,11]}]},{"pos":[4686,4710],"content":"TcpClient(AddressFamily)","needQuote":true,"nodes":[{"content":"TcpClient(AddressFamily)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;family&lt;/em&gt; parameter is not equal to AddressFamily.InterNetwork &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;family&lt;/em&gt; parameter is not equal to AddressFamily.InterNetworkV6 &lt;/p&gt;\\n","pos":[5767,5949],"source":"\\n<p>The <em>family</em> parameter is not equal to AddressFamily.InterNetwork </p>\\n<p>-or- </p>\\n<p>The <em>family</em> parameter is not equal to AddressFamily.InterNetworkV6 </p>\\n"},{"pos":[6241,6247],"content":"Active","needQuote":true,"nodes":[{"content":"Active","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the connection has been made; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6913,7015],"source":"\\n<p>\\n<strong>true</strong> if the connection has been made; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7587,7596],"content":"Available","needQuote":true,"nodes":[{"content":"Available","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The number of bytes of data received from the network and available to be read.&lt;/p&gt;\\n","pos":[8291,8381],"source":"\\n<p>The number of bytes of data received from the network and available to be read.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when attempting to access the socket.","pos":[8512,8572],"source":"\\n<p>An error occurred when attempting to access the socket."},{"content":"See the Remarks section for more information.","pos":[8573,8618]},{"content":"&lt;/p&gt;\\n","pos":[8619,8625],"source":" </p>\\n"},{"pos":[9150,9156],"content":"Client","needQuote":true,"nodes":[{"content":"Client","pos":[0,6]}]},{"pos":[10381,10390],"content":"Connected","needQuote":true,"nodes":[{"content":"Connected","pos":[0,9]}]},{"pos":[11838,11857],"content":"ExclusiveAddressUse","needQuote":true,"nodes":[{"content":"ExclusiveAddressUse","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An error occurred when attempting to access the underlying socket.&lt;/p&gt;\\n","pos":[13244,13321],"source":"\\n<p>An error occurred when attempting to access the underlying socket.</p>\\n"},{"pos":[13877,13888],"content":"LingerState","needQuote":true,"nodes":[{"content":"LingerState","pos":[0,11]}]},{"pos":[15425,15432],"content":"NoDelay","needQuote":true,"nodes":[{"content":"NoDelay","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the delay is disabled, otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[16111,16199],"source":"\\n<p>\\n<strong>true</strong> if the delay is disabled, otherwise <strong>false</strong>."},{"content":"The default value is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16200,16250],"source":" The default value is <strong>false</strong>.</p>\\n"},{"pos":[16574,16591],"content":"ReceiveBufferSize","needQuote":true,"nodes":[{"content":"ReceiveBufferSize","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The size of the receive buffer, in bytes.","pos":[17266,17312],"source":"\\n<p>The size of the receive buffer, in bytes."},{"content":"The default value is 8192 bytes.&lt;/p&gt;\\n","pos":[17313,17351],"source":" The default value is 8192 bytes.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when setting the buffer size.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;In .NET Compact Framework applications, you cannot set this property.","pos":[17482,17625],"source":"\\n<p>An error occurred when setting the buffer size.</p>\\n<p>-or-</p>\\n<p>In .NET Compact Framework applications, you cannot set this property."},{"content":"For a workaround, see the Platform Note in Remarks.&lt;/p&gt;\\n","pos":[17626,17683],"source":" For a workaround, see the Platform Note in Remarks.</p>\\n"},{"pos":[18319,18333],"content":"ReceiveTimeout","needQuote":true,"nodes":[{"content":"ReceiveTimeout","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The time-out value of the connection in milliseconds.","pos":[19136,19194],"source":"\\n<p>The time-out value of the connection in milliseconds."},{"content":"The default value is 0.&lt;/p&gt;\\n","pos":[19195,19224],"source":" The default value is 0.</p>\\n"},{"pos":[19851,19865],"content":"SendBufferSize","needQuote":true,"nodes":[{"content":"SendBufferSize","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The size of the send buffer, in bytes.","pos":[20525,20568],"source":"\\n<p>The size of the send buffer, in bytes."},{"content":"The default value is 8192 bytes.&lt;/p&gt;\\n","pos":[20569,20607],"source":" The default value is 8192 bytes.</p>\\n"},{"pos":[21239,21250],"content":"SendTimeout","needQuote":true,"nodes":[{"content":"SendTimeout","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The send time-out value, in milliseconds.","pos":[22036,22082],"source":"\\n<p>The send time-out value, in milliseconds."},{"content":"The default is 0.&lt;/p&gt;\\n","pos":[22083,22106],"source":" The default is 0.</p>\\n"},{"pos":[22837,22867],"content":"ConnectAsync(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"ConnectAsync(IPAddress, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The port number to which you intend to connect.","pos":[23894,23946],"source":"\\n<p>The port number to which you intend to connect."},{"content":"&lt;/p&gt;\\n","pos":[23947,23953],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;address&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24317,24378],"source":"\\n<p>The <em>address</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24379,24385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[24848,24897],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[24898,24943]},{"content":"&lt;/p&gt;\\n","pos":[24944,24950],"source":" </p>\\n"},{"pos":[25715,25747],"content":"ConnectAsync(IPAddress[], Int32)","needQuote":true,"nodes":[{"content":"ConnectAsync(IPAddress[], Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The port number to which you intend to connect.&lt;/p&gt;\\n","pos":[26795,26853],"source":"\\n<p>The port number to which you intend to connect.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;ipAddresses&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27217,27282],"source":"\\n<p>The <em>ipAddresses</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27283,27289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The port number is not valid.&lt;/p&gt;\\n","pos":[27406,27446],"source":"\\n<p>The port number is not valid.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when attempting to access the socket.","pos":[27563,27623],"source":"\\n<p>An error occurred when attempting to access the socket."},{"content":"See the Remarks section for more information.","pos":[27624,27669]},{"content":"&lt;/p&gt;\\n","pos":[27670,27676],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A caller higher in the call stack does not have permission for the requested operation.","pos":[28018,28110],"source":"\\n<p>A caller higher in the call stack does not have permission for the requested operation."},{"content":"&lt;/p&gt;\\n","pos":[28111,28117],"source":" </p>\\n"},{"pos":[29213,29240],"content":"ConnectAsync(String, Int32)","needQuote":true,"nodes":[{"content":"ConnectAsync(String, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The DNS name of the remote host to which you intend to connect.","pos":[30016,30084],"source":"\\n<p>The DNS name of the remote host to which you intend to connect."},{"content":"&lt;/p&gt;\\n","pos":[30085,30091],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The port number of the remote host to which you intend to connect.","pos":[30153,30224],"source":"\\n<p>The port number of the remote host to which you intend to connect."},{"content":"&lt;/p&gt;\\n","pos":[30225,30231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;hostname&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[30595,30657],"source":"\\n<p>The <em>hostname</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30658,30664],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[31137,31186],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[31187,31232]},{"content":"&lt;/p&gt;\\n","pos":[31233,31239],"source":" </p>\\n"},{"pos":[32012,32021],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[33026,33042],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;Set to &lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[33869,34011],"source":"\\n<p>Set to <strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[34012,34018],"source":" </p>\\n"},{"pos":[34342,34352],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[35372,35383],"content":"GetStream()","needQuote":true,"nodes":[{"content":"GetStream()","pos":[0,11]}]},{"pos":[37716,37734],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[37901,37907],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38057,38068],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[38243,38253],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[38348,38356],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38425,38426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38453,38454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38524,38532],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38601,38602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38629,38630],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38813,38827],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[38946,38952],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39019,39020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39070,39076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39136,39137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39220,39226],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39293,39294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39344,39350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39410,39411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39625,39647],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[39795,39801],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39868,39869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39919,39925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39986,39987]},{"pos":[40042,40048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40108,40109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40206,40212],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40279,40280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40330,40336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[40397,40398]},{"pos":[40453,40459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40519,40520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40765,40796],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[40962,40977],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[41053,41054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41104,41110],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41171,41172]},{"pos":[41227,41233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41293,41294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41400,41415],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[41491,41492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41542,41548],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41609,41610]},{"pos":[41665,41671],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41731,41732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41962,41975],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[42076,42087],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[42159,42160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42187,42188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42261,42272],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[42344,42345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42372,42373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42548,42557],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[42650,42657],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[42725,42726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42753,42754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42823,42830],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[42898,42899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42926,42927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43102,43119],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[43228,43243],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[43319,43320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43347,43348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43425,43440],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[43516,43517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43544,43545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43690,43696],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[43858,43871],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[44062,44069],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[44216,44221],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[44387,44393],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[44592,44604],"content":"LingerOption","needQuote":true,"nodes":[{"content":"LingerOption","pos":[0,12]}]},{"pos":[44802,44811],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[45003,45007],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[45158,45168],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[45303,45325],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[45476,45487],"content":"IPAddress[]","needQuote":true,"nodes":[{"content":"IPAddress[]","pos":[0,11]}]},{"pos":[45639,45648],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"content":"[]","pos":[45695,45697]},{"pos":[45769,45778],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[45824,45826],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[45969,45975],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[46145,46154],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[46257,46264],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[46316,46317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46344,46345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46419,46426],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[46478,46479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46506,46507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46701,46714],"content":"NetworkStream","needQuote":true,"nodes":[{"content":"NetworkStream","pos":[0,13]}]},{"pos":[46915,46932],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[47114,47129],"content":"SocketException","needQuote":true,"nodes":[{"content":"SocketException","pos":[0,15]}]},{"pos":[47325,47348],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[47542,47563],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[47757,47784],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[47995,48012],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[48223,48244],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[48453,48478],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Net.Sockets.TcpClient\n  commentId: T:System.Net.Sockets.TcpClient\n  id: TcpClient\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.TcpClient.#ctor\n  - System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.TcpClient.Active\n  - System.Net.Sockets.TcpClient.Available\n  - System.Net.Sockets.TcpClient.Client\n  - System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  - System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  - System.Net.Sockets.TcpClient.Connected\n  - System.Net.Sockets.TcpClient.Dispose\n  - System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  - System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  - System.Net.Sockets.TcpClient.Finalize\n  - System.Net.Sockets.TcpClient.GetStream\n  - System.Net.Sockets.TcpClient.LingerState\n  - System.Net.Sockets.TcpClient.NoDelay\n  - System.Net.Sockets.TcpClient.ReceiveBufferSize\n  - System.Net.Sockets.TcpClient.ReceiveTimeout\n  - System.Net.Sockets.TcpClient.SendBufferSize\n  - System.Net.Sockets.TcpClient.SendTimeout\n  langs:\n  - csharp\n  - vb\n  name: TcpClient\n  fullName: System.Net.Sockets.TcpClient\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TcpClient\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 416\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Provides client connections for TCP network services.</p>\\n\"\n  syntax:\n    content: 'public class TcpClient : IDisposable'\n    content.vb: >-\n      Public Class TcpClient\n          Implements IDisposable\n  seealso:\n  - type: System.Net.Sockets.TcpListener\n    commentId: T:System.Net.Sockets.TcpListener\n  - type: System.Net.Sockets.NetworkStream\n    commentId: T:System.Net.Sockets.NetworkStream\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  - type: System.Net.Sockets.ProtocolType\n    commentId: T:System.Net.Sockets.ProtocolType\n  - type: System.Net.IPEndPoint\n    commentId: T:System.Net.IPEndPoint\n  - type: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n    commentId: M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  - type: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  - type: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  see:\n  - type: System.Net.SocketPermission\n    commentId: T:System.Net.SocketPermission\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TcpClient\n- uid: System.Net.Sockets.TcpClient.#ctor\n  commentId: M:System.Net.Sockets.TcpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: TcpClient()\n  fullName: System.Net.Sockets.TcpClient.TcpClient()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 418\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public TcpClient()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n    commentId: M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.TcpClient()\n- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: TcpClient(AddressFamily)\n  fullName: System.Net.Sockets.TcpClient.TcpClient(System.Net.Sockets.AddressFamily)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 419\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified family.</p>\\n\"\n  syntax:\n    content: public TcpClient(AddressFamily family)\n    content.vb: Public Sub New(family As AddressFamily)\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the IP protocol. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>family</em> parameter is not equal to AddressFamily.InterNetwork </p>\\n<p>-or- </p>\\n<p>The <em>family</em> parameter is not equal to AddressFamily.InterNetworkV6 </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.TcpClient(AddressFamily)\n- uid: System.Net.Sockets.TcpClient.Active\n  commentId: P:System.Net.Sockets.TcpClient.Active\n  id: Active\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Active\n  fullName: System.Net.Sockets.TcpClient.Active\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Active\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 420\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or set a value that indicates whether a connection has been made.</p>\\n\"\n  syntax:\n    content: protected bool Active { get; set; }\n    content.vb: Protected Property Active As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the connection has been made; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.Connected\n    commentId: P:System.Net.Sockets.Socket.Connected\n  - type: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n    commentId: M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: TcpClient.Active\n- uid: System.Net.Sockets.TcpClient.Available\n  commentId: P:System.Net.Sockets.TcpClient.Available\n  id: Available\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Available\n  fullName: System.Net.Sockets.TcpClient.Available\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Available\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 421\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the amount of data that has been received from the network and is available to be read.</p>\\n\"\n  syntax:\n    content: public int Available { get; }\n    content.vb: Public ReadOnly Property Available As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes of data received from the network and available to be read.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TcpClient.Available\n- uid: System.Net.Sockets.TcpClient.Client\n  commentId: P:System.Net.Sockets.TcpClient.Client\n  id: Client\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Client\n  fullName: System.Net.Sockets.TcpClient.Client\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Client\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 422\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Socket Client { get; set; }\n    content.vb: Public Property Client As Socket\n    parameters: []\n    return:\n      type: System.Net.Sockets.Socket\n      description: \"\\n<p>The underlying network <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.Client\n- uid: System.Net.Sockets.TcpClient.Connected\n  commentId: P:System.Net.Sockets.TcpClient.Connected\n  id: Connected\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Connected\n  fullName: System.Net.Sockets.TcpClient.Connected\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Connected\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 423\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets a value indicating whether the underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for a <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is connected to a remote host.</p>\\n\"\n  syntax:\n    content: public bool Connected { get; }\n    content.vb: Public ReadOnly Property Connected As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.TcpClient.Client\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> socket was connected to a remote resource as of the most recent operation; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TcpClient.Connected\n- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  commentId: P:System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveAddressUse\n  fullName: System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveAddressUse\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 424\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows only one client to use a port.</p>\\n\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    content.vb: Public Property ExclusiveAddressUse As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows only one client to use a specific port; otherwise, <strong>false</strong>. The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <strong>false</strong> for all other versions.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when attempting to access the underlying socket.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.ExclusiveAddressUse\n- uid: System.Net.Sockets.TcpClient.LingerState\n  commentId: P:System.Net.Sockets.TcpClient.LingerState\n  id: LingerState\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: LingerState\n  fullName: System.Net.Sockets.TcpClient.LingerState\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LingerState\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 425\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets information about the linger state of the associated socket.</p>\\n\"\n  syntax:\n    content: public LingerOption LingerState { get; set; }\n    content.vb: Public Property LingerState As LingerOption\n    parameters: []\n    return:\n      type: System.Net.Sockets.LingerOption\n      description: \"\\n<p>A <xref href=\\\"System.Net.Sockets.LingerOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. By default, lingering is disabled.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.LingerOption\n    commentId: T:System.Net.Sockets.LingerOption\n  - type: System.Net.Sockets.TcpClient.Close\n    commentId: M:System.Net.Sockets.TcpClient.Close\n  - type: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.LingerState\n- uid: System.Net.Sockets.TcpClient.NoDelay\n  commentId: P:System.Net.Sockets.TcpClient.NoDelay\n  id: NoDelay\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: NoDelay\n  fullName: System.Net.Sockets.TcpClient.NoDelay\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NoDelay\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 426\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a value that disables a delay when send or receive buffers are not full.</p>\\n\"\n  syntax:\n    content: public bool NoDelay { get; set; }\n    content.vb: Public Property NoDelay As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the delay is disabled, otherwise <strong>false</strong>. The default value is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.NoDelay\n- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize\n  commentId: P:System.Net.Sockets.TcpClient.ReceiveBufferSize\n  id: ReceiveBufferSize\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: ReceiveBufferSize\n  fullName: System.Net.Sockets.TcpClient.ReceiveBufferSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveBufferSize\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 427\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the size of the receive buffer.</p>\\n\"\n  syntax:\n    content: public int ReceiveBufferSize { get; set; }\n    content.vb: Public Property ReceiveBufferSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the receive buffer, in bytes. The default value is 8192 bytes.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when setting the buffer size.</p>\\n<p>-or-</p>\\n<p>In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpClient.SendBufferSize\n    commentId: P:System.Net.Sockets.TcpClient.SendBufferSize\n  - type: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.ReceiveBufferSize\n- uid: System.Net.Sockets.TcpClient.ReceiveTimeout\n  commentId: P:System.Net.Sockets.TcpClient.ReceiveTimeout\n  id: ReceiveTimeout\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: ReceiveTimeout\n  fullName: System.Net.Sockets.TcpClient.ReceiveTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveTimeout\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 428\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the amount of time a <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will wait to receive data once a read operation is initiated.</p>\\n\"\n  syntax:\n    content: public int ReceiveTimeout { get; set; }\n    content.vb: Public Property ReceiveTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The time-out value of the connection in milliseconds. The default value is 0.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  - type: System.Net.Sockets.TcpClient.SendTimeout\n    commentId: P:System.Net.Sockets.TcpClient.SendTimeout\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.ReceiveTimeout\n- uid: System.Net.Sockets.TcpClient.SendBufferSize\n  commentId: P:System.Net.Sockets.TcpClient.SendBufferSize\n  id: SendBufferSize\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: SendBufferSize\n  fullName: System.Net.Sockets.TcpClient.SendBufferSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendBufferSize\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 429\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the size of the send buffer.</p>\\n\"\n  syntax:\n    content: public int SendBufferSize { get; set; }\n    content.vb: Public Property SendBufferSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the send buffer, in bytes. The default value is 8192 bytes.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpClient.ReceiveBufferSize\n    commentId: P:System.Net.Sockets.TcpClient.ReceiveBufferSize\n  - type: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.SendBufferSize\n- uid: System.Net.Sockets.TcpClient.SendTimeout\n  commentId: P:System.Net.Sockets.TcpClient.SendTimeout\n  id: SendTimeout\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: SendTimeout\n  fullName: System.Net.Sockets.TcpClient.SendTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendTimeout\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 430\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the amount of time a <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will wait for a send operation to complete successfully.</p>\\n\"\n  syntax:\n    content: public int SendTimeout { get; set; }\n    content.vb: Public Property SendTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The send time-out value, in milliseconds. The default is 0.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  - type: System.Net.Sockets.TcpClient.ReceiveTimeout\n    commentId: P:System.Net.Sockets.TcpClient.ReceiveTimeout\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.SendTimeout\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  id: ConnectAsync(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(IPAddress, Int32)\n  fullName: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 431\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task ConnectAsync(IPAddress address, int port)\n    content.vb: Public Function ConnectAsync(address As IPAddress, port As Integer) As Task\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the host to which you intend to connect. </p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number to which you intend to connect. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>address</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>port</em> is not between <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>\\n<xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpClient.GetStream\n    commentId: M:System.Net.Sockets.TcpClient.GetStream\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.ConnectAsync(IPAddress, Int32)\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  id: ConnectAsync(System.Net.IPAddress[],System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(IPAddress[], Int32)\n  fullName: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 432\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task ConnectAsync(IPAddress[] addresses, int port)\n    content.vb: Public Function ConnectAsync(addresses As IPAddress(), port As Integer) As Task\n    parameters:\n    - id: addresses\n      type: System.Net.IPAddress[]\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array of the host to which you intend to connect.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number to which you intend to connect.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>ipAddresses</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The port number is not valid.</p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>A caller higher in the call stack does not have permission for the requested operation. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This method is valid for sockets that use the <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetwork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag or the <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetworkV6\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpListener\n    commentId: T:System.Net.Sockets.TcpListener\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress(), System.Int32)\n  name.vb: ConnectAsync(IPAddress(), Int32)\n  nameWithType: TcpClient.ConnectAsync(IPAddress[], Int32)\n  nameWithType.vb: TcpClient.ConnectAsync(IPAddress(), Int32)\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  id: ConnectAsync(System.String,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(String, Int32)\n  fullName: System.Net.Sockets.TcpClient.ConnectAsync(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 433\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Connects the client to the specified TCP port on the specified host as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task ConnectAsync(string host, int port)\n    content.vb: Public Function ConnectAsync(host As String, port As Integer) As Task\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>The DNS name of the remote host to which you intend to connect. </p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number of the remote host to which you intend to connect. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>hostname</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>port</em> parameter is not between <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>\\n<xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)\n    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)\n  - type: System.Net.Sockets.TcpClient.GetStream\n    commentId: M:System.Net.Sockets.TcpClient.GetStream\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.ConnectAsync(String, Int32)\n- uid: System.Net.Sockets.TcpClient.Dispose\n  commentId: M:System.Net.Sockets.TcpClient.Dispose\n  id: Dispose\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Net.Sockets.TcpClient.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 434\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Releases the managed and unmanaged resources used by the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.Dispose()\n- uid: System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  commentId: M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 435\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>Set to <strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TcpClient.Dispose(Boolean)\n- uid: System.Net.Sockets.TcpClient.Finalize\n  commentId: M:System.Net.Sockets.TcpClient.Finalize\n  id: Finalize\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Net.Sockets.TcpClient.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Finalize\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 436\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Frees resources used by the <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected void Finalize()\n    content.vb: Protected Sub Finalize\n  seealso:\n  - type: System.Net.Sockets.TcpClient.Close\n    commentId: M:System.Net.Sockets.TcpClient.Close\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TcpClient.Finalize()\n- uid: System.Net.Sockets.TcpClient.GetStream\n  commentId: M:System.Net.Sockets.TcpClient.GetStream\n  id: GetStream\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  - vb\n  name: GetStream()\n  fullName: System.Net.Sockets.TcpClient.GetStream()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStream\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 437\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Net.Sockets.NetworkStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to send and receive data.</p>\\n\"\n  syntax:\n    content: public NetworkStream GetStream()\n    content.vb: Public Function GetStream As NetworkStream\n    return:\n      type: System.Net.Sockets.NetworkStream\n      description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.NetworkStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not connected to a remote host. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.NetworkStream\n    commentId: T:System.Net.Sockets.NetworkStream\n  - type: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\n  - type: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\n  - type: System.Net.Sockets.NetworkStream.DataAvailable\n    commentId: P:System.Net.Sockets.NetworkStream.DataAvailable\n  - type: System.IO.Stream\n    commentId: T:System.IO.Stream\n  - type: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n    commentId: M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpClient.GetStream()\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n  commentId: T:System.Net.Sockets.AddressFamily\n  nameWithType: AddressFamily\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  fullName: System.Net.Sockets.Socket\n  commentId: T:System.Net.Sockets.Socket\n  nameWithType: Socket\n- uid: System.Net.Sockets.LingerOption\n  parent: System.Net.Sockets\n  isExternal: false\n  name: LingerOption\n  fullName: System.Net.Sockets.LingerOption\n  commentId: T:System.Net.Sockets.LingerOption\n  nameWithType: LingerOption\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  nameWithType: Task\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Net.IPAddress[]\n  name: IPAddress[]\n  fullName: System.Net.IPAddress[]\n  fullname.vb: System.Net.IPAddress()\n  name.vb: IPAddress()\n  spec.csharp:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    fullName: System.Net.IPAddress\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    fullName: System.Net.IPAddress\n  - name: ()\n    fullName: ()\n  nameWithType: IPAddress[]\n  nameWithType.vb: IPAddress()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Net.Sockets.NetworkStream\n  parent: System.Net.Sockets\n  isExternal: false\n  name: NetworkStream\n  fullName: System.Net.Sockets.NetworkStream\n  commentId: T:System.Net.Sockets.NetworkStream\n  nameWithType: NetworkStream\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Net.Sockets.SocketException\n  isExternal: false\n  name: SocketException\n  fullName: System.Net.Sockets.SocketException\n  commentId: T:System.Net.Sockets.SocketException\n  nameWithType: SocketException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}