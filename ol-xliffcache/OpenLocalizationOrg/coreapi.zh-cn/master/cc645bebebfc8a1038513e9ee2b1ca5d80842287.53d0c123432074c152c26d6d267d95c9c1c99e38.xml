{"nodes":[{"pos":[1035,1045],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[2456,2469],"content":"InvalidHandle","needQuote":true,"nodes":[{"content":"InvalidHandle","pos":[0,13]}]},{"pos":[3475,3486],"content":"WaitTimeout","needQuote":true,"nodes":[{"content":"WaitTimeout","pos":[0,11]}]},{"pos":[4598,4610],"content":"WaitHandle()","needQuote":true,"nodes":[{"content":"WaitHandle()","pos":[0,12]}]},{"pos":[5508,5517],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[6519,6535],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[7492,7629],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[7630,7636],"source":" </p>\\n"},{"pos":[8048,8069],"content":"WaitAll(WaitHandle[])","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;WaitHandle&lt;/strong&gt; array containing the objects for which the current instance will wait.","pos":[8831,8936],"source":"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait."},{"content":"This array cannot contain multiple references to the same object.","pos":[8937,9002]},{"content":"&lt;/p&gt;\\n","pos":[9003,9009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; when every element in &lt;em&gt;waitHandles&lt;/em&gt; has received a signal; otherwise the method never returns.&lt;/p&gt;\\n","pos":[9070,9206],"source":"\\n<p>\\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise the method never returns.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;waitHandles&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9325,9390],"source":"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>."},{"content":"-or- &lt;/p&gt;\\n&lt;p&gt;One or more of the objects in the &lt;em&gt;waitHandles&lt;/em&gt; array are &lt;strong&gt;null&lt;/strong&gt;.","pos":[9391,9492],"source":" -or- </p>\\n<p>One or more of the objects in the <em>waitHandles</em> array are <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements and the .NET Framework version is 2.0 or later.&lt;/p&gt;\\n","pos":[9493,9620],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>waitHandles</em> is an array with no elements and the .NET Framework version is 2.0 or later.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements and the .NET Framework version is 1.0 or 1.1.","pos":[10626,10728],"source":"\\n<p>\\n<em>waitHandles</em> is an array with no elements and the .NET Framework version is 1.0 or 1.1."},{"content":"&lt;/p&gt;\\n","pos":[10729,10735],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait terminated because a thread exited without releasing a mutex.","pos":[10864,10939],"source":"\\n<p>The wait terminated because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[10940,11019],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"pos":[11938,11966],"content":"WaitAll(WaitHandle[], Int32)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;WaitHandle&lt;/strong&gt; array containing the objects for which the current instance will wait.","pos":[12917,13022],"source":"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait."},{"content":"This array cannot contain multiple references to the same object (duplicates).","pos":[13023,13101]},{"content":"&lt;/p&gt;\\n","pos":[13102,13108],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; when every element in &lt;em&gt;waitHandles&lt;/em&gt; has received a signal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13417,13552],"source":"\\n<p>\\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;waitHandles&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;One or more of the objects in the &lt;em&gt;waitHandles&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13671,13845],"source":"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements.","pos":[13846,13920],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>waitHandles</em> is an array with no elements."},{"content":"&lt;/p&gt;\\n","pos":[13921,13927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.","pos":[14947,15057],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."},{"content":"&lt;/p&gt;\\n","pos":[15058,15064],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[15193,15267],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[15268,15347],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"pos":[16310,16341],"content":"WaitAll(WaitHandle[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], TimeSpan)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;WaitHandle&lt;/strong&gt; array containing the objects for which the current instance will wait.","pos":[17279,17384],"source":"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait."},{"content":"This array cannot contain multiple references to the same object.","pos":[17385,17450]},{"content":"&lt;/p&gt;\\n","pos":[17451,17457],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; when every element in &lt;em&gt;waitHandles&lt;/em&gt; has received a signal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17863,17998],"source":"\\n<p>\\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;waitHandles&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18117,18182],"source":"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;One or more of the objects in the &lt;em&gt;waitHandles&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18183,18292],"source":" </p>\\n<p>-or- </p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements.","pos":[18293,18367],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>waitHandles</em> is an array with no elements."},{"content":"&lt;/p&gt;\\n","pos":[18368,18374],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait terminated because a thread exited without releasing a mutex.","pos":[19780,19855],"source":"\\n<p>The wait terminated because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[19856,19935],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"pos":[20862,20883],"content":"WaitAny(WaitHandle[])","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;WaitHandle&lt;/strong&gt; array containing the objects for which the current instance will wait.","pos":[21815,21920],"source":"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait."},{"content":"&lt;/p&gt;\\n","pos":[21921,21927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The array index of the object that satisfied the wait.&lt;/p&gt;\\n","pos":[21986,22051],"source":"\\n<p>The array index of the object that satisfied the wait.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;waitHandles&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more of the objects in the &lt;em&gt;waitHandles&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22170,22343],"source":"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22344,22350],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of objects in &lt;em&gt;waitHandles&lt;/em&gt; is greater than the system permits.","pos":[22455,22541],"source":"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits."},{"content":"&lt;/p&gt;\\n","pos":[22542,22548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements, and the .NET Framework version is 1.0 or 1.1.","pos":[22651,22754],"source":"\\n<p>\\n<em>waitHandles</em> is an array with no elements, and the .NET Framework version is 1.0 or 1.1."},{"content":"&lt;/p&gt;\\n","pos":[22755,22761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[22890,22964],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[22965,23044],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements, and the .NET Framework version is 2.0 or later.","pos":[23141,23246],"source":"\\n<p>\\n<em>waitHandles</em> is an array with no elements, and the .NET Framework version is 2.0 or later."},{"content":"&lt;/p&gt;\\n","pos":[23247,23253],"source":" </p>\\n"},{"pos":[24172,24200],"content":"WaitAny(WaitHandle[], Int32)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;WaitHandle&lt;/strong&gt; array containing the objects for which the current instance will wait.","pos":[25263,25368],"source":"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait."},{"content":"&lt;/p&gt;\\n","pos":[25369,25375],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;waitHandles&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more of the objects in the &lt;em&gt;waitHandles&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26076,26249],"source":"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26250,26256],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of objects in &lt;em&gt;waitHandles&lt;/em&gt; is greater than the system permits.","pos":[26361,26447],"source":"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits."},{"content":"&lt;/p&gt;\\n","pos":[26448,26454],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.","pos":[26571,26681],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."},{"content":"&lt;/p&gt;\\n","pos":[26682,26688],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[26817,26891],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[26892,26971],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements.","pos":[27068,27125],"source":"\\n<p>\\n<em>waitHandles</em> is an array with no elements."},{"content":"&lt;/p&gt;\\n","pos":[27126,27132],"source":" </p>\\n"},{"pos":[28095,28126],"content":"WaitAny(WaitHandle[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], TimeSpan)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;WaitHandle&lt;/strong&gt; array containing the objects for which the current instance will wait.","pos":[29228,29333],"source":"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait."},{"content":"&lt;/p&gt;\\n","pos":[29334,29340],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;waitHandles&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more of the objects in the &lt;em&gt;waitHandles&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[30125,30298],"source":"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30299,30305],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of objects in &lt;em&gt;waitHandles&lt;/em&gt; is greater than the system permits.","pos":[30410,30496],"source":"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits."},{"content":"&lt;/p&gt;\\n","pos":[30497,30503],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[31006,31080],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[31081,31160],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandles&lt;/em&gt; is an array with no elements.","pos":[31257,31314],"source":"\\n<p>\\n<em>waitHandles</em> is an array with no elements."},{"content":"&lt;/p&gt;\\n","pos":[31315,31321],"source":" </p>\\n"},{"pos":[32155,32164],"content":"WaitOne()","needQuote":true,"nodes":[{"content":"WaitOne()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.","pos":[33272,33324],"source":"\\n<p>The current instance has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[33325,33331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[33460,33534],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[33535,33614],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"pos":[34254,34268],"content":"WaitOne(Int32)","needQuote":true,"nodes":[{"content":"WaitOne(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance receives a signal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35400,35512],"source":"\\n<p>\\n<strong>true</strong> if the current instance receives a signal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.","pos":[35635,35687],"source":"\\n<p>The current instance has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[35688,35694],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.","pos":[35811,35921],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."},{"content":"&lt;/p&gt;\\n","pos":[35922,35928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[36057,36131],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[36132,36211],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"pos":[36865,36882],"content":"WaitOne(TimeSpan)","needQuote":true,"nodes":[{"content":"WaitOne(TimeSpan)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance receives a signal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38054,38166],"source":"\\n<p>\\n<strong>true</strong> if the current instance receives a signal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.","pos":[38289,38341],"source":"\\n<p>The current instance has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[38342,38348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The wait completed because a thread exited without releasing a mutex.","pos":[38851,38925],"source":"\\n<p>The wait completed because a thread exited without releasing a mutex."},{"content":"This exception is not thrown on Windows 98 or Windows Millennium Edition.&lt;/p&gt;\\n","pos":[38926,39005],"source":" This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n"},{"pos":[39494,39510],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[39671,39677],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39827,39838],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[40013,40023],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[40118,40126],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40195,40196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40223,40224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40294,40302],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40371,40372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40399,40400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40583,40597],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[40716,40722],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40789,40790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40840,40846],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40906,40907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40990,40996],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41063,41064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41114,41120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41180,41181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41395,41417],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[41565,41571],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41638,41639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41689,41695],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41756,41757]},{"pos":[41812,41818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41878,41879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41976,41982],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42049,42050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42100,42106],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42167,42168]},{"pos":[42223,42229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42289,42290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42535,42566],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[42732,42747],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42823,42824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42874,42880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42941,42942]},{"pos":[42997,43003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43063,43064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43170,43185],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43261,43262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43312,43318],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43379,43380]},{"pos":[43435,43441],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43501,43502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43732,43745],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[43846,43857],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43929,43930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43957,43958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44031,44042],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[44114,44115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44142,44143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44318,44327],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[44420,44427],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44495,44496],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44523,44524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44593,44600],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44668,44669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44696,44697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44872,44889],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[44998,45013],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45089,45090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45117,45118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45195,45210],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45286,45287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45314,45315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45460,45466],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[45597,45603],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[45747,45752],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45919,45928],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[46031,46038],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[46090,46091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46118,46119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46193,46200],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[46252,46253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46280,46281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46445,46452],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[46579,46591],"content":"WaitHandle[]","needQuote":true,"nodes":[{"content":"WaitHandle[]","pos":[0,12]}]},{"pos":[46765,46775],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[46829,46831]},{"pos":[46910,46920],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[46973,46975],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[47122,47130],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[47279,47300],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[47548,47569],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[47804,47827],"content":"AbandonedMutexException","needQuote":true,"nodes":[{"content":"AbandonedMutexException","pos":[0,23]}]},{"pos":[48062,48087],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[48293,48320],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[48539,48556],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[48734,48757],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]}],"content":"items:\n- uid: System.Threading.WaitHandle\n  commentId: T:System.Threading.WaitHandle\n  id: WaitHandle\n  parent: System.Threading\n  children:\n  - System.Threading.WaitHandle.#ctor\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitTimeout\n  langs:\n  - csharp\n  - vb\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitHandle\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 29\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public abstract class WaitHandle : IDisposable\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public MustInherit Class WaitHandle\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: WaitHandle\n- uid: System.Threading.WaitHandle.InvalidHandle\n  commentId: F:System.Threading.WaitHandle.InvalidHandle\n  id: InvalidHandle\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: InvalidHandle\n  fullName: System.Threading.WaitHandle.InvalidHandle\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InvalidHandle\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Represents an invalid native operating system handle. This field is read-only.</p>\\n\"\n  syntax:\n    content: protected static readonly IntPtr InvalidHandle\n    content.vb: Protected Shared ReadOnly InvalidHandle As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - protected\n  - static\n  - readonly\n  modifiers.vb:\n  - Protected\n  - Shared\n  - ReadOnly\n  nameWithType: WaitHandle.InvalidHandle\n- uid: System.Threading.WaitHandle.WaitTimeout\n  commentId: F:System.Threading.WaitHandle.WaitTimeout\n  id: WaitTimeout\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitTimeout\n  fullName: System.Threading.WaitHandle.WaitTimeout\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitTimeout\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Indicates that a <xref href=\\\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operation timed out before any of the wait handles were signaled. This field is constant.</p>\\n\"\n  syntax:\n    content: public const int WaitTimeout = 258\n    content.vb: Public Const WaitTimeout As Integer = 258\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: WaitHandle.WaitTimeout\n- uid: System.Threading.WaitHandle.#ctor\n  commentId: M:System.Threading.WaitHandle.#ctor\n  id: '#ctor'\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitHandle()\n  fullName: System.Threading.WaitHandle.WaitHandle()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 67\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected WaitHandle()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: WaitHandle.WaitHandle()\n- uid: System.Threading.WaitHandle.Dispose\n  commentId: M:System.Threading.WaitHandle.Dispose\n  id: Dispose\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.WaitHandle.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 598\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: WaitHandle.Dispose()\n- uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n  commentId: M:System.Threading.WaitHandle.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Threading.WaitHandle.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 589\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>When overridden in a derived class, releases the unmanaged resources used by the <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      protected virtual void Dispose(bool explicitDisposing)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Protected Overridable Sub Dispose(explicitDisposing As Boolean)\n    parameters:\n    - id: explicitDisposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: WaitHandle.Dispose(Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  id: WaitAll(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(WaitHandle[])\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 365\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Waits for all the elements in the specified array to receive a signal.</p>\\n\"\n  syntax:\n    content: public static bool WaitAll(WaitHandle[] waitHandles)\n    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle()) As Boolean\n    parameters:\n    - id: waitHandles\n      type: System.Threading.WaitHandle[]\n      description: \"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise the method never returns.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>. -or- </p>\\n<p>One or more of the objects in the <em>waitHandles</em> array are <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>waitHandles</em> is an array with no elements and the .NET Framework version is 2.0 or later.</p>\\n\"\n  - type: System.DuplicateWaitObjectException\n    commentId: T:System.DuplicateWaitObjectException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.ArgumentException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The <em>waitHandles</em> array contains elements that are duplicates. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.STAThreadAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute is applied to the thread procedure for the current thread, and <em>waitHandles</em> contains more than one element. </p>\\n\"\n  - type: System.ApplicationException\n    commentId: T:System.ApplicationException\n    description: \"\\n<p>\\n<em>waitHandles</em> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle())\n  name.vb: WaitAll(WaitHandle())\n  nameWithType: WaitHandle.WaitAll(WaitHandle[])\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle())\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  id: WaitAll(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(WaitHandle[], Int32)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 370\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Waits for all the elements in the specified array to receive a signal, using an <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to specify the time interval.</p>\\n\"\n  syntax:\n    content: public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout)\n    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: waitHandles\n      type: System.Threading.WaitHandle[]\n      description: \"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates). </p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>waitHandles</em> is an array with no elements. </p>\\n\"\n  - type: System.DuplicateWaitObjectException\n    commentId: T:System.DuplicateWaitObjectException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.ArgumentException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The <em>waitHandles</em> array contains elements that are duplicates. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.STAThreadAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute is applied to the thread procedure for the current thread, and <em>waitHandles</em> contains more than one element. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32)\n  name.vb: WaitAll(WaitHandle(), Int32)\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  id: WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(WaitHandle[], TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 375\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Waits for all the elements in the specified array to receive a signal, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to specify the time interval.</p>\\n\"\n  syntax:\n    content: public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout)\n    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean\n    parameters:\n    - id: waitHandles\n      type: System.Threading.WaitHandle[]\n      description: \"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds, to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>. </p>\\n<p>-or- </p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>waitHandles</em> is an array with no elements. </p>\\n\"\n  - type: System.DuplicateWaitObjectException\n    commentId: T:System.DuplicateWaitObjectException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.ArgumentException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The <em>waitHandles</em> array contains elements that are duplicates. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.STAThreadAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute is applied to the thread procedure for the current thread, and <em>waitHandles</em> contains more than one element. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>\\n<em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan)\n  name.vb: WaitAll(WaitHandle(), TimeSpan)\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  id: WaitAny(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(WaitHandle[])\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 475\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Waits for any of the elements in the specified array to receive a signal.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int WaitAny(WaitHandle[] waitHandles)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function WaitAny(waitHandles As WaitHandle()) As Integer\n    parameters:\n    - id: waitHandles\n      type: System.Threading.WaitHandle[]\n      description: \"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The array index of the object that satisfied the wait.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits. </p>\\n\"\n  - type: System.ApplicationException\n    commentId: T:System.ApplicationException\n    description: \"\\n<p>\\n<em>waitHandles</em> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>waitHandles</em> is an array with no elements, and the .NET Framework version is 2.0 or later. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle())\n  name.vb: WaitAny(WaitHandle())\n  nameWithType: WaitHandle.WaitAny(WaitHandle[])\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle())\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  id: WaitAny(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(WaitHandle[], Int32)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 481\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function WaitAny(waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer\n    parameters:\n    - id: waitHandles\n      type: System.Threading.WaitHandle[]\n      description: \"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. </p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The array index of the object that satisfied the wait, or <xref href=\\\"System.Threading.WaitHandle.WaitTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if no object satisfied the wait and a time interval equivalent to <em>millisecondsTimeout</em> has passed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>waitHandles</em> is an array with no elements. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32)\n  name.vb: WaitAny(WaitHandle(), Int32)\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  id: WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(WaitHandle[], TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 465\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Waits for any of the elements in the specified array to receive a signal, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to specify the time interval.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function WaitAny(waitHandles As WaitHandle(), timeout As TimeSpan) As Integer\n    parameters:\n    - id: waitHandles\n      type: System.Threading.WaitHandle[]\n      description: \"\\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The array index of the object that satisfied the wait, or <xref href=\\\"System.Threading.WaitHandle.WaitTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if no object satisfied the wait and a time interval equivalent to <em>timeout</em> has passed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>\\n<em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>waitHandles</em> is an array with no elements. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan)\n  name.vb: WaitAny(WaitHandle(), TimeSpan)\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan)\n- uid: System.Threading.WaitHandle.WaitOne\n  commentId: M:System.Threading.WaitHandle.WaitOne\n  id: WaitOne\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitOne()\n  fullName: System.Threading.WaitHandle.WaitOne()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitOne\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 197\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> receives a signal.</p>\\n\"\n  syntax:\n    content: public virtual bool WaitOne()\n    content.vb: Public Overridable Function WaitOne As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance receives a signal. If the current instance is never signaled, <xref href=\\\"System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> never returns.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: WaitHandle.WaitOne()\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32)\n  id: WaitOne(System.Int32)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitOne(Int32)\n  fullName: System.Threading.WaitHandle.WaitOne(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitOne\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 203\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</p>\\n\"\n  syntax:\n    content: public virtual bool WaitOne(int millisecondsTimeout)\n    content.vb: Public Overridable Function WaitOne(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance receives a signal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: WaitHandle.WaitOne(Int32)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  id: WaitOne(System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: WaitOne(TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitOne\n    path: src/mscorlib/src/System/Threading/WaitHandle.cs\n    startLine: 208\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current instance receives a signal, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to specify the time interval.</p>\\n\"\n  syntax:\n    content: public virtual bool WaitOne(TimeSpan timeout)\n    content.vb: Public Overridable Function WaitOne(timeout As TimeSpan) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance receives a signal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out.</p>\\n<p>-or-</p>\\n<p>\\n<em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Threading.AbandonedMutexException\n    commentId: T:System.Threading.AbandonedMutexException\n    description: \"\\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is a transparent proxy for a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in another application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: WaitHandle.WaitOne(TimeSpan)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.WaitHandle[]\n  name: WaitHandle[]\n  fullName: System.Threading.WaitHandle[]\n  fullname.vb: System.Threading.WaitHandle()\n  name.vb: WaitHandle()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n  - name: ()\n    fullName: ()\n  nameWithType: WaitHandle[]\n  nameWithType.vb: WaitHandle()\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.DuplicateWaitObjectException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ApplicationException\n- uid: System.Threading.AbandonedMutexException\n  isExternal: false\n  name: AbandonedMutexException\n  fullName: System.Threading.AbandonedMutexException\n  nameWithType: AbandonedMutexException\n  commentId: T:System.Threading.AbandonedMutexException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n"}