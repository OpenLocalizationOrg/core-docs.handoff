{"nodes":[{"pos":[976,1004],"content":"StringWithQualityHeaderValue","needQuote":true,"nodes":[{"content":"StringWithQualityHeaderValue","pos":[0,28]}]},{"pos":[2267,2303],"content":"StringWithQualityHeaderValue(String)","needQuote":true,"nodes":[{"content":"StringWithQualityHeaderValue(String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The string used to initialize the new instance.&lt;/p&gt;\\n","pos":[3114,3172],"source":"\\n<p>The string used to initialize the new instance.</p>\\n"},{"pos":[3653,3697],"content":"StringWithQualityHeaderValue(String, Double)","needQuote":true,"nodes":[{"content":"StringWithQualityHeaderValue(String, Double)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;A string used to initialize the new instance.&lt;/p&gt;\\n","pos":[4558,4614],"source":"\\n<p>A string used to initialize the new instance.</p>\\n"},{"content":"\\n&lt;p&gt;A quality factor used to initialize the new instance.&lt;/p&gt;\\n","pos":[4680,4744],"source":"\\n<p>A quality factor used to initialize the new instance.</p>\\n"},{"pos":[5150,5157],"content":"Quality","needQuote":true,"nodes":[{"content":"Quality","pos":[0,7]}]},{"pos":[6576,6581],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[8014,8028],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[8859,8916],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[9726,9739],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11118,11131],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents quality header value information.&lt;/p&gt;\\n","pos":[11966,12035],"source":"\\n<p>A string that represents quality header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[12516,12581],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid string with quality header value information.&lt;/p&gt;\\n","pos":[12674,12760],"source":"\\n<p>\\n<em>input</em> is not valid string with quality header value information.</p>\\n"},{"pos":[13160,13170],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14727,14777],"content":"TryParse(String, out StringWithQualityHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out StringWithQualityHeaderValue)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[15750,15784],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[16984,17007],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[17189,17195],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17382,17404],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17552,17558],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17625,17626],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17676,17682],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17743,17744]},{"pos":[17799,17805],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17865,17866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17963,17969],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18036,18037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18087,18093],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18154,18155]},{"pos":[18210,18216],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18276,18277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18522,18553],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18719,18734],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18810,18811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18861,18867],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18928,18929]},{"pos":[18984,18990],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19050,19051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19157,19172],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19248,19249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19299,19305],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19366,19367]},{"pos":[19422,19428],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19488,19489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19715,19724],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19817,19824],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19892,19893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19920,19921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19990,19997],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20065,20066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20093,20094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20269,20286],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20395,20410],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20486,20487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20514,20515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20592,20607],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20683,20684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20711,20712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20857,20863],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20994,21000],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21145,21151],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[21325,21341],"content":"Nullable<Double>","needQuote":true,"nodes":[{"content":"Nullable&lt;Double&gt;","pos":[0,16],"source":"Nullable<Double>"}]},{"pos":[21517,21525],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[21587,21588],"content":"<","needQuote":true,"nodes":[]},{"pos":[21638,21644],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[21774,21782],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[21845,21848]},{"pos":[21905,21911],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[21971,21972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22177,22188],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[22335,22343],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[22384,22385],"content":"<","needQuote":true,"nodes":[]},{"pos":[22412,22413],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22510,22518],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[22560,22563]},{"pos":[22597,22598],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22625,22626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22832,22846],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22965,22971],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23038,23039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23089,23095],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23155,23156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23239,23245],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23312,23313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23363,23369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23429,23430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23603,23610],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23776,23789],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23890,23901],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23973,23974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24001,24002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24075,24086],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24158,24159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24186,24187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24347,24352],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24550,24578],"content":"StringWithQualityHeaderValue","needQuote":true,"nodes":[{"content":"StringWithQualityHeaderValue","pos":[0,28]}]},{"pos":[24838,24848],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24943,24951],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25020,25021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25048,25049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25119,25127],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25196,25197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25224,25225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25378,25399],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[25598,25613],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue\n  commentId: T:System.Net.Http.Headers.StringWithQualityHeaderValue\n  id: StringWithQualityHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.Quality\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.ToString\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)\n  - System.Net.Http.Headers.StringWithQualityHeaderValue.Value\n  langs:\n  - csharp\n  - vb\n  name: StringWithQualityHeaderValue\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StringWithQualityHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 553\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents a string header value with an optional quality.</p>\\n\"\n  syntax:\n    content: public class StringWithQualityHeaderValue\n    content.vb: Public Class StringWithQualityHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: StringWithQualityHeaderValue\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: StringWithQualityHeaderValue(String)\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.StringWithQualityHeaderValue(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 555\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public StringWithQualityHeaderValue(string value)\n    content.vb: Public Sub New(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string used to initialize the new instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringWithQualityHeaderValue.StringWithQualityHeaderValue(String)\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)\n  id: '#ctor(System.String,System.Double)'\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: StringWithQualityHeaderValue(String, Double)\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.StringWithQualityHeaderValue(System.String, System.Double)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 556\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public StringWithQualityHeaderValue(string value, double quality)\n    content.vb: Public Sub New(value As String, quality As Double)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string used to initialize the new instance.</p>\\n\"\n    - id: quality\n      type: System.Double\n      description: \"\\n<p>A quality factor used to initialize the new instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringWithQualityHeaderValue.StringWithQualityHeaderValue(String, Double)\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.Quality\n  commentId: P:System.Net.Http.Headers.StringWithQualityHeaderValue.Quality\n  id: Quality\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Quality\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.Quality\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Quality\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 557\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the quality factor from the <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public double ? Quality { get; }\n    content.vb: Public ReadOnly Property Quality As Double?\n    parameters: []\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>Returns <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The quality factor from the <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StringWithQualityHeaderValue.Quality\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.Value\n  commentId: P:System.Net.Http.Headers.StringWithQualityHeaderValue.Value\n  id: Value\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 558\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the string value from the <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Value { get; }\n    content.vb: Public ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The string value from the <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StringWithQualityHeaderValue.Value\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 559\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified Object is equal to the current <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringWithQualityHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 560\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for an <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringWithQualityHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 561\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static StringWithQualityHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As StringWithQualityHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents quality header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.StringWithQualityHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.AuthenticationHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid string with quality header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: StringWithQualityHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 562\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringWithQualityHeaderValue.ToString()\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)\n  commentId: M:System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)\n  parent: System.Net.Http.Headers.StringWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out StringWithQualityHeaderValue)\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String, out System.Net.Http.Headers.StringWithQualityHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 563\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out StringWithQualityHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As StringWithQualityHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.StringWithQualityHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.StringWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.StringWithQualityHeaderValue)\n  name.vb: TryParse(String, ByRef StringWithQualityHeaderValue)\n  nameWithType: StringWithQualityHeaderValue.TryParse(String, out StringWithQualityHeaderValue)\n  nameWithType.vb: StringWithQualityHeaderValue.TryParse(String, ByRef StringWithQualityHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Nullable{System.Double}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  fullname.vb: System.Nullable(Of System.Double)\n  name.vb: Nullable(Of Double)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Double}\n  nameWithType: Nullable<Double>\n  nameWithType.vb: Nullable(Of Double)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.Http.Headers.StringWithQualityHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: StringWithQualityHeaderValue\n  fullName: System.Net.Http.Headers.StringWithQualityHeaderValue\n  commentId: T:System.Net.Http.Headers.StringWithQualityHeaderValue\n  nameWithType: StringWithQualityHeaderValue\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}