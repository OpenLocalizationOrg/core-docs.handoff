{"nodes":[{"pos":[986,1011],"content":"GenericSecurityDescriptor","needQuote":true,"nodes":[{"content":"GenericSecurityDescriptor","pos":[0,25]}]},{"pos":[2570,2597],"content":"GenericSecurityDescriptor()","needQuote":true,"nodes":[{"content":"GenericSecurityDescriptor()","pos":[0,27]}]},{"pos":[3784,3796],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[5562,5574],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[7126,7131],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[8624,8629],"content":"Owner","needQuote":true,"nodes":[{"content":"Owner","pos":[0,5]}]},{"pos":[10167,10175],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[11734,11762],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[13002,13053],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[14201,14235],"content":"GetSddlForm(AccessControlSections)","needQuote":true,"nodes":[{"content":"GetSddlForm(AccessControlSections)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.&lt;/p&gt;\\n","pos":[15376,15496],"source":"\\n<p>Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</p>\\n"},{"pos":[16244,16271],"content":"IsSddlConversionSupported()","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported()","pos":[0,27]}]},{"pos":[17856,17885],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[18085,18091],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18251,18261],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18356,18364],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18433,18434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18461,18462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18532,18540],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18609,18610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18637,18638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18821,18835],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[18954,18960],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19027,19028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19078,19084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19144,19145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19228,19234],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19301,19302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19352,19358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19418,19419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19633,19655],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19803,19809],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19876,19877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19927,19933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19994,19995]},{"pos":[20050,20056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20116,20117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20214,20220],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20287,20288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20338,20344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20405,20406]},{"pos":[20461,20467],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20527,20528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20773,20804],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20970,20985],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21061,21062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21112,21118],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21179,21180]},{"pos":[21235,21241],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21301,21302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21408,21423],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21499,21500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21550,21556],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21617,21618]},{"pos":[21673,21679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21739,21740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21970,21983],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22084,22095],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22167,22168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22195,22196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22269,22280],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22352,22353],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22380,22381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22556,22565],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22658,22665],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22733,22734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22761,22762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22831,22838],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22906,22907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22934,22935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23110,23127],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23236,23251],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23327,23328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23355,23356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23433,23448],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23524,23525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23552,23553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23698,23704],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23834,23839],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24033,24045],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[24304,24322],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[24536,24561],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[24747,24751],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24853,24859],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[24979,24983],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[25042,25044]},{"pos":[25107,25111],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25169,25171],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[25365,25386],"content":"AccessControlSections","needQuote":true,"nodes":[{"content":"AccessControlSections","pos":[0,21]}]},{"pos":[25622,25628],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25774,25781],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25933,25960],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.GenericSecurityDescriptor\n  commentId: T:System.Security.AccessControl.GenericSecurityDescriptor\n  id: GenericSecurityDescriptor\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.GenericSecurityDescriptor.#ctor\n  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  - System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.GenericSecurityDescriptor.Group\n  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  - System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  langs:\n  - csharp\n  - vb\n  name: GenericSecurityDescriptor\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericSecurityDescriptor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 298\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</p>\\n\"\n  syntax:\n    content: public abstract class GenericSecurityDescriptor\n    content.vb: Public MustInherit Class GenericSecurityDescriptor\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: GenericSecurityDescriptor\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.#ctor\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GenericSecurityDescriptor()\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GenericSecurityDescriptor()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 300\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected GenericSecurityDescriptor()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: GenericSecurityDescriptor.GenericSecurityDescriptor()\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 301\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public int BinaryLength { get; }\n    content.vb: Public ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericSecurityDescriptor.BinaryLength\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  id: ControlFlags\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ControlFlags\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ControlFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 302\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets values that specify behavior of the <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract ControlFlags ControlFlags { get; }\n    content.vb: Public MustOverride ReadOnly Property ControlFlags As ControlFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.ControlFlags\n      description: \"\\n<p>One or more values of the <xref href=\\\"System.Security.AccessControl.ControlFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration combined with a logical OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: GenericSecurityDescriptor.ControlFlags\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Group\n  id: Group\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Group\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Group\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 303\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the primary group for this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract SecurityIdentifier Group { get; set; }\n    content.vb: Public MustOverride Property Group As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The primary group for this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: GenericSecurityDescriptor.Group\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  id: Owner\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Owner\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Owner\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 304\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the owner of the object associated with this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract SecurityIdentifier Owner { get; set; }\n    content.vb: Public MustOverride Property Owner As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The owner of the object associated with this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: GenericSecurityDescriptor.Owner\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  id: Revision\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Revision\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Revision\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 305\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the revision level of the <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static byte Revision { get; }\n    content.vb: Public Shared ReadOnly Property Revision As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte value that specifies the revision level of the <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: GenericSecurityDescriptor.Revision\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 306\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns an array of byte values that represents the information contained in this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: GenericSecurityDescriptor.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericSecurityDescriptor.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  id: GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetSddlForm(AccessControlSections)\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSddlForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 307\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor that this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents.</p>\\n\"\n  syntax:\n    content: public string GetSddlForm(AccessControlSections includeSections)\n    content.vb: Public Function GetSddlForm(includeSections As AccessControlSections) As String\n    parameters:\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The SDDL representation of the specified sections of the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GenericSecurityDescriptor.GetSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  id: IsSddlConversionSupported\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsSddlConversionSupported()\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSddlConversionSupported\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 308\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns a boolean value that specifies whether the security descriptor associated with this  <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can be converted to the Security Descriptor Definition Language (SDDL) format.</p>\\n\"\n  syntax:\n    content: public static bool IsSddlConversionSupported()\n    content.vb: Public Shared Function IsSddlConversionSupported As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the security descriptor associated with this  <xref href=\\\"System.Security.AccessControl.GenericSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GenericSecurityDescriptor.IsSddlConversionSupported()\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.ControlFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ControlFlags\n  fullName: System.Security.AccessControl.ControlFlags\n  commentId: T:System.Security.AccessControl.ControlFlags\n  nameWithType: ControlFlags\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n  commentId: T:System.Security.AccessControl.AccessControlSections\n  nameWithType: AccessControlSections\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}