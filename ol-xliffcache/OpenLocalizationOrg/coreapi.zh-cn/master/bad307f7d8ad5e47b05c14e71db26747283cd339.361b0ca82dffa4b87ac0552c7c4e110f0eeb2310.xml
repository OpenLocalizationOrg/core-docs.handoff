{"nodes":[{"pos":[2046,2059],"content":"SqlConnection","needQuote":true,"nodes":[{"content":"SqlConnection","pos":[0,13]}]},{"pos":[3256,3271],"content":"SqlConnection()","needQuote":true,"nodes":[{"content":"SqlConnection()","pos":[0,15]}]},{"pos":[4315,4336],"content":"SqlConnection(String)","needQuote":true,"nodes":[{"content":"SqlConnection(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The connection used to open the SQL Server database.&lt;/p&gt;\\n","pos":[5227,5290],"source":"\\n<p>The connection used to open the SQL Server database.</p>\\n"},{"pos":[5640,5658],"content":"ClientConnectionId","needQuote":true,"nodes":[{"content":"ClientConnectionId","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The connection ID of the most recent connection attempt.&lt;/p&gt;\\n","pos":[6458,6525],"source":"\\n<p>The connection ID of the most recent connection attempt.</p>\\n"},{"pos":[6887,6903],"content":"ConnectionString","needQuote":true,"nodes":[{"content":"ConnectionString","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The connection string that includes the source database name, and other parameters needed to establish the initial connection.","pos":[7664,7795],"source":"\\n<p>The connection string that includes the source database name, and other parameters needed to establish the initial connection."},{"content":"The default value is an empty string.&lt;/p&gt;\\n","pos":[7796,7839],"source":" The default value is an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.","pos":[7950,8075],"source":"\\n<p>An invalid connection string argument has been supplied, or a required connection string argument has not been supplied."},{"content":"&lt;/p&gt;\\n","pos":[8076,8082],"source":" </p>\\n"},{"pos":[8467,8484],"content":"ConnectionTimeout","needQuote":true,"nodes":[{"content":"ConnectionTimeout","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The time (in seconds) to wait for a connection to open.","pos":[9307,9367],"source":"\\n<p>The time (in seconds) to wait for a connection to open."},{"content":"The default value is 15 seconds.&lt;/p&gt;\\n","pos":[9368,9406],"source":" The default value is 15 seconds.</p>\\n"},{"content":"\\n&lt;p&gt;The value set is less than 0.","pos":[9517,9551],"source":"\\n<p>The value set is less than 0."},{"content":"&lt;/p&gt;\\n","pos":[9552,9558],"source":" </p>\\n"},{"pos":[9922,9930],"content":"Database","needQuote":true,"nodes":[{"content":"Database","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The name of the current database or the name of the database to be used after a connection is opened.","pos":[10698,10804],"source":"\\n<p>The name of the current database or the name of the database to be used after a connection is opened."},{"content":"The default value is an empty string.&lt;/p&gt;\\n","pos":[10805,10848],"source":" The default value is an empty string.</p>\\n"},{"pos":[11209,11219],"content":"DataSource","needQuote":true,"nodes":[{"content":"DataSource","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The name of the instance of SQL Server to which to connect.","pos":[11965,12029],"source":"\\n<p>The name of the instance of SQL Server to which to connect."},{"content":"The default value is an empty string.&lt;/p&gt;\\n","pos":[12030,12073],"source":" The default value is an empty string.</p>\\n"},{"pos":[12502,12534],"content":"FireInfoMessageEventOnUserErrors","needQuote":true,"nodes":[{"content":"FireInfoMessageEventOnUserErrors","pos":[0,32]}]},{"pos":[14016,14026],"content":"PacketSize","needQuote":true,"nodes":[{"content":"PacketSize","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The size (in bytes) of network packets.","pos":[14781,14825],"source":"\\n<p>The size (in bytes) of network packets."},{"content":"The default value is 8000.&lt;/p&gt;\\n","pos":[14826,14858],"source":" The default value is 8000.</p>\\n"},{"pos":[15203,15216],"content":"ServerVersion","needQuote":true,"nodes":[{"content":"ServerVersion","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The version of the instance of SQL Server.&lt;/p&gt;\\n","pos":[16013,16066],"source":"\\n<p>The version of the instance of SQL Server.</p>\\n"},{"pos":[16947,16952],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[18319,18336],"content":"StatisticsEnabled","needQuote":true,"nodes":[{"content":"StatisticsEnabled","pos":[0,17]}]},{"content":"\\n&lt;p&gt;Returns &lt;strong&gt;true&lt;/strong&gt; if statistics gathering is enabled; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[19113,19217],"source":"\\n<p>Returns <strong>true</strong> if statistics gathering is enabled; otherwise <strong>false</strong>."},{"content":"&lt;strong&gt;false&lt;/strong&gt; is the default.&lt;/p&gt;\\n","pos":[19218,19262],"source":" <strong>false</strong> is the default.</p>\\n"},{"pos":[19609,19622],"content":"WorkstationId","needQuote":true,"nodes":[{"content":"WorkstationId","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that identifies the database client.","pos":[20347,20397],"source":"\\n<p>A string that identifies the database client."},{"content":"If not specified, the name of the client computer.","pos":[20398,20448]},{"content":"If neither is specified, the value is an empty string.&lt;/p&gt;\\n","pos":[20449,20509],"source":" If neither is specified, the value is an empty string.</p>\\n"},{"pos":[20851,20862],"content":"InfoMessage","needQuote":true,"nodes":[{"content":"InfoMessage","pos":[0,11]}]},{"pos":[22035,22069],"content":"BeginDbTransaction(IsolationLevel)","needQuote":true,"nodes":[{"content":"BeginDbTransaction(IsolationLevel)","pos":[0,34]}]},{"pos":[23285,23303],"content":"BeginTransaction()","needQuote":true,"nodes":[{"content":"BeginTransaction()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[24024,24078],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).&lt;/p&gt;\\n","pos":[24209,24304],"source":"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not supported.","pos":[24417,24462],"source":"\\n<p>Parallel transactions are not supported."},{"content":"&lt;/p&gt;\\n","pos":[24463,24469],"source":" </p>\\n"},{"pos":[24894,24926],"content":"BeginTransaction(IsolationLevel)","needQuote":true,"nodes":[{"content":"BeginTransaction(IsolationLevel)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The isolation level under which the transaction should run.","pos":[25729,25793],"source":"\\n<p>The isolation level under which the transaction should run."},{"content":"&lt;/p&gt;\\n","pos":[25794,25800],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[25883,25937],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).&lt;/p&gt;\\n","pos":[26068,26163],"source":"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not supported.","pos":[26276,26321],"source":"\\n<p>Parallel transactions are not supported."},{"content":"&lt;/p&gt;\\n","pos":[26322,26328],"source":" </p>\\n"},{"pos":[26809,26849],"content":"BeginTransaction(IsolationLevel, String)","needQuote":true,"nodes":[{"content":"BeginTransaction(IsolationLevel, String)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The isolation level under which the transaction should run.","pos":[27739,27803],"source":"\\n<p>The isolation level under which the transaction should run."},{"content":"&lt;/p&gt;\\n","pos":[27804,27810],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the transaction.","pos":[27884,27917],"source":"\\n<p>The name of the transaction."},{"content":"&lt;/p&gt;\\n","pos":[27918,27924],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[28007,28061],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).&lt;/p&gt;\\n","pos":[28192,28287],"source":"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not supported.","pos":[28400,28445],"source":"\\n<p>Parallel transactions are not supported."},{"content":"&lt;/p&gt;\\n","pos":[28446,28452],"source":" </p>\\n"},{"pos":[28860,28884],"content":"BeginTransaction(String)","needQuote":true,"nodes":[{"content":"BeginTransaction(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the transaction.","pos":[29710,29743],"source":"\\n<p>The name of the transaction."},{"content":"&lt;/p&gt;\\n","pos":[29744,29750],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[29833,29887],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).&lt;/p&gt;\\n","pos":[30018,30113],"source":"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n"},{"content":"\\n&lt;p&gt;Parallel transactions are not supported.","pos":[30226,30271],"source":"\\n<p>Parallel transactions are not supported."},{"content":"&lt;/p&gt;\\n","pos":[30272,30278],"source":" </p>\\n"},{"pos":[30664,30686],"content":"ChangeDatabase(String)","needQuote":true,"nodes":[{"content":"ChangeDatabase(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The name of the database to use instead of the current database.","pos":[31540,31609],"source":"\\n<p>The name of the database to use instead of the current database."},{"content":"&lt;/p&gt;\\n","pos":[31610,31616],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The database name is not valid.&lt;/p&gt;\\n","pos":[31727,31769],"source":"\\n<p>The database name is not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The connection is not open.","pos":[31882,31914],"source":"\\n<p>The connection is not open."},{"content":"&lt;/p&gt;\\n","pos":[31915,31921],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Cannot change the database.","pos":[32038,32070],"source":"\\n<p>Cannot change the database."},{"content":"&lt;/p&gt;\\n","pos":[32071,32077],"source":" </p>\\n"},{"pos":[32440,32455],"content":"ClearAllPools()","needQuote":true,"nodes":[{"content":"ClearAllPools()","pos":[0,15]}]},{"pos":[33510,33534],"content":"ClearPool(SqlConnection)","needQuote":true,"nodes":[{"content":"ClearPool(SqlConnection)","pos":[0,24]}]},{"pos":[34834,34841],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The connection-level error that occurred while opening the connection.","pos":[35621,35696],"source":"\\n<p>The connection-level error that occurred while opening the connection."},{"content":"&lt;/p&gt;\\n","pos":[35697,35703],"source":" </p>\\n"},{"pos":[36051,36066],"content":"CreateCommand()","needQuote":true,"nodes":[{"content":"CreateCommand()","pos":[0,15]}]},{"pos":[37419,37436],"content":"CreateDbCommand()","needQuote":true,"nodes":[{"content":"CreateDbCommand()","pos":[0,17]}]},{"pos":[38413,38419],"content":"Open()","needQuote":true,"nodes":[{"content":"Open()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;Cannot open a connection without specifying a data source or server.&lt;/p&gt;\\n&lt;p&gt;or&lt;/p&gt;\\n&lt;p&gt;The connection is already open.&lt;/p&gt;\\n","pos":[39277,39407],"source":"\\n<p>Cannot open a connection without specifying a data source or server.</p>\\n<p>or</p>\\n<p>The connection is already open.</p>\\n"},{"content":"\\n&lt;p&gt;There are two entries with the same name in the &lt;strong&gt;&lt;localdbinstances&gt;&lt;/strong&gt; section.&lt;/p&gt;\\n","pos":[40259,40362],"source":"\\n<p>There are two entries with the same name in the <strong><localdbinstances></strong> section.</p>\\n"},{"pos":[40805,40833],"content":"OpenAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"OpenAsync(CancellationToken)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The cancellation instruction.&lt;/p&gt;\\n","pos":[42374,42414],"source":"\\n<p>The cancellation instruction.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[42488,42546],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;Any error returned by SQL Server that occurred while opening the connection.&lt;/p&gt;\\n","pos":[43205,43292],"source":"\\n<p>Any error returned by SQL Server that occurred while opening the connection.</p>\\n"},{"pos":[43667,43684],"content":"ResetStatistics()","needQuote":true,"nodes":[{"content":"ResetStatistics()","pos":[0,17]}]},{"pos":[44667,44687],"content":"RetrieveStatistics()","needQuote":true,"nodes":[{"content":"RetrieveStatistics()","pos":[0,20]}]},{"pos":[46066,46082],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[46955,46976],"content":"System.Data.SqlClient","needQuote":true,"nodes":[{"content":"System.Data.SqlClient","pos":[0,21]}]},{"pos":[47152,47158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47333,47345],"content":"DbConnection","needQuote":true,"nodes":[{"content":"DbConnection","pos":[0,12]}]},{"pos":[47508,47514],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[47633,47651],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[47818,47824],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47967,47971],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[48109,48114],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48257,48264],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[48431,48446],"content":"ConnectionState","needQuote":true,"nodes":[{"content":"ConnectionState","pos":[0,15]}]},{"pos":[48609,48620],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[48816,48842],"content":"SqlInfoMessageEventHandler","needQuote":true,"nodes":[{"content":"SqlInfoMessageEventHandler","pos":[0,26]}]},{"pos":[49095,49109],"content":"IsolationLevel","needQuote":true,"nodes":[{"content":"IsolationLevel","pos":[0,14]}]},{"pos":[49319,49332],"content":"DbTransaction","needQuote":true,"nodes":[{"content":"DbTransaction","pos":[0,13]}]},{"pos":[49560,49574],"content":"SqlTransaction","needQuote":true,"nodes":[{"content":"SqlTransaction","pos":[0,14]}]},{"pos":[49810,49823],"content":"SqlConnection","needQuote":true,"nodes":[{"content":"SqlConnection","pos":[0,13]}]},{"pos":[50053,50063],"content":"SqlCommand","needQuote":true,"nodes":[{"content":"SqlCommand","pos":[0,10]}]},{"pos":[50277,50286],"content":"DbCommand","needQuote":true,"nodes":[{"content":"DbCommand","pos":[0,9]}]},{"pos":[50495,50512],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[50740,50744],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[50901,50917],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[51070,51092],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[51300,51311],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[51483,51501],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[51679,51696],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[51893,51918],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[52124,52136],"content":"SqlException","needQuote":true,"nodes":[{"content":"SqlException","pos":[0,12]}]}],"content":"items:\n- uid: System.Data.SqlClient.SqlConnection\n  commentId: T:System.Data.SqlClient.SqlConnection\n  id: SqlConnection\n  parent: System.Data.SqlClient\n  children:\n  - System.Data.SqlClient.SqlConnection.#ctor\n  - System.Data.SqlClient.SqlConnection.#ctor(System.String)\n  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  - System.Data.SqlClient.SqlConnection.BeginTransaction\n  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)\n  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  - System.Data.SqlClient.SqlConnection.ClearAllPools\n  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  - System.Data.SqlClient.SqlConnection.ClientConnectionId\n  - System.Data.SqlClient.SqlConnection.Close\n  - System.Data.SqlClient.SqlConnection.ConnectionString\n  - System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  - System.Data.SqlClient.SqlConnection.CreateCommand\n  - System.Data.SqlClient.SqlConnection.CreateDbCommand\n  - System.Data.SqlClient.SqlConnection.Database\n  - System.Data.SqlClient.SqlConnection.DataSource\n  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  - System.Data.SqlClient.SqlConnection.InfoMessage\n  - System.Data.SqlClient.SqlConnection.Open\n  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  - System.Data.SqlClient.SqlConnection.PacketSize\n  - System.Data.SqlClient.SqlConnection.ResetStatistics\n  - System.Data.SqlClient.SqlConnection.RetrieveStatistics\n  - System.Data.SqlClient.SqlConnection.ServerVersion\n  - System.Data.SqlClient.SqlConnection.State\n  - System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  - System.Data.SqlClient.SqlConnection.WorkstationId\n  langs:\n  - csharp\n  - vb\n  name: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlConnection\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n    startLine: 16\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Represents an open connection to a SQL Server database. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public sealed class SqlConnection : DbConnection, DbConnection'\n    content.vb: >-\n      Public NotInheritable Class SqlConnection\n          Inherits DbConnection\n          Implements DbConnection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Data.Common.DbConnection\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: SqlConnection\n- uid: System.Data.SqlClient.SqlConnection.#ctor\n  commentId: M:System.Data.SqlClient.SqlConnection.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: SqlConnection()\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n    startLine: 26\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SqlConnection()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.SqlConnection()\n- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnection.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: SqlConnection(String)\n  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 50\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class when given a string that contains the connection string.</p>\\n\"\n  syntax:\n    content: public SqlConnection(string connectionString)\n    content.vb: Public Sub New(connectionString As String)\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: \"\\n<p>The connection used to open the SQL Server database.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.SqlConnection(String)\n- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId\n  commentId: P:System.Data.SqlClient.SqlConnection.ClientConnectionId\n  id: ClientConnectionId\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ClientConnectionId\n  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClientConnectionId\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 245\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.</p>\\n\"\n  syntax:\n    content: public Guid ClientConnectionId { get; }\n    content.vb: Public ReadOnly Property ClientConnectionId As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The connection ID of the most recent connection attempt.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlConnection.ClientConnectionId\n- uid: System.Data.SqlClient.SqlConnection.ConnectionString\n  commentId: P:System.Data.SqlClient.SqlConnection.ConnectionString\n  id: ConnectionString\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ConnectionString\n  fullName: System.Data.SqlClient.SqlConnection.ConnectionString\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectionString\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 156\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the string used to open a SQL Server database.</p>\\n\"\n  syntax:\n    content: public override string ConnectionString { get; set; }\n    content.vb: Public Overrides Property ConnectionString As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid connection string argument has been supplied, or a required connection string argument has not been supplied. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnection.ConnectionString\n- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  commentId: P:System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  id: ConnectionTimeout\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ConnectionTimeout\n  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectionTimeout\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 170\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</p>\\n\"\n  syntax:\n    content: public override int ConnectionTimeout { get; }\n    content.vb: Public Overrides ReadOnly Property ConnectionTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value set is less than 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnection.ConnectionTimeout\n- uid: System.Data.SqlClient.SqlConnection.Database\n  commentId: P:System.Data.SqlClient.SqlConnection.Database\n  id: Database\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: Database\n  fullName: System.Data.SqlClient.SqlConnection.Database\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Database\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 179\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the name of the current database or the database to be used after a connection is opened.</p>\\n\"\n  syntax:\n    content: public override string Database { get; }\n    content.vb: Public Overrides ReadOnly Property Database As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnection.Database\n- uid: System.Data.SqlClient.SqlConnection.DataSource\n  commentId: P:System.Data.SqlClient.SqlConnection.DataSource\n  id: DataSource\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: DataSource\n  fullName: System.Data.SqlClient.SqlConnection.DataSource\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DataSource\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 202\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the name of the instance of SQL Server to which to connect.</p>\\n\"\n  syntax:\n    content: public override string DataSource { get; }\n    content.vb: Public Overrides ReadOnly Property DataSource As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the instance of SQL Server to which to connect. The default value is an empty string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnection.DataSource\n- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  commentId: P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  id: FireInfoMessageEventOnUserErrors\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: FireInfoMessageEventOnUserErrors\n  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FireInfoMessageEventOnUserErrors\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 318\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: public bool FireInfoMessageEventOnUserErrors { get; set; }\n    content.vb: Public Property FireInfoMessageEventOnUserErrors As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property has been set; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors\n- uid: System.Data.SqlClient.SqlConnection.PacketSize\n  commentId: P:System.Data.SqlClient.SqlConnection.PacketSize\n  id: PacketSize\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: PacketSize\n  fullName: System.Data.SqlClient.SqlConnection.PacketSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PacketSize\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 222\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server.</p>\\n\"\n  syntax:\n    content: public int PacketSize { get; }\n    content.vb: Public ReadOnly Property PacketSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size (in bytes) of network packets. The default value is 8000.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlConnection.PacketSize\n- uid: System.Data.SqlClient.SqlConnection.ServerVersion\n  commentId: P:System.Data.SqlClient.SqlConnection.ServerVersion\n  id: ServerVersion\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ServerVersion\n  fullName: System.Data.SqlClient.SqlConnection.ServerVersion\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServerVersion\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 267\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets a string that contains the version of the instance of SQL Server to which the client is connected.</p>\\n\"\n  syntax:\n    content: public override string ServerVersion { get; }\n    content.vb: Public Overrides ReadOnly Property ServerVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The version of the instance of SQL Server.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection is closed. </p>\\n<p>\\n<xref href=\\\"System.Data.SqlClient.SqlConnection.ServerVersion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was called while the returned Task was not completed and the connection was not opened after a call to <xref href=\\\"System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnection.ServerVersion\n- uid: System.Data.SqlClient.SqlConnection.State\n  commentId: P:System.Data.SqlClient.SqlConnection.State\n  id: State\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: State\n  fullName: System.Data.SqlClient.SqlConnection.State\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: State\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 275\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Indicates the state of the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> during the most recent network operation performed on the connection.</p>\\n\"\n  syntax:\n    content: public override ConnectionState State { get; }\n    content.vb: Public Overrides ReadOnly Property State As ConnectionState\n    parameters: []\n    return:\n      type: ConnectionState\n      description: \"\\n<p>An <xref href=\\\"System.Data.ConnectionState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnection.State\n- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  commentId: P:System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  id: StatisticsEnabled\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: StatisticsEnabled\n  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StatisticsEnabled\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 81\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>When set to <strong>true</strong>, enables statistics gathering for the current connection.</p>\\n\"\n  syntax:\n    content: public bool StatisticsEnabled { get; set; }\n    content.vb: Public Property StatisticsEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <strong>true</strong> if statistics gathering is enabled; otherwise <strong>false</strong>. <strong>false</strong> is the default.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.StatisticsEnabled\n- uid: System.Data.SqlClient.SqlConnection.WorkstationId\n  commentId: P:System.Data.SqlClient.SqlConnection.WorkstationId\n  id: WorkstationId\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: WorkstationId\n  fullName: System.Data.SqlClient.SqlConnection.WorkstationId\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WorkstationId\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 297\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets a string that identifies the database client.</p>\\n\"\n  syntax:\n    content: public string WorkstationId { get; }\n    content.vb: Public ReadOnly Property WorkstationId As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string that identifies the database client. If not specified, the name of the client computer. If neither is specified, the value is an empty string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlConnection.WorkstationId\n- uid: System.Data.SqlClient.SqlConnection.InfoMessage\n  commentId: E:System.Data.SqlClient.SqlConnection.InfoMessage\n  id: InfoMessage\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: InfoMessage\n  fullName: System.Data.SqlClient.SqlConnection.InfoMessage\n  type: Event\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InfoMessage\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 316\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Occurs when SQL Server returns a warning or informational message.</p>\\n\"\n  syntax:\n    content: public event SqlInfoMessageEventHandler InfoMessage\n    content.vb: Public Event InfoMessage As SqlInfoMessageEventHandler\n    return:\n      type: System.Data.SqlClient.SqlInfoMessageEventHandler\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.InfoMessage\n- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  commentId: M:System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  id: BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginDbTransaction\n    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n    startLine: 338\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override Common.DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)\n    content.vb: Protected Overrides Function BeginDbTransaction(isolationLevel As IsolationLevel) As Common.DbTransaction\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n    return:\n      type: System.Data.Common.DbTransaction\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction\n  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction\n  id: BeginTransaction\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginTransaction()\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginTransaction\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 353\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Starts a database transaction.</p>\\n\"\n  syntax:\n    content: public SqlTransaction BeginTransaction()\n    content.vb: Public Function BeginTransaction As SqlTransaction\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Parallel transactions are not supported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.BeginTransaction()\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  id: BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginTransaction(IsolationLevel)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginTransaction\n    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n    startLine: 340\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Starts a database transaction with the specified isolation level.</p>\\n\"\n  syntax:\n    content: public SqlTransaction BeginTransaction(IsolationLevel iso)\n    content.vb: Public Function BeginTransaction(iso As IsolationLevel) As SqlTransaction\n    parameters:\n    - id: iso\n      type: System.Data.IsolationLevel\n      description: \"\\n<p>The isolation level under which the transaction should run. </p>\\n\"\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Parallel transactions are not supported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)\n  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)\n  id: BeginTransaction(System.Data.IsolationLevel,System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginTransaction(IsolationLevel, String)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginTransaction\n    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n    startLine: 341\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Starts a database transaction with the specified isolation level and transaction name.</p>\\n\"\n  syntax:\n    content: public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName)\n    content.vb: Public Function BeginTransaction(iso As IsolationLevel, transactionName As String) As SqlTransaction\n    parameters:\n    - id: iso\n      type: System.Data.IsolationLevel\n      description: \"\\n<p>The isolation level under which the transaction should run. </p>\\n\"\n    - id: transactionName\n      type: System.String\n      description: \"\\n<p>The name of the transaction. </p>\\n\"\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Parallel transactions are not supported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.BeginTransaction(IsolationLevel, String)\n- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  id: BeginTransaction(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginTransaction(String)\n  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginTransaction\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 365\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Starts a database transaction with the specified transaction name.</p>\\n\"\n  syntax:\n    content: public SqlTransaction BeginTransaction(string transactionName)\n    content.vb: Public Function BeginTransaction(transactionName As String) As SqlTransaction\n    parameters:\n    - id: transactionName\n      type: System.String\n      description: \"\\n<p>The name of the transaction. </p>\\n\"\n    return:\n      type: System.Data.SqlClient.SqlTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Parallel transactions are not supported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.BeginTransaction(String)\n- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  id: ChangeDatabase(System.String)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ChangeDatabase(String)\n  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ChangeDatabase\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 420\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Changes the current database for an open <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void ChangeDatabase(string database)\n    content.vb: Public Overrides Sub ChangeDatabase(database As String)\n    parameters:\n    - id: database\n      type: System.String\n      description: \"\\n<p>The name of the database to use instead of the current database. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The database name is not valid.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection is not open. </p>\\n\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>Cannot change the database. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnection.ChangeDatabase(String)\n- uid: System.Data.SqlClient.SqlConnection.ClearAllPools\n  commentId: M:System.Data.SqlClient.SqlConnection.ClearAllPools\n  id: ClearAllPools\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ClearAllPools()\n  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClearAllPools\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 435\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Empties the connection pool.</p>\\n\"\n  syntax:\n    content: public static void ClearAllPools()\n    content.vb: Public Shared Sub ClearAllPools\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlConnection.ClearAllPools()\n- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  commentId: M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  id: ClearPool(System.Data.SqlClient.SqlConnection)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ClearPool(SqlConnection)\n  fullName: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClearPool\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 440\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Empties the connection pool associated with the specified connection.</p>\\n\"\n  syntax:\n    content: public static void ClearPool(SqlConnection connection)\n    content.vb: Public Shared Sub ClearPool(connection As SqlConnection)\n    parameters:\n    - id: connection\n      type: System.Data.SqlClient.SqlConnection\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be cleared from the pool.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlConnection.ClearPool(SqlConnection)\n- uid: System.Data.SqlClient.SqlConnection.Close\n  commentId: M:System.Data.SqlClient.SqlConnection.Close\n  id: Close\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: Close()\n  fullName: System.Data.SqlClient.SqlConnection.Close()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Close\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 462\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Closes the connection to the database. This is the preferred method of closing any open connection.</p>\\n\"\n  syntax:\n    content: public override void Close()\n    content.vb: Public Overrides Sub Close\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>The connection-level error that occurred while opening the connection. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnection.Close()\n- uid: System.Data.SqlClient.SqlConnection.CreateCommand\n  commentId: M:System.Data.SqlClient.SqlConnection.CreateCommand\n  id: CreateCommand\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: CreateCommand()\n  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCommand\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 538\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Creates and returns a <xref href=\\\"System.Data.SqlClient.SqlCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlCommand CreateCommand()\n    content.vb: Public Function CreateCommand As SqlCommand\n    return:\n      type: System.Data.SqlClient.SqlCommand\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlClient.SqlCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.CreateCommand()\n- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand\n  commentId: M:System.Data.SqlClient.SqlConnection.CreateDbCommand\n  id: CreateDbCommand\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: CreateDbCommand()\n  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDbCommand\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n    startLine: 132\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override DbCommand CreateDbCommand()\n    content.vb: Protected Overrides Function CreateDbCommand As DbCommand\n    return:\n      type: DbCommand\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: SqlConnection.CreateDbCommand()\n- uid: System.Data.SqlClient.SqlConnection.Open\n  commentId: M:System.Data.SqlClient.SqlConnection.Open\n  id: Open\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: Open()\n  fullName: System.Data.SqlClient.SqlConnection.Open()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Open\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 563\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Opens a database connection with the property settings specified by the <xref href=\\\"System.Data.SqlClient.SqlConnection.ConnectionString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void Open()\n    content.vb: Public Overrides Sub Open\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Cannot open a connection without specifying a data source or server.</p>\\n<p>or</p>\\n<p>The connection is already open.</p>\\n\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>A connection-level error occurred while opening the connection. If the <xref href=\\\"System.Data.SqlClient.SqlException.Number\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <xref href=\\\"System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method for more information.</p>\\n<p>The <strong><system.data.localdb></strong> tag in the app.config file has invalid or unknown elements.</p>\\n\"\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: \"\\n<p>There are two entries with the same name in the <strong><localdbinstances></strong> section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnection.Open()\n- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  id: OpenAsync(System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: OpenAsync(CancellationToken)\n  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenAsync\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 807\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.SqlClient.SqlConnection.Open\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which opens a database connection with the property settings specified by the <xref href=\\\"System.Data.SqlClient.SqlConnection.ConnectionString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.  Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.</p>\\n\"\n  syntax:\n    content: public override Task OpenAsync(CancellationToken cancellationToken)\n    content.vb: Public Overrides Function OpenAsync(cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Calling <xref href=\\\"System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> more than once for the same instance before task completion.</p>\\n<p>\\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\\n<p>A connection was not available from the connection pool before the connection time out elapsed.</p>\\n\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>Any error returned by SQL Server that occurred while opening the connection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnection.OpenAsync(CancellationToken)\n- uid: System.Data.SqlClient.SqlConnection.ResetStatistics\n  commentId: M:System.Data.SqlClient.SqlConnection.ResetStatistics\n  id: ResetStatistics\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: ResetStatistics()\n  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ResetStatistics\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 1231\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>If statistics gathering is enabled, all values are reset to zero.</p>\\n\"\n  syntax:\n    content: public void ResetStatistics()\n    content.vb: Public Sub ResetStatistics\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.ResetStatistics()\n- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics\n  commentId: M:System.Data.SqlClient.SqlConnection.RetrieveStatistics\n  id: RetrieveStatistics\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: RetrieveStatistics()\n  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RetrieveStatistics\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs\n    startLine: 1244\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Returns a name value pair collection of statistics at the point in time the method is called.</p>\\n\"\n  syntax:\n    content: public IDictionary RetrieveStatistics()\n    content.vb: Public Function RetrieveStatistics As IDictionary\n    return:\n      type: System.Collections.IDictionary\n      description: \"\\n<p>Returns a reference of type <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> items.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnection.RetrieveStatistics()\n- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  commentId: M:System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.SqlClient.SqlConnection\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs\n    startLine: 142\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: SqlConnection.Dispose(Boolean)\nreferences:\n- uid: System.Data.SqlClient\n  isExternal: false\n  name: System.Data.SqlClient\n  fullName: System.Data.SqlClient\n  nameWithType: System.Data.SqlClient\n  commentId: N:System.Data.SqlClient\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.Common.DbConnection\n  parent: System.Data.Common\n  isExternal: false\n  name: DbConnection\n  fullName: System.Data.Common.DbConnection\n  nameWithType: DbConnection\n  commentId: T:System.Data.Common.DbConnection\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Data.ConnectionState\n  parent: System.Data\n  isExternal: false\n  name: ConnectionState\n  fullName: System.Data.ConnectionState\n  nameWithType: ConnectionState\n  commentId: T:System.Data.ConnectionState\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Data.SqlClient.SqlInfoMessageEventHandler\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlInfoMessageEventHandler\n  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler\n  nameWithType: SqlInfoMessageEventHandler\n  commentId: T:System.Data.SqlClient.SqlInfoMessageEventHandler\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  fullName: System.Data.IsolationLevel\n  nameWithType: IsolationLevel\n  commentId: T:System.Data.IsolationLevel\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n  nameWithType: DbTransaction\n  commentId: T:System.Data.Common.DbTransaction\n- uid: System.Data.SqlClient.SqlTransaction\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlTransaction\n  fullName: System.Data.SqlClient.SqlTransaction\n  nameWithType: SqlTransaction\n  commentId: T:System.Data.SqlClient.SqlTransaction\n- uid: System.Data.SqlClient.SqlConnection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n  nameWithType: SqlConnection\n  commentId: T:System.Data.SqlClient.SqlConnection\n- uid: System.Data.SqlClient.SqlCommand\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlCommand\n  fullName: System.Data.SqlClient.SqlCommand\n  nameWithType: SqlCommand\n  commentId: T:System.Data.SqlClient.SqlCommand\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  fullName: System.Data.Common.DbCommand\n  nameWithType: DbCommand\n  commentId: T:System.Data.Common.DbCommand\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Data.SqlClient.SqlException\n  isExternal: false\n  name: SqlException\n  fullName: System.Data.SqlClient.SqlException\n  nameWithType: SqlException\n  commentId: T:System.Data.SqlClient.SqlException\n- uid: System.Configuration.ConfigurationErrorsException\n"}