{"nodes":[{"pos":[1178,1185],"content":"Barrier","needQuote":true,"nodes":[{"content":"Barrier","pos":[0,7]}]},{"pos":[2477,2491],"content":"Barrier(Int32)","needQuote":true,"nodes":[{"content":"Barrier(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The number of participating threads.&lt;/p&gt;\\n","pos":[3230,3277],"source":"\\n<p>The number of participating threads.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;participantCount&lt;/em&gt; is less than 0 or greater than 32,767.&lt;/p&gt;\\n","pos":[3408,3485],"source":"\\n<p>\\n<em>participantCount</em> is less than 0 or greater than 32,767.</p>\\n"},{"pos":[3914,3945],"content":"Barrier(Int32, Action<Barrier>)","needQuote":true,"nodes":[{"content":"Barrier(Int32, Action&lt;Barrier&gt;)","pos":[0,31],"source":"Barrier(Int32, Action<Barrier>)"}]},{"content":"\\n&lt;p&gt;The number of participating threads.&lt;/p&gt;\\n","pos":[4797,4844],"source":"\\n<p>The number of participating threads.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;participantCount&lt;/em&gt; is less than 0 or greater than 32,767.&lt;/p&gt;\\n","pos":[5275,5352],"source":"\\n<p>\\n<em>participantCount</em> is less than 0 or greater than 32,767.</p>\\n"},{"pos":[5887,5905],"content":"CurrentPhaseNumber","needQuote":true,"nodes":[{"content":"CurrentPhaseNumber","pos":[0,18]}]},{"content":"\\n&lt;p&gt;Returns the number of the barrier's current phase.&lt;/p&gt;\\n","pos":[6572,6633],"source":"\\n<p>Returns the number of the barrier's current phase.</p>\\n"},{"pos":[6956,6972],"content":"ParticipantCount","needQuote":true,"nodes":[{"content":"ParticipantCount","pos":[0,16]}]},{"content":"\\n&lt;p&gt;Returns the total number of participants in the barrier.&lt;/p&gt;\\n","pos":[7639,7706],"source":"\\n<p>Returns the total number of participants in the barrier.</p>\\n"},{"pos":[8042,8063],"content":"ParticipantsRemaining","needQuote":true,"nodes":[{"content":"ParticipantsRemaining","pos":[0,21]}]},{"content":"\\n&lt;p&gt;Returns the number of participants in the barrier that haven’t yet signaled in the current phase.&lt;/p&gt;\\n","pos":[8791,8899],"source":"\\n<p>Returns the number of participants in the barrier that haven’t yet signaled in the current phase.</p>\\n"},{"pos":[9219,9235],"content":"AddParticipant()","needQuote":true,"nodes":[{"content":"AddParticipant()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The phase number of the barrier in which the new participants will first participate.&lt;/p&gt;\\n","pos":[9947,10043],"source":"\\n<p>The phase number of the barrier in which the new participants will first participate.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[10166,10224],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;Adding a participant would cause the barrier's participant count to exceed 32,767.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The method was invoked from within a post-phase action.&lt;/p&gt;\\n","pos":[10337,10507],"source":"\\n<p>Adding a participant would cause the barrier's participant count to exceed 32,767.</p>\\n<p>-or-</p>\\n<p>The method was invoked from within a post-phase action.</p>\\n"},{"pos":[10846,10868],"content":"AddParticipants(Int32)","needQuote":true,"nodes":[{"content":"AddParticipants(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of additional participants to add to the barrier.&lt;/p&gt;\\n","pos":[11674,11745],"source":"\\n<p>The number of additional participants to add to the barrier.</p>\\n"},{"content":"\\n&lt;p&gt;The phase number of the barrier in which the new participants will first participate.&lt;/p&gt;\\n","pos":[11804,11900],"source":"\\n<p>The phase number of the barrier in which the new participants will first participate.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[12023,12081],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;participantCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Adding &lt;em&gt;participantCount&lt;/em&gt; participants would cause the barrier's participant count to exceed 32,767.&lt;/p&gt;\\n","pos":[12198,12381],"source":"\\n<p>\\n<em>participantCount</em> is less than 0.</p>\\n<p>-or-</p>\\n<p>Adding <em>participantCount</em> participants would cause the barrier's participant count to exceed 32,767.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[12494,12569],"source":"\\n<p>The method was invoked from within a post-phase action.</p>\\n<p></p>\\n"},{"pos":[12848,12857],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action.&lt;/p&gt;\\n","pos":[13603,13669],"source":"\\n<p>The method was invoked from within a post-phase action.</p>\\n"},{"pos":[14028,14044],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;true to release both managed and unmanaged resources; false to release only unmanaged resources.&lt;/p&gt;\\n","pos":[14851,14958],"source":"\\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\\n"},{"pos":[15295,15314],"content":"RemoveParticipant()","needQuote":true,"nodes":[{"content":"RemoveParticipant()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[16084,16142],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The barrier already has 0 participants.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The method was invoked from within a post-phase action.&lt;/p&gt;\\n","pos":[16255,16382],"source":"\\n<p>The barrier already has 0 participants.</p>\\n<p>-or-</p>\\n<p>The method was invoked from within a post-phase action.</p>\\n"},{"pos":[16733,16758],"content":"RemoveParticipants(Int32)","needQuote":true,"nodes":[{"content":"RemoveParticipants(Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of additional participants to remove from the barrier.&lt;/p&gt;\\n","pos":[17558,17634],"source":"\\n<p>The number of additional participants to remove from the barrier.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[17757,17815],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;participantCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[17932,17986],"source":"\\n<p>\\n<em>participantCount</em> is less than 0.</p>\\n"},{"content":"\\n&lt;p&gt;The barrier already has 0 participants.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The method was invoked from within a post-phase action.&lt;/p&gt;\\n&lt;p&gt; -or-&lt;/p&gt;\\n&lt;p&gt;current participant count is less than the specified participantCount&lt;/p&gt;\\n","pos":[18099,18318],"source":"\\n<p>The barrier already has 0 participants.</p>\\n<p>-or-</p>\\n<p>The method was invoked from within a post-phase action.</p>\\n<p> -or-</p>\\n<p>current participant count is less than the specified participantCount</p>\\n"},{"content":"\\n&lt;p&gt;The total participant count is less than the specified&lt;em&gt; participantCount&lt;/em&gt;&lt;/p&gt;\\n","pos":[18435,18526],"source":"\\n<p>The total participant count is less than the specified<em> participantCount</em></p>\\n"},{"pos":[18826,18841],"content":"SignalAndWait()","needQuote":true,"nodes":[{"content":"SignalAndWait()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[19574,19632],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.&lt;/p&gt;\\n","pos":[19745,19933],"source":"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n"},{"content":"\\n&lt;p&gt;If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.&lt;/p&gt;\\n","pos":[20066,20306],"source":"\\n<p>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</p>\\n"},{"pos":[20638,20658],"content":"SignalAndWait(Int32)","needQuote":true,"nodes":[{"content":"SignalAndWait(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;if all participants reached the barrier within the specified time; otherwise false.&lt;/p&gt;\\n","pos":[21728,21822],"source":"\\n<p>if all participants reached the barrier within the specified time; otherwise false.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[21945,22003],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[22120,22236],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[22349,22546],"source":"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.&lt;/p&gt;\\n","pos":[22679,22919],"source":"\\n<p>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</p>\\n"},{"pos":[23361,23400],"content":"SignalAndWait(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"SignalAndWait(Int32, CancellationToken)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;if all participants reached the barrier within the specified time; otherwise false&lt;/p&gt;\\n","pos":[24839,24932],"source":"\\n<p>if all participants reached the barrier within the specified time; otherwise false</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has been canceled.&lt;/p&gt;\\n","pos":[25061,25119],"source":"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[25228,25286],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[25403,25519],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[25632,25829],"source":"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n"},{"pos":[26251,26283],"content":"SignalAndWait(CancellationToken)","needQuote":true,"nodes":[{"content":"SignalAndWait(CancellationToken)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has been canceled.&lt;/p&gt;\\n","pos":[27395,27453],"source":"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[27562,27620],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.&lt;/p&gt;\\n","pos":[27733,27921],"source":"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n"},{"pos":[28279,28302],"content":"SignalAndWait(TimeSpan)","needQuote":true,"nodes":[{"content":"SignalAndWait(TimeSpan)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;true if all other participants reached the barrier; otherwise, false.&lt;/p&gt;\\n","pos":[29521,29601],"source":"\\n<p>true if all other participants reached the barrier; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[29724,29782],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;timeout&lt;/em&gt;is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.&lt;/p&gt;\\n","pos":[29899,30045],"source":"\\n<p>\\n<em>timeout</em>is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[30158,30355],"source":"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n"},{"pos":[30809,30851],"content":"SignalAndWait(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"SignalAndWait(TimeSpan, CancellationToken)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;true if all other participants reached the barrier; otherwise, false.&lt;/p&gt;\\n","pos":[32439,32519],"source":"\\n<p>true if all other participants reached the barrier; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has been canceled.&lt;/p&gt;\\n","pos":[32648,32706],"source":"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[32815,32873],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;timeout&lt;/em&gt;is a negative number other than -1 milliseconds, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[32990,33106],"source":"\\n<p>\\n<em>timeout</em>is a negative number other than -1 milliseconds, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[33219,33416],"source":"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n"},{"pos":[33607,33623],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[33784,33790],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33940,33951],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[34126,34136],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[34231,34239],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34308,34309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34336,34337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34407,34415],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34484,34485],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34512,34513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34696,34710],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[34829,34835],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34902,34903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34953,34959],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35019,35020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35103,35109],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35176,35177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35227,35233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35293,35294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35508,35530],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[35678,35684],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35751,35752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35802,35808],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35869,35870]},{"pos":[35925,35931],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35991,35992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36089,36095],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36162,36163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36213,36219],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36280,36281]},{"pos":[36336,36342],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36402,36403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36648,36679],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[36845,36860],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36936,36937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36987,36993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37054,37055]},{"pos":[37110,37116],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37176,37177],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37283,37298],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[37374,37375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37425,37431],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37492,37493]},{"pos":[37548,37554],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37614,37615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37845,37858],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37959,37970],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[38042,38043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38070,38071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38144,38155],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[38227,38228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38255,38256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38431,38440],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[38533,38540],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38608,38609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38636,38637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38706,38713],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38781,38782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38809,38810],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38985,39002],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[39111,39126],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[39202,39203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39230,39231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39308,39323],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[39399,39400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39427,39428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39573,39579],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[39709,39714],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39892,39907],"content":"Action<Barrier>","needQuote":true,"nodes":[{"content":"Action&lt;Barrier&gt;","pos":[0,15],"source":"Action<Barrier>"}]},{"pos":[40098,40104],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[40164,40165],"content":"<","needQuote":true,"nodes":[]},{"pos":[40226,40233],"content":"Barrier","needQuote":true,"nodes":[{"content":"Barrier","pos":[0,7]}]},{"pos":[40351,40357],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[40418,40421]},{"pos":[40489,40496],"content":"Barrier","needQuote":true,"nodes":[{"content":"Barrier","pos":[0,7]}]},{"pos":[40546,40547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40740,40749],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[40888,40894],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[40933,40934],"content":"<","needQuote":true,"nodes":[]},{"pos":[40961,40962],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[41057,41063],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[41103,41106]},{"pos":[41140,41141],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[41168,41169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41340,41345],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[41512,41521],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[41624,41631],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[41683,41684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41711,41712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41786,41793],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[41845,41846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41873,41874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42038,42045],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42224,42241],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[42441,42449],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[42604,42631],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[42839,42862],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[43077,43102],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[43316,43341],"content":"BarrierPostPhaseException","needQuote":true,"nodes":[{"content":"BarrierPostPhaseException","pos":[0,25]}]},{"pos":[43583,43609],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]}],"content":"items:\n- uid: System.Threading.Barrier\n  commentId: T:System.Threading.Barrier\n  id: Barrier\n  parent: System.Threading\n  children:\n  - System.Threading.Barrier.#ctor(System.Int32)\n  - System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})\n  - System.Threading.Barrier.AddParticipant\n  - System.Threading.Barrier.AddParticipants(System.Int32)\n  - System.Threading.Barrier.CurrentPhaseNumber\n  - System.Threading.Barrier.Dispose\n  - System.Threading.Barrier.Dispose(System.Boolean)\n  - System.Threading.Barrier.ParticipantCount\n  - System.Threading.Barrier.ParticipantsRemaining\n  - System.Threading.Barrier.RemoveParticipant\n  - System.Threading.Barrier.RemoveParticipants(System.Int32)\n  - System.Threading.Barrier.SignalAndWait\n  - System.Threading.Barrier.SignalAndWait(System.Int32)\n  - System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)\n  - System.Threading.Barrier.SignalAndWait(System.TimeSpan)\n  - System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  - vb\n  name: Barrier\n  fullName: System.Threading.Barrier\n  type: Class\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Barrier\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 39\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</p>\\n\"\n  syntax:\n    content: 'public class Barrier : IDisposable'\n    content.vb: >-\n      Public Class Barrier\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Barrier\n- uid: System.Threading.Barrier.#ctor(System.Int32)\n  commentId: M:System.Threading.Barrier.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: Barrier(Int32)\n  fullName: System.Threading.Barrier.Barrier(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 41\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Barrier(int participantCount)\n    content.vb: Public Sub New(participantCount As Integer)\n    parameters:\n    - id: participantCount\n      type: System.Int32\n      description: \"\\n<p>The number of participating threads.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>participantCount</em> is less than 0 or greater than 32,767.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.Barrier(Int32)\n- uid: System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})\n  commentId: M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})\n  id: '#ctor(System.Int32,System.Action{System.Threading.Barrier})'\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: Barrier(Int32, Action<Barrier>)\n  fullName: System.Threading.Barrier.Barrier(System.Int32, System.Action<System.Threading.Barrier>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 42\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Barrier(int participantCount, Action<Barrier> postPhaseAction)\n    content.vb: Public Sub New(participantCount As Integer, postPhaseAction As Action(Of Barrier))\n    parameters:\n    - id: participantCount\n      type: System.Int32\n      description: \"\\n<p>The number of participating threads.</p>\\n\"\n    - id: postPhaseAction\n      type: System.Action{System.Threading.Barrier}\n      description: \"\\n<p>The <xref href=\\\"System.Action`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be executed after each phase. null (Nothing in Visual Basic) may be passed to indicate no action is taken.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>participantCount</em> is less than 0 or greater than 32,767.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Barrier.Barrier(System.Int32, System.Action(Of System.Threading.Barrier))\n  name.vb: Barrier(Int32, Action(Of Barrier))\n  nameWithType: Barrier.Barrier(Int32, Action<Barrier>)\n  nameWithType.vb: Barrier.Barrier(Int32, Action(Of Barrier))\n- uid: System.Threading.Barrier.CurrentPhaseNumber\n  commentId: P:System.Threading.Barrier.CurrentPhaseNumber\n  id: CurrentPhaseNumber\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: CurrentPhaseNumber\n  fullName: System.Threading.Barrier.CurrentPhaseNumber\n  type: Property\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CurrentPhaseNumber\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 43\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the number of the barrier's current phase.</p>\\n\"\n  syntax:\n    content: public long CurrentPhaseNumber { get; }\n    content.vb: Public ReadOnly Property CurrentPhaseNumber As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>Returns the number of the barrier's current phase.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Barrier.CurrentPhaseNumber\n- uid: System.Threading.Barrier.ParticipantCount\n  commentId: P:System.Threading.Barrier.ParticipantCount\n  id: ParticipantCount\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: ParticipantCount\n  fullName: System.Threading.Barrier.ParticipantCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParticipantCount\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 44\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the total number of participants in the barrier.</p>\\n\"\n  syntax:\n    content: public int ParticipantCount { get; }\n    content.vb: Public ReadOnly Property ParticipantCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns the total number of participants in the barrier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Barrier.ParticipantCount\n- uid: System.Threading.Barrier.ParticipantsRemaining\n  commentId: P:System.Threading.Barrier.ParticipantsRemaining\n  id: ParticipantsRemaining\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: ParticipantsRemaining\n  fullName: System.Threading.Barrier.ParticipantsRemaining\n  type: Property\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParticipantsRemaining\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 45\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the number of participants in the barrier that haven’t yet signaled in the current phase.</p>\\n\"\n  syntax:\n    content: public int ParticipantsRemaining { get; }\n    content.vb: Public ReadOnly Property ParticipantsRemaining As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns the number of participants in the barrier that haven’t yet signaled in the current phase.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Barrier.ParticipantsRemaining\n- uid: System.Threading.Barrier.AddParticipant\n  commentId: M:System.Threading.Barrier.AddParticipant\n  id: AddParticipant\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: AddParticipant()\n  fullName: System.Threading.Barrier.AddParticipant()\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddParticipant\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 46\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Notifies the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that there will be an additional participant.</p>\\n\"\n  syntax:\n    content: public long AddParticipant()\n    content.vb: Public Function AddParticipant As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The phase number of the barrier in which the new participants will first participate.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Adding a participant would cause the barrier's participant count to exceed 32,767.</p>\\n<p>-or-</p>\\n<p>The method was invoked from within a post-phase action.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.AddParticipant()\n- uid: System.Threading.Barrier.AddParticipants(System.Int32)\n  commentId: M:System.Threading.Barrier.AddParticipants(System.Int32)\n  id: AddParticipants(System.Int32)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: AddParticipants(Int32)\n  fullName: System.Threading.Barrier.AddParticipants(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddParticipants\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 47\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Notifies the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that there will be additional participants.</p>\\n\"\n  syntax:\n    content: public long AddParticipants(int participantCount)\n    content.vb: Public Function AddParticipants(participantCount As Integer) As Long\n    parameters:\n    - id: participantCount\n      type: System.Int32\n      description: \"\\n<p>The number of additional participants to add to the barrier.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The phase number of the barrier in which the new participants will first participate.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>participantCount</em> is less than 0.</p>\\n<p>-or-</p>\\n<p>Adding <em>participantCount</em> participants would cause the barrier's participant count to exceed 32,767.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.AddParticipants(Int32)\n- uid: System.Threading.Barrier.Dispose\n  commentId: M:System.Threading.Barrier.Dispose\n  id: Dispose\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.Barrier.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 48\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action.</p>\\n\"\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.Dispose()\n- uid: System.Threading.Barrier.Dispose(System.Boolean)\n  commentId: M:System.Threading.Barrier.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Threading.Barrier.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 49\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Barrier.Dispose(Boolean)\n- uid: System.Threading.Barrier.RemoveParticipant\n  commentId: M:System.Threading.Barrier.RemoveParticipant\n  id: RemoveParticipant\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: RemoveParticipant()\n  fullName: System.Threading.Barrier.RemoveParticipant()\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveParticipant\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 50\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Notifies the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that there will be one less participant.</p>\\n\"\n  syntax:\n    content: public void RemoveParticipant()\n    content.vb: Public Sub RemoveParticipant\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The barrier already has 0 participants.</p>\\n<p>-or-</p>\\n<p>The method was invoked from within a post-phase action.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.RemoveParticipant()\n- uid: System.Threading.Barrier.RemoveParticipants(System.Int32)\n  commentId: M:System.Threading.Barrier.RemoveParticipants(System.Int32)\n  id: RemoveParticipants(System.Int32)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: RemoveParticipants(Int32)\n  fullName: System.Threading.Barrier.RemoveParticipants(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveParticipants\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 51\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Notifies the <xref href=\\\"System.Threading.Barrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that there will be fewer participants.</p>\\n\"\n  syntax:\n    content: public void RemoveParticipants(int participantCount)\n    content.vb: Public Sub RemoveParticipants(participantCount As Integer)\n    parameters:\n    - id: participantCount\n      type: System.Int32\n      description: \"\\n<p>The number of additional participants to remove from the barrier.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>participantCount</em> is less than 0.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The barrier already has 0 participants.</p>\\n<p>-or-</p>\\n<p>The method was invoked from within a post-phase action.</p>\\n<p> -or-</p>\\n<p>current participant count is less than the specified participantCount</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The total participant count is less than the specified<em> participantCount</em></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.RemoveParticipants(Int32)\n- uid: System.Threading.Barrier.SignalAndWait\n  commentId: M:System.Threading.Barrier.SignalAndWait\n  id: SignalAndWait\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: SignalAndWait()\n  fullName: System.Threading.Barrier.SignalAndWait()\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignalAndWait\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 52\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</p>\\n\"\n  syntax:\n    content: public void SignalAndWait()\n    content.vb: Public Sub SignalAndWait\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n\"\n  - type: System.Threading.BarrierPostPhaseException\n    commentId: T:System.Threading.BarrierPostPhaseException\n    description: \"\\n<p>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.SignalAndWait()\n- uid: System.Threading.Barrier.SignalAndWait(System.Int32)\n  commentId: M:System.Threading.Barrier.SignalAndWait(System.Int32)\n  id: SignalAndWait(System.Int32)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: SignalAndWait(Int32)\n  fullName: System.Threading.Barrier.SignalAndWait(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignalAndWait\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 53\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</p>\\n\"\n  syntax:\n    content: public bool SignalAndWait(int millisecondsTimeout)\n    content.vb: Public Function SignalAndWait(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>if all participants reached the barrier within the specified time; otherwise false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n\"\n  - type: System.Threading.BarrierPostPhaseException\n    commentId: T:System.Threading.BarrierPostPhaseException\n    description: \"\\n<p>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.SignalAndWait(Int32)\n- uid: System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)\n  id: SignalAndWait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: SignalAndWait(Int32, CancellationToken)\n  fullName: System.Threading.Barrier.SignalAndWait(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignalAndWait\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 54\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</p>\\n\"\n  syntax:\n    content: public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: Public Function SignalAndWait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>if all participants reached the barrier within the specified time; otherwise false</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.SignalAndWait(Int32, CancellationToken)\n- uid: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)\n  id: SignalAndWait(System.Threading.CancellationToken)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: SignalAndWait(CancellationToken)\n  fullName: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignalAndWait\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 55\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</p>\\n\"\n  syntax:\n    content: public void SignalAndWait(CancellationToken cancellationToken)\n    content.vb: Public Sub SignalAndWait(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.SignalAndWait(CancellationToken)\n- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan)\n  commentId: M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)\n  id: SignalAndWait(System.TimeSpan)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: SignalAndWait(TimeSpan)\n  fullName: System.Threading.Barrier.SignalAndWait(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignalAndWait\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 56\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to measure the time interval.</p>\\n\"\n  syntax:\n    content: public bool SignalAndWait(TimeSpan timeout)\n    content.vb: Public Function SignalAndWait(timeout As TimeSpan) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if all other participants reached the barrier; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em>is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.SignalAndWait(TimeSpan)\n- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)\n  id: SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.Barrier\n  langs:\n  - csharp\n  - vb\n  name: SignalAndWait(TimeSpan, CancellationToken)\n  fullName: System.Threading.Barrier.SignalAndWait(System.TimeSpan, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading/ref/System.Threading.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignalAndWait\n    path: src/System.Threading/ref/System.Threading.cs\n    startLine: 57\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to measure the time interval, while observing a cancellation token.</p>\\n\"\n  syntax:\n    content: public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken)\n    content.vb: Public Function SignalAndWait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if all other participants reached the barrier; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em>is a negative number other than -1 milliseconds, which represents an infinite time-out.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Barrier.SignalAndWait(TimeSpan, CancellationToken)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  commentId: N:System.Threading\n  nameWithType: System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Action{System.Threading.Barrier}\n  parent: System\n  definition: System.Action`1\n  name: Action<Barrier>\n  fullName: System.Action<System.Threading.Barrier>\n  fullname.vb: System.Action(Of System.Threading.Barrier)\n  name.vb: Action(Of Barrier)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Barrier\n    name: Barrier\n    fullName: System.Threading.Barrier\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Barrier\n    name: Barrier\n    fullName: System.Threading.Barrier\n  - name: )\n    fullName: )\n  commentId: T:System.Action{System.Threading.Barrier}\n  nameWithType: Action<Barrier>\n  nameWithType.vb: Action(Of Barrier)\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Action`1\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  nameWithType: CancellationToken\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Threading.BarrierPostPhaseException\n  isExternal: false\n  name: BarrierPostPhaseException\n  fullName: System.Threading.BarrierPostPhaseException\n  nameWithType: BarrierPostPhaseException\n  commentId: T:System.Threading.BarrierPostPhaseException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n"}