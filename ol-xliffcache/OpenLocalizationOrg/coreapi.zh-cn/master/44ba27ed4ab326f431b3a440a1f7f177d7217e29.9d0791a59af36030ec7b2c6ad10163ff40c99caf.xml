{"nodes":[{"pos":[436,454],"content":"IDynamicExpression","needQuote":true,"nodes":[{"content":"IDynamicExpression","pos":[0,18]}]},{"pos":[1870,1882],"content":"DelegateType","needQuote":true,"nodes":[{"content":"DelegateType","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The delegate type used by the CallSite.&lt;/p&gt;\\n","pos":[2660,2710],"source":"\\n<p>The delegate type used by the CallSite.</p>\\n"},{"pos":[3064,3080],"content":"CreateCallSite()","needQuote":true,"nodes":[{"content":"CreateCallSite()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The CallSite for the DynamicExpression’s polymorphic inline cache.&lt;/p&gt;\\n","pos":[3947,4024],"source":"\\n<p>The CallSite for the DynamicExpression’s polymorphic inline cache.</p>\\n"},{"pos":[4418,4439],"content":"Rewrite(Expression[])","needQuote":true,"nodes":[{"content":"Rewrite(Expression[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The arguments used to replace this node.&lt;/p&gt;\\n","pos":[5639,5690],"source":"\\n<p>The arguments used to replace this node.</p>\\n"},{"content":"\\n&lt;p&gt;The rewritten node, but if no changes were made, then returns the same node.&lt;/p&gt;\\n","pos":[5771,5858],"source":"\\n<p>The rewritten node, but if no changes were made, then returns the same node.</p>\\n"},{"pos":[6185,6208],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[6467,6480],"content":"ArgumentCount","needQuote":true,"nodes":[{"content":"ArgumentCount","pos":[0,13]}]},{"pos":[6822,6840],"content":"GetArgument(Int32)","needQuote":true,"nodes":[{"content":"GetArgument(Int32)","pos":[0,18]}]},{"pos":[7023,7034],"content":"GetArgument","needQuote":true,"nodes":[{"content":"GetArgument","pos":[0,11]}]},{"pos":[7113,7114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7163,7168],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7227,7228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7343,7354],"content":"GetArgument","needQuote":true,"nodes":[{"content":"GetArgument","pos":[0,11]}]},{"pos":[7433,7434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7483,7488],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7547,7548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7812,7829],"content":"IArgumentProvider","needQuote":true,"nodes":[{"content":"IArgumentProvider","pos":[0,17]}]},{"pos":[8039,8043],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[8158,8164],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[8295,8301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8432,8444],"content":"Expression[]","needQuote":true,"nodes":[{"content":"Expression[]","pos":[0,12]}]},{"pos":[8639,8649],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"[]","pos":[8710,8712]},{"pos":[8798,8808],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[8868,8870],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[9053,9063],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]}],"content":"items:\n- uid: System.Linq.Expressions.IDynamicExpression\n  commentId: T:System.Linq.Expressions.IDynamicExpression\n  id: IDynamicExpression\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.IDynamicExpression.CreateCallSite\n  - System.Linq.Expressions.IDynamicExpression.DelegateType\n  - System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])\n  langs:\n  - csharp\n  - vb\n  name: IDynamicExpression\n  fullName: System.Linq.Expressions.IDynamicExpression\n  type: Interface\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IDynamicExpression\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 590\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.</p>\\n\"\n  syntax:\n    content: 'public interface IDynamicExpression : IArgumentProvider'\n    content.vb: >-\n      Public Interface IDynamicExpression\n          Inherits IArgumentProvider\n  inheritedMembers:\n  - System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  - System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IDynamicExpression\n- uid: System.Linq.Expressions.IDynamicExpression.DelegateType\n  commentId: P:System.Linq.Expressions.IDynamicExpression.DelegateType\n  id: DelegateType\n  parent: System.Linq.Expressions.IDynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: DelegateType\n  fullName: System.Linq.Expressions.IDynamicExpression.DelegateType\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DelegateType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 592\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression’s polymorhphic inline cache. </p>\\n\"\n  syntax:\n    content: Type DelegateType { get; }\n    content.vb: ReadOnly Property DelegateType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The delegate type used by the CallSite.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDynamicExpression.DelegateType\n- uid: System.Linq.Expressions.IDynamicExpression.CreateCallSite\n  commentId: M:System.Linq.Expressions.IDynamicExpression.CreateCallSite\n  id: CreateCallSite\n  parent: System.Linq.Expressions.IDynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: CreateCallSite()\n  fullName: System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCallSite\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 593\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</p>\\n\"\n  syntax:\n    content: object CreateCallSite()\n    content.vb: Function CreateCallSite As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The CallSite for the DynamicExpression’s polymorphic inline cache.</p>\\n\"\n  nameWithType: IDynamicExpression.CreateCallSite()\n- uid: System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])\n  id: Rewrite(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.IDynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Rewrite(Expression[])\n  fullName: System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rewrite\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 594\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Rewrites this node replacing the dynamic expression’s arguments with the provided values.  The number of <code>args</code> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</p>\\n\"\n  syntax:\n    content: Expression Rewrite(Expression[] args)\n    content.vb: Function Rewrite(args As Expression()) As Expression\n    parameters:\n    - id: args\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The arguments used to replace this node.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The rewritten node, but if no changes were made, then returns the same node.</p>\\n\"\n  fullName.vb: System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression())\n  name.vb: Rewrite(Expression())\n  nameWithType: IDynamicExpression.Rewrite(Expression[])\n  nameWithType.vb: IDynamicExpression.Rewrite(Expression())\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  parent: System.Linq.Expressions.IArgumentProvider\n  isExternal: false\n  name: ArgumentCount\n  fullName: System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  commentId: P:System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  nameWithType: IArgumentProvider.ArgumentCount\n- uid: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)\n  parent: System.Linq.Expressions.IArgumentProvider\n  isExternal: true\n  name: GetArgument(Int32)\n  fullName: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)\n  spec.csharp:\n  - uid: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)\n    name: GetArgument\n    fullName: System.Linq.Expressions.IArgumentProvider.GetArgument\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)\n    name: GetArgument\n    fullName: System.Linq.Expressions.IArgumentProvider.GetArgument\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)\n  nameWithType: IArgumentProvider.GetArgument(Int32)\n- uid: System.Linq.Expressions.IArgumentProvider\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IArgumentProvider\n  fullName: System.Linq.Expressions.IArgumentProvider\n  commentId: T:System.Linq.Expressions.IArgumentProvider\n  nameWithType: IArgumentProvider\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Linq.Expressions.Expression[]\n  name: Expression[]\n  fullName: System.Linq.Expressions.Expression[]\n  fullname.vb: System.Linq.Expressions.Expression()\n  name.vb: Expression()\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: ()\n    fullName: ()\n  nameWithType: Expression[]\n  nameWithType.vb: Expression()\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  nameWithType: Expression\n"}