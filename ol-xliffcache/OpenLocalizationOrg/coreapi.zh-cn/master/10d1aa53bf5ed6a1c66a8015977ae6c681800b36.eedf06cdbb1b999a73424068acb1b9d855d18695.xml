{"nodes":[{"pos":[4938,4952],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[6552,6560],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[7878,7886],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[9148,9172],"content":"DateTimeOffset(DateTime)","needQuote":true,"nodes":[{"content":"DateTimeOffset(DateTime)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A date and time.","pos":[9992,10013],"source":"\\n<p>A date and time."},{"content":"&lt;/p&gt;\\n","pos":[10016,10022],"source":"   </p>\\n"},{"pos":[10921,10955],"content":"DateTimeOffset(DateTime, TimeSpan)","needQuote":true,"nodes":[{"content":"DateTimeOffset(DateTime, TimeSpan)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;A date and time.","pos":[11840,11861],"source":"\\n<p>A date and time."},{"content":"&lt;/p&gt;\\n","pos":[11864,11870],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;The time's offset from Coordinated Universal Time (UTC).&lt;/p&gt;\\n","pos":[11937,12004],"source":"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n"},{"pos":[13707,13780],"content":"DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)","needQuote":true,"nodes":[{"content":"DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)","pos":[0,73]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).&lt;/p&gt;\\n","pos":[14885,14922],"source":"\\n<p>The year (1 through 9999).</p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).&lt;/p&gt;\\n","pos":[14985,15021],"source":"\\n<p>The month (1 through 12).</p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).&lt;/p&gt;\\n","pos":[15082,15150],"source":"\\n<p>The day (1 through the number of days in <em>month</em>).</p>\\n"},{"content":"\\n&lt;p&gt;The hours (0 through 23).","pos":[15212,15242],"source":"\\n<p>The hours (0 through 23)."},{"content":"&lt;/p&gt;\\n","pos":[15245,15251],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;The minutes (0 through 59).&lt;/p&gt;\\n","pos":[15315,15353],"source":"\\n<p>The minutes (0 through 59).</p>\\n"},{"content":"\\n&lt;p&gt;The seconds (0 through 59).&lt;/p&gt;\\n","pos":[15417,15455],"source":"\\n<p>The seconds (0 through 59).</p>\\n"},{"content":"\\n&lt;p&gt;The milliseconds (0 through 999).&lt;/p&gt;\\n","pos":[15524,15568],"source":"\\n<p>The milliseconds (0 through 999).</p>\\n"},{"content":"\\n&lt;p&gt;The time's offset from Coordinated Universal Time (UTC).&lt;/p&gt;\\n","pos":[15635,15702],"source":"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; does not represent whole minutes.&lt;/p&gt;\\n","pos":[15813,15875],"source":"\\n<p>\\n<em>offset</em> does not represent whole minutes.</p>\\n"},{"pos":[17568,17634],"content":"DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)","needQuote":true,"nodes":[{"content":"DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).&lt;/p&gt;\\n","pos":[18671,18708],"source":"\\n<p>The year (1 through 9999).</p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).&lt;/p&gt;\\n","pos":[18771,18807],"source":"\\n<p>The month (1 through 12).</p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).&lt;/p&gt;\\n","pos":[18868,18936],"source":"\\n<p>The day (1 through the number of days in <em>month</em>).</p>\\n"},{"content":"\\n&lt;p&gt;The hours (0 through 23).","pos":[18998,19028],"source":"\\n<p>The hours (0 through 23)."},{"content":"&lt;/p&gt;\\n","pos":[19031,19037],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;The minutes (0 through 59).&lt;/p&gt;\\n","pos":[19101,19139],"source":"\\n<p>The minutes (0 through 59).</p>\\n"},{"content":"\\n&lt;p&gt;The seconds (0 through 59).&lt;/p&gt;\\n","pos":[19203,19241],"source":"\\n<p>The seconds (0 through 59).</p>\\n"},{"content":"\\n&lt;p&gt;The time's offset from Coordinated Universal Time (UTC).&lt;/p&gt;\\n","pos":[19308,19375],"source":"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; does not represent whole minutes.&lt;/p&gt;\\n","pos":[19486,19548],"source":"\\n<p>\\n<em>offset</em> does not represent whole minutes.</p>\\n"},{"pos":[20971,21002],"content":"DateTimeOffset(Int64, TimeSpan)","needQuote":true,"nodes":[{"content":"DateTimeOffset(Int64, TimeSpan)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.&lt;/p&gt;\\n","pos":[21802,21942],"source":"\\n<p>A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</p>\\n"},{"content":"\\n&lt;p&gt;The time's offset from Coordinated Universal Time (UTC).&lt;/p&gt;\\n","pos":[22009,22076],"source":"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is not specified in whole minutes.&lt;/p&gt;\\n","pos":[22187,22250],"source":"\\n<p>\\n<em>offset</em> is not specified in whole minutes.</p>\\n"},{"pos":[23223,23227],"content":"Date","needQuote":true,"nodes":[{"content":"Date","pos":[0,4]}]},{"pos":[24524,24532],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[25842,25845],"content":"Day","needQuote":true,"nodes":[{"content":"Day","pos":[0,3]}]},{"pos":[26987,26996],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[28187,28196],"content":"DayOfYear","needQuote":true,"nodes":[{"content":"DayOfYear","pos":[0,9]}]},{"pos":[29355,29359],"content":"Hour","needQuote":true,"nodes":[{"content":"Hour","pos":[0,4]}]},{"pos":[30557,30570],"content":"LocalDateTime","needQuote":true,"nodes":[{"content":"LocalDateTime","pos":[0,13]}]},{"pos":[31931,31942],"content":"Millisecond","needQuote":true,"nodes":[{"content":"Millisecond","pos":[0,11]}]},{"pos":[33144,33150],"content":"Minute","needQuote":true,"nodes":[{"content":"Minute","pos":[0,6]}]},{"pos":[34313,34318],"content":"Month","needQuote":true,"nodes":[{"content":"Month","pos":[0,5]}]},{"pos":[35468,35471],"content":"Now","needQuote":true,"nodes":[{"content":"Now","pos":[0,3]}]},{"pos":[36931,36937],"content":"Offset","needQuote":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"pos":[38027,38033],"content":"Second","needQuote":true,"nodes":[{"content":"Second","pos":[0,6]}]},{"pos":[39200,39205],"content":"Ticks","needQuote":true,"nodes":[{"content":"Ticks","pos":[0,5]}]},{"pos":[40464,40473],"content":"TimeOfDay","needQuote":true,"nodes":[{"content":"TimeOfDay","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The time interval of the current date that has elapsed since midnight.&lt;/p&gt;\\n","pos":[41175,41256],"source":"\\n<p>The time interval of the current date that has elapsed since midnight.</p>\\n"},{"pos":[41553,41564],"content":"UtcDateTime","needQuote":true,"nodes":[{"content":"UtcDateTime","pos":[0,11]}]},{"pos":[42854,42860],"content":"UtcNow","needQuote":true,"nodes":[{"content":"UtcNow","pos":[0,6]}]},{"pos":[44330,44338],"content":"UtcTicks","needQuote":true,"nodes":[{"content":"UtcTicks","pos":[0,8]}]},{"pos":[45535,45539],"content":"Year","needQuote":true,"nodes":[{"content":"Year","pos":[0,4]}]},{"pos":[46741,46754],"content":"Add(TimeSpan)","needQuote":true,"nodes":[{"content":"Add(TimeSpan)","pos":[0,13]}]},{"pos":[49061,49076],"content":"AddDays(Double)","needQuote":true,"nodes":[{"content":"AddDays(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional days.","pos":[49869,49912],"source":"\\n<p>A number of whole and fractional days."},{"content":"The number can be negative or positive.&lt;/p&gt;\\n","pos":[49913,49958],"source":" The number can be negative or positive.</p>\\n"},{"pos":[51157,51173],"content":"AddHours(Double)","needQuote":true,"nodes":[{"content":"AddHours(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional hours.","pos":[51974,52018],"source":"\\n<p>A number of whole and fractional hours."},{"content":"The number can be negative or positive.&lt;/p&gt;\\n","pos":[52019,52064],"source":" The number can be negative or positive.</p>\\n"},{"pos":[53287,53310],"content":"AddMilliseconds(Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(Double)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional milliseconds.","pos":[54146,54197],"source":"\\n<p>A number of whole and fractional milliseconds."},{"content":"The number can be negative or positive.","pos":[54198,54237]},{"content":"&lt;/p&gt;\\n","pos":[54240,54246],"source":"   </p>\\n"},{"pos":[55481,55499],"content":"AddMinutes(Double)","needQuote":true,"nodes":[{"content":"AddMinutes(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional minutes.","pos":[56316,56362],"source":"\\n<p>A number of whole and fractional minutes."},{"content":"The number can be negative or positive.","pos":[56363,56402]},{"content":"&lt;/p&gt;\\n","pos":[56405,56411],"source":"   </p>\\n"},{"pos":[57619,57635],"content":"AddMonths(Int32)","needQuote":true,"nodes":[{"content":"AddMonths(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A number of whole months.","pos":[58419,58449],"source":"\\n<p>A number of whole months."},{"content":"The number can be negative or positive.&lt;/p&gt;\\n","pos":[58450,58495],"source":" The number can be negative or positive.</p>\\n"},{"pos":[59705,59723],"content":"AddSeconds(Double)","needQuote":true,"nodes":[{"content":"AddSeconds(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional seconds.","pos":[60540,60586],"source":"\\n<p>A number of whole and fractional seconds."},{"content":"The number can be negative or positive.&lt;/p&gt;\\n","pos":[60587,60632],"source":" The number can be negative or positive.</p>\\n"},{"pos":[61837,61852],"content":"AddTicks(Int64)","needQuote":true,"nodes":[{"content":"AddTicks(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number of 100-nanosecond ticks.","pos":[62626,62664],"source":"\\n<p>A number of 100-nanosecond ticks."},{"content":"The number can be negative or positive.&lt;/p&gt;\\n","pos":[62665,62710],"source":" The number can be negative or positive.</p>\\n"},{"pos":[63908,63923],"content":"AddYears(Int32)","needQuote":true,"nodes":[{"content":"AddYears(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number of years.","pos":[64699,64722],"source":"\\n<p>A number of years."},{"content":"The number can be negative or positive.&lt;/p&gt;\\n","pos":[64723,64768],"source":" The number can be negative or positive.</p>\\n"},{"pos":[66056,66095],"content":"Compare(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"Compare(DateTimeOffset, DateTimeOffset)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[67009,67048],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[67121,67161],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates whether the value of the &lt;em&gt;first&lt;/em&gt; parameter is earlier than, later than, or the same time as the value of the &lt;em&gt;second&lt;/em&gt; parameter, as the following table shows.&lt;/p&gt;\\n&lt;p&gt;Return value&lt;/p&gt;\\n&lt;p&gt;Meaning&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; is earlier than &lt;em&gt;second&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; is equal to &lt;em&gt;second&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; is later than &lt;em&gt;second&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[67220,67827],"source":"\\n<p>A signed integer that indicates whether the value of the <em>first</em> parameter is earlier than, later than, or the same time as the value of the <em>second</em> parameter, as the following table shows.</p>\\n<p>Return value</p>\\n<p>Meaning</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>first</em> is earlier than <em>second</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>first</em> is equal to <em>second</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>first</em> is later than <em>second</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[68218,68243],"content":"CompareTo(DateTimeOffset)","needQuote":true,"nodes":[{"content":"CompareTo(DateTimeOffset)","pos":[0,25]}]},{"pos":[70772,70794],"content":"Equals(DateTimeOffset)","needQuote":true,"nodes":[{"content":"Equals(DateTimeOffset)","pos":[0,22]}]},{"pos":[72800,72838],"content":"Equals(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"Equals(DateTimeOffset, DateTimeOffset)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[73696,73735],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[73808,73848],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[74703,74717],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[76596,76623],"content":"EqualsExact(DateTimeOffset)","needQuote":true,"nodes":[{"content":"EqualsExact(DateTimeOffset)","pos":[0,27]}]},{"pos":[78547,78566],"content":"FromFileTime(Int64)","needQuote":true,"nodes":[{"content":"FromFileTime(Int64)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A Windows file time, expressed in ticks.&lt;/p&gt;\\n","pos":[79277,79328],"source":"\\n<p>A Windows file time, expressed in ticks.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the date and time of &lt;em&gt;fileTime&lt;/em&gt; with the offset set to the local time offset.&lt;/p&gt;\\n","pos":[79396,79517],"source":"\\n<p>An object that represents the date and time of <em>fileTime</em> with the offset set to the local time offset.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;filetime&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;filetime&lt;/em&gt; is greater than &lt;strong&gt;DateTimeOffset.MaxValue.Ticks&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79648,79802],"source":"\\n<p>\\n<em>filetime</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>filetime</em> is greater than <strong>DateTimeOffset.MaxValue.Ticks</strong>.</p>\\n"},{"pos":[80191,80222],"content":"FromUnixTimeMilliseconds(Int64)","needQuote":true,"nodes":[{"content":"FromUnixTimeMilliseconds(Int64)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC).","pos":[81123,81261],"source":"\\n<p>A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC)."},{"content":"For Unix times before this date, its value is negative.","pos":[81262,81317]},{"content":"&lt;/p&gt;\\n","pos":[81318,81324],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A date and time value that represents the same moment in time as the Unix time.","pos":[81392,81476],"source":"\\n<p>A date and time value that represents the same moment in time as the Unix time."},{"content":"&lt;/p&gt;\\n","pos":[81477,81483],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;milliseconds&lt;/em&gt; is less than  -62,135,596,800,000.","pos":[81614,81677],"source":"\\n<p>\\n<em>milliseconds</em> is less than  -62,135,596,800,000."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;milliseconds&lt;/em&gt; is greater than 253,402,300,799,999.","pos":[81678,81760],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>milliseconds</em> is greater than 253,402,300,799,999."},{"content":"&lt;/p&gt;\\n","pos":[81761,81767],"source":" </p>\\n"},{"pos":[82420,82446],"content":"FromUnixTimeSeconds(Int64)","needQuote":true,"nodes":[{"content":"FromUnixTimeSeconds(Int64)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC).","pos":[83308,83441],"source":"\\n<p>A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC)."},{"content":"For Unix times before this date, its value is negative.","pos":[83442,83497]},{"content":"&lt;/p&gt;\\n","pos":[83498,83504],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A date and time value that represents the same moment in time as the Unix time.","pos":[83572,83656],"source":"\\n<p>A date and time value that represents the same moment in time as the Unix time."},{"content":"&lt;/p&gt;\\n","pos":[83657,83663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;seconds&lt;/em&gt; is less than  -62,135,596,800.","pos":[83794,83848],"source":"\\n<p>\\n<em>seconds</em> is less than  -62,135,596,800."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;seconds&lt;/em&gt; is greater than 253,402,300,799.","pos":[83849,83922],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>seconds</em> is greater than 253,402,300,799."},{"content":"&lt;/p&gt;\\n","pos":[83923,83929],"source":" </p>\\n"},{"pos":[84511,84524],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[85210,85255],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[85722,85756],"content":"Addition(DateTimeOffset, TimeSpan)","needQuote":true,"nodes":[{"content":"Addition(DateTimeOffset, TimeSpan)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The object to add the time interval to.&lt;/p&gt;\\n","pos":[86788,86838],"source":"\\n<p>The object to add the time interval to.</p>\\n"},{"content":"\\n&lt;p&gt;The time interval to add.&lt;/p&gt;\\n","pos":[86907,86943],"source":"\\n<p>The time interval to add.</p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the values of &lt;em&gt;dateTimeTz&lt;/em&gt; and &lt;em&gt;timeSpan&lt;/em&gt;.&lt;/p&gt;\\n","pos":[87011,87114],"source":"\\n<p>An object whose value is the sum of the values of <em>dateTimeTz</em> and <em>timeSpan</em>.</p>\\n"},{"pos":[88276,88316],"content":"Equality(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"Equality(DateTimeOffset, DateTimeOffset)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[89178,89217],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[89289,89329],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[90287,90330],"content":"GreaterThan(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"GreaterThan(DateTimeOffset, DateTimeOffset)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[91301,91340],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[91412,91452],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[92340,92390],"content":"GreaterThanOrEqual(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(DateTimeOffset, DateTimeOffset)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[93375,93414],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[93486,93526],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[94388,94424],"content":"Implicit(DateTime to DateTimeOffset)","needQuote":true,"nodes":[{"content":"Implicit(DateTime to DateTimeOffset)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The object to convert.","pos":[95318,95345],"source":"\\n<p>The object to convert."},{"content":"&lt;/p&gt;\\n","pos":[95346,95352],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted object.&lt;/p&gt;\\n","pos":[95420,95452],"source":"\\n<p>The converted object.</p>\\n"},{"pos":[96650,96692],"content":"Inequality(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"Inequality(DateTimeOffset, DateTimeOffset)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[97560,97599],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[97671,97711],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[98465,98505],"content":"LessThan(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"LessThan(DateTimeOffset, DateTimeOffset)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[99453,99492],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[99564,99604],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[100482,100529],"content":"LessThanOrEqual(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(DateTimeOffset, DateTimeOffset)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[101493,101532],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[101604,101644],"source":"\\n<p>The second object to compare.</p>\\n"},{"pos":[102517,102560],"content":"Subtraction(DateTimeOffset, DateTimeOffset)","needQuote":true,"nodes":[{"content":"Subtraction(DateTimeOffset, DateTimeOffset)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The minuend.","pos":[103419,103436],"source":"\\n<p>The minuend."},{"content":"&lt;/p&gt;\\n","pos":[103439,103445],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;The subtrahend.&lt;/p&gt;\\n","pos":[103517,103543],"source":"\\n<p>The subtrahend.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the difference between &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[103605,103698],"source":"\\n<p>An object that represents the difference between <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[104302,104339],"content":"Subtraction(DateTimeOffset, TimeSpan)","needQuote":true,"nodes":[{"content":"Subtraction(DateTimeOffset, TimeSpan)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The date and time object to subtract from.&lt;/p&gt;\\n","pos":[105184,105237],"source":"\\n<p>The date and time object to subtract from.</p>\\n"},{"content":"\\n&lt;p&gt;The time interval to subtract.&lt;/p&gt;\\n","pos":[105306,105347],"source":"\\n<p>The time interval to subtract.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equal to the value of &lt;em&gt;dateTimeOffset&lt;/em&gt; minus &lt;em&gt;timeSpan&lt;/em&gt;.&lt;/p&gt;\\n","pos":[105415,105514],"source":"\\n<p>An object that is equal to the value of <em>dateTimeOffset</em> minus <em>timeSpan</em>.</p>\\n"},{"pos":[106456,106469],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[107253,107314],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time that is contained in &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[107382,107479],"source":"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The offset is greater than 14 hours or less than -14 hours.&lt;/p&gt;\\n","pos":[107590,107660],"source":"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107765,107818],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; does not contain a valid string representation of a date and time.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; contains the string representation of an offset value without a date or time.&lt;/p&gt;\\n","pos":[107911,108121],"source":"\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> contains the string representation of an offset value without a date or time.</p>\\n"},{"pos":[108892,108922],"content":"Parse(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[109844,109899],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[109902,109908],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific format information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[109990,110082],"source":"\\n<p>An object that provides culture-specific format information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time that is contained in &lt;em&gt;input&lt;/em&gt;, as specified by &lt;em&gt;formatProvider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[110150,110288],"source":"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em>, as specified by <em>formatProvider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The offset is greater than 14 hours or less than -14 hours.&lt;/p&gt;\\n","pos":[110399,110469],"source":"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[110574,110627],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; does not contain a valid string representation of a date and time.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; contains the string representation of an offset value without a date or time.&lt;/p&gt;\\n","pos":[110720,110930],"source":"\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> contains the string representation of an offset value without a date or time.</p>\\n"},{"pos":[111826,111872],"content":"Parse(String, IFormatProvider, DateTimeStyles)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider, DateTimeStyles)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[112901,112956],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[112959,112965],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific format information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[113047,113139],"source":"\\n<p>An object that provides culture-specific format information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time that is contained in &lt;em&gt;input&lt;/em&gt; as specified by &lt;em&gt;formatProvider&lt;/em&gt; and &lt;em&gt;styles&lt;/em&gt;.&lt;/p&gt;\\n","pos":[113538,113695],"source":"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em> as specified by <em>formatProvider</em> and <em>styles</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[114485,114538],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; does not contain a valid string representation of a date and time.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; contains the string representation of an offset value without a date or time.&lt;/p&gt;\\n","pos":[114631,114841],"source":"\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> contains the string representation of an offset value without a date or time.</p>\\n"},{"pos":[115702,115745],"content":"ParseExact(String, String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ParseExact(String, String, IFormatProvider)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[116827,116888],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A format specifier that defines the expected format of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[116953,117034],"source":"\\n<p>A format specifier that defines the expected format of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[117116,117212],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time that is contained in &lt;em&gt;input&lt;/em&gt; as specified by &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;formatProvider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[117280,117437],"source":"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em> as specified by <em>format</em> and <em>formatProvider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The offset is greater than 14 hours or less than -14 hours.&lt;/p&gt;\\n","pos":[117548,117618],"source":"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[117723,117841],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> is <strong>null</strong>.</p>\\n"},{"pos":[119174,119233],"content":"ParseExact(String, String, IFormatProvider, DateTimeStyles)","needQuote":true,"nodes":[{"content":"ParseExact(String, String, IFormatProvider, DateTimeStyles)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[120409,120470],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A format specifier that defines the expected format of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[120535,120616],"source":"\\n<p>A format specifier that defines the expected format of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[120698,120794],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that indicates the permitted format of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[120881,120990],"source":"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time that is contained in the &lt;em&gt;input&lt;/em&gt; parameter, as specified by the &lt;em&gt;format&lt;/em&gt;, &lt;em&gt;formatProvider&lt;/em&gt;, and &lt;em&gt;styles&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[121058,121263],"source":"\\n<p>An object that is equivalent to the date and time that is contained in the <em>input</em> parameter, as specified by the <em>format</em>, <em>formatProvider</em>, and <em>styles</em> parameters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[121824,121942],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> is <strong>null</strong>.</p>\\n"},{"pos":[123298,123359],"content":"ParseExact(String, String[], IFormatProvider, DateTimeStyles)","needQuote":true,"nodes":[{"content":"ParseExact(String, String[], IFormatProvider, DateTimeStyles)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[124552,124613],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An array of format specifiers that define the expected formats of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[124681,124773],"source":"\\n<p>An array of format specifiers that define the expected formats of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[124855,124951],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that indicates the permitted format of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[125038,125147],"source":"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time that is contained in the &lt;em&gt;input&lt;/em&gt; parameter, as specified by the &lt;em&gt;formats&lt;/em&gt;, &lt;em&gt;formatProvider&lt;/em&gt;, and &lt;em&gt;styles&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[125215,125421],"source":"\\n<p>An object that is equivalent to the date and time that is contained in the <em>input</em> parameter, as specified by the <em>formats</em>, <em>formatProvider</em>, and <em>styles</em> parameters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[125970,126023],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"pos":[127512,127536],"content":"Subtract(DateTimeOffset)","needQuote":true,"nodes":[{"content":"Subtract(DateTimeOffset)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An object that represents the value to subtract.","pos":[128412,128465],"source":"\\n<p>An object that represents the value to subtract."},{"content":"&lt;/p&gt;\\n","pos":[128466,128472],"source":" </p>\\n"},{"pos":[129022,129040],"content":"Subtract(TimeSpan)","needQuote":true,"nodes":[{"content":"Subtract(TimeSpan)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The time interval to subtract.&lt;/p&gt;\\n","pos":[129799,129840],"source":"\\n<p>The time interval to subtract.</p>\\n"},{"pos":[131110,131139],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[133556,133568],"content":"ToFileTime()","needQuote":true,"nodes":[{"content":"ToFileTime()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The resulting file time would represent a date and time before midnight on January 1, 1601 C.E.","pos":[134538,134638],"source":"\\n<p>The resulting file time would represent a date and time before midnight on January 1, 1601 C.E."},{"content":"Coordinated Universal Time (UTC).&lt;/p&gt;\\n","pos":[134639,134678],"source":" Coordinated Universal Time (UTC).</p>\\n"},{"pos":[135093,135106],"content":"ToLocalTime()","needQuote":true,"nodes":[{"content":"ToLocalTime()","pos":[0,13]}]},{"pos":[136527,136545],"content":"ToOffset(TimeSpan)","needQuote":true,"nodes":[{"content":"ToOffset(TimeSpan)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than -14 hours.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is greater than 14 hours.&lt;/p&gt;\\n","pos":[138845,138962],"source":"\\n<p>\\n<em>offset</em> is less than -14 hours.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> is greater than 14 hours.</p>\\n"},{"pos":[139238,139248],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by the current culture.","pos":[140320,140427],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture."},{"content":"&lt;/p&gt;\\n","pos":[140428,140434],"source":" </p>\\n"},{"pos":[140801,140826],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[141705,141780],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by &lt;em&gt;formatProvider&lt;/em&gt;.","pos":[142164,142275],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>formatProvider</em>."},{"content":"&lt;/p&gt;\\n","pos":[142276,142282],"source":" </p>\\n"},{"pos":[142610,142626],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A format string.&lt;/p&gt;\\n","pos":[143412,143439],"source":"\\n<p>A format string.</p>\\n"},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by the current culture.","pos":[144219,144326],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture."},{"content":"&lt;/p&gt;\\n","pos":[144327,144333],"source":" </p>\\n"},{"pos":[144721,144754],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A format string.&lt;/p&gt;\\n","pos":[145671,145698],"source":"\\n<p>A format string.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[145780,145855],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by &lt;em&gt;formatProvider&lt;/em&gt;.","pos":[146657,146768],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>formatProvider</em>."},{"content":"&lt;/p&gt;\\n","pos":[146769,146775],"source":" </p>\\n"},{"pos":[147172,147189],"content":"ToUniversalTime()","needQuote":true,"nodes":[{"content":"ToUniversalTime()","pos":[0,17]}]},{"pos":[148779,148803],"content":"ToUnixTimeMilliseconds()","needQuote":true,"nodes":[{"content":"ToUnixTimeMilliseconds()","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.","pos":[149470,149551],"source":"\\n<p>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z."},{"content":"&lt;/p&gt;\\n","pos":[149552,149558],"source":" </p>\\n"},{"pos":[150134,150153],"content":"ToUnixTimeSeconds()","needQuote":true,"nodes":[{"content":"ToUnixTimeSeconds()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The number of seconds that have elapsed since 1970-01-01T00:00:00Z.","pos":[150791,150863],"source":"\\n<p>The number of seconds that have elapsed since 1970-01-01T00:00:00Z."},{"content":"&lt;/p&gt;\\n","pos":[150864,150870],"source":" </p>\\n"},{"pos":[151528,151564],"content":"TryParse(String, out DateTimeOffset)","needQuote":true,"nodes":[{"content":"TryParse(String, out DateTimeOffset)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[152496,152557],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;input&lt;/em&gt; parameter is successfully converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[153210,153338],"source":"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[154282,154351],"content":"TryParse(String, IFormatProvider, DateTimeStyles, out DateTimeOffset)","needQuote":true,"nodes":[{"content":"TryParse(String, IFormatProvider, DateTimeStyles, out DateTimeOffset)","pos":[0,69]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[155459,155520],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[155602,155698],"source":"\\n<p>An object that provides culture-specific formatting information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that indicates the permitted format of &lt;em&gt;input&lt;/em&gt;.","pos":[155785,155888],"source":"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>."},{"content":"&lt;/p&gt;\\n","pos":[155889,155895],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;input&lt;/em&gt; parameter is successfully converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[156554,156682],"source":"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[158437,158519],"content":"TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTimeOffset)","needQuote":true,"nodes":[{"content":"TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTimeOffset)","pos":[0,82]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[159776,159837],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A format specifier that defines the required format of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[159902,159983],"source":"\\n<p>A format specifier that defines the required format of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[160065,160161],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that indicates the permitted format of input.","pos":[160248,160342],"source":"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of input."},{"content":"A typical value to specify is &lt;strong&gt;None&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[160343,160401],"source":" A typical value to specify is <strong>None</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;input&lt;/em&gt; parameter is successfully converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[161127,161255],"source":"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[163159,163243],"content":"TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTimeOffset)","needQuote":true,"nodes":[{"content":"TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTimeOffset)","pos":[0,84]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.&lt;/p&gt;\\n","pos":[164526,164587],"source":"\\n<p>A string that contains a date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An array that defines the expected formats of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[164655,164727],"source":"\\n<p>An array that defines the expected formats of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[164809,164905],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that indicates the permitted format of input.","pos":[164992,165086],"source":"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of input."},{"content":"A typical value to specify is &lt;strong&gt;None&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165087,165145],"source":" A typical value to specify is <strong>None</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;input&lt;/em&gt; parameter is successfully converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165898,166026],"source":"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[167264,167270],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[167406,167417],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[167620,167647],"content":"IComparable<DateTimeOffset>","needQuote":true,"nodes":[{"content":"IComparable&lt;DateTimeOffset&gt;","pos":[0,27],"source":"IComparable<DateTimeOffset>"}]},{"pos":[167859,167870],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[167914,167915],"content":"<","needQuote":true,"nodes":[]},{"pos":[167973,167987],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[168107,168118],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[168163,168166]},{"pos":[168231,168245],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[168292,168293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[168568,168594],"content":"IEquatable<DateTimeOffset>","needQuote":true,"nodes":[{"content":"IEquatable&lt;DateTimeOffset&gt;","pos":[0,26],"source":"IEquatable<DateTimeOffset>"}]},{"pos":[168802,168812],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[168855,168856],"content":"<","needQuote":true,"nodes":[]},{"pos":[168914,168928],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[169047,169057],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[169101,169104]},{"pos":[169169,169183],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[169230,169231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[169468,169480],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[169685,169707],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[169855,169861],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[169928,169929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[169979,169985],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[170046,170047]},{"pos":[170102,170108],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[170168,170169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170266,170272],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[170339,170340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[170390,170396],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[170457,170458]},{"pos":[170513,170519],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[170579,170580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170825,170856],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[171022,171037],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[171113,171114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[171164,171170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[171231,171232]},{"pos":[171287,171293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[171353,171354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[171460,171475],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[171551,171552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[171602,171608],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[171669,171670]},{"pos":[171725,171731],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[171791,171792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172018,172027],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[172120,172127],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[172195,172196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172223,172224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172293,172300],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[172368,172369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172396,172397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172540,172554],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[172713,172724],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[172768,172769],"content":"<","needQuote":true,"nodes":[]},{"pos":[172796,172797],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[172897,172908],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[172953,172956]},{"pos":[172990,172991],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[173018,173019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[173195,173208],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[173363,173373],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[173416,173417],"content":"<","needQuote":true,"nodes":[]},{"pos":[173444,173445],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[173544,173554],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[173598,173601]},{"pos":[173635,173636],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[173663,173664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[173848,173854],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[174007,174021],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[174192,174200],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[174353,174361],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[174511,174516],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[174657,174662],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[174807,174816],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[174970,174976],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[175246,175271],"content":"CompareTo(DateTimeOffset)","needQuote":true,"nodes":[{"content":"CompareTo(DateTimeOffset)","pos":[0,25]}]},{"pos":[175521,175530],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[175607,175608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[175666,175680],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[175727,175728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[175810,175819],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[175899,175900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[175958,175972],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[176019,176020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[176343,176355],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[176525,176534],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[176591,176592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[176619,176620],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[176647,176648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[176730,176739],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[176799,176800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[176827,176828],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[176855,176856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[177199,177221],"content":"Equals(DateTimeOffset)","needQuote":true,"nodes":[{"content":"Equals(DateTimeOffset)","pos":[0,22]}]},{"pos":[177459,177465],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[177538,177539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[177597,177611],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[177658,177659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[177737,177743],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[177819,177820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[177878,177892],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[177939,177940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[178248,178255],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[178403,178412],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[178570,178576],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[178629,178630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[178657,178658],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[178685,178686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[178764,178770],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[178826,178827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[178854,178855],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[178882,178883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179132,179146],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[179271,179277],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[179326,179327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[179377,179383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[179443,179444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179530,179536],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[179585,179586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[179636,179642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[179702,179703],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179884,179893],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[180072,180085],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[180192,180203],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[180257,180258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[180285,180286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[180362,180373],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[180427,180428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[180455,180456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[180623,180629],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[180783,180798],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[181006,181020],"content":"DateTimeStyles","needQuote":true,"nodes":[{"content":"DateTimeStyles","pos":[0,14]}]},{"pos":[181207,181227],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[181365,181373],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[181501,181507],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[181568,181570]},{"pos":[181635,181641],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[181701,181703],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[181881,181898],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[182033,182042],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[182096,182097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[182147,182153],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[182213,182214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182305,182314],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[182368,182369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[182419,182425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[182485,182486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182696,182706],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[182807,182815],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[182866,182867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[182894,182895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182968,182976],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[183027,183028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[183055,183056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[183282,183315],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[183497,183505],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[183559,183560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[183610,183616],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[183677,183678]},{"pos":[183742,183757],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[183805,183806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[183920,183928],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[183982,183983],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[184033,184039],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[184100,184101]},{"pos":[184165,184180],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[184228,184229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[184461,184488],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[184707,184724],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[184900,184921],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[185120,185135],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.DateTimeOffset\n  commentId: T:System.DateTimeOffset\n  id: DateTimeOffset\n  parent: System\n  children:\n  - System.DateTimeOffset.#ctor(System.DateTime)\n  - System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)\n  - System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\n  - System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\n  - System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)\n  - System.DateTimeOffset.Add(System.TimeSpan)\n  - System.DateTimeOffset.AddDays(System.Double)\n  - System.DateTimeOffset.AddHours(System.Double)\n  - System.DateTimeOffset.AddMilliseconds(System.Double)\n  - System.DateTimeOffset.AddMinutes(System.Double)\n  - System.DateTimeOffset.AddMonths(System.Int32)\n  - System.DateTimeOffset.AddSeconds(System.Double)\n  - System.DateTimeOffset.AddTicks(System.Int64)\n  - System.DateTimeOffset.AddYears(System.Int32)\n  - System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.CompareTo(System.DateTimeOffset)\n  - System.DateTimeOffset.Date\n  - System.DateTimeOffset.DateTime\n  - System.DateTimeOffset.Day\n  - System.DateTimeOffset.DayOfWeek\n  - System.DateTimeOffset.DayOfYear\n  - System.DateTimeOffset.Equals(System.DateTimeOffset)\n  - System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.Equals(System.Object)\n  - System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  - System.DateTimeOffset.FromFileTime(System.Int64)\n  - System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n  - System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n  - System.DateTimeOffset.GetHashCode\n  - System.DateTimeOffset.Hour\n  - System.DateTimeOffset.LocalDateTime\n  - System.DateTimeOffset.MaxValue\n  - System.DateTimeOffset.Millisecond\n  - System.DateTimeOffset.Minute\n  - System.DateTimeOffset.MinValue\n  - System.DateTimeOffset.Month\n  - System.DateTimeOffset.Now\n  - System.DateTimeOffset.Offset\n  - System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)\n  - System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset\n  - System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)\n  - System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)\n  - System.DateTimeOffset.Parse(System.String)\n  - System.DateTimeOffset.Parse(System.String,System.IFormatProvider)\n  - System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  - System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  - System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  - System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  - System.DateTimeOffset.Second\n  - System.DateTimeOffset.Subtract(System.DateTimeOffset)\n  - System.DateTimeOffset.Subtract(System.TimeSpan)\n  - System.DateTimeOffset.System#IComparable#CompareTo(System.Object)\n  - System.DateTimeOffset.Ticks\n  - System.DateTimeOffset.TimeOfDay\n  - System.DateTimeOffset.ToFileTime\n  - System.DateTimeOffset.ToLocalTime\n  - System.DateTimeOffset.ToOffset(System.TimeSpan)\n  - System.DateTimeOffset.ToString\n  - System.DateTimeOffset.ToString(System.IFormatProvider)\n  - System.DateTimeOffset.ToString(System.String)\n  - System.DateTimeOffset.ToString(System.String,System.IFormatProvider)\n  - System.DateTimeOffset.ToUniversalTime\n  - System.DateTimeOffset.ToUnixTimeMilliseconds\n  - System.DateTimeOffset.ToUnixTimeSeconds\n  - System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n  - System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  - System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  - System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  - System.DateTimeOffset.UtcDateTime\n  - System.DateTimeOffset.UtcNow\n  - System.DateTimeOffset.UtcTicks\n  - System.DateTimeOffset.Year\n  langs:\n  - csharp\n  - vb\n  name: DateTimeOffset\n  fullName: System.DateTimeOffset\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DateTimeOffset\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Auto)]\n\n      [Serializable]\n\n      public struct DateTimeOffset : IComparable, IFormattable, ISerializable, IDeserializationCallback, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>\n    content.vb: >-\n      <StructLayout(LayoutKind.Auto)>\n\n      <Serializable>\n\n      Public Structure DateTimeOffset\n          Implements IComparable, IFormattable, ISerializable, IDeserializationCallback, IComparable(Of DateTimeOffset), IEquatable(Of DateTimeOffset)\n  implements:\n  - System.IComparable\n  - System.IComparable{System.DateTimeOffset}\n  - System.IEquatable{System.DateTimeOffset}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: DateTimeOffset\n- uid: System.DateTimeOffset.MaxValue\n  commentId: F:System.DateTimeOffset.MaxValue\n  id: MaxValue\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.DateTimeOffset.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxValue\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 52\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the greatest possible value of <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly DateTimeOffset MaxValue\n    content.vb: Public Shared ReadOnly MaxValue As DateTimeOffset\n    return:\n      type: System.DateTimeOffset\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the range of the current or specified culture's default calendar.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTimeOffset.MaxValue\n- uid: System.DateTimeOffset.MinValue\n  commentId: F:System.DateTimeOffset.MinValue\n  id: MinValue\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.DateTimeOffset.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinValue\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 51\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the earliest possible <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly DateTimeOffset MinValue\n    content.vb: Public Shared ReadOnly MinValue As DateTimeOffset\n    return:\n      type: System.DateTimeOffset\n  seealso:\n  - type: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTimeOffset.MinValue\n- uid: System.DateTimeOffset.#ctor(System.DateTime)\n  commentId: M:System.DateTimeOffset.#ctor(System.DateTime)\n  id: '#ctor(System.DateTime)'\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DateTimeOffset(DateTime)\n  fullName: System.DateTimeOffset.DateTimeOffset(System.DateTime)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 70\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset(DateTime dateTime)\n    content.vb: Public Sub New(dateTime As Date)\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>A date and time.   </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The UTC date and time that results from applying the offset is later than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.DateTimeOffset(DateTime)\n- uid: System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)\n  commentId: M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)\n  id: '#ctor(System.DateTime,System.TimeSpan)'\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DateTimeOffset(DateTime, TimeSpan)\n  fullName: System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value and offset.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset(DateTime dateTime, TimeSpan offset)\n    content.vb: Public Sub New(dateTime As Date, offset As TimeSpan)\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>A date and time.   </p>\\n\"\n    - id: offset\n      type: System.TimeSpan\n      description: \"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>dateTime.Kind</em> equals <xref href=\\\"System.DateTimeKind.Utc\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>offset</em> does not equal zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>dateTime.Kind</em> equals <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>offset</em> does not equal the offset of the system's local time zone.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> is not specified in whole minutes.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than -14 hours or greater than 14 hours.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.DateTimeOffset(DateTime, TimeSpan)\n- uid: System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\n  commentId: M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)'\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)\n  fullName: System.DateTimeOffset.DateTimeOffset(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.TimeSpan)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 110\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999).</p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12).</p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>).</p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>The hours (0 through 23).   </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>The minutes (0 through 59).</p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>The seconds (0 through 59).</p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>The milliseconds (0 through 999).</p>\\n\"\n    - id: offset\n      type: System.TimeSpan\n      description: \"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em> does not represent whole minutes.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than one or greater than 9999.</p>\\n<p>-or-</p>\\n<p>\\n<em>month</em> is less than one or greater than 12.</p>\\n<p>-or-</p>\\n<p>\\n<em>day</em> is less than one or greater than the number of days in <em>month</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or-</p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59.</p>\\n<p>-or-</p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59.</p>\\n<p>-or-</p>\\n<p>\\n<em>millisecond</em> is less than 0 or greater than 999.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> is less than -14 or greater than 14.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is earlier than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or later than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)\n- uid: System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\n  commentId: M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)'\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)\n  fullName: System.DateTimeOffset.DateTimeOffset(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.TimeSpan)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified year, month, day, hour, minute, second, and offset.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999).</p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12).</p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>).</p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>The hours (0 through 23).   </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>The minutes (0 through 59).</p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>The seconds (0 through 59).</p>\\n\"\n    - id: offset\n      type: System.TimeSpan\n      description: \"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em> does not represent whole minutes.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than one or greater than 9999.</p>\\n<p>-or-</p>\\n<p>\\n<em>month</em> is less than one or greater than 12.</p>\\n<p>-or-</p>\\n<p>\\n<em>day</em> is less than one or greater than the number of days in <em>month</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or-</p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59.</p>\\n<p>-or-</p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> is less than -14 hours or greater than 14 hours.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is earlier than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or later than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.DateTimeOffset(Int32, Int32, Int32, Int32, Int32, Int32, TimeSpan)\n- uid: System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)\n  commentId: M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)\n  id: '#ctor(System.Int64,System.TimeSpan)'\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DateTimeOffset(Int64, TimeSpan)\n  fullName: System.DateTimeOffset.DateTimeOffset(System.Int64, System.TimeSpan)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 61\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified number of ticks and offset.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset(long ticks, TimeSpan offset)\n    content.vb: Public Sub New(ticks As Long, offset As TimeSpan)\n    parameters:\n    - id: ticks\n      type: System.Int64\n      description: \"\\n<p>A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</p>\\n\"\n    - id: offset\n      type: System.TimeSpan\n      description: \"\\n<p>The time's offset from Coordinated Universal Time (UTC).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em> is not specified in whole minutes.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is earlier than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or later than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ticks</em> is less than <strong>DateTimeOffset.MinValue.Ticks</strong> or greater than <strong>DateTimeOffset.MaxValue.Ticks</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>Offset</em> s less than -14 hours or greater than 14 hours.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.DateTimeOffset(Int64, TimeSpan)\n- uid: System.DateTimeOffset.Date\n  commentId: P:System.DateTimeOffset.Date\n  id: Date\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Date\n  fullName: System.DateTimeOffset.Date\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Date\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 185\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the date component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DateTime Date { get; }\n    content.vb: Public ReadOnly Property Date As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the date component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Date\n- uid: System.DateTimeOffset.DateTime\n  commentId: P:System.DateTimeOffset.DateTime\n  id: DateTime\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DateTime\n  fullName: System.DateTimeOffset.DateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DateTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 141\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DateTime DateTime { get; }\n    content.vb: Public ReadOnly Property DateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.LocalDateTime\n    commentId: P:System.DateTimeOffset.LocalDateTime\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.DateTime\n- uid: System.DateTimeOffset.Day\n  commentId: P:System.DateTimeOffset.Day\n  id: Day\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Day\n  fullName: System.DateTimeOffset.Day\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Day\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 194\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the day of the month represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Day { get; }\n    content.vb: Public ReadOnly Property Day As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The day component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as a value between 1 and 31.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Day\n- uid: System.DateTimeOffset.DayOfWeek\n  commentId: P:System.DateTimeOffset.DayOfWeek\n  id: DayOfWeek\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DayOfWeek\n  fullName: System.DateTimeOffset.DayOfWeek\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DayOfWeek\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 207\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the day of the week represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DayOfWeek DayOfWeek { get; }\n    content.vb: Public ReadOnly Property DayOfWeek As DayOfWeek\n    parameters: []\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>One of the enumeration values that indicates the day of the week of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.DayOfWeek\n- uid: System.DateTimeOffset.DayOfYear\n  commentId: P:System.DateTimeOffset.DayOfYear\n  id: DayOfYear\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: DayOfYear\n  fullName: System.DateTimeOffset.DayOfYear\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DayOfYear\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 218\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the day of the year represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int DayOfYear { get; }\n    content.vb: Public ReadOnly Property DayOfYear As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The day of the year of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as a value between 1 and 366.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.DayOfYear\n- uid: System.DateTimeOffset.Hour\n  commentId: P:System.DateTimeOffset.Hour\n  id: Hour\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Hour\n  fullName: System.DateTimeOffset.Hour\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Hour\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 229\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the hour component of the time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Hour { get; }\n    content.vb: Public ReadOnly Property Hour As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hour component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Hour\n- uid: System.DateTimeOffset.LocalDateTime\n  commentId: P:System.DateTimeOffset.LocalDateTime\n  id: LocalDateTime\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: LocalDateTime\n  fullName: System.DateTimeOffset.LocalDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalDateTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 155\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the local date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DateTime LocalDateTime { get; }\n    content.vb: Public ReadOnly Property LocalDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The local date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.DateTime\n    commentId: P:System.DateTimeOffset.DateTime\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.LocalDateTime\n- uid: System.DateTimeOffset.Millisecond\n  commentId: P:System.DateTimeOffset.Millisecond\n  id: Millisecond\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Millisecond\n  fullName: System.DateTimeOffset.Millisecond\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Millisecond\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 241\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the millisecond component of the time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Millisecond { get; }\n    content.vb: Public ReadOnly Property Millisecond As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The millisecond component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as an integer between 0 and 999.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Millisecond\n- uid: System.DateTimeOffset.Minute\n  commentId: P:System.DateTimeOffset.Minute\n  id: Minute\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Minute\n  fullName: System.DateTimeOffset.Minute\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Minute\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 252\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the minute component of the time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Minute { get; }\n    content.vb: Public ReadOnly Property Minute As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minute component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as an integer between 0 and 59.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Minute\n- uid: System.DateTimeOffset.Month\n  commentId: P:System.DateTimeOffset.Month\n  id: Month\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Month\n  fullName: System.DateTimeOffset.Month\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Month\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 263\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the month component of the date represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Month { get; }\n    content.vb: Public ReadOnly Property Month As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The month component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as an integer between 1 and 12.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Month\n- uid: System.DateTimeOffset.Now\n  commentId: P:System.DateTimeOffset.Now\n  id: Now\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Now\n  fullName: System.DateTimeOffset.Now\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Now\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 129\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset Now { get; }\n    content.vb: Public Shared ReadOnly Property Now As DateTimeOffset\n    parameters: []\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>A <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.UtcNow\n    commentId: P:System.DateTimeOffset.UtcNow\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTimeOffset.Now\n- uid: System.DateTimeOffset.Offset\n  commentId: P:System.DateTimeOffset.Offset\n  id: Offset\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Offset\n  fullName: System.DateTimeOffset.Offset\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Offset\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 270\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the time's offset from Coordinated Universal Time (UTC). </p>\\n\"\n  syntax:\n    content: public TimeSpan Offset { get; }\n    content.vb: Public ReadOnly Property Offset As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>The difference between the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's time value and Coordinated Universal Time (UTC).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Offset\n- uid: System.DateTimeOffset.Second\n  commentId: P:System.DateTimeOffset.Second\n  id: Second\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Second\n  fullName: System.DateTimeOffset.Second\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Second\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 279\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the second component of the clock time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Second { get; }\n    content.vb: Public ReadOnly Property Second As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The second component of the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as an integer value between 0 and 59.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Second\n- uid: System.DateTimeOffset.Ticks\n  commentId: P:System.DateTimeOffset.Ticks\n  id: Ticks\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Ticks\n  fullName: System.DateTimeOffset.Ticks\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ticks\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 291\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of ticks that represents the date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in clock time.</p>\\n\"\n  syntax:\n    content: public long Ticks { get; }\n    content.vb: Public ReadOnly Property Ticks As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of ticks in the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's clock time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.UtcDateTime\n    commentId: P:System.DateTimeOffset.UtcDateTime\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Ticks\n- uid: System.DateTimeOffset.TimeOfDay\n  commentId: P:System.DateTimeOffset.TimeOfDay\n  id: TimeOfDay\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: TimeOfDay\n  fullName: System.DateTimeOffset.TimeOfDay\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TimeOfDay\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 306\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the time of day for the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public TimeSpan TimeOfDay { get; }\n    content.vb: Public ReadOnly Property TimeOfDay As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval of the current date that has elapsed since midnight.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.TimeOfDay\n- uid: System.DateTimeOffset.UtcDateTime\n  commentId: P:System.DateTimeOffset.UtcDateTime\n  id: UtcDateTime\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: UtcDateTime\n  fullName: System.DateTimeOffset.UtcDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UtcDateTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 147\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the Coordinated Universal Time (UTC) date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DateTime UtcDateTime { get; }\n    content.vb: Public ReadOnly Property UtcDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The Coordinated Universal Time (UTC) date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.UtcDateTime\n- uid: System.DateTimeOffset.UtcNow\n  commentId: P:System.DateTimeOffset.UtcNow\n  id: UtcNow\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: UtcNow\n  fullName: System.DateTimeOffset.UtcNow\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UtcNow\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 135\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <xref href=\\\"System.TimeSpan.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset UtcNow { get; }\n    content.vb: Public Shared ReadOnly Property UtcNow As DateTimeOffset\n    parameters: []\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <xref href=\\\"System.TimeSpan.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Now\n    commentId: P:System.DateTimeOffset.Now\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTimeOffset.UtcNow\n- uid: System.DateTimeOffset.UtcTicks\n  commentId: P:System.DateTimeOffset.UtcTicks\n  id: UtcTicks\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: UtcTicks\n  fullName: System.DateTimeOffset.UtcTicks\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UtcTicks\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 297\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of ticks that represents the date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: public long UtcTicks { get; }\n    content.vb: Public ReadOnly Property UtcTicks As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of ticks in the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's Coordinated Universal Time (UTC).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.UtcTicks\n- uid: System.DateTimeOffset.Year\n  commentId: P:System.DateTimeOffset.Year\n  id: Year\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Year\n  fullName: System.DateTimeOffset.Year\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Year\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 315\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the year component of the date represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Year { get; }\n    content.vb: Public ReadOnly Property Year As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The year component of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as an integer value between 0 and 9999.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTimeOffset.Year\n- uid: System.DateTimeOffset.Add(System.TimeSpan)\n  commentId: M:System.DateTimeOffset.Add(System.TimeSpan)\n  id: Add(System.TimeSpan)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Add(TimeSpan)\n  fullName: System.DateTimeOffset.Add(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 325\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified time interval to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset Add(TimeSpan timeSpan)\n    content.vb: Public Function Add(timeSpan As TimeSpan) As DateTimeOffset\n    parameters:\n    - id: timeSpan\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a positive or a negative time interval.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the time interval represented by <em>timeSpan</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)\n    commentId: M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.Add(TimeSpan)\n- uid: System.DateTimeOffset.AddDays(System.Double)\n  commentId: M:System.DateTimeOffset.AddDays(System.Double)\n  id: AddDays(System.Double)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddDays(Double)\n  fullName: System.DateTimeOffset.AddDays(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddDays\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 335\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of whole and fractional days to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddDays(double days)\n    content.vb: Public Function AddDays(days As Double) As DateTimeOffset\n    parameters:\n    - id: days\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional days. The number can be negative or positive.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of days represented by <em>days</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddDays(Double)\n- uid: System.DateTimeOffset.AddHours(System.Double)\n  commentId: M:System.DateTimeOffset.AddHours(System.Double)\n  id: AddHours(System.Double)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddHours(Double)\n  fullName: System.DateTimeOffset.AddHours(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddHours\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 345\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of whole and fractional hours to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddHours(double hours)\n    content.vb: Public Function AddHours(hours As Double) As DateTimeOffset\n    parameters:\n    - id: hours\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional hours. The number can be negative or positive.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of hours represented by <em>hours</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddHours(Double)\n- uid: System.DateTimeOffset.AddMilliseconds(System.Double)\n  commentId: M:System.DateTimeOffset.AddMilliseconds(System.Double)\n  id: AddMilliseconds(System.Double)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddMilliseconds(Double)\n  fullName: System.DateTimeOffset.AddMilliseconds(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMilliseconds\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 355\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of milliseconds to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddMilliseconds(double milliseconds)\n    content.vb: Public Function AddMilliseconds(milliseconds As Double) As DateTimeOffset\n    parameters:\n    - id: milliseconds\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional milliseconds. The number can be negative or positive.   </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of whole milliseconds represented by <em>milliseconds</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddMilliseconds(Double)\n- uid: System.DateTimeOffset.AddMinutes(System.Double)\n  commentId: M:System.DateTimeOffset.AddMinutes(System.Double)\n  id: AddMinutes(System.Double)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddMinutes(Double)\n  fullName: System.DateTimeOffset.AddMinutes(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMinutes\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 365\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of whole and fractional minutes to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddMinutes(double minutes)\n    content.vb: Public Function AddMinutes(minutes As Double) As DateTimeOffset\n    parameters:\n    - id: minutes\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional minutes. The number can be negative or positive.   </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of minutes represented by <em>minutes</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddMinutes(Double)\n- uid: System.DateTimeOffset.AddMonths(System.Int32)\n  commentId: M:System.DateTimeOffset.AddMonths(System.Int32)\n  id: AddMonths(System.Int32)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(Int32)\n  fullName: System.DateTimeOffset.AddMonths(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 369\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of months to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddMonths(int months)\n    content.vb: Public Function AddMonths(months As Integer) As DateTimeOffset\n    parameters:\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>A number of whole months. The number can be negative or positive.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of months represented by <em>months</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddMonths(Int32)\n- uid: System.DateTimeOffset.AddSeconds(System.Double)\n  commentId: M:System.DateTimeOffset.AddSeconds(System.Double)\n  id: AddSeconds(System.Double)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddSeconds(Double)\n  fullName: System.DateTimeOffset.AddSeconds(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddSeconds\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 379\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of whole and fractional seconds to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddSeconds(double seconds)\n    content.vb: Public Function AddSeconds(seconds As Double) As DateTimeOffset\n    parameters:\n    - id: seconds\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional seconds. The number can be negative or positive.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of seconds represented by <em>seconds</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddSeconds(Double)\n- uid: System.DateTimeOffset.AddTicks(System.Int64)\n  commentId: M:System.DateTimeOffset.AddTicks(System.Int64)\n  id: AddTicks(System.Int64)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddTicks(Int64)\n  fullName: System.DateTimeOffset.AddTicks(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddTicks\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 387\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of ticks to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddTicks(long ticks)\n    content.vb: Public Function AddTicks(ticks As Long) As DateTimeOffset\n    parameters:\n    - id: ticks\n      type: System.Int64\n      description: \"\\n<p>A number of 100-nanosecond ticks. The number can be negative or positive.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of ticks represented by <em>ticks</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddTicks(Int64)\n- uid: System.DateTimeOffset.AddYears(System.Int32)\n  commentId: M:System.DateTimeOffset.AddYears(System.Int32)\n  id: AddYears(System.Int32)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: AddYears(Int32)\n  fullName: System.DateTimeOffset.AddYears(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 399\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that adds a specified number of years to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset AddYears(int years)\n    content.vb: Public Function AddYears(years As Integer) As DateTimeOffset\n    parameters:\n    - id: years\n      type: System.Int32\n      description: \"\\n<p>A number of years. The number can be negative or positive.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the number of years represented by <em>years</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.AddYears(Int32)\n- uid: System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)\n  id: Compare(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Compare(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.Compare(System.DateTimeOffset, System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 406\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</p>\\n\"\n  syntax:\n    content: public static int Compare(DateTimeOffset first, DateTimeOffset second)\n    content.vb: Public Shared Function Compare(first As DateTimeOffset, second As DateTimeOffset) As Integer\n    parameters:\n    - id: first\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: second\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates whether the value of the <em>first</em> parameter is earlier than, later than, or the same time as the value of the <em>second</em> parameter, as the following table shows.</p>\\n<p>Return value</p>\\n<p>Meaning</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>first</em> is earlier than <em>second</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>first</em> is equal to <em>second</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>first</em> is later than <em>second</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Compare(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.CompareTo(System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)\n  id: CompareTo(System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(DateTimeOffset)\n  fullName: System.DateTimeOffset.CompareTo(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 428\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and indicates whether the current object is earlier than, the same as, or later than the second <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int CompareTo(DateTimeOffset other)\n    content.vb: Public Function CompareTo(other As DateTimeOffset) As Integer\n    parameters:\n    - id: other\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object to compare with the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relationship between the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and <em>other</em>, as the following table shows.</p>\\n<p>Return Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is earlier than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is the same as <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero.</p>\\n</td><td>\\n<p>The current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is later than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable{System.DateTimeOffset}.CompareTo(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.CompareTo(DateTimeOffset)\n- uid: System.DateTimeOffset.Equals(System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.Equals(System.DateTimeOffset)\n  id: Equals(System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Equals(DateTimeOffset)\n  fullName: System.DateTimeOffset.Equals(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 449\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents the same point in time as a specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(DateTimeOffset other)\n    content.vb: Public Function Equals(other As DateTimeOffset) As Boolean\n    parameters:\n    - id: other\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object to compare to the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.   </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if both <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have the same <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n    commentId: M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  implements:\n  - System.IEquatable{System.DateTimeOffset}.Equals(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.Equals(DateTimeOffset)\n- uid: System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)\n  id: Equals(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Equals(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.Equals(System.DateTimeOffset, System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 467\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects represent the same point in time.</p>\\n\"\n  syntax:\n    content: public static bool Equals(DateTimeOffset first, DateTimeOffset second)\n    content.vb: Public Shared Function Equals(first As DateTimeOffset, second As DateTimeOffset) As Boolean\n    parameters:\n    - id: first\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: second\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have the same <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n    commentId: M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Equals(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.Equals(System.Object)\n  commentId: M:System.DateTimeOffset.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.DateTimeOffset.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 442\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents the same point in time as a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and represents the same point in time as the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n    commentId: M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DateTimeOffset.Equals(Object)\n- uid: System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  id: EqualsExact(System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: EqualsExact(DateTimeOffset)\n  fullName: System.DateTimeOffset.EqualsExact(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EqualsExact\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 453\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents the same time and has the same offset as a specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool EqualsExact(DateTimeOffset other)\n    content.vb: Public Function EqualsExact(other As DateTimeOffset) As Boolean\n    parameters:\n    - id: other\n      type: System.DateTimeOffset\n      description: \"\\n<p>The object to compare to the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and <em>other</em> have the same date and time value and the same <xref href=\\\"System.DateTimeOffset.Offset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Equals(System.DateTimeOffset)\n    commentId: M:System.DateTimeOffset.Equals(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.EqualsExact(DateTimeOffset)\n- uid: System.DateTimeOffset.FromFileTime(System.Int64)\n  commentId: M:System.DateTimeOffset.FromFileTime(System.Int64)\n  id: FromFileTime(System.Int64)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: FromFileTime(Int64)\n  fullName: System.DateTimeOffset.FromFileTime(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromFileTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 475\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified Windows file time to an equivalent local time.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset FromFileTime(long fileTime)\n    content.vb: Public Shared Function FromFileTime(fileTime As Long) As DateTimeOffset\n    parameters:\n    - id: fileTime\n      type: System.Int64\n      description: \"\\n<p>A Windows file time, expressed in ticks.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that represents the date and time of <em>fileTime</em> with the offset set to the local time offset.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>filetime</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>filetime</em> is greater than <strong>DateTimeOffset.MaxValue.Ticks</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.FromFileTime(Int64)\n- uid: System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n  commentId: M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n  id: FromUnixTimeMilliseconds(System.Int64)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: FromUnixTimeMilliseconds(Int64)\n  fullName: System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromUnixTimeMilliseconds\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 489\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds)\n    content.vb: Public Shared Function FromUnixTimeMilliseconds(milliseconds As Long) As DateTimeOffset\n    parameters:\n    - id: milliseconds\n      type: System.Int64\n      description: \"\\n<p>A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>A date and time value that represents the same moment in time as the Unix time. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>milliseconds</em> is less than  -62,135,596,800,000. </p>\\n<p>-or-</p>\\n<p>\\n<em>milliseconds</em> is greater than 253,402,300,799,999. </p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n    commentId: M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n  - type: System.DateTimeOffset.ToUnixTimeMilliseconds\n    commentId: M:System.DateTimeOffset.ToUnixTimeMilliseconds\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.FromUnixTimeMilliseconds(Int64)\n- uid: System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n  commentId: M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n  id: FromUnixTimeSeconds(System.Int64)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: FromUnixTimeSeconds(Int64)\n  fullName: System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromUnixTimeSeconds\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 479\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  syntax:\n    content: public static DateTimeOffset FromUnixTimeSeconds(long seconds)\n    content.vb: Public Shared Function FromUnixTimeSeconds(seconds As Long) As DateTimeOffset\n    parameters:\n    - id: seconds\n      type: System.Int64\n      description: \"\\n<p>A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>A date and time value that represents the same moment in time as the Unix time. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>seconds</em> is less than  -62,135,596,800. </p>\\n<p>-or-</p>\\n<p>\\n<em>seconds</em> is greater than 253,402,300,799. </p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n    commentId: M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n  - type: System.DateTimeOffset.ToUnixTimeSeconds\n    commentId: M:System.DateTimeOffset.ToUnixTimeSeconds\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.FromUnixTimeSeconds(Int64)\n- uid: System.DateTimeOffset.GetHashCode\n  commentId: M:System.DateTimeOffset.GetHashCode\n  id: GetHashCode\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.DateTimeOffset.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 541\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DateTimeOffset.GetHashCode()\n- uid: System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)\n  commentId: M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)\n  id: op_Addition(System.DateTimeOffset,System.TimeSpan)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Addition(DateTimeOffset, TimeSpan)\n  fullName: System.DateTimeOffset.Addition(System.DateTimeOffset, System.TimeSpan)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Addition\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 794\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds a specified time interval to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that has a specified date and time, and yields a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that has new a date and time.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan)\n    content.vb: Public Shared Operator +(dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>The object to add the time interval to.</p>\\n\"\n    - id: timeSpan\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to add.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object whose value is the sum of the values of <em>dateTimeTz</em> and <em>timeSpan</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Add(System.TimeSpan)\n    commentId: M:System.DateTimeOffset.Add(System.TimeSpan)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Addition(DateTimeOffset, TimeSpan)\n- uid: System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_Equality(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Equality(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.Equality(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 807\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects represent the same point in time.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator =(left As DateTimeOffset, right As DateTimeOffset) As Boolean\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if both <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have the same <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Equals(System.DateTimeOffset)\n    commentId: M:System.DateTimeOffset.Equals(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Equality(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.GreaterThan(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThan\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 823\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than (or later than) a second specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator>(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator>(left As DateTimeOffset, right As DateTimeOffset) As Boolean\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>left</em> is later than the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.GreaterThan(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.GreaterThanOrEqual(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThanOrEqual\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 827\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than or equal to a second specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator >=(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator >=(left As DateTimeOffset, right As DateTimeOffset) As Boolean\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>left</em> is the same as or later than the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.GreaterThanOrEqual(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset\n  commentId: M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset\n  id: op_Implicit(System.DateTime)~System.DateTimeOffset\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Implicit(DateTime to DateTimeOffset)\n  fullName: System.DateTimeOffset.Implicit(System.DateTime to System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 790\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static implicit operator DateTimeOffset(DateTime dateTime)\n    content.vb: Public Shared Widening Operator CType(dateTime As Date) As DateTimeOffset\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>The object to convert. </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>The converted object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The UTC date and time that results from applying the offset is later than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTimeOffset.Widening(System.DateTime to System.DateTimeOffset)\n  name.vb: Widening(DateTime to DateTimeOffset)\n  nameWithType: DateTimeOffset.Implicit(DateTime to DateTimeOffset)\n  nameWithType.vb: DateTimeOffset.Widening(DateTime to DateTimeOffset)\n- uid: System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_Inequality(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Inequality(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.Inequality(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 811\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects refer to different points in time.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator <>(left As DateTimeOffset, right As DateTimeOffset) As Boolean\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> do not have the same <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Inequality(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_LessThan(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: LessThan(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.LessThan(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThan\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 815\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than a second specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator <(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator <(left As DateTimeOffset, right As DateTimeOffset) As Boolean\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>left</em> is earlier than the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.LessThan(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.LessThanOrEqual(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThanOrEqual\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 819\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than a second specified <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator <=(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator <=(left As DateTimeOffset, right As DateTimeOffset) As Boolean\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>left</em> is earlier than the <xref href=\\\"System.DateTimeOffset.UtcDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.LessThanOrEqual(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)\n  id: op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(DateTimeOffset, DateTimeOffset)\n  fullName: System.DateTimeOffset.Subtraction(System.DateTimeOffset, System.DateTimeOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 803\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts one <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from another and yields a time interval.</p>\\n\"\n  syntax:\n    content: public static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right)\n    content.vb: Public Shared Operator -(left As DateTimeOffset, right As DateTimeOffset) As TimeSpan\n    parameters:\n    - id: left\n      type: System.DateTimeOffset\n      description: \"\\n<p>The minuend.   </p>\\n\"\n    - id: right\n      type: System.DateTimeOffset\n      description: \"\\n<p>The subtrahend.</p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>An object that represents the difference between <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Subtract(System.DateTimeOffset)\n    commentId: M:System.DateTimeOffset.Subtract(System.DateTimeOffset)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Subtraction(DateTimeOffset, DateTimeOffset)\n- uid: System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)\n  commentId: M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)\n  id: op_Subtraction(System.DateTimeOffset,System.TimeSpan)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(DateTimeOffset, TimeSpan)\n  fullName: System.DateTimeOffset.Subtraction(System.DateTimeOffset, System.TimeSpan)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 799\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan)\n    content.vb: Public Shared Operator -(dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>The date and time object to subtract from.</p>\\n\"\n    - id: timeSpan\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to subtract.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equal to the value of <em>dateTimeOffset</em> minus <em>timeSpan</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Subtract(System.TimeSpan)\n    commentId: M:System.DateTimeOffset.Subtract(System.TimeSpan)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Subtraction(DateTimeOffset, TimeSpan)\n- uid: System.DateTimeOffset.Parse(System.String)\n  commentId: M:System.DateTimeOffset.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.DateTimeOffset.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 549\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date, time, and offset to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As DateTimeOffset\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> contains the string representation of an offset value without a date or time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n    commentId: M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n  - type: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Parse(String)\n- uid: System.DateTimeOffset.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider)\n  fullName: System.DateTimeOffset.Parse(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 562\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified culture-specific format information.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset Parse(string input, IFormatProvider formatProvider)\n    content.vb: Public Shared Function Parse(input As String, formatProvider As IFormatProvider) As DateTimeOffset\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.   </p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific format information about <em>input</em>.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em>, as specified by <em>formatProvider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> contains the string representation of an offset value without a date or time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n    commentId: M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n  - type: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Parse(String, IFormatProvider)\n- uid: System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  commentId: M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  id: Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider, DateTimeStyles)\n  fullName: System.DateTimeOffset.Parse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 566\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified culture-specific format information and formatting style.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset Parse(string input, IFormatProvider formatProvider, DateTimeStyles styles)\n    content.vb: Public Shared Function Parse(input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.   </p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific format information about <em>input</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>. A typical value to specify is <xref href=\\\"System.Globalization.DateTimeStyles.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.   </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em> as specified by <em>formatProvider</em> and <em>styles</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> is not a valid <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> includes an unsupported <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> includes <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that cannot be used together.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> contains the string representation of an offset value without a date or time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n    commentId: M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n  - type: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.Parse(String, IFormatProvider, DateTimeStyles)\n- uid: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  id: ParseExact(System.String,System.String,System.IFormatProvider)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String, IFormatProvider)\n  fullName: System.DateTimeOffset.ParseExact(System.String, System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 580\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ParseExact(string input, string format, IFormatProvider formatProvider)\n    content.vb: Public Shared Function ParseExact(input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format specifier that defines the expected format of <em>input</em>.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equivalent to the date and time that is contained in <em>input</em> as specified by <em>format</em> and <em>formatProvider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is an empty string (\\\"\\\").</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>input</em> do not agree.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n    commentId: M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.ParseExact(String, String, IFormatProvider)\n- uid: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  id: ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String, IFormatProvider, DateTimeStyles)\n  fullName: System.DateTimeOffset.ParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 588\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ParseExact(string input, string format, IFormatProvider formatProvider, DateTimeStyles styles)\n    content.vb: Public Shared Function ParseExact(input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format specifier that defines the expected format of <em>input</em>.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equivalent to the date and time that is contained in the <em>input</em> parameter, as specified by the <em>format</em>, <em>formatProvider</em>, and <em>styles</em> parameters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n<p>-or-</p>\\n<p>The <em>styles</em> parameter includes an unsupported value.</p>\\n<p>-or-</p>\\n<p>The <em>styles</em> parameter contains <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that cannot be used together.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is an empty string (\\\"\\\").</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>input</em> do not agree. </p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n    commentId: M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTimeOffset.ParseExact(String, String, IFormatProvider, DateTimeStyles)\n- uid: System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  id: ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String[], IFormatProvider, DateTimeStyles)\n  fullName: System.DateTimeOffset.ParseExact(System.String, System.String[], System.IFormatProvider, System.Globalization.DateTimeStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 599\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ParseExact(string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles)\n    content.vb: Public Shared Function ParseExact(input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: formats\n      type: System.String[]\n      description: \"\\n<p>An array of format specifiers that define the expected formats of <em>input</em>.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equivalent to the date and time that is contained in the <em>input</em> parameter, as specified by the <em>formats</em>, <em>formatProvider</em>, and <em>styles</em> parameters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The offset is greater than 14 hours or less than -14 hours.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> includes an unsupported value.</p>\\n<p>-or-</p>\\n<p>The <em>styles</em> parameter contains <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that cannot be used together.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is an empty string (\\\"\\\").</p>\\n<p>-or-</p>\\n<p>\\n<em>input</em> does not contain a valid string representation of a date and time.</p>\\n<p>-or-</p>\\n<p>No element of <em>formats</em> contains a valid format specifier.</p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>input</em> do not agree. </p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n    commentId: M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTimeOffset.ParseExact(System.String, System.String(), System.IFormatProvider, System.Globalization.DateTimeStyles)\n  name.vb: ParseExact(String, String(), IFormatProvider, DateTimeStyles)\n  nameWithType: DateTimeOffset.ParseExact(String, String[], IFormatProvider, DateTimeStyles)\n  nameWithType.vb: DateTimeOffset.ParseExact(String, String(), IFormatProvider, DateTimeStyles)\n- uid: System.DateTimeOffset.Subtract(System.DateTimeOffset)\n  commentId: M:System.DateTimeOffset.Subtract(System.DateTimeOffset)\n  id: Subtract(System.DateTimeOffset)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Subtract(DateTimeOffset)\n  fullName: System.DateTimeOffset.Subtract(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 610\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents a specific date and time from the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public TimeSpan Subtract(DateTimeOffset value)\n    content.vb: Public Function Subtract(value As DateTimeOffset) As TimeSpan\n    parameters:\n    - id: value\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that represents the value to subtract. </p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>An object that specifies the interval between the two <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.Subtract(DateTimeOffset)\n- uid: System.DateTimeOffset.Subtract(System.TimeSpan)\n  commentId: M:System.DateTimeOffset.Subtract(System.TimeSpan)\n  id: Subtract(System.TimeSpan)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: Subtract(TimeSpan)\n  fullName: System.DateTimeOffset.Subtract(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 614\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts a specified time interval from the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset Subtract(TimeSpan value)\n    content.vb: Public Function Subtract(value As TimeSpan) As DateTimeOffset\n    parameters:\n    - id: value\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to subtract.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equal to the date and time represented by the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, minus the time interval represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.Subtract(TimeSpan)\n- uid: System.DateTimeOffset.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.DateTimeOffset.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IComparable.CompareTo\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 415\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with another object of the same type.</p>\\n\"\n  syntax:\n    content: int IComparable.CompareTo(object obj)\n    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates whether the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than, equal to, or greater than <em>obj</em>. The return values of the method are interpreted as follows:</p>\\n<p>Return Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than (earlier than) <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to (the same point in time as) <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than (later than) <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: DateTimeOffset.IComparable.CompareTo(Object)\n  nameWithType.vb: DateTimeOffset.System.IComparable.CompareTo(Object)\n- uid: System.DateTimeOffset.ToFileTime\n  commentId: M:System.DateTimeOffset.ToFileTime\n  id: ToFileTime\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToFileTime()\n  fullName: System.DateTimeOffset.ToFileTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFileTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 619\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a Windows file time.</p>\\n\"\n  syntax:\n    content: public long ToFileTime()\n    content.vb: Public Function ToFileTime As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, expressed as a Windows file time.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.FromFileTime(System.Int64)\n    commentId: M:System.DateTimeOffset.FromFileTime(System.Int64)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToFileTime()\n- uid: System.DateTimeOffset.ToLocalTime\n  commentId: M:System.DateTimeOffset.ToLocalTime\n  id: ToLocalTime\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToLocalTime()\n  fullName: System.DateTimeOffset.ToLocalTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLocalTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 651\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the local time.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset ToLocalTime()\n    content.vb: Public Function ToLocalTime As DateTimeOffset\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that represents the date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object converted to local time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.ToUniversalTime\n    commentId: M:System.DateTimeOffset.ToUniversalTime\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToLocalTime()\n- uid: System.DateTimeOffset.ToOffset(System.TimeSpan)\n  commentId: M:System.DateTimeOffset.ToOffset(System.TimeSpan)\n  id: ToOffset(System.TimeSpan)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToOffset(TimeSpan)\n  fullName: System.DateTimeOffset.ToOffset(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToOffset\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 165\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the date and time specified by an offset value.</p>\\n\"\n  syntax:\n    content: public DateTimeOffset ToOffset(TimeSpan offset)\n    content.vb: Public Function ToOffset(offset As TimeSpan) As DateTimeOffset\n    parameters:\n    - id: offset\n      type: System.TimeSpan\n      description: \"\\n<p>The offset to convert the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to.   </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that is equal to the original <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object (that is, their <xref href=\\\"System.DateTimeOffset.ToUniversalTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods return identical points in time) but whose <xref href=\\\"System.DateTimeOffset.Offset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is set to <em>offset</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a <xref href=\\\"System.DateTimeOffset.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value earlier than <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The resulting <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a <xref href=\\\"System.DateTimeOffset.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value later than <xref href=\\\"System.DateTimeOffset.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than -14 hours.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> is greater than 14 hours.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToOffset(TimeSpan)\n- uid: System.DateTimeOffset.ToString\n  commentId: M:System.DateTimeOffset.ToString\n  id: ToString\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.DateTimeOffset.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 660\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that includes the offset appended at the end of the string.</p>\\n\"\n  overridden: System.ValueType.ToString\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DateTimeOffset.ToString()\n- uid: System.DateTimeOffset.ToString(System.IFormatProvider)\n  commentId: M:System.DateTimeOffset.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.DateTimeOffset.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 670\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public string ToString(IFormatProvider formatProvider)\n    content.vb: Public Function ToString(formatProvider As IFormatProvider) As String\n    parameters:\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, as specified by <em>formatProvider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>formatProvider</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToString(IFormatProvider)\n- uid: System.DateTimeOffset.ToString(System.String)\n  commentId: M:System.DateTimeOffset.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.DateTimeOffset.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 665\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the specified format.</p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, as specified by <em>format</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>format</em> is one, and it is not one of the standard format specifier characters defined for <xref href=\\\"System.Globalization.DateTimeFormatInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> does not contain a valid custom format pattern.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToString(String)\n- uid: System.DateTimeOffset.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.DateTimeOffset.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 675\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the specified format and culture-specific format information.</p>\\n\"\n  syntax:\n    content: public string ToString(string format, IFormatProvider formatProvider)\n    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the value of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>format</em> is one, and it is not one of the standard format specifier characters defined for <xref href=\\\"System.Globalization.DateTimeFormatInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>format</em> does not contain a valid custom format pattern. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>formatProvider</em>. </p>\\n\"\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToString(String, IFormatProvider)\n- uid: System.DateTimeOffset.ToUniversalTime\n  commentId: M:System.DateTimeOffset.ToUniversalTime\n  id: ToUniversalTime\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToUniversalTime()\n  fullName: System.DateTimeOffset.ToUniversalTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUniversalTime\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 680\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: public DateTimeOffset ToUniversalTime()\n    content.vb: Public Function ToUniversalTime As DateTimeOffset\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>An object that represents the date and time of the current <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object converted to Coordinated Universal Time (UTC).</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.ToLocalTime\n    commentId: M:System.DateTimeOffset.ToLocalTime\n  - type: System.DateTimeOffset.ToOffset(System.TimeSpan)\n    commentId: M:System.DateTimeOffset.ToOffset(System.TimeSpan)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToUniversalTime()\n- uid: System.DateTimeOffset.ToUnixTimeMilliseconds\n  commentId: M:System.DateTimeOffset.ToUnixTimeMilliseconds\n  id: ToUnixTimeMilliseconds\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToUnixTimeMilliseconds()\n  fullName: System.DateTimeOffset.ToUnixTimeMilliseconds()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUnixTimeMilliseconds\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 644\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. </p>\\n\"\n  syntax:\n    content: public long ToUnixTimeMilliseconds()\n    content.vb: Public Function ToUnixTimeMilliseconds As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. </p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.ToUnixTimeSeconds\n    commentId: M:System.DateTimeOffset.ToUnixTimeSeconds\n  - type: System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n    commentId: M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToUnixTimeMilliseconds()\n- uid: System.DateTimeOffset.ToUnixTimeSeconds\n  commentId: M:System.DateTimeOffset.ToUnixTimeSeconds\n  id: ToUnixTimeSeconds\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: ToUnixTimeSeconds()\n  fullName: System.DateTimeOffset.ToUnixTimeSeconds()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUnixTimeSeconds\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 623\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z. </p>\\n\"\n  syntax:\n    content: public long ToUnixTimeSeconds()\n    content.vb: Public Function ToUnixTimeSeconds As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of seconds that have elapsed since 1970-01-01T00:00:00Z. </p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n    commentId: M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\n  - type: System.DateTimeOffset.ToUnixTimeMilliseconds\n    commentId: M:System.DateTimeOffset.ToUnixTimeMilliseconds\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTimeOffset.ToUnixTimeSeconds()\n- uid: System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n  commentId: M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)\n  id: TryParse(System.String,System.DateTimeOffset@)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out DateTimeOffset)\n  fullName: System.DateTimeOffset.TryParse(System.String, out System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 684\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Tries to converts a specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out DateTimeOffset result)\n    content.vb: Public Shared Function TryParse(input As String, ByRef result As DateTimeOffset) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: result\n      type: System.DateTimeOffset\n      description: \"\\n<p>When the method returns, contains the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent to the date and time of <em>input</em>, if the conversion succeeded, or <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if the conversion failed. The conversion fails if the <em>input</em> parameter is <strong>null</strong> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Parse(System.String)\n    commentId: M:System.DateTimeOffset.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTimeOffset.TryParse(System.String, ByRef System.DateTimeOffset)\n  name.vb: TryParse(String, ByRef DateTimeOffset)\n  nameWithType: DateTimeOffset.TryParse(String, out DateTimeOffset)\n  nameWithType.vb: DateTimeOffset.TryParse(String, ByRef DateTimeOffset)\n- uid: System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  commentId: M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  id: TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, IFormatProvider, DateTimeStyles, out DateTimeOffset)\n  fullName: System.DateTimeOffset.TryParse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 696\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Tries to convert a specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result)\n    content.vb: Public Shared Function TryParse(input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information about <em>input</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>input</em>. </p>\\n\"\n    - id: result\n      type: System.DateTimeOffset\n      description: \"\\n<p>When the method returns, contains the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value equivalent to the date and time of <em>input</em>, if the conversion succeeded, or <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if the conversion failed. The conversion fails if the <em>input</em> parameter is <strong>null</strong> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> includes an undefined <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.Globalization.DateTimeStyles.NoCurrentDateDefault\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is not supported.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> includes mutually exclusive <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Parse(System.String)\n    commentId: M:System.DateTimeOffset.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTimeOffset.TryParse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, ByRef System.DateTimeOffset)\n  name.vb: TryParse(String, IFormatProvider, DateTimeStyles, ByRef DateTimeOffset)\n  nameWithType: DateTimeOffset.TryParse(String, IFormatProvider, DateTimeStyles, out DateTimeOffset)\n  nameWithType.vb: DateTimeOffset.TryParse(String, IFormatProvider, DateTimeStyles, ByRef DateTimeOffset)\n- uid: System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  commentId: M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  id: TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTimeOffset)\n  fullName: System.DateTimeOffset.TryParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParseExact\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 709\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</p>\\n\"\n  syntax:\n    content: public static bool TryParseExact(string input, string format, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result)\n    content.vb: Public Shared Function TryParseExact(input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format specifier that defines the required format of <em>input</em>.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <strong>None</strong>.</p>\\n\"\n    - id: result\n      type: System.DateTimeOffset\n      description: \"\\n<p>When the method returns, contains the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent to the date and time of <em>input</em>, if the conversion succeeded, or <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if the conversion failed. The conversion fails if the <em>input</em> parameter is <strong>null</strong>, or does not contain a valid string representation of a date and time in the expected format defined by <em>format</em> and <em>provider</em>. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> includes an undefined <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.Globalization.DateTimeStyles.NoCurrentDateDefault\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is not supported.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> includes mutually exclusive <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTimeOffset.TryParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, ByRef System.DateTimeOffset)\n  name.vb: TryParseExact(String, String, IFormatProvider, DateTimeStyles, ByRef DateTimeOffset)\n  nameWithType: DateTimeOffset.TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTimeOffset)\n  nameWithType.vb: DateTimeOffset.TryParseExact(String, String, IFormatProvider, DateTimeStyles, ByRef DateTimeOffset)\n- uid: System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  commentId: M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  id: TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)\n  parent: System.DateTimeOffset\n  langs:\n  - csharp\n  - vb\n  name: TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTimeOffset)\n  fullName: System.DateTimeOffset.TryParseExact(System.String, System.String[], System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTimeOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParseExact\n    path: src/mscorlib/src/System/DateTimeOffset.cs\n    startLine: 724\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</p>\\n\"\n  syntax:\n    content: public static bool TryParseExact(string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result)\n    content.vb: Public Shared Function TryParseExact(input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert.</p>\\n\"\n    - id: formats\n      type: System.String[]\n      description: \"\\n<p>An array that defines the expected formats of <em>input</em>.</p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>input</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <strong>None</strong>.</p>\\n\"\n    - id: result\n      type: System.DateTimeOffset\n      description: \"\\n<p>When the method returns, contains the <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent to the date and time of <em>input</em>, if the conversion succeeded, or <xref href=\\\"System.DateTimeOffset.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if the conversion failed. The conversion fails if the <em>input</em> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <em>format</em>, or if <em>formats</em> is <strong>null</strong>. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter is successfully converted; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> includes an undefined <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.Globalization.DateTimeStyles.NoCurrentDateDefault\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is not supported.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> includes mutually exclusive <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTimeOffset.TryParseExact(System.String, System.String(), System.IFormatProvider, System.Globalization.DateTimeStyles, ByRef System.DateTimeOffset)\n  name.vb: TryParseExact(String, String(), IFormatProvider, DateTimeStyles, ByRef DateTimeOffset)\n  nameWithType: DateTimeOffset.TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTimeOffset)\n  nameWithType.vb: DateTimeOffset.TryParseExact(String, String(), IFormatProvider, DateTimeStyles, ByRef DateTimeOffset)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.DateTimeOffset}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<DateTimeOffset>\n  fullName: System.IComparable<System.DateTimeOffset>\n  fullname.vb: System.IComparable(Of System.DateTimeOffset)\n  name.vb: IComparable(Of DateTimeOffset)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: )\n    fullName: )\n  nameWithType: IComparable<DateTimeOffset>\n  nameWithType.vb: IComparable(Of DateTimeOffset)\n  commentId: T:System.IComparable{System.DateTimeOffset}\n- uid: System.IEquatable{System.DateTimeOffset}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<DateTimeOffset>\n  fullName: System.IEquatable<System.DateTimeOffset>\n  fullname.vb: System.IEquatable(Of System.DateTimeOffset)\n  name.vb: IEquatable(Of DateTimeOffset)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<DateTimeOffset>\n  nameWithType.vb: IEquatable(Of DateTimeOffset)\n  commentId: T:System.IEquatable{System.DateTimeOffset}\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: false\n  name: DateTimeOffset\n  fullName: System.DateTimeOffset\n  nameWithType: DateTimeOffset\n  commentId: T:System.DateTimeOffset\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IComparable{System.DateTimeOffset}.CompareTo(System.DateTimeOffset)\n  parent: System.IComparable{System.DateTimeOffset}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(DateTimeOffset)\n  fullName: System.IComparable<System.DateTimeOffset>.CompareTo(System.DateTimeOffset)\n  fullname.vb: System.IComparable(Of System.DateTimeOffset).CompareTo(System.DateTimeOffset)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.DateTimeOffset>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.DateTimeOffset).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: )\n    fullName: )\n  nameWithType: IComparable<DateTimeOffset>.CompareTo(DateTimeOffset)\n  nameWithType.vb: IComparable(Of DateTimeOffset).CompareTo(DateTimeOffset)\n  commentId: M:System.IComparable{System.DateTimeOffset}.CompareTo(System.DateTimeOffset)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.IEquatable{System.DateTimeOffset}.Equals(System.DateTimeOffset)\n  parent: System.IEquatable{System.DateTimeOffset}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(DateTimeOffset)\n  fullName: System.IEquatable<System.DateTimeOffset>.Equals(System.DateTimeOffset)\n  fullname.vb: System.IEquatable(Of System.DateTimeOffset).Equals(System.DateTimeOffset)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.DateTimeOffset>.Equals\n  - name: (\n    fullName: (\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.DateTimeOffset).Equals\n  - name: (\n    fullName: (\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<DateTimeOffset>.Equals(DateTimeOffset)\n  nameWithType.vb: IEquatable(Of DateTimeOffset).Equals(DateTimeOffset)\n  commentId: M:System.IEquatable{System.DateTimeOffset}.Equals(System.DateTimeOffset)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.Globalization.DateTimeStyles\n  parent: System.Globalization\n  isExternal: false\n  name: DateTimeStyles\n  fullName: System.Globalization.DateTimeStyles\n  nameWithType: DateTimeStyles\n  commentId: T:System.Globalization.DateTimeStyles\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}