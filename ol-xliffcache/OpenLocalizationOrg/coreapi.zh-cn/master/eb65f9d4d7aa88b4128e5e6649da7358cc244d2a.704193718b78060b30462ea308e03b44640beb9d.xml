{"nodes":[{"pos":[313,323],"content":"GCSettings","needQuote":true,"nodes":[{"content":"GCSettings","pos":[0,10]}]},{"pos":[1476,1486],"content":"IsServerGC","needQuote":true,"nodes":[{"content":"IsServerGC","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if server garbage collection is enabled; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[2231,2341],"source":"\\n<p>\\n<strong>true</strong> if server garbage collection is enabled; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[2723,2752],"content":"LargeObjectHeapCompactionMode","needQuote":true,"nodes":[{"content":"LargeObjectHeapCompactionMode","pos":[0,29]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.","pos":[4009,4119],"source":"\\n<p>One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH."},{"content":"&lt;/p&gt;\\n","pos":[4120,4126],"source":" </p>\\n"},{"pos":[4600,4611],"content":"LatencyMode","needQuote":true,"nodes":[{"content":"LatencyMode","pos":[0,11]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the latency mode.","pos":[5618,5685],"source":"\\n<p>One of the enumeration values that specifies the latency mode."},{"content":"&lt;/p&gt;\\n","pos":[5686,5692],"source":" </p>\\n"},{"pos":[6547,6561],"content":"System.Runtime","needQuote":true,"nodes":[{"content":"System.Runtime","pos":[0,14]}]},{"pos":[6716,6722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6882,6892],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6987,6995],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7064,7065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7092,7093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7163,7171],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7240,7241],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7268,7269],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7452,7466],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7585,7591],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7658,7659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7709,7715],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7775,7776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7859,7865],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7932,7933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7983,7989],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8049,8050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8264,8286],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8434,8440],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8507,8508],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8558,8564],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8625,8626]},{"pos":[8681,8687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8747,8748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8845,8851],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8918,8919],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8969,8975],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9036,9037]},{"pos":[9092,9098],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9158,9159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9404,9435],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9601,9616],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9692,9693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9743,9749],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9810,9811]},{"pos":[9866,9872],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9932,9933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10039,10054],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10130,10131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10181,10187],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10248,10249]},{"pos":[10304,10310],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10370,10371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10601,10614],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10715,10726],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10798,10799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10826,10827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10900,10911],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10983,10984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11011,11012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11187,11196],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11289,11296],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11364,11365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11392,11393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11462,11469],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11537,11538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11565,11566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11741,11758],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11867,11882],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11958,11959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11986,11987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12064,12079],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12155,12156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12183,12184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12329,12335],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12467,12474],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12663,12694],"content":"GCLargeObjectHeapCompactionMode","needQuote":true,"nodes":[{"content":"GCLargeObjectHeapCompactionMode","pos":[0,31]}]},{"pos":[12953,12966],"content":"GCLatencyMode","needQuote":true,"nodes":[{"content":"GCLatencyMode","pos":[0,13]}]},{"pos":[13152,13179],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Runtime.GCSettings\n  commentId: T:System.Runtime.GCSettings\n  id: GCSettings\n  parent: System.Runtime\n  children:\n  - System.Runtime.GCSettings.IsServerGC\n  - System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  - System.Runtime.GCSettings.LatencyMode\n  langs:\n  - csharp\n  - vb\n  name: GCSettings\n  fullName: System.Runtime.GCSettings\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/GcSettings.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GCSettings\n    path: src/mscorlib/src/System/Runtime/GcSettings.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime\n  summary: \"\\n<p>Specifies the garbage collection settings for the current process. </p>\\n\"\n  syntax:\n    content: public class GCSettings\n    content.vb: Public Class GCSettings\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: GCSettings\n- uid: System.Runtime.GCSettings.IsServerGC\n  commentId: P:System.Runtime.GCSettings.IsServerGC\n  id: IsServerGC\n  parent: System.Runtime.GCSettings\n  langs:\n  - csharp\n  - vb\n  name: IsServerGC\n  fullName: System.Runtime.GCSettings.IsServerGC\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/GcSettings.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsServerGC\n    path: src/mscorlib/src/System/Runtime/GcSettings.cs\n    startLine: 92\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime\n  summary: \"\\n<p>Gets a value that indicates whether server garbage collection is enabled.</p>\\n\"\n  syntax:\n    content: >-\n      public static bool IsServerGC\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property IsServerGC As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if server garbage collection is enabled; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: GCSettings.IsServerGC\n- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  commentId: P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  id: LargeObjectHeapCompactionMode\n  parent: System.Runtime.GCSettings\n  langs:\n  - csharp\n  - vb\n  name: LargeObjectHeapCompactionMode\n  fullName: System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/GcSettings.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LargeObjectHeapCompactionMode\n    path: src/mscorlib/src/System/Runtime/GcSettings.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH). </p>\\n\"\n  syntax:\n    content: >-\n      public static GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode\n\n      {\n          [SecuritySafeCritical]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n          [SecurityCritical]\n          [HostProtection(MayLeakOnAbort = true)]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          set;\n      }\n    content.vb: Public Shared Property LargeObjectHeapCompactionMode As GCLargeObjectHeapCompactionMode\n    parameters: []\n    return:\n      type: System.Runtime.GCLargeObjectHeapCompactionMode\n      description: \"\\n<p>One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH. </p>\\n\"\n  seealso:\n  - type: System.Runtime.GCLargeObjectHeapCompactionMode\n    commentId: T:System.Runtime.GCLargeObjectHeapCompactionMode\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCSettings.LargeObjectHeapCompactionMode\n- uid: System.Runtime.GCSettings.LatencyMode\n  commentId: P:System.Runtime.GCSettings.LatencyMode\n  id: LatencyMode\n  parent: System.Runtime.GCSettings\n  langs:\n  - csharp\n  - vb\n  name: LatencyMode\n  fullName: System.Runtime.GCSettings.LatencyMode\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/GcSettings.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LatencyMode\n    path: src/mscorlib/src/System/Runtime/GcSettings.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime\n  summary: \"\\n<p>Gets or sets the current latency mode for garbage collection.</p>\\n\"\n  syntax:\n    content: >-\n      public static GCLatencyMode LatencyMode\n\n      {\n          [SecuritySafeCritical]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n          [SecurityCritical]\n          [HostProtection(MayLeakOnAbort = true)]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          set;\n      }\n    content.vb: Public Shared Property LatencyMode As GCLatencyMode\n    parameters: []\n    return:\n      type: System.Runtime.GCLatencyMode\n      description: \"\\n<p>One of the enumeration values that specifies the latency mode. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.GCSettings.LatencyMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is being set to an invalid value. </p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Runtime.GCSettings.LatencyMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property cannot be set to <xref href=\\\"System.Runtime.GCLatencyMode.NoGCRegion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCSettings.LatencyMode\nreferences:\n- uid: System.Runtime\n  isExternal: false\n  name: System.Runtime\n  fullName: System.Runtime\n  nameWithType: System.Runtime\n  commentId: N:System.Runtime\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Runtime.GCLargeObjectHeapCompactionMode\n  parent: System.Runtime\n  isExternal: false\n  name: GCLargeObjectHeapCompactionMode\n  fullName: System.Runtime.GCLargeObjectHeapCompactionMode\n  nameWithType: GCLargeObjectHeapCompactionMode\n  commentId: T:System.Runtime.GCLargeObjectHeapCompactionMode\n- uid: System.Runtime.GCLatencyMode\n  parent: System.Runtime\n  isExternal: false\n  name: GCLatencyMode\n  fullName: System.Runtime.GCLatencyMode\n  nameWithType: GCLatencyMode\n  commentId: T:System.Runtime.GCLatencyMode\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}