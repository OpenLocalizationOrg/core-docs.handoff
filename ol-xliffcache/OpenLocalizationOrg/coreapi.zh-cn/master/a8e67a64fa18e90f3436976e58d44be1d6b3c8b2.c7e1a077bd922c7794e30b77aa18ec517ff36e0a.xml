{"nodes":[{"pos":[3580,3584],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[5402,5410],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[6370,6378],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[7376,7391],"content":"CompareTo(Char)","needQuote":true,"nodes":[{"content":"CompareTo(Char)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A signed number indicating the position of this instance in the sort order in relation to the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n&lt;p&gt;Return Value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;value&lt;/em&gt;.","pos":[8429,8702],"source":"\\n<p>A signed number indicating the position of this instance in the sort order in relation to the <em>value</em> parameter.</p>\\n<p>Return Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance precedes <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance has the same position in the sort order as &lt;em&gt;value&lt;/em&gt;.","pos":[8703,8829],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance has the same position in the sort order as <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;value&lt;/em&gt;.","pos":[8830,8934],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance follows <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[8935,8969],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[9512,9535],"content":"ConvertFromUtf32(Int32)","needQuote":true,"nodes":[{"content":"ConvertFromUtf32(Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A 21-bit Unicode code point.","pos":[10211,10244],"source":"\\n<p>A 21-bit Unicode code point."},{"content":"&lt;/p&gt;\\n","pos":[10245,10251],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;utf32&lt;/em&gt; is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.","pos":[10733,10893],"source":"\\n<p>\\n<em>utf32</em> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF."},{"content":"&lt;/p&gt;\\n","pos":[10894,10900],"source":" </p>\\n"},{"pos":[11477,11503],"content":"ConvertToUtf32(Char, Char)","needQuote":true,"nodes":[{"content":"ConvertToUtf32(Char, Char)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).","pos":[12252,12342],"source":"\\n<p>A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF)."},{"content":"&lt;/p&gt;\\n","pos":[12343,12349],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).","pos":[12418,12507],"source":"\\n<p>A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF)."},{"content":"&lt;/p&gt;\\n","pos":[12508,12514],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 21-bit Unicode code point represented by the &lt;em&gt;highSurrogate&lt;/em&gt; and &lt;em&gt;lowSurrogate&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[12573,12693],"source":"\\n<p>The 21-bit Unicode code point represented by the <em>highSurrogate</em> and <em>lowSurrogate</em> parameters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;highSurrogate&lt;/em&gt; is not in the range U+D800 through U+DBFF, or &lt;em&gt;lowSurrogate&lt;/em&gt; is not in the range U+DC00 through U+DFFF.","pos":[12824,12964],"source":"\\n<p>\\n<em>highSurrogate</em> is not in the range U+D800 through U+DBFF, or <em>lowSurrogate</em> is not in the range U+DC00 through U+DFFF."},{"content":"&lt;/p&gt;\\n","pos":[12965,12971],"source":" </p>\\n"},{"pos":[13542,13571],"content":"ConvertToUtf32(String, Int32)","needQuote":true,"nodes":[{"content":"ConvertToUtf32(String, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A string that contains a character or surrogate pair.","pos":[14330,14388],"source":"\\n<p>A string that contains a character or surrogate pair."},{"content":"&lt;/p&gt;\\n","pos":[14389,14395],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index position of the character or surrogate pair in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[14458,14537],"source":"\\n<p>The index position of the character or surrogate pair in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The 21-bit Unicode code point represented by the character or surrogate pair at the position in the &lt;em&gt;s&lt;/em&gt; parameter specified by the &lt;em&gt;index&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[14596,14770],"source":"\\n<p>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <em>s</em> parameter specified by the <em>index</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14889,14932],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14933,14939],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is not a position within &lt;em&gt;s&lt;/em&gt;.","pos":[15056,15114],"source":"\\n<p>\\n<em>index</em> is not a position within <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[15115,15121],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.","pos":[15218,15417],"source":"\\n<p>The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate."},{"content":"&lt;/p&gt;\\n","pos":[15418,15424],"source":" </p>\\n"},{"pos":[15929,15941],"content":"Equals(Char)","needQuote":true,"nodes":[{"content":"Equals(Char)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An object to compare to this instance.","pos":[16705,16748],"source":"\\n<p>An object to compare to this instance."},{"content":"&lt;/p&gt;\\n","pos":[16749,16755],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;obj&lt;/em&gt; parameter equals the value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16816,16950],"source":"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17394,17408],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance or &lt;strong&gt;null&lt;/strong&gt;.","pos":[18059,18129],"source":"\\n<p>An object to compare with this instance or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18130,18136],"source":" </p>\\n"},{"pos":[18844,18857],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[19426,19471],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[19832,19853],"content":"GetNumericValue(Char)","needQuote":true,"nodes":[{"content":"GetNumericValue(Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[20531,20569],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[20570,20576],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numeric value of &lt;em&gt;c&lt;/em&gt; if that character represents a number; otherwise, -1.0.&lt;/p&gt;\\n","pos":[20636,20734],"source":"\\n<p>The numeric value of <em>c</em> if that character represents a number; otherwise, -1.0.</p>\\n"},{"pos":[21100,21130],"content":"GetNumericValue(String, Int32)","needQuote":true,"nodes":[{"content":"GetNumericValue(String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The character position in &lt;em&gt;s&lt;/em&gt;.","pos":[22048,22090],"source":"\\n<p>The character position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[22091,22097],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numeric value of the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; if that character represents a number; otherwise, -1.&lt;/p&gt;\\n","pos":[22157,22297],"source":"\\n<p>The numeric value of the character at position <em>index</em> in <em>s</em> if that character represents a number; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22416,22459],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22460,22466],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[22583,22671],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[22672,22678],"source":" </p>\\n"},{"pos":[22990,23005],"content":"IsControl(Char)","needQuote":true,"nodes":[{"content":"IsControl(Char)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[23653,23692],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[23693,23699],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a control character; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23760,23867],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a control character; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[24209,24233],"content":"IsControl(String, Int32)","needQuote":true,"nodes":[{"content":"IsControl(String, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A string.","pos":[24962,24976],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[24977,24983],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[25046,25107],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[25108,25114],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a control character; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25175,25326],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a control character; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25445,25488],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25489,25495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[25612,25700],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[25701,25707],"source":" </p>\\n"},{"pos":[26007,26020],"content":"IsDigit(Char)","needQuote":true,"nodes":[{"content":"IsDigit(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[26656,26695],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[26696,26702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a decimal digit; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26763,26866],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a decimal digit; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27363,27385],"content":"IsDigit(String, Int32)","needQuote":true,"nodes":[{"content":"IsDigit(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string.","pos":[28102,28116],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[28117,28123],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[28186,28247],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[28248,28254],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a decimal digit; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28315,28462],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a decimal digit; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28581,28624],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28625,28631],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[28748,28836],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[28837,28843],"source":" </p>\\n"},{"pos":[29328,29349],"content":"IsHighSurrogate(Char)","needQuote":true,"nodes":[{"content":"IsHighSurrogate(Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[30064,30103],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[30104,30110],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the numeric value of the &lt;em&gt;c&lt;/em&gt; parameter ranges from U+D800 through U+DBFF; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30171,30324],"source":"\\n<p>\\n<strong>true</strong> if the numeric value of the <em>c</em> parameter ranges from U+D800 through U+DBFF; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30690,30720],"content":"IsHighSurrogate(String, Int32)","needQuote":true,"nodes":[{"content":"IsHighSurrogate(String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string.","pos":[31514,31528],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[31529,31535],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[31598,31659],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[31660,31666],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the numeric value of the specified character in the &lt;em&gt;s&lt;/em&gt; parameter ranges from U+D800 through U+DBFF; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31727,31907],"source":"\\n<p>\\n<strong>true</strong> if the numeric value of the specified character in the <em>s</em> parameter ranges from U+D800 through U+DBFF; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32026,32069],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32070,32076],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is not a position within &lt;em&gt;s&lt;/em&gt;.","pos":[32193,32251],"source":"\\n<p>\\n<em>index</em> is not a position within <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[32252,32258],"source":" </p>\\n"},{"pos":[32567,32581],"content":"IsLetter(Char)","needQuote":true,"nodes":[{"content":"IsLetter(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[33223,33262],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[33263,33269],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a letter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33330,33426],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a letter; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[33832,33855],"content":"IsLetter(String, Int32)","needQuote":true,"nodes":[{"content":"IsLetter(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string.","pos":[34577,34591],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[34592,34598],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[34661,34722],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[34723,34729],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a letter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34790,34930],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a letter; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35049,35092],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35093,35099],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[35216,35304],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[35305,35311],"source":" </p>\\n"},{"pos":[35702,35723],"content":"IsLetterOrDigit(Char)","needQuote":true,"nodes":[{"content":"IsLetterOrDigit(Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[36403,36442],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[36443,36449],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a letter or a decimal digit; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36510,36625],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a letter or a decimal digit; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[37059,37089],"content":"IsLetterOrDigit(String, Int32)","needQuote":true,"nodes":[{"content":"IsLetterOrDigit(String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string.","pos":[37850,37864],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[37865,37871],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[37934,37995],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[37996,38002],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a letter or a decimal digit; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38063,38222],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a letter or a decimal digit; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38341,38384],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38385,38391],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[38508,38596],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[38597,38603],"source":" </p>\\n"},{"pos":[38977,38990],"content":"IsLower(Char)","needQuote":true,"nodes":[{"content":"IsLower(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[39629,39668],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[39669,39675],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a lowercase letter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39736,39842],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a lowercase letter; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[40337,40359],"content":"IsLower(String, Int32)","needQuote":true,"nodes":[{"content":"IsLower(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string.","pos":[41079,41093],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[41094,41100],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[41163,41224],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[41225,41231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a lowercase letter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41292,41442],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a lowercase letter; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41561,41604],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41605,41611],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[41728,41816],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[41817,41823],"source":" </p>\\n"},{"pos":[42358,42378],"content":"IsLowSurrogate(Char)","needQuote":true,"nodes":[{"content":"IsLowSurrogate(Char)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The character to evaluate.","pos":[43088,43119],"source":"\\n<p>The character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[43120,43126],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the numeric value of the &lt;em&gt;c&lt;/em&gt; parameter ranges from U+DC00 through U+DFFF; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43187,43340],"source":"\\n<p>\\n<strong>true</strong> if the numeric value of the <em>c</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[43702,43731],"content":"IsLowSurrogate(String, Int32)","needQuote":true,"nodes":[{"content":"IsLowSurrogate(String, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A string.","pos":[44520,44534],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[44535,44541],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[44604,44665],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[44666,44672],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the numeric value of the specified character in the &lt;em&gt;s&lt;/em&gt; parameter ranges from U+DC00 through U+DFFF; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44733,44913],"source":"\\n<p>\\n<strong>true</strong> if the numeric value of the specified character in the <em>s</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45032,45075],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45076,45082],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is not a position within &lt;em&gt;s&lt;/em&gt;.","pos":[45199,45257],"source":"\\n<p>\\n<em>index</em> is not a position within <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[45258,45264],"source":" </p>\\n"},{"pos":[45572,45586],"content":"IsNumber(Char)","needQuote":true,"nodes":[{"content":"IsNumber(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[46219,46258],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[46259,46265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a number; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46326,46422],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a number; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[46921,46944],"content":"IsNumber(String, Int32)","needQuote":true,"nodes":[{"content":"IsNumber(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string.","pos":[47658,47672],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[47673,47679],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[47742,47803],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[47804,47810],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a number; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47871,48011],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a number; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[48130,48173],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[48174,48180],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[48297,48385],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[48386,48392],"source":" </p>\\n"},{"pos":[48925,48944],"content":"IsPunctuation(Char)","needQuote":true,"nodes":[{"content":"IsPunctuation(Char)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[49607,49646],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[49647,49653],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a punctuation mark; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49714,49820],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a punctuation mark; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[50246,50274],"content":"IsPunctuation(String, Int32)","needQuote":true,"nodes":[{"content":"IsPunctuation(String, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A string.","pos":[51018,51032],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[51033,51039],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[51102,51163],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[51164,51170],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a punctuation mark; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51231,51381],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a punctuation mark; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[51500,51543],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[51544,51550],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[51667,51755],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[51756,51762],"source":" </p>\\n"},{"pos":[52201,52218],"content":"IsSeparator(Char)","needQuote":true,"nodes":[{"content":"IsSeparator(Char)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[52876,52915],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[52916,52922],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a separator character; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52983,53092],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a separator character; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[53554,53580],"content":"IsSeparator(String, Int32)","needQuote":true,"nodes":[{"content":"IsSeparator(String, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A string.","pos":[54319,54333],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[54334,54340],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[54403,54464],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[54465,54471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a separator character; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54532,54685],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a separator character; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[54804,54847],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[54848,54854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[54971,55059],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[55060,55066],"source":" </p>\\n"},{"pos":[55503,55520],"content":"IsSurrogate(Char)","needQuote":true,"nodes":[{"content":"IsSurrogate(Char)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[56156,56195],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[56196,56202],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is either a high surrogate or a low surrogate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56263,56393],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is either a high surrogate or a low surrogate; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[57103,57129],"content":"IsSurrogate(String, Int32)","needQuote":true,"nodes":[{"content":"IsSurrogate(String, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A string.","pos":[57854,57868],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[57869,57875],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[57938,57999],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[58000,58006],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a either a high surrogate or a low surrogate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58067,58243],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a either a high surrogate or a low surrogate; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[58362,58405],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[58406,58412],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[58529,58617],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[58618,58624],"source":" </p>\\n"},{"pos":[59346,59373],"content":"IsSurrogatePair(Char, Char)","needQuote":true,"nodes":[{"content":"IsSurrogatePair(Char, Char)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The character to evaluate as the high surrogate of a surrogate pair.","pos":[60185,60258],"source":"\\n<p>The character to evaluate as the high surrogate of a surrogate pair."},{"content":"&lt;/p&gt;\\n","pos":[60259,60265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to evaluate as the low surrogate of a surrogate pair.","pos":[60334,60406],"source":"\\n<p>The character to evaluate as the low surrogate of a surrogate pair."},{"content":"&lt;/p&gt;\\n","pos":[60407,60413],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the numeric value of the &lt;em&gt;highSurrogate&lt;/em&gt; parameter ranges from U+D800 through U+DBFF, and the numeric value of the &lt;em&gt;lowSurrogate&lt;/em&gt; parameter ranges from U+DC00 through U+DFFF; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60474,60735],"source":"\\n<p>\\n<strong>true</strong> if the numeric value of the <em>highSurrogate</em> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <em>lowSurrogate</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[61334,61364],"content":"IsSurrogatePair(String, Int32)","needQuote":true,"nodes":[{"content":"IsSurrogatePair(String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string.","pos":[62168,62182],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[62183,62189],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position of the pair of characters to evaluate within &lt;em&gt;s&lt;/em&gt;.","pos":[62252,62335],"source":"\\n<p>The starting position of the pair of characters to evaluate within <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[62336,62342],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;s&lt;/em&gt; parameter includes adjacent characters at positions &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;index&lt;/em&gt; + 1, and the numeric value of the character at position &lt;em&gt;index&lt;/em&gt; ranges from U+D800 through U+DBFF, and the numeric value of the character at position &lt;em&gt;index&lt;/em&gt;+1 ranges from U+DC00 through U+DFFF; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62403,62785],"source":"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter includes adjacent characters at positions <em>index</em> and <em>index</em> + 1, and the numeric value of the character at position <em>index</em> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <em>index</em>+1 ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[62904,62947],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[62948,62954],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is not a position within &lt;em&gt;s&lt;/em&gt;.","pos":[63071,63129],"source":"\\n<p>\\n<em>index</em> is not a position within <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[63130,63136],"source":" </p>\\n"},{"pos":[63672,63686],"content":"IsSymbol(Char)","needQuote":true,"nodes":[{"content":"IsSymbol(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[64329,64368],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[64369,64375],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is a symbol character; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64436,64542],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is a symbol character; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[64948,64971],"content":"IsSymbol(String, Int32)","needQuote":true,"nodes":[{"content":"IsSymbol(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string.","pos":[65695,65709],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[65710,65716],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[65779,65840],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[65841,65847],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is a symbol character; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65908,66058],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a symbol character; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66177,66220],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66221,66227],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[66344,66432],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[66433,66439],"source":" </p>\\n"},{"pos":[66861,66874],"content":"IsUpper(Char)","needQuote":true,"nodes":[{"content":"IsUpper(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[67514,67553],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[67554,67560],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is an uppercase letter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[67621,67728],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is an uppercase letter; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[68223,68245],"content":"IsUpper(String, Int32)","needQuote":true,"nodes":[{"content":"IsUpper(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string.","pos":[68966,68980],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[68981,68987],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[69050,69111],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[69112,69118],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is an uppercase letter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69179,69330],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is an uppercase letter; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[69449,69492],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[69493,69499],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[69616,69704],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[69705,69711],"source":" </p>\\n"},{"pos":[70147,70165],"content":"IsWhiteSpace(Char)","needQuote":true,"nodes":[{"content":"IsWhiteSpace(Char)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The Unicode character to evaluate.","pos":[70817,70856],"source":"\\n<p>The Unicode character to evaluate."},{"content":"&lt;/p&gt;\\n","pos":[70857,70863],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;c&lt;/em&gt; is white space; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[70924,71023],"source":"\\n<p>\\n<strong>true</strong> if <em>c</em> is white space; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[71546,71573],"content":"IsWhiteSpace(String, Int32)","needQuote":true,"nodes":[{"content":"IsWhiteSpace(String, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A string.","pos":[72306,72320],"source":"\\n<p>A string."},{"content":"&lt;/p&gt;\\n","pos":[72321,72327],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the character to evaluate in &lt;em&gt;s&lt;/em&gt;.","pos":[72390,72451],"source":"\\n<p>The position of the character to evaluate in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[72452,72458],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the character at position &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; is white space; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[72519,72662],"source":"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is white space; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[72781,72824],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[72825,72831],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the last position in &lt;em&gt;s&lt;/em&gt;.","pos":[72948,73036],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[73037,73043],"source":" </p>\\n"},{"pos":[73570,73583],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains a single character, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[74211,74284],"source":"\\n<p>A string that contains a single character, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[74285,74291],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character equivalent to the sole character in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[74349,74427],"source":"\\n<p>A Unicode character equivalent to the sole character in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[74546,74589],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[74590,74596],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;s&lt;/em&gt; is not 1.","pos":[74689,74728],"source":"\\n<p>The length of <em>s</em> is not 1."},{"content":"&lt;/p&gt;\\n","pos":[74729,74735],"source":" </p>\\n"},{"pos":[75187,75216],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[76319,76345],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[77417,77456],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[78319,78356],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.","pos":[78417,78455],"source":"\\n<p>This conversion is not supported."},{"content":"No value is returned.&lt;/p&gt;\\n","pos":[78456,78483],"source":" No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.&lt;/p&gt;\\n","pos":[78600,78644],"source":"\\n<p>This conversion is not supported.</p>\\n"},{"pos":[79184,79220],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[80055,80092],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[80803,80839],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[81674,81711],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[82434,82474],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[83343,83380],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;No value is returned.&lt;/p&gt;\\n","pos":[83442,83474],"source":"\\n<p>No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.&lt;/p&gt;\\n","pos":[83591,83635],"source":"\\n<p>This conversion is not supported.</p>\\n"},{"pos":[84188,84227],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[85093,85130],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;No value is returned.&lt;/p&gt;\\n","pos":[85191,85223],"source":"\\n<p>No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.&lt;/p&gt;\\n","pos":[85340,85384],"source":"\\n<p>This conversion is not supported.</p>\\n"},{"pos":[85930,85968],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[86827,86864],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;No value is returned.&lt;/p&gt;\\n","pos":[86924,86956],"source":"\\n<p>No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.&lt;/p&gt;\\n","pos":[87073,87117],"source":"\\n<p>This conversion is not supported.</p>\\n"},{"pos":[87656,87693],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[88537,88574],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[89293,89330],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[90173,90210],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[90929,90966],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[91808,91845],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[92564,92601],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[93445,93482],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[94204,94242],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[95100,95137],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;No value is returned.&lt;/p&gt;\\n","pos":[95197,95229],"source":"\\n<p>No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.&lt;/p&gt;\\n","pos":[95346,95390],"source":"\\n<p>This conversion is not supported.</p>\\n"},{"pos":[95932,95970],"content":"IConvertible.ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToString(IFormatProvider)","pos":[0,38]}]},{"pos":[97250,97292],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;An object of the specified type.&lt;/p&gt;\\n","pos":[98500,98543],"source":"\\n<p>An object of the specified type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[98662,98714],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[99570,99608],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"pos":[101374,101412],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"pos":[103178,103216],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"pos":[104870,104883],"content":"ToLower(Char)","needQuote":true,"nodes":[{"content":"ToLower(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[105502,105540],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[105541,105547],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The lowercase equivalent of &lt;em&gt;c&lt;/em&gt;, or the unchanged value of &lt;em&gt;c&lt;/em&gt;, if &lt;em&gt;c&lt;/em&gt; is already lowercase or not alphabetic.&lt;/p&gt;\\n","pos":[105605,105747],"source":"\\n<p>The lowercase equivalent of <em>c</em>, or the unchanged value of <em>c</em>, if <em>c</em> is already lowercase or not alphabetic.</p>\\n"},{"pos":[106304,106326],"content":"ToLowerInvariant(Char)","needQuote":true,"nodes":[{"content":"ToLowerInvariant(Char)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[107029,107067],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[107068,107074],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The lowercase equivalent of the &lt;em&gt;c&lt;/em&gt; parameter, or the unchanged value of &lt;em&gt;c&lt;/em&gt;, if &lt;em&gt;c&lt;/em&gt; is already lowercase or not alphabetic.&lt;/p&gt;\\n","pos":[107132,107288],"source":"\\n<p>The lowercase equivalent of the <em>c</em> parameter, or the unchanged value of <em>c</em>, if <em>c</em> is already lowercase or not alphabetic.</p>\\n"},{"pos":[107918,107928],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the value of this instance.&lt;/p&gt;\\n","pos":[108524,108591],"source":"\\n<p>The string representation of the value of this instance.</p>\\n"},{"pos":[109084,109098],"content":"ToString(Char)","needQuote":true,"nodes":[{"content":"ToString(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[109736,109774],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[109775,109781],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of &lt;em&gt;c&lt;/em&gt;.&lt;/p&gt;\\n","pos":[109841,109905],"source":"\\n<p>The string representation of the value of <em>c</em>.</p>\\n"},{"pos":[110354,110367],"content":"ToUpper(Char)","needQuote":true,"nodes":[{"content":"ToUpper(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[110986,111024],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[111025,111031],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The uppercase equivalent of &lt;em&gt;c&lt;/em&gt;, or the unchanged value of &lt;em&gt;c&lt;/em&gt; if &lt;em&gt;c&lt;/em&gt; is already uppercase, has no uppercase equivalent, or is not alphabetic.&lt;/p&gt;\\n","pos":[111089,111263],"source":"\\n<p>The uppercase equivalent of <em>c</em>, or the unchanged value of <em>c</em> if <em>c</em> is already uppercase, has no uppercase equivalent, or is not alphabetic.</p>\\n"},{"pos":[111820,111842],"content":"ToUpperInvariant(Char)","needQuote":true,"nodes":[{"content":"ToUpperInvariant(Char)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[112545,112583],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[112584,112590],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The uppercase equivalent of the &lt;em&gt;c&lt;/em&gt; parameter, or the unchanged value of &lt;em&gt;c&lt;/em&gt;, if &lt;em&gt;c&lt;/em&gt; is already uppercase or not alphabetic.&lt;/p&gt;\\n","pos":[112648,112804],"source":"\\n<p>The uppercase equivalent of the <em>c</em> parameter, or the unchanged value of <em>c</em>, if <em>c</em> is already uppercase or not alphabetic.</p>\\n"},{"pos":[113518,113544],"content":"TryParse(String, out Char)","needQuote":true,"nodes":[{"content":"TryParse(String, out Char)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A string that contains a single character, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[114311,114384],"source":"\\n<p>A string that contains a single character, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[114385,114391],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains a Unicode character equivalent to the sole character in &lt;em&gt;s&lt;/em&gt;, if the conversion succeeded, or an undefined value if the conversion failed.","pos":[114454,114638],"source":"\\n<p>When this method returns, contains a Unicode character equivalent to the sole character in <em>s</em>, if the conversion succeeded, or an undefined value if the conversion failed."},{"content":"The conversion fails if the &lt;em&gt;s&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt; or the length of &lt;em&gt;s&lt;/em&gt; is not 1.","pos":[114639,114750],"source":" The conversion fails if the <em>s</em> parameter is <strong>null</strong> or the length of <em>s</em> is not 1."},{"content":"This parameter is passed uninitialized.","pos":[114751,114790]},{"content":"&lt;/p&gt;\\n","pos":[114791,114797],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;s&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[114858,114983],"source":"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[115503,115509],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[115645,115656],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[115849,115866],"content":"IComparable<Char>","needQuote":true,"nodes":[{"content":"IComparable&lt;Char&gt;","pos":[0,17],"source":"IComparable<Char>"}]},{"pos":[116048,116059],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[116103,116104],"content":"<","needQuote":true,"nodes":[]},{"pos":[116152,116156],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[116287,116298],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[116343,116346]},{"pos":[116401,116405],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[116463,116464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116674,116686],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[116880,116896],"content":"IEquatable<Char>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Char&gt;","pos":[0,16],"source":"IEquatable<Char>"}]},{"pos":[117074,117084],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[117127,117128],"content":"<","needQuote":true,"nodes":[]},{"pos":[117176,117180],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[117310,117320],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[117364,117367]},{"pos":[117422,117426],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[117484,117485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117728,117750],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[117898,117904],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[117971,117972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118022,118028],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[118089,118090]},{"pos":[118145,118151],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118211,118212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118309,118315],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[118382,118383],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118433,118439],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[118500,118501]},{"pos":[118556,118562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118622,118623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118868,118899],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[119065,119080],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[119156,119157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119207,119213],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[119274,119275]},{"pos":[119330,119336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119396,119397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119503,119518],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[119594,119595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119645,119651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[119712,119713]},{"pos":[119768,119774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119834,119835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120061,120070],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[120163,120170],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[120238,120239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120266,120267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120336,120343],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[120411,120412],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120439,120440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120583,120597],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[120756,120767],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[120811,120812],"content":"<","needQuote":true,"nodes":[]},{"pos":[120839,120840],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[120940,120951],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[120996,120999]},{"pos":[121033,121034],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[121061,121062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121238,121251],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[121406,121416],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[121459,121460],"content":"<","needQuote":true,"nodes":[]},{"pos":[121487,121488],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[121587,121597],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[121641,121644]},{"pos":[121678,121679],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[121706,121707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121891,121897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122040,122044],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[122278,122293],"content":"CompareTo(Char)","needQuote":true,"nodes":[{"content":"CompareTo(Char)","pos":[0,15]}]},{"pos":[122503,122512],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[122579,122580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122628,122632],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[122690,122691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122773,122782],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[122852,122853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122901,122905],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[122963,122964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123222,123227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123373,123385],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[123555,123564],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[123621,123622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123649,123650],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[123677,123678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123760,123769],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[123829,123830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123857,123858],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[123885,123886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124113,124119],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[124350,124362],"content":"Equals(Char)","needQuote":true,"nodes":[{"content":"Equals(Char)","pos":[0,12]}]},{"pos":[124560,124566],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[124629,124630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124678,124682],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[124740,124741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124819,124825],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[124891,124892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124940,124944],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[125002,125003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125251,125258],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[125406,125415],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[125573,125579],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[125632,125633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125660,125661],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[125688,125689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125767,125773],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[125829,125830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125857,125858],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[125885,125886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126135,126149],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[126274,126280],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126329,126330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126380,126386],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126446,126447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126533,126539],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126588,126589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126639,126645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126705,126706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126887,126896],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[127075,127088],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[127195,127206],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[127260,127261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127288,127289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127365,127376],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[127430,127431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127458,127459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127626,127632],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[127818,127835],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[127970,127979],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[128033,128034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128084,128090],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[128150,128151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128242,128251],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[128305,128306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128356,128362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[128422,128423],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128642,128655],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[128768,128779],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[128836,128837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128864,128865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128944,128955],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[129012,129013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129040,129041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129216,129224],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[129428,129454],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[129609,129618],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[129673,129674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129733,129748],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[129796,129797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129898,129907],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[129962,129963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130022,130037],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[130085,130086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130303,130318],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[130540,130563],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[130712,130718],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[130770,130771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130830,130845],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[130893,130894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130992,130998],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[131050,131051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131110,131125],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[131173,131174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131374,131378],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[131567,131590],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[131739,131745],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[131797,131798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131857,131872],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[131920,131921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132019,132025],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[132077,132078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132137,132152],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[132200,132201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132457,132484],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[132641,132651],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[132707,132708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132767,132782],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[132830,132831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132933,132943],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[132999,133000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133059,133074],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[133122,133123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133335,133343],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[133547,133573],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[133728,133737],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[133792,133793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133852,133867],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[133915,133916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134017,134026],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[134081,134082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134141,134156],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[134204,134205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134414,134421],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[134621,134646],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[134799,134807],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[134861,134862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134921,134936],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[134984,134985],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135085,135093],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[135147,135148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[135207,135222],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[135270,135271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135528,135552],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[135703,135710],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[135763,135764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[135823,135838],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[135886,135887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135986,135993],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[136046,136047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136106,136121],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[136169,136170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136373,136378],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[136571,136595],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[136746,136753],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[136806,136807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136866,136881],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[136929,136930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137029,137036],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[137089,137090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137149,137164],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[137212,137213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137468,137492],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[137643,137650],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[137703,137704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137763,137778],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[137826,137827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137926,137933],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[137986,137987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138046,138061],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[138109,138110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138313,138318],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[138511,138535],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[138686,138693],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[138746,138747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138806,138821],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[138869,138870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138969,138976],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[139029,139030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[139089,139104],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[139152,139153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139356,139361],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[139555,139580],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[139733,139741],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[139795,139796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[139855,139870],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[139918,139919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140019,140027],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[140081,140082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140141,140156],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[140204,140205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140411,140417],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[140614,140639],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[140792,140800],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[140854,140855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140914,140929],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[140977,140978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141078,141086],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[141140,141141],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141200,141215],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[141263,141264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141532,141561],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[141735,141741],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[141793,141794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141842,141846],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[141884,141885]},{"pos":[141949,141964],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[142012,142013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142123,142129],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[142181,142182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142230,142234],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[142272,142273]},{"pos":[142337,142352],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[142400,142401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142619,142623],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[142814,142839],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[142992,143000],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[143054,143055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143114,143129],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[143177,143178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143278,143286],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[143340,143341],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143400,143415],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[143463,143464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143670,143676],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[143873,143898],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[144051,144059],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[144113,144114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144173,144188],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[144236,144237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144337,144345],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[144399,144400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144459,144474],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[144522,144523],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144729,144735],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[144932,144957],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[145110,145118],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[145172,145173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145232,145247],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[145295,145296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145396,145404],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[145458,145459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145518,145533],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[145581,145582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145788,145794],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[145961,145971],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[146072,146080],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[146131,146132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146159,146160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146233,146241],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[146292,146293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146320,146321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146486,146513],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[146719,146740],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[146941,146958],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[147145,147160],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[147329,147349],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Char\n  commentId: T:System.Char\n  id: Char\n  parent: System\n  children:\n  - System.Char.CompareTo(System.Char)\n  - System.Char.ConvertFromUtf32(System.Int32)\n  - System.Char.ConvertToUtf32(System.Char,System.Char)\n  - System.Char.ConvertToUtf32(System.String,System.Int32)\n  - System.Char.Equals(System.Char)\n  - System.Char.Equals(System.Object)\n  - System.Char.GetHashCode\n  - System.Char.GetNumericValue(System.Char)\n  - System.Char.GetNumericValue(System.String,System.Int32)\n  - System.Char.IsControl(System.Char)\n  - System.Char.IsControl(System.String,System.Int32)\n  - System.Char.IsDigit(System.Char)\n  - System.Char.IsDigit(System.String,System.Int32)\n  - System.Char.IsHighSurrogate(System.Char)\n  - System.Char.IsHighSurrogate(System.String,System.Int32)\n  - System.Char.IsLetter(System.Char)\n  - System.Char.IsLetter(System.String,System.Int32)\n  - System.Char.IsLetterOrDigit(System.Char)\n  - System.Char.IsLetterOrDigit(System.String,System.Int32)\n  - System.Char.IsLower(System.Char)\n  - System.Char.IsLower(System.String,System.Int32)\n  - System.Char.IsLowSurrogate(System.Char)\n  - System.Char.IsLowSurrogate(System.String,System.Int32)\n  - System.Char.IsNumber(System.Char)\n  - System.Char.IsNumber(System.String,System.Int32)\n  - System.Char.IsPunctuation(System.Char)\n  - System.Char.IsPunctuation(System.String,System.Int32)\n  - System.Char.IsSeparator(System.Char)\n  - System.Char.IsSeparator(System.String,System.Int32)\n  - System.Char.IsSurrogate(System.Char)\n  - System.Char.IsSurrogate(System.String,System.Int32)\n  - System.Char.IsSurrogatePair(System.Char,System.Char)\n  - System.Char.IsSurrogatePair(System.String,System.Int32)\n  - System.Char.IsSymbol(System.Char)\n  - System.Char.IsSymbol(System.String,System.Int32)\n  - System.Char.IsUpper(System.Char)\n  - System.Char.IsUpper(System.String,System.Int32)\n  - System.Char.IsWhiteSpace(System.Char)\n  - System.Char.IsWhiteSpace(System.String,System.Int32)\n  - System.Char.MaxValue\n  - System.Char.MinValue\n  - System.Char.Parse(System.String)\n  - System.Char.System#IComparable#CompareTo(System.Object)\n  - System.Char.System#IConvertible#GetTypeCode\n  - System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToString(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.Char.ToLower(System.Char)\n  - System.Char.ToLowerInvariant(System.Char)\n  - System.Char.ToString\n  - System.Char.ToString(System.Char)\n  - System.Char.ToUpper(System.Char)\n  - System.Char.ToUpperInvariant(System.Char)\n  - System.Char.TryParse(System.String,System.Char@)\n  langs:\n  - csharp\n  - vb\n  name: Char\n  fullName: System.Char\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Char\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 22\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a character as a UTF-16 code unit.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Char : IComparable, IConvertible, IComparable<char>, IEquatable<char>\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Char\n          Implements IComparable, IConvertible, IComparable(Of Char), IEquatable(Of Char)\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.IConvertible\n    commentId: T:System.IConvertible\n  - type: System.String\n    commentId: T:System.String\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Char}\n  - System.IConvertible\n  - System.IEquatable{System.Char}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Char\n- uid: System.Char.MaxValue\n  commentId: F:System.Char.MaxValue\n  id: MaxValue\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Char.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxValue\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the largest possible value of a <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant.</p>\\n\"\n  syntax:\n    content: public const char MaxValue = '\\uffff'\n    content.vb: Public Const MaxValue As Char = ChrW(65535)\n    return:\n      type: System.Char\n  seealso:\n  - type: System.Char.MinValue\n    commentId: F:System.Char.MinValue\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Char.MaxValue\n- uid: System.Char.MinValue\n  commentId: F:System.Char.MinValue\n  id: MinValue\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Char.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinValue\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 38\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest possible value of a <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant.</p>\\n\"\n  syntax:\n    content: public const char MinValue = '\\0'\n    content.vb: Public Const MinValue As Char = vbNullChar\n    return:\n      type: System.Char\n  seealso:\n  - type: System.Char.MaxValue\n    commentId: F:System.Char.MaxValue\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Char.MinValue\n- uid: System.Char.CompareTo(System.Char)\n  commentId: M:System.Char.CompareTo(System.Char)\n  id: CompareTo(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Char)\n  fullName: System.Char.CompareTo(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 138\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance to a specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int CompareTo(char value)\n    content.vb: Public Function CompareTo(value As Char) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>A <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the position of this instance in the sort order in relation to the <em>value</em> parameter.</p>\\n<p>Return Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance precedes <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance has the same position in the sort order as <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance follows <em>value</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Char.Equals(System.Object)\n    commentId: M:System.Char.Equals(System.Object)\n  implements:\n  - System.IComparable{System.Char}.CompareTo(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Char.CompareTo(Char)\n- uid: System.Char.ConvertFromUtf32(System.Int32)\n  commentId: M:System.Char.ConvertFromUtf32(System.Int32)\n  id: ConvertFromUtf32(System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ConvertFromUtf32(Int32)\n  fullName: System.Char.ConvertFromUtf32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConvertFromUtf32\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 916\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified Unicode code point into a UTF-16 encoded string.</p>\\n\"\n  syntax:\n    content: public static string ConvertFromUtf32(int utf32)\n    content.vb: Public Shared Function ConvertFromUtf32(utf32 As Integer) As String\n    parameters:\n    - id: utf32\n      type: System.Int32\n      description: \"\\n<p>A 21-bit Unicode code point. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string consisting of one <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object or a surrogate pair of <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects equivalent to the code point specified by the <em>utf32</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>utf32</em> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF. </p>\\n\"\n  seealso:\n  - type: System.Char.ConvertToUtf32(System.Char,System.Char)\n    commentId: M:System.Char.ConvertToUtf32(System.Char,System.Char)\n  - type: System.Text.UTF32Encoding\n    commentId: T:System.Text.UTF32Encoding\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ConvertFromUtf32(Int32)\n- uid: System.Char.ConvertToUtf32(System.Char,System.Char)\n  commentId: M:System.Char.ConvertToUtf32(System.Char,System.Char)\n  id: ConvertToUtf32(System.Char,System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ConvertToUtf32(Char, Char)\n  fullName: System.Char.ConvertToUtf32(System.Char, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConvertToUtf32\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 942\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</p>\\n\"\n  syntax:\n    content: public static int ConvertToUtf32(char highSurrogate, char lowSurrogate)\n    content.vb: Public Shared Function ConvertToUtf32(highSurrogate As Char, lowSurrogate As Char) As Integer\n    parameters:\n    - id: highSurrogate\n      type: System.Char\n      description: \"\\n<p>A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF). </p>\\n\"\n    - id: lowSurrogate\n      type: System.Char\n      description: \"\\n<p>A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF). </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 21-bit Unicode code point represented by the <em>highSurrogate</em> and <em>lowSurrogate</em> parameters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>highSurrogate</em> is not in the range U+D800 through U+DBFF, or <em>lowSurrogate</em> is not in the range U+DC00 through U+DFFF. </p>\\n\"\n  seealso:\n  - type: System.Char.ConvertFromUtf32(System.Int32)\n    commentId: M:System.Char.ConvertFromUtf32(System.Int32)\n  - type: System.Text.UTF32Encoding\n    commentId: T:System.Text.UTF32Encoding\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ConvertToUtf32(Char, Char)\n- uid: System.Char.ConvertToUtf32(System.String,System.Int32)\n  commentId: M:System.Char.ConvertToUtf32(System.String,System.Int32)\n  id: ConvertToUtf32(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ConvertToUtf32(String, Int32)\n  fullName: System.Char.ConvertToUtf32(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConvertToUtf32\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 961\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</p>\\n\"\n  syntax:\n    content: public static int ConvertToUtf32(string s, int index)\n    content.vb: Public Shared Function ConvertToUtf32(s As String, index As Integer) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a character or surrogate pair. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of the character or surrogate pair in <em>s</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <em>s</em> parameter specified by the <em>index</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a position within <em>s</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate. </p>\\n\"\n  seealso:\n  - type: System.Char.ConvertFromUtf32(System.Int32)\n    commentId: M:System.Char.ConvertFromUtf32(System.Int32)\n  - type: System.Text.UTF32Encoding\n    commentId: T:System.Text.UTF32Encoding\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ConvertToUtf32(String, Int32)\n- uid: System.Char.Equals(System.Char)\n  commentId: M:System.Char.Equals(System.Char)\n  id: Equals(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: Equals(Char)\n  fullName: System.Char.Equals(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 114\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to the specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public bool Equals(char obj)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Function Equals(obj As Char) As Boolean\n    parameters:\n    - id: obj\n      type: System.Char\n      description: \"\\n<p>An object to compare to this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Char.Equals(System.Object)\n    commentId: M:System.Char.Equals(System.Object)\n  implements:\n  - System.IEquatable{System.Char}.Equals(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Char.Equals(Char)\n- uid: System.Char.Equals(System.Object)\n  commentId: M:System.Char.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Char.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 107\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.Char.CompareTo(System.Object)\n    commentId: M:System.Char.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Char.Equals(Object)\n- uid: System.Char.GetHashCode\n  commentId: M:System.Char.GetHashCode\n  id: GetHashCode\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Char.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Char.GetHashCode()\n- uid: System.Char.GetNumericValue(System.Char)\n  commentId: M:System.Char.GetNumericValue(System.Char)\n  id: GetNumericValue(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: GetNumericValue(Char)\n  fullName: System.Char.GetNumericValue(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNumericValue\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 819\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified numeric Unicode character to a double-precision floating point number.</p>\\n\"\n  syntax:\n    content: public static double GetNumericValue(char c)\n    content.vb: Public Shared Function GetNumericValue(c As Char) As Double\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The numeric value of <em>c</em> if that character represents a number; otherwise, -1.0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.GetNumericValue(Char)\n- uid: System.Char.GetNumericValue(System.String,System.Int32)\n  commentId: M:System.Char.GetNumericValue(System.String,System.Int32)\n  id: GetNumericValue(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: GetNumericValue(String, Int32)\n  fullName: System.Char.GetNumericValue(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNumericValue\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 824\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</p>\\n\"\n  syntax:\n    content: public static double GetNumericValue(string s, int index)\n    content.vb: Public Shared Function GetNumericValue(s As String, index As Integer) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The character position in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The numeric value of the character at position <em>index</em> in <em>s</em> if that character represents a number; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.GetNumericValue(String, Int32)\n- uid: System.Char.IsControl(System.Char)\n  commentId: M:System.Char.IsControl(System.Char)\n  id: IsControl(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsControl(Char)\n  fullName: System.Char.IsControl(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsControl\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 503\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a control character.</p>\\n\"\n  syntax:\n    content: public static bool IsControl(char c)\n    content.vb: Public Shared Function IsControl(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a control character; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsControl(Char)\n- uid: System.Char.IsControl(System.String,System.Int32)\n  commentId: M:System.Char.IsControl(System.String,System.Int32)\n  id: IsControl(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsControl(String, Int32)\n  fullName: System.Char.IsControl(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsControl\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 511\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a control character.</p>\\n\"\n  syntax:\n    content: public static bool IsControl(string s, int index)\n    content.vb: Public Shared Function IsControl(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a control character; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsControl(String, Int32)\n- uid: System.Char.IsDigit(System.Char)\n  commentId: M:System.Char.IsDigit(System.Char)\n  id: IsDigit(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsDigit(Char)\n  fullName: System.Char.IsDigit(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDigit\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 202\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a decimal digit.</p>\\n\"\n  syntax:\n    content: public static bool IsDigit(char c)\n    content.vb: Public Shared Function IsDigit(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a decimal digit; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Char.IsNumber(System.Char)\n    commentId: M:System.Char.IsNumber(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsDigit(Char)\n- uid: System.Char.IsDigit(System.String,System.Int32)\n  commentId: M:System.Char.IsDigit(System.String,System.Int32)\n  id: IsDigit(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsDigit(String, Int32)\n  fullName: System.Char.IsDigit(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDigit\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 526\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</p>\\n\"\n  syntax:\n    content: public static bool IsDigit(string s, int index)\n    content.vb: Public Shared Function IsDigit(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a decimal digit; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Char.IsNumber(System.Char)\n    commentId: M:System.Char.IsNumber(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsDigit(String, Int32)\n- uid: System.Char.IsHighSurrogate(System.Char)\n  commentId: M:System.Char.IsHighSurrogate(System.Char)\n  id: IsHighSurrogate(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsHighSurrogate(Char)\n  fullName: System.Char.IsHighSurrogate(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsHighSurrogate\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 839\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a high surrogate.</p>\\n\"\n  syntax:\n    content: public static bool IsHighSurrogate(char c)\n    content.vb: Public Shared Function IsHighSurrogate(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the numeric value of the <em>c</em> parameter ranges from U+D800 through U+DBFF; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsHighSurrogate(Char)\n- uid: System.Char.IsHighSurrogate(System.String,System.Int32)\n  commentId: M:System.Char.IsHighSurrogate(System.String,System.Int32)\n  id: IsHighSurrogate(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsHighSurrogate(String, Int32)\n  fullName: System.Char.IsHighSurrogate(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsHighSurrogate\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 844\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified position in a string is a high surrogate.</p>\\n\"\n  syntax:\n    content: public static bool IsHighSurrogate(string s, int index)\n    content.vb: Public Shared Function IsHighSurrogate(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the numeric value of the specified character in the <em>s</em> parameter ranges from U+D800 through U+DBFF; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a position within <em>s</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsHighSurrogate(String, Int32)\n- uid: System.Char.IsLetter(System.Char)\n  commentId: M:System.Char.IsLetter(System.Char)\n  id: IsLetter(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLetter(Char)\n  fullName: System.Char.IsLetter(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLetter\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 231\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a Unicode letter. </p>\\n\"\n  syntax:\n    content: public static bool IsLetter(char c)\n    content.vb: Public Shared Function IsLetter(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a letter; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLetter(Char)\n- uid: System.Char.IsLetter(System.String,System.Int32)\n  commentId: M:System.Char.IsLetter(System.String,System.Int32)\n  id: IsLetter(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLetter(String, Int32)\n  fullName: System.Char.IsLetter(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLetter\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 541\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</p>\\n\"\n  syntax:\n    content: public static bool IsLetter(string s, int index)\n    content.vb: Public Shared Function IsLetter(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a letter; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLetter(String, Int32)\n- uid: System.Char.IsLetterOrDigit(System.Char)\n  commentId: M:System.Char.IsLetterOrDigit(System.Char)\n  id: IsLetterOrDigit(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLetterOrDigit(Char)\n  fullName: System.Char.IsLetterOrDigit(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLetterOrDigit\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 354\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</p>\\n\"\n  syntax:\n    content: public static bool IsLetterOrDigit(char c)\n    content.vb: Public Shared Function IsLetterOrDigit(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a letter or a decimal digit; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLetterOrDigit(Char)\n- uid: System.Char.IsLetterOrDigit(System.String,System.Int32)\n  commentId: M:System.Char.IsLetterOrDigit(System.String,System.Int32)\n  id: IsLetterOrDigit(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLetterOrDigit(String, Int32)\n  fullName: System.Char.IsLetterOrDigit(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLetterOrDigit\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 560\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</p>\\n\"\n  syntax:\n    content: public static bool IsLetterOrDigit(string s, int index)\n    content.vb: Public Shared Function IsLetterOrDigit(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a letter or a decimal digit; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLetterOrDigit(String, Int32)\n- uid: System.Char.IsLower(System.Char)\n  commentId: M:System.Char.IsLower(System.Char)\n  id: IsLower(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLower(Char)\n  fullName: System.Char.IsLower(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLower\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 297\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a lowercase letter.</p>\\n\"\n  syntax:\n    content: public static bool IsLower(char c)\n    content.vb: Public Shared Function IsLower(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a lowercase letter; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Char.IsUpper(System.Char)\n    commentId: M:System.Char.IsUpper(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLower(Char)\n- uid: System.Char.IsLower(System.String,System.Int32)\n  commentId: M:System.Char.IsLower(System.String,System.Int32)\n  id: IsLower(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLower(String, Int32)\n  fullName: System.Char.IsLower(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLower\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 575\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</p>\\n\"\n  syntax:\n    content: public static bool IsLower(string s, int index)\n    content.vb: Public Shared Function IsLower(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a lowercase letter; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Char.IsUpper(System.Char)\n    commentId: M:System.Char.IsUpper(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLower(String, Int32)\n- uid: System.Char.IsLowSurrogate(System.Char)\n  commentId: M:System.Char.IsLowSurrogate(System.Char)\n  id: IsLowSurrogate(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLowSurrogate(Char)\n  fullName: System.Char.IsLowSurrogate(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLowSurrogate\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 859\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a low surrogate.</p>\\n\"\n  syntax:\n    content: public static bool IsLowSurrogate(char c)\n    content.vb: Public Shared Function IsLowSurrogate(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the numeric value of the <em>c</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLowSurrogate(Char)\n- uid: System.Char.IsLowSurrogate(System.String,System.Int32)\n  commentId: M:System.Char.IsLowSurrogate(System.String,System.Int32)\n  id: IsLowSurrogate(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsLowSurrogate(String, Int32)\n  fullName: System.Char.IsLowSurrogate(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLowSurrogate\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 864\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified position in a string is a low surrogate.</p>\\n\"\n  syntax:\n    content: public static bool IsLowSurrogate(string s, int index)\n    content.vb: Public Shared Function IsLowSurrogate(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the numeric value of the specified character in the <em>s</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a position within <em>s</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsLowSurrogate(String, Int32)\n- uid: System.Char.IsNumber(System.Char)\n  commentId: M:System.Char.IsNumber(System.Char)\n  id: IsNumber(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsNumber(Char)\n  fullName: System.Char.IsNumber(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNumber\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 608\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a number.</p>\\n\"\n  syntax:\n    content: public static bool IsNumber(char c)\n    content.vb: Public Shared Function IsNumber(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a number; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Char.IsDigit(System.Char)\n    commentId: M:System.Char.IsDigit(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsNumber(Char)\n- uid: System.Char.IsNumber(System.String,System.Int32)\n  commentId: M:System.Char.IsNumber(System.String,System.Int32)\n  id: IsNumber(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsNumber(String, Int32)\n  fullName: System.Char.IsNumber(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNumber\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 619\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a number.</p>\\n\"\n  syntax:\n    content: public static bool IsNumber(string s, int index)\n    content.vb: Public Shared Function IsNumber(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a number; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Char.IsDigit(System.Char)\n    commentId: M:System.Char.IsDigit(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsNumber(String, Int32)\n- uid: System.Char.IsPunctuation(System.Char)\n  commentId: M:System.Char.IsPunctuation(System.Char)\n  id: IsPunctuation(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsPunctuation(Char)\n  fullName: System.Char.IsPunctuation(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPunctuation\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 329\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a punctuation mark.</p>\\n\"\n  syntax:\n    content: public static bool IsPunctuation(char c)\n    content.vb: Public Shared Function IsPunctuation(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a punctuation mark; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsPunctuation(Char)\n- uid: System.Char.IsPunctuation(System.String,System.Int32)\n  commentId: M:System.Char.IsPunctuation(System.String,System.Int32)\n  id: IsPunctuation(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsPunctuation(String, Int32)\n  fullName: System.Char.IsPunctuation(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPunctuation\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 645\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</p>\\n\"\n  syntax:\n    content: public static bool IsPunctuation(string s, int index)\n    content.vb: Public Shared Function IsPunctuation(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a punctuation mark; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsPunctuation(String, Int32)\n- uid: System.Char.IsSeparator(System.Char)\n  commentId: M:System.Char.IsSeparator(System.Char)\n  id: IsSeparator(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSeparator(Char)\n  fullName: System.Char.IsSeparator(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSeparator\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 682\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a separator character.</p>\\n\"\n  syntax:\n    content: public static bool IsSeparator(char c)\n    content.vb: Public Shared Function IsSeparator(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a separator character; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSeparator(Char)\n- uid: System.Char.IsSeparator(System.String,System.Int32)\n  commentId: M:System.Char.IsSeparator(System.String,System.Int32)\n  id: IsSeparator(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSeparator(String, Int32)\n  fullName: System.Char.IsSeparator(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSeparator\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 690\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</p>\\n\"\n  syntax:\n    content: public static bool IsSeparator(string s, int index)\n    content.vb: Public Shared Function IsSeparator(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a separator character; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSeparator(String, Int32)\n- uid: System.Char.IsSurrogate(System.Char)\n  commentId: M:System.Char.IsSurrogate(System.Char)\n  id: IsSurrogate(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSurrogate(Char)\n  fullName: System.Char.IsSurrogate(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSurrogate\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 705\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified character has a surrogate code unit.</p>\\n\"\n  syntax:\n    content: public static bool IsSurrogate(char c)\n    content.vb: Public Shared Function IsSurrogate(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is either a high surrogate or a low surrogate; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Char.IsHighSurrogate(System.Char)\n    commentId: M:System.Char.IsHighSurrogate(System.Char)\n  - type: System.Char.IsLowSurrogate(System.Char)\n    commentId: M:System.Char.IsLowSurrogate(System.Char)\n  - type: System.Char.IsSurrogatePair(System.Char,System.Char)\n    commentId: M:System.Char.IsSurrogatePair(System.Char,System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSurrogate(Char)\n- uid: System.Char.IsSurrogate(System.String,System.Int32)\n  commentId: M:System.Char.IsSurrogate(System.String,System.Int32)\n  id: IsSurrogate(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSurrogate(String, Int32)\n  fullName: System.Char.IsSurrogate(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSurrogate\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 711\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</p>\\n\"\n  syntax:\n    content: public static bool IsSurrogate(string s, int index)\n    content.vb: Public Shared Function IsSurrogate(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a either a high surrogate or a low surrogate; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Char.IsHighSurrogate(System.Char)\n    commentId: M:System.Char.IsHighSurrogate(System.Char)\n  - type: System.Char.IsLowSurrogate(System.Char)\n    commentId: M:System.Char.IsLowSurrogate(System.Char)\n  - type: System.Char.IsSurrogatePair(System.Char,System.Char)\n    commentId: M:System.Char.IsSurrogatePair(System.Char,System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSurrogate(String, Int32)\n- uid: System.Char.IsSurrogatePair(System.Char,System.Char)\n  commentId: M:System.Char.IsSurrogatePair(System.Char,System.Char)\n  id: IsSurrogatePair(System.Char,System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSurrogatePair(Char, Char)\n  fullName: System.Char.IsSurrogatePair(System.Char, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSurrogatePair\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 894\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the two specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects form a surrogate pair.</p>\\n\"\n  syntax:\n    content: public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate)\n    content.vb: Public Shared Function IsSurrogatePair(highSurrogate As Char, lowSurrogate As Char) As Boolean\n    parameters:\n    - id: highSurrogate\n      type: System.Char\n      description: \"\\n<p>The character to evaluate as the high surrogate of a surrogate pair. </p>\\n\"\n    - id: lowSurrogate\n      type: System.Char\n      description: \"\\n<p>The character to evaluate as the low surrogate of a surrogate pair. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the numeric value of the <em>highSurrogate</em> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <em>lowSurrogate</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Char.IsHighSurrogate(System.Char)\n    commentId: M:System.Char.IsHighSurrogate(System.Char)\n  - type: System.Char.IsLowSurrogate(System.Char)\n    commentId: M:System.Char.IsLowSurrogate(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSurrogatePair(Char, Char)\n- uid: System.Char.IsSurrogatePair(System.String,System.Int32)\n  commentId: M:System.Char.IsSurrogatePair(System.String,System.Int32)\n  id: IsSurrogatePair(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSurrogatePair(String, Int32)\n  fullName: System.Char.IsSurrogatePair(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSurrogatePair\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 879\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two adjacent <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects at a specified position in a string form a surrogate pair.</p>\\n\"\n  syntax:\n    content: public static bool IsSurrogatePair(string s, int index)\n    content.vb: Public Shared Function IsSurrogatePair(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting position of the pair of characters to evaluate within <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter includes adjacent characters at positions <em>index</em> and <em>index</em> + 1, and the numeric value of the character at position <em>index</em> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <em>index</em>+1 ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a position within <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Char.IsHighSurrogate(System.Char)\n    commentId: M:System.Char.IsHighSurrogate(System.Char)\n  - type: System.Char.IsLowSurrogate(System.Char)\n    commentId: M:System.Char.IsLowSurrogate(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSurrogatePair(String, Int32)\n- uid: System.Char.IsSymbol(System.Char)\n  commentId: M:System.Char.IsSymbol(System.Char)\n  id: IsSymbol(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSymbol(Char)\n  fullName: System.Char.IsSymbol(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSymbol\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 739\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as a symbol character.</p>\\n\"\n  syntax:\n    content: public static bool IsSymbol(char c)\n    content.vb: Public Shared Function IsSymbol(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is a symbol character; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSymbol(Char)\n- uid: System.Char.IsSymbol(System.String,System.Int32)\n  commentId: M:System.Char.IsSymbol(System.String,System.Int32)\n  id: IsSymbol(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsSymbol(String, Int32)\n  fullName: System.Char.IsSymbol(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSymbol\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 747\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</p>\\n\"\n  syntax:\n    content: public static bool IsSymbol(string s, int index)\n    content.vb: Public Shared Function IsSymbol(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a symbol character; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsSymbol(String, Int32)\n- uid: System.Char.IsUpper(System.Char)\n  commentId: M:System.Char.IsUpper(System.Char)\n  id: IsUpper(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsUpper(Char)\n  fullName: System.Char.IsUpper(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsUpper\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 281\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as an uppercase letter.</p>\\n\"\n  syntax:\n    content: public static bool IsUpper(char c)\n    content.vb: Public Shared Function IsUpper(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is an uppercase letter; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Char.IsLower(System.Char)\n    commentId: M:System.Char.IsLower(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsUpper(Char)\n- uid: System.Char.IsUpper(System.String,System.Int32)\n  commentId: M:System.Char.IsUpper(System.String,System.Int32)\n  id: IsUpper(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsUpper(String, Int32)\n  fullName: System.Char.IsUpper(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsUpper\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 762\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</p>\\n\"\n  syntax:\n    content: public static bool IsUpper(string s, int index)\n    content.vb: Public Shared Function IsUpper(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is an uppercase letter; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsUpper(String, Int32)\n- uid: System.Char.IsWhiteSpace(System.Char)\n  commentId: M:System.Char.IsWhiteSpace(System.Char)\n  id: IsWhiteSpace(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsWhiteSpace(Char)\n  fullName: System.Char.IsWhiteSpace(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsWhiteSpace\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 266\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified Unicode character is categorized as white space.</p>\\n\"\n  syntax:\n    content: public static bool IsWhiteSpace(char c)\n    content.vb: Public Shared Function IsWhiteSpace(c As Char) As Boolean\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to evaluate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>c</em> is white space; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsWhiteSpace(Char)\n- uid: System.Char.IsWhiteSpace(System.String,System.Int32)\n  commentId: M:System.Char.IsWhiteSpace(System.String,System.Int32)\n  id: IsWhiteSpace(System.String,System.Int32)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IsWhiteSpace(String, Int32)\n  fullName: System.Char.IsWhiteSpace(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsWhiteSpace\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 781\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the character at the specified position in a specified string is categorized as white space.</p>\\n\"\n  syntax:\n    content: public static bool IsWhiteSpace(string s, int index)\n    content.vb: Public Shared Function IsWhiteSpace(s As String, index As Integer) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character to evaluate in <em>s</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is white space; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.IsWhiteSpace(String, Int32)\n- uid: System.Char.Parse(System.String)\n  commentId: M:System.Char.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Char.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 170\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified string to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: public static char Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As Char\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a single character, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character equivalent to the sole character in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>s</em> is not 1. </p>\\n\"\n  seealso:\n  - type: System.Char.ToString\n    commentId: M:System.Char.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.Parse(String)\n- uid: System.Char.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Char.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Char.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 365\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Char.IComparable.CompareTo(Object)\n  nameWithType.vb: Char.System.IComparable.CompareTo(Object)\n- uid: System.Char.System#IConvertible#GetTypeCode\n  commentId: M:System.Char.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.Char.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 366\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: Char.IConvertible.GetTypeCode()\n  nameWithType.vb: Char.System.IConvertible.GetTypeCode()\n- uid: System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 429\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This conversion is not supported. No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.</p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: Char.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 444\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: Char.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 434\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToChar(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object unchanged.</p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: Char.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 494\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: Char.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 489\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: Char.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 484\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: Char.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 449\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p> For a description of this member, see <xref href=\\\"System.IConvertible.ToInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: Char.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 459\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: Char.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 469\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p> For a description of this member, see <xref href=\\\"System.IConvertible.ToInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: Char.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 439\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p> For a description of this member, see <xref href=\\\"System.IConvertible.ToSByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: Char.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 479\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: Char.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToString(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToString(System.IFormatProvider)\n  id: System#IConvertible#ToString(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToString(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.ToString\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 378\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: string IConvertible.ToString(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n    return:\n      type: System.String\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  name.vb: System.IConvertible.ToString(IFormatProvider)\n  nameWithType: Char.IConvertible.ToString(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToString(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 499\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object of the specified type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be converted to the type specified by the <em>type</em> parameter. </p>\\n\"\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: Char.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 454\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. (Specify <strong>null</strong> because the <em>provider</em> parameter is ignored.)</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: Char.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 464\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. (Specify <strong>null</strong> because the <em>provider</em> parameter is ignored.)</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: Char.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.Char.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 474\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. (Specify <strong>null</strong> because the <em>provider</em> parameter is ignored.)</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: Char.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: Char.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.Char.ToLower(System.Char)\n  commentId: M:System.Char.ToLower(System.Char)\n  id: ToLower(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ToLower(Char)\n  fullName: System.Char.ToLower(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLower\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 409\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a Unicode character to its lowercase equivalent.</p>\\n\"\n  syntax:\n    content: public static char ToLower(char c)\n    content.vb: Public Shared Function ToLower(c As Char) As Char\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The lowercase equivalent of <em>c</em>, or the unchanged value of <em>c</em>, if <em>c</em> is already lowercase or not alphabetic.</p>\\n\"\n  seealso:\n  - type: System.String.ToLower\n    commentId: M:System.String.ToLower\n  - type: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)\n    commentId: M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ToLower(Char)\n- uid: System.Char.ToLowerInvariant(System.Char)\n  commentId: M:System.Char.ToLowerInvariant(System.Char)\n  id: ToLowerInvariant(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ToLowerInvariant(Char)\n  fullName: System.Char.ToLowerInvariant(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLowerInvariant\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 415\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</p>\\n\"\n  syntax:\n    content: public static char ToLowerInvariant(char c)\n    content.vb: Public Shared Function ToLowerInvariant(c As Char) As Char\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The lowercase equivalent of the <em>c</em> parameter, or the unchanged value of <em>c</em>, if <em>c</em> is already lowercase or not alphabetic.</p>\\n\"\n  seealso:\n  - type: System.String.ToLower\n    commentId: M:System.String.ToLower\n  - type: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)\n    commentId: M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ToLowerInvariant(Char)\n- uid: System.Char.ToString\n  commentId: M:System.Char.ToString\n  id: ToString\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Char.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 144\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Char.Parse(System.String)\n    commentId: M:System.Char.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Char.ToString()\n- uid: System.Char.ToString(System.Char)\n  commentId: M:System.Char.ToString(System.Char)\n  id: ToString(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ToString(Char)\n  fullName: System.Char.ToString(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 164\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified Unicode character to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(char c)\n    content.vb: Public Shared Function ToString(c As Char) As String\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of <em>c</em>.</p>\\n\"\n  seealso:\n  - type: System.Char.Parse(System.String)\n    commentId: M:System.Char.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ToString(Char)\n- uid: System.Char.ToUpper(System.Char)\n  commentId: M:System.Char.ToUpper(System.Char)\n  id: ToUpper(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ToUpper(Char)\n  fullName: System.Char.ToUpper(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUpper\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 381\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a Unicode character to its uppercase equivalent.</p>\\n\"\n  syntax:\n    content: public static char ToUpper(char c)\n    content.vb: Public Shared Function ToUpper(c As Char) As Char\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The uppercase equivalent of <em>c</em>, or the unchanged value of <em>c</em> if <em>c</em> is already uppercase, has no uppercase equivalent, or is not alphabetic.</p>\\n\"\n  seealso:\n  - type: System.String.ToUpper\n    commentId: M:System.String.ToUpper\n  - type: System.Char.ToLower(System.Char,System.Globalization.CultureInfo)\n    commentId: M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ToUpper(Char)\n- uid: System.Char.ToUpperInvariant(System.Char)\n  commentId: M:System.Char.ToUpperInvariant(System.Char)\n  id: ToUpperInvariant(System.Char)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: ToUpperInvariant(Char)\n  fullName: System.Char.ToUpperInvariant(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUpperInvariant\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 387\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</p>\\n\"\n  syntax:\n    content: public static char ToUpperInvariant(char c)\n    content.vb: Public Shared Function ToUpperInvariant(c As Char) As Char\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The uppercase equivalent of the <em>c</em> parameter, or the unchanged value of <em>c</em>, if <em>c</em> is already uppercase or not alphabetic.</p>\\n\"\n  seealso:\n  - type: System.String.ToUpper\n    commentId: M:System.String.ToUpper\n  - type: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)\n    commentId: M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Char.ToUpperInvariant(Char)\n- uid: System.Char.TryParse(System.String,System.Char@)\n  commentId: M:System.Char.TryParse(System.String,System.Char@)\n  id: TryParse(System.String,System.Char@)\n  parent: System.Char\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out Char)\n  fullName: System.Char.TryParse(System.String, out System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Char.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Char.cs\n    startLine: 182\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, out char result)\n    content.vb: Public Shared Function TryParse(s As String, ByRef result As Char) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a single character, or <strong>null</strong>. </p>\\n\"\n    - id: result\n      type: System.Char\n      description: \"\\n<p>When this method returns, contains a Unicode character equivalent to the sole character in <em>s</em>, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or the length of <em>s</em> is not 1. This parameter is passed uninitialized. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Char.Parse(System.String)\n    commentId: M:System.Char.Parse(System.String)\n  - type: System.Char.ToString\n    commentId: M:System.Char.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Char.TryParse(System.String, ByRef System.Char)\n  name.vb: TryParse(String, ByRef Char)\n  nameWithType: Char.TryParse(String, out Char)\n  nameWithType.vb: Char.TryParse(String, ByRef Char)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.Char}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<Char>\n  fullName: System.IComparable<System.Char>\n  fullname.vb: System.IComparable(Of System.Char)\n  name.vb: IComparable(Of Char)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Char>\n  nameWithType.vb: IComparable(Of Char)\n  commentId: T:System.IComparable{System.Char}\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IEquatable{System.Char}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Char>\n  fullName: System.IEquatable<System.Char>\n  fullname.vb: System.IEquatable(Of System.Char)\n  name.vb: IEquatable(Of Char)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Char>\n  nameWithType.vb: IEquatable(Of Char)\n  commentId: T:System.IEquatable{System.Char}\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.IComparable{System.Char}.CompareTo(System.Char)\n  parent: System.IComparable{System.Char}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(Char)\n  fullName: System.IComparable<System.Char>.CompareTo(System.Char)\n  fullname.vb: System.IComparable(Of System.Char).CompareTo(System.Char)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Char>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Char).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Char>.CompareTo(Char)\n  nameWithType.vb: IComparable(Of Char).CompareTo(Char)\n  commentId: M:System.IComparable{System.Char}.CompareTo(System.Char)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IEquatable{System.Char}.Equals(System.Char)\n  parent: System.IEquatable{System.Char}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Char)\n  fullName: System.IEquatable<System.Char>.Equals(System.Char)\n  fullname.vb: System.IEquatable(Of System.Char).Equals(System.Char)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Char>.Equals\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Char).Equals\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Char>.Equals(Char)\n  nameWithType.vb: IEquatable(Of Char).Equals(Char)\n  commentId: M:System.IEquatable{System.Char}.Equals(System.Char)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}