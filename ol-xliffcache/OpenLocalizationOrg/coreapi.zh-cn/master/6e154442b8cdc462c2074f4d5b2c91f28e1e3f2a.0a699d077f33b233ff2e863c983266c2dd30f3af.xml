{"nodes":[{"pos":[657,676],"content":"AlgorithmIdentifier","needQuote":true,"nodes":[{"content":"AlgorithmIdentifier","pos":[0,19]}]},{"pos":[2604,2625],"content":"AlgorithmIdentifier()","needQuote":true,"nodes":[{"content":"AlgorithmIdentifier()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A cryptographic operation could not be completed.&lt;/p&gt;\\n","pos":[3729,3789],"source":"\\n<p>A cryptographic operation could not be completed.</p>\\n"},{"pos":[4264,4288],"content":"AlgorithmIdentifier(Oid)","needQuote":true,"nodes":[{"content":"AlgorithmIdentifier(Oid)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An object identifier for the algorithm.&lt;/p&gt;\\n","pos":[5411,5461],"source":"\\n<p>An object identifier for the algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;A cryptographic operation could not be completed.&lt;/p&gt;\\n","pos":[5626,5686],"source":"\\n<p>A cryptographic operation could not be completed.</p>\\n"},{"pos":[6203,6234],"content":"AlgorithmIdentifier(Oid, Int32)","needQuote":true,"nodes":[{"content":"AlgorithmIdentifier(Oid, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An object identifier for the algorithm.&lt;/p&gt;\\n","pos":[7436,7486],"source":"\\n<p>An object identifier for the algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;The length, in bits, of the key.&lt;/p&gt;\\n","pos":[7553,7596],"source":"\\n<p>The length, in bits, of the key.</p>\\n"},{"content":"\\n&lt;p&gt;A cryptographic operation could not be completed.&lt;/p&gt;\\n","pos":[7761,7821],"source":"\\n<p>A cryptographic operation could not be completed.</p>\\n"},{"pos":[8214,8223],"content":"KeyLength","needQuote":true,"nodes":[{"content":"KeyLength","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An int value that represents the key length, in bits.&lt;/p&gt;\\n","pos":[9287,9351],"source":"\\n<p>An int value that represents the key length, in bits.</p>\\n"},{"pos":[10031,10034],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[11814,11847],"content":"System.Security.Cryptography.Pkcs","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.Pkcs","pos":[0,33]}]},{"pos":[12059,12065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12225,12235],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12330,12338],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12407,12408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12435,12436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12506,12514],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12583,12584],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12611,12612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12795,12809],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12928,12934],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13001,13002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13052,13058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13118,13119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13202,13208],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13275,13276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13326,13332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13392,13393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13607,13629],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13777,13783],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13850,13851],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13901,13907],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13968,13969]},{"pos":[14024,14030],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14090,14091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14188,14194],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14261,14262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14312,14318],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14379,14380]},{"pos":[14435,14441],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14501,14502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14747,14778],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14944,14959],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15035,15036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15086,15092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15153,15154]},{"pos":[15209,15215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15275,15276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15382,15397],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15473,15474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15524,15530],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15591,15592]},{"pos":[15647,15653],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15713,15714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15944,15957],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16058,16069],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16141,16142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16169,16170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16243,16254],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16326,16327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16354,16355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16530,16539],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[16632,16639],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16707,16708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16735,16736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16805,16812],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16880,16881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16908,16909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17084,17101],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17210,17225],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17301,17302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17329,17330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17407,17422],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17498,17499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17526,17527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17672,17678],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17850,17853],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[18031,18059],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[18255,18260],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18423,18445],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  commentId: T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  id: AlgorithmIdentifier\n  parent: System.Security.Cryptography.Pkcs\n  children:\n  - System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor\n  - System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)\n  - System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)\n  - System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\n  - System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmIdentifier\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AlgorithmIdentifier\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 43\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class defines the algorithm used for a cryptographic operation.</p>\\n\"\n  syntax:\n    content: public sealed class AlgorithmIdentifier\n    content.vb: Public NotInheritable Class AlgorithmIdentifier\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.EnvelopedCms.ContentEncryptionAlgorithm\n    commentId: P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentEncryptionAlgorithm\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AlgorithmIdentifier\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor\n  commentId: M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmIdentifier()\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.AlgorithmIdentifier()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 45\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor creates an instance of the <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using a set of default parameters. </p>\\n\"\n  syntax:\n    content: public AlgorithmIdentifier()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>A cryptographic operation could not be completed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AlgorithmIdentifier.AlgorithmIdentifier()\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)\n  commentId: M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)\n  id: '#ctor(System.Security.Cryptography.Oid)'\n  parent: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmIdentifier(Oid)\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.AlgorithmIdentifier(System.Security.Cryptography.Oid)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 46\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor creates an instance of the <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified algorithm identifier.</p>\\n\"\n  syntax:\n    content: public AlgorithmIdentifier(Oid oid)\n    content.vb: Public Sub New(oid As Oid)\n    parameters:\n    - id: oid\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An object identifier for the algorithm.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>A cryptographic operation could not be completed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AlgorithmIdentifier.AlgorithmIdentifier(Oid)\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)\n  commentId: M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)\n  id: '#ctor(System.Security.Cryptography.Oid,System.Int32)'\n  parent: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmIdentifier(Oid, Int32)\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.AlgorithmIdentifier(System.Security.Cryptography.Oid, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 47\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor creates an instance of the <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified algorithm identifier and key length.</p>\\n\"\n  syntax:\n    content: public AlgorithmIdentifier(Oid oid, int keyLength)\n    content.vb: Public Sub New(oid As Oid, keyLength As Integer)\n    parameters:\n    - id: oid\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An object identifier for the algorithm.</p>\\n\"\n    - id: keyLength\n      type: System.Int32\n      description: \"\\n<p>The length, in bits, of the key.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>A cryptographic operation could not be completed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AlgorithmIdentifier.AlgorithmIdentifier(Oid, Int32)\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\n  commentId: P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\n  id: KeyLength\n  parent: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  langs:\n  - csharp\n  - vb\n  name: KeyLength\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyLength\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 48\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property sets or retrieves the key length, in bits. This property is not used for algorithms that use a fixed key length.</p>\\n\"\n  syntax:\n    content: >-\n      public int KeyLength\n\n      {\n          [CompilerGenerated]\n          get;\n          [CompilerGenerated]\n          set;\n      }\n    content.vb: Public Property KeyLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An int value that represents the key length, in bits.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\n    commentId: P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\n  - type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters\n    commentId: P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AlgorithmIdentifier.KeyLength\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\n  commentId: P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\n  id: Oid\n  parent: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  langs:\n  - csharp\n  - vb\n  name: Oid\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Oid\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 49\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property sets or retrieves the <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object that specifies the object identifier for the algorithm.</p>\\n\"\n  syntax:\n    content: >-\n      public Oid Oid\n\n      {\n          [CompilerGenerated]\n          get;\n          [CompilerGenerated]\n          set;\n      }\n    content.vb: Public Property Oid As Oid\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the algorithm.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\n    commentId: P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength\n  - type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters\n    commentId: P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AlgorithmIdentifier.Oid\nreferences:\n- uid: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: System.Security.Cryptography.Pkcs\n  fullName: System.Security.Cryptography.Pkcs\n  commentId: N:System.Security.Cryptography.Pkcs\n  nameWithType: System.Security.Cryptography.Pkcs\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  fullName: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  nameWithType: Oid\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}