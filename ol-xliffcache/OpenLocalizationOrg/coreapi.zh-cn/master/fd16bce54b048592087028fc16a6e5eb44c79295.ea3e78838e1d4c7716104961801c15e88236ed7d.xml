{"nodes":[{"pos":[573,591],"content":"List<T>.Enumerator","needQuote":true,"nodes":[{"content":"List&lt;T&gt;.Enumerator","pos":[0,18],"source":"List<T>.Enumerator"}]},{"pos":[2789,2796],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[4523,4542],"content":"IEnumerator.Current","needQuote":true,"nodes":[{"content":"IEnumerator.Current","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[5657,5760],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[5761,5767],"source":" </p>\\n"},{"pos":[6711,6720],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[7889,7899],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the enumerator was successfully advanced to the next element; &lt;strong&gt;false&lt;/strong&gt; if the enumerator has passed the end of the collection.&lt;/p&gt;\\n","pos":[8644,8822],"source":"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[8949,9015],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[9016,9022],"source":" </p>\\n"},{"pos":[9790,9809],"content":"IEnumerator.Reset()","needQuote":true,"nodes":[{"content":"IEnumerator.Reset()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[10664,10730],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[10731,10737],"source":" </p>\\n"},{"pos":[11468,11494],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[11770,11784],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[12003,12014],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[12078,12079],"content":"<","needQuote":true,"nodes":[]},{"pos":[12106,12107],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[12227,12238],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[12303,12306]},{"pos":[12340,12341],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[12368,12369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12607,12618],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[12807,12818],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[13012,13026],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13151,13157],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13206,13207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13257,13263],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13323,13324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13410,13416],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13465,13466],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13516,13522],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13582,13583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13786,13799],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13906,13917],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13971,13972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13999,14000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14076,14087],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14141,14142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14169,14170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14359,14369],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14470,14478],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14529,14530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14557,14558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14631,14639],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14690,14691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14718,14719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14922,14944],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15092,15098],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15165,15166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15216,15222],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15283,15284]},{"pos":[15339,15345],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15405,15406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15503,15509],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15576,15577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15627,15633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15694,15695]},{"pos":[15750,15756],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15816,15817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16062,16093],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16259,16274],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16350,16351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16401,16407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16468,16469]},{"pos":[16524,16530],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16590,16591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16697,16712],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16788,16789],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16839,16845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16906,16907]},{"pos":[16962,16968],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17028,17029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17255,17264],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17357,17364],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17432,17433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17460,17461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17530,17537],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17605,17606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17633,17634],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17797,17811],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[18030,18041],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[18105,18106],"content":"<","needQuote":true,"nodes":[]},{"pos":[18133,18134],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18254,18265],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[18330,18333]},{"pos":[18367,18368],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18395,18396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18591,18609],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[18752,18758],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18892,18901],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[19055,19061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19324,19331],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[19649,19650],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19785,19792],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[20108,20109],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20257,20264],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[20497,20506],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[20609,20616],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20668,20669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20696,20697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20771,20778],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20830,20831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20858,20859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21072,21082],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[21211,21219],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[21284,21285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21312,21313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21400,21408],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[21473,21474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21501,21502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21680,21687],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21882,21889],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[22012,22017],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[22079,22080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22107,22108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22192,22197],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[22259,22260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22287,22288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22478,22503],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.Generic.List`1.Enumerator\n  commentId: T:System.Collections.Generic.List`1.Enumerator\n  id: List`1.Enumerator\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.List`1.Enumerator.Current\n  - System.Collections.Generic.List`1.Enumerator.Dispose\n  - System.Collections.Generic.List`1.Enumerator.MoveNext\n  - System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current\n  - System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset\n  langs:\n  - csharp\n  - vb\n  name: List<T>.Enumerator\n  fullName: System.Collections.Generic.List<T>.Enumerator\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/List.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Enumerator\n    path: src/mscorlib/src/System/Collections/Generic/List.cs\n    startLine: 1053\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Enumerates the elements of a <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public struct Enumerator : IEnumerator<T>, IDisposable, IEnumerator\n    content.vb: >-\n      <Serializable>\n\n      Public Structure Enumerator\n          Implements IEnumerator(Of T), IDisposable, IEnumerator\n  seealso:\n  - type: System.Collections.Generic.IEnumerable`1\n    commentId: T:System.Collections.Generic.IEnumerable`1\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerator{{T}}\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Collections.Generic.List(Of T).Enumerator\n  name.vb: List(Of T).Enumerator\n  nameWithType: List<T>.Enumerator\n  nameWithType.vb: List(Of T).Enumerator\n- uid: System.Collections.Generic.List`1.Enumerator.Current\n  commentId: P:System.Collections.Generic.List`1.Enumerator.Current\n  id: Current\n  parent: System.Collections.Generic.List`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Collections.Generic.List<T>.Enumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/List.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Current\n    path: src/mscorlib/src/System/Collections/Generic/List.cs\n    startLine: 1095\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: public T Current { get; }\n    content.vb: Public ReadOnly Property Current As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element in the <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the current position of the enumerator.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.List`1.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.List`1.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.Generic.IEnumerator{{T}}.Current\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.List(Of T).Enumerator.Current\n  nameWithType: List<T>.Enumerator.Current\n  nameWithType.vb: List(Of T).Enumerator.Current\n- uid: System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current\n  commentId: P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Collections.Generic.List`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Current\n  fullName: System.Collections.Generic.List<T>.Enumerator.System.Collections.IEnumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/List.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerator.Current\n    path: src/mscorlib/src/System/Collections/Generic/List.cs\n    startLine: 1101\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IEnumerator.Current { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The element in the <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Current\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.List(Of T).Enumerator.System.Collections.IEnumerator.Current\n  name.vb: System.Collections.IEnumerator.Current\n  nameWithType: List<T>.Enumerator.IEnumerator.Current\n  nameWithType.vb: List(Of T).Enumerator.System.Collections.IEnumerator.Current\n- uid: System.Collections.Generic.List`1.Enumerator.Dispose\n  commentId: M:System.Collections.Generic.List`1.Enumerator.Dispose\n  id: Dispose\n  parent: System.Collections.Generic.List`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Collections.Generic.List<T>.Enumerator.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/List.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Collections/Generic/List.cs\n    startLine: 1068\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Collections.Generic.List`1.Enumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.List(Of T).Enumerator.Dispose()\n  nameWithType: List<T>.Enumerator.Dispose()\n  nameWithType.vb: List(Of T).Enumerator.Dispose()\n- uid: System.Collections.Generic.List`1.Enumerator.MoveNext\n  commentId: M:System.Collections.Generic.List`1.Enumerator.MoveNext\n  id: MoveNext\n  parent: System.Collections.Generic.List`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: MoveNext()\n  fullName: System.Collections.Generic.List<T>.Enumerator.MoveNext()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/List.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MoveNext\n    path: src/mscorlib/src/System/Collections/Generic/List.cs\n    startLine: 1071\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Advances the enumerator to the next element of the <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool MoveNext()\n    content.vb: Public Function MoveNext As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.List`1.Enumerator.Current\n    commentId: P:System.Collections.Generic.List`1.Enumerator.Current\n  implements:\n  - System.Collections.IEnumerator.MoveNext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.List(Of T).Enumerator.MoveNext()\n  nameWithType: List<T>.Enumerator.MoveNext()\n  nameWithType.vb: List(Of T).Enumerator.MoveNext()\n- uid: System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset\n  commentId: M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset\n  id: System#Collections#IEnumerator#Reset\n  isEii: true\n  parent: System.Collections.Generic.List`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Reset()\n  fullName: System.Collections.Generic.List<T>.Enumerator.System.Collections.IEnumerator.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/List.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerator.Reset\n    path: src/mscorlib/src/System/Collections/Generic/List.cs\n    startLine: 1110\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\\n\"\n  syntax:\n    content: void IEnumerator.Reset()\n    content.vb: Sub System.Collections.IEnumerator.Reset Implements IEnumerator.Reset\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IEnumerator.Current\n    commentId: P:System.Collections.IEnumerator.Current\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Reset\n  fullName.vb: System.Collections.Generic.List(Of T).Enumerator.System.Collections.IEnumerator.Reset()\n  name.vb: System.Collections.IEnumerator.Reset()\n  nameWithType: List<T>.Enumerator.IEnumerator.Reset()\n  nameWithType.vb: List(Of T).Enumerator.System.Collections.IEnumerator.Reset()\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerator{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator{`0}\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEnumerator{{T}}.Current\n  parent: System.Collections.Generic.IEnumerator{{T}}\n  definition: System.Collections.Generic.IEnumerator`1.Current\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator{`0}.Current\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  isExternal: true\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator`1.Current\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.IEnumerator.Current\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Current\n  fullName: System.Collections.IEnumerator.Current\n  nameWithType: IEnumerator.Current\n  commentId: P:System.Collections.IEnumerator.Current\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Collections.IEnumerator.MoveNext\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: MoveNext()\n  fullName: System.Collections.IEnumerator.MoveNext()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.MoveNext()\n  commentId: M:System.Collections.IEnumerator.MoveNext\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IEnumerator.Reset\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Reset()\n  fullName: System.Collections.IEnumerator.Reset()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.Reset()\n  commentId: M:System.Collections.IEnumerator.Reset\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}