{"nodes":[{"pos":[667,687],"content":"DataContractResolver","needQuote":true,"nodes":[{"content":"DataContractResolver","pos":[0,20]}]},{"pos":[2185,2207],"content":"DataContractResolver()","needQuote":true,"nodes":[{"content":"DataContractResolver()","pos":[0,22]}]},{"pos":[3628,3683],"content":"ResolveName(String, String, Type, DataContractResolver)","needQuote":true,"nodes":[{"content":"ResolveName(String, String, Type, DataContractResolver)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;xsi:type&lt;/strong&gt; name to map.&lt;/p&gt;\\n","pos":[4835,4888],"source":"\\n<p>The <strong>xsi:type</strong> name to map.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;xsi:type&lt;/strong&gt; namespace to map.&lt;/p&gt;\\n","pos":[4960,5018],"source":"\\n<p>The <strong>xsi:type</strong> namespace to map.</p>\\n"},{"content":"\\n&lt;p&gt;The type declared in the data contract.&lt;/p&gt;\\n","pos":[5087,5137],"source":"\\n<p>The type declared in the data contract.</p>\\n"},{"content":"\\n&lt;p&gt;The known type resolver.&lt;/p&gt;\\n","pos":[5249,5284],"source":"\\n<p>The known type resolver.</p>\\n"},{"content":"\\n&lt;p&gt;The type the &lt;strong&gt;xsi:type&lt;/strong&gt; name and namespace is mapped to.","pos":[5342,5418],"source":"\\n<p>The type the <strong>xsi:type</strong> name and namespace is mapped to."},{"content":"&lt;/p&gt;\\n","pos":[5419,5425],"source":" </p>\\n"},{"pos":[6293,6391],"content":"TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)","needQuote":true,"nodes":[{"content":"TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)","pos":[0,98]}]},{"content":"\\n&lt;p&gt;The type to map.&lt;/p&gt;\\n","pos":[7691,7718],"source":"\\n<p>The type to map.</p>\\n"},{"content":"\\n&lt;p&gt;The type declared in the data contract.&lt;/p&gt;\\n","pos":[7787,7837],"source":"\\n<p>The type declared in the data contract.</p>\\n"},{"content":"\\n&lt;p&gt;The known type resolver.&lt;/p&gt;\\n","pos":[7949,7984],"source":"\\n<p>The known type resolver.</p>\\n"},{"content":"\\n&lt;p&gt;The xsi:type name.&lt;/p&gt;\\n","pos":[8068,8097],"source":"\\n<p>The xsi:type name.</p>\\n"},{"content":"\\n&lt;p&gt;The xsi:type namespace.&lt;/p&gt;\\n","pos":[8186,8220],"source":"\\n<p>The xsi:type namespace.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if mapping succeeded; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8281,8372],"source":"\\n<p>\\n<strong>true</strong> if mapping succeeded; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9164,9192],"content":"System.Runtime.Serialization","needQuote":true,"nodes":[{"content":"System.Runtime.Serialization","pos":[0,28]}]},{"pos":[9389,9395],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9555,9565],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9660,9668],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9737,9738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9765,9766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9836,9844],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9913,9914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9941,9942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10125,10139],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[10258,10264],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10331,10332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10382,10388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10448,10449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10532,10538],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10605,10606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10656,10662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10722,10723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10937,10959],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11107,11113],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11180,11181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11231,11237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11298,11299]},{"pos":[11354,11360],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11420,11421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11518,11524],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11591,11592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11642,11648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11709,11710]},{"pos":[11765,11771],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11831,11832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12077,12108],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12274,12289],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12365,12366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12416,12422],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12483,12484]},{"pos":[12539,12545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12605,12606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12712,12727],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12803,12804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12854,12860],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12921,12922]},{"pos":[12977,12983],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13043,13044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13274,13287],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13388,13399],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13471,13472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13499,13500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13573,13584],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13656,13657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13684,13685],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13860,13869],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13962,13969],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14037,14038],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14065,14066],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14135,14142],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14210,14211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14238,14239],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14414,14431],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14540,14555],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14631,14632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14659,14660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14737,14752],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14828,14829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14856,14857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15002,15008],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15139,15145],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[15288,15292],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[15489,15509],"content":"DataContractResolver","needQuote":true,"nodes":[{"content":"DataContractResolver","pos":[0,20]}]},{"pos":[15761,15780],"content":"XmlDictionaryString","needQuote":true,"nodes":[{"content":"XmlDictionaryString","pos":[0,19]}]},{"pos":[15973,15980],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16108,16118],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]}],"content":"items:\n- uid: System.Runtime.Serialization.DataContractResolver\n  commentId: T:System.Runtime.Serialization.DataContractResolver\n  id: DataContractResolver\n  parent: System.Runtime.Serialization\n  children:\n  - System.Runtime.Serialization.DataContractResolver.#ctor\n  - System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  - System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  langs:\n  - csharp\n  - vb\n  name: DataContractResolver\n  fullName: System.Runtime.Serialization.DataContractResolver\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DataContractResolver\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 10\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Runtime.Serialization\n  summary: \"\\n<p>Provides a mechanism for dynamically mapping types to and from <strong>xsi:type</strong> representations during serialization and deserialization.</p>\\n\"\n  syntax:\n    content: public abstract class DataContractResolver\n    content.vb: Public MustInherit Class DataContractResolver\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DataContractResolver\n- uid: System.Runtime.Serialization.DataContractResolver.#ctor\n  commentId: M:System.Runtime.Serialization.DataContractResolver.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Serialization.DataContractResolver\n  langs:\n  - csharp\n  - vb\n  name: DataContractResolver()\n  fullName: System.Runtime.Serialization.DataContractResolver.DataContractResolver()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 12\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Runtime.Serialization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Serialization.DataContractResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected DataContractResolver()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DataContractResolver.DataContractResolver()\n- uid: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  commentId: M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  id: ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  parent: System.Runtime.Serialization.DataContractResolver\n  langs:\n  - csharp\n  - vb\n  name: ResolveName(String, String, Type, DataContractResolver)\n  fullName: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ResolveName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 13\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Runtime.Serialization\n  summary: \"\\n<p>Override this method to map the specified <strong>xsi:type</strong> name and namespace to a data contract type during deserialization.</p>\\n\"\n  syntax:\n    content: public abstract Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)\n    content.vb: Public MustOverride Function ResolveName(typeName As String, typeNamespace As String, declaredType As Type, knownTypeResolver As DataContractResolver) As Type\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The <strong>xsi:type</strong> name to map.</p>\\n\"\n    - id: typeNamespace\n      type: System.String\n      description: \"\\n<p>The <strong>xsi:type</strong> namespace to map.</p>\\n\"\n    - id: declaredType\n      type: System.Type\n      description: \"\\n<p>The type declared in the data contract.</p>\\n\"\n    - id: knownTypeResolver\n      type: System.Runtime.Serialization.DataContractResolver\n      description: \"\\n<p>The known type resolver.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type the <strong>xsi:type</strong> name and namespace is mapped to. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DataContractResolver.ResolveName(String, String, Type, DataContractResolver)\n- uid: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  commentId: M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  id: TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  parent: System.Runtime.Serialization.DataContractResolver\n  langs:\n  - csharp\n  - vb\n  name: TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)\n  fullName: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, out System.Xml.XmlDictionaryString, out System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryResolveType\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 14\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Runtime.Serialization\n  summary: \"\\n<p>Override this method to map a data contract type to an <strong>xsi:type</strong> name and namespace during serialization.</p>\\n\"\n  syntax:\n    content: public abstract bool TryResolveType(Type type, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)\n    content.vb: Public MustOverride Function TryResolveType(type As Type, declaredType As Type, knownTypeResolver As DataContractResolver, ByRef typeName As XmlDictionaryString, ByRef typeNamespace As XmlDictionaryString) As Boolean\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to map.</p>\\n\"\n    - id: declaredType\n      type: System.Type\n      description: \"\\n<p>The type declared in the data contract.</p>\\n\"\n    - id: knownTypeResolver\n      type: System.Runtime.Serialization.DataContractResolver\n      description: \"\\n<p>The known type resolver.</p>\\n\"\n    - id: typeName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The xsi:type name.</p>\\n\"\n    - id: typeNamespace\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The xsi:type namespace.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if mapping succeeded; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, ByRef System.Xml.XmlDictionaryString, ByRef System.Xml.XmlDictionaryString)\n  name.vb: TryResolveType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)\n  nameWithType: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, out XmlDictionaryString, out XmlDictionaryString)\n  nameWithType.vb: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, ByRef XmlDictionaryString, ByRef XmlDictionaryString)\nreferences:\n- uid: System.Runtime.Serialization\n  isExternal: false\n  name: System.Runtime.Serialization\n  fullName: System.Runtime.Serialization\n  commentId: N:System.Runtime.Serialization\n  nameWithType: System.Runtime.Serialization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Runtime.Serialization.DataContractResolver\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: DataContractResolver\n  fullName: System.Runtime.Serialization.DataContractResolver\n  commentId: T:System.Runtime.Serialization.DataContractResolver\n  nameWithType: DataContractResolver\n- uid: System.Xml.XmlDictionaryString\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryString\n  fullName: System.Xml.XmlDictionaryString\n  commentId: T:System.Xml.XmlDictionaryString\n  nameWithType: XmlDictionaryString\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n"}