{"nodes":[{"pos":[2002,2010],"content":"Contract","needQuote":true,"nodes":[{"content":"Contract","pos":[0,8]}]},{"pos":[3328,3342],"content":"ContractFailed","needQuote":true,"nodes":[{"content":"ContractFailed","pos":[0,14]}]},{"pos":[4629,4644],"content":"Assert(Boolean)","needQuote":true,"nodes":[{"content":"Assert(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[5750,5796],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"pos":[6602,6625],"content":"Assert(Boolean, String)","needQuote":true,"nodes":[{"content":"Assert(Boolean, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[7823,7869],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;A message to display if the condition is not met.&lt;/p&gt;\\n","pos":[7939,7999],"source":"\\n<p>A message to display if the condition is not met.</p>\\n"},{"pos":[8771,8786],"content":"Assume(Boolean)","needQuote":true,"nodes":[{"content":"Assume(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The conditional expression to assume &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9942,10012],"source":"\\n<p>The conditional expression to assume <strong>true</strong>.</p>\\n"},{"pos":[10818,10841],"content":"Assume(Boolean, String)","needQuote":true,"nodes":[{"content":"Assume(Boolean, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The conditional expression to assume &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12091,12161],"source":"\\n<p>The conditional expression to assume <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The message to post if the assumption fails.&lt;/p&gt;\\n","pos":[12231,12286],"source":"\\n<p>The message to post if the assumption fails.</p>\\n"},{"pos":[13040,13058],"content":"EndContractBlock()","needQuote":true,"nodes":[{"content":"EndContractBlock()","pos":[0,18]}]},{"pos":[14630,14646],"content":"Ensures(Boolean)","needQuote":true,"nodes":[{"content":"Ensures(Boolean)","pos":[0,16]}]},{"pos":[16710,16734],"content":"Ensures(Boolean, String)","needQuote":true,"nodes":[{"content":"Ensures(Boolean, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The message to display if the expression is not &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18235,18316],"source":"\\n<p>The message to display if the expression is not <strong>true</strong>.</p>\\n"},{"pos":[18941,18976],"content":"EnsuresOnThrow<TException>(Boolean)","needQuote":true,"nodes":[{"content":"EnsuresOnThrow&lt;TException&gt;(Boolean)","pos":[0,35],"source":"EnsuresOnThrow<TException>(Boolean)"}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[20423,20469],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The type of exception that invokes the postcondition check.&lt;/p&gt;\\n","pos":[20532,20602],"source":"\\n<p>The type of exception that invokes the postcondition check.</p>\\n"},{"pos":[21496,21539],"content":"EnsuresOnThrow<TException>(Boolean, String)","needQuote":true,"nodes":[{"content":"EnsuresOnThrow&lt;TException&gt;(Boolean, String)","pos":[0,43],"source":"EnsuresOnThrow<TException>(Boolean, String)"}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[23112,23158],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The message to display if the expression is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23228,23306],"source":"\\n<p>The message to display if the expression is <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of exception that invokes the postcondition check.&lt;/p&gt;\\n","pos":[23369,23439],"source":"\\n<p>The type of exception that invokes the postcondition check.</p>\\n"},{"pos":[24423,24461],"content":"Exists(Int32, Int32, Predicate<Int32>)","needQuote":true,"nodes":[{"content":"Exists(Int32, Int32, Predicate&lt;Int32&gt;)","pos":[0,38],"source":"Exists(Int32, Int32, Predicate<Int32>)"}]},{"content":"\\n&lt;p&gt;The first integer to pass to &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25569,25628],"source":"\\n<p>The first integer to pass to <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One more than the last integer to pass to &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25697,25769],"source":"\\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function to evaluate for any value of the integer in the specified range.&lt;/p&gt;\\n","pos":[25854,25942],"source":"\\n<p>The function to evaluate for any value of the integer in the specified range.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;predicate&lt;/em&gt; returns &lt;strong&gt;true&lt;/strong&gt; for any integer starting from &lt;em&gt;fromInclusive&lt;/em&gt; to &lt;em&gt;toExclusive&lt;/em&gt; - 1.&lt;/p&gt;\\n","pos":[26003,26171],"source":"\\n<p>\\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for any integer starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26290,26347],"source":"\\n<p>\\n<em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;toExclusive &lt;/em&gt;is less than &lt;em&gt;fromInclusive&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26444,26514],"source":"\\n<p>\\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\\n"},{"pos":[27324,27363],"content":"Exists<T>(IEnumerable<T>, Predicate<T>)","needQuote":true,"nodes":[{"content":"Exists&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)","pos":[0,39],"source":"Exists<T>(IEnumerable<T>, Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The collection from which elements of type &lt;em&gt;T&lt;/em&gt; will be drawn to pass to &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28481,28590],"source":"\\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function to evaluate for an element in &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28666,28740],"source":"\\n<p>The function to evaluate for an element in <em>collection</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type that is contained in &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28794,28855],"source":"\\n<p>The type that is contained in <em>collection</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if and only if &lt;em&gt;predicate&lt;/em&gt; returns &lt;strong&gt;true&lt;/strong&gt; for any element of type &lt;em&gt;T&lt;/em&gt; in &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28916,29073],"source":"\\n<p>\\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for any element of type <em>T</em> in <em>collection</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;collection&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29192,29272],"source":"\\n<p>\\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[30238,30276],"content":"ForAll(Int32, Int32, Predicate<Int32>)","needQuote":true,"nodes":[{"content":"ForAll(Int32, Int32, Predicate&lt;Int32&gt;)","pos":[0,38],"source":"ForAll(Int32, Int32, Predicate<Int32>)"}]},{"content":"\\n&lt;p&gt;The first integer to pass to &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31386,31445],"source":"\\n<p>The first integer to pass to <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One more than the last integer to pass to &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31514,31586],"source":"\\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function to evaluate for the existence of the integers in the specified range.&lt;/p&gt;\\n","pos":[31671,31764],"source":"\\n<p>The function to evaluate for the existence of the integers in the specified range.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;predicate&lt;/em&gt; returns &lt;strong&gt;true&lt;/strong&gt; for all integers starting from &lt;em&gt;fromInclusive&lt;/em&gt; to &lt;em&gt;toExclusive&lt;/em&gt; - 1.&lt;/p&gt;\\n","pos":[31825,31994],"source":"\\n<p>\\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for all integers starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32113,32170],"source":"\\n<p>\\n<em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;toExclusive &lt;/em&gt;is less than &lt;em&gt;fromInclusive&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32267,32337],"source":"\\n<p>\\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\\n"},{"pos":[33319,33358],"content":"ForAll<T>(IEnumerable<T>, Predicate<T>)","needQuote":true,"nodes":[{"content":"ForAll&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)","pos":[0,39],"source":"ForAll<T>(IEnumerable<T>, Predicate<T>)"}]},{"content":"\\n&lt;p&gt;The collection from which elements of type &lt;em&gt;T&lt;/em&gt; will be drawn to pass to &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34465,34574],"source":"\\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function to evaluate for the existence of all the elements in &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34650,34747],"source":"\\n<p>The function to evaluate for the existence of all the elements in <em>collection</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type that is contained in &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34801,34862],"source":"\\n<p>The type that is contained in <em>collection</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if and only if &lt;em&gt;predicate&lt;/em&gt; returns &lt;strong&gt;true&lt;/strong&gt; for all elements of type &lt;em&gt;T&lt;/em&gt; in &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34923,35081],"source":"\\n<p>\\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for all elements of type <em>T</em> in <em>collection</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;collection&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35200,35280],"source":"\\n<p>\\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[36137,36155],"content":"Invariant(Boolean)","needQuote":true,"nodes":[{"content":"Invariant(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[37164,37210],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"pos":[37847,37873],"content":"Invariant(Boolean, String)","needQuote":true,"nodes":[{"content":"Invariant(Boolean, String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[39003,39049],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The message to display if the condition is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39119,39196],"source":"\\n<p>The message to display if the condition is <strong>false</strong>.</p>\\n"},{"pos":[39772,39786],"content":"OldValue<T>(T)","needQuote":true,"nodes":[{"content":"OldValue&lt;T&gt;(T)","pos":[0,14],"source":"OldValue<T>(T)"}]},{"content":"\\n&lt;p&gt;The value to represent (field or parameter).&lt;/p&gt;\\n","pos":[40882,40937],"source":"\\n<p>The value to represent (field or parameter).</p>\\n"},{"content":"\\n&lt;p&gt;The type of value.&lt;/p&gt;\\n","pos":[40991,41020],"source":"\\n<p>The type of value.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the parameter or field at the start of a method or property.&lt;/p&gt;\\n","pos":[41072,41156],"source":"\\n<p>The value of the parameter or field at the start of a method or property.</p>\\n"},{"pos":[41686,41703],"content":"Requires(Boolean)","needQuote":true,"nodes":[{"content":"Requires(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[42709,42755],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"pos":[43388,43413],"content":"Requires(Boolean, String)","needQuote":true,"nodes":[{"content":"Requires(Boolean, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[44541,44587],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The message to display if the condition is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44657,44734],"source":"\\n<p>The message to display if the condition is <strong>false</strong>.</p>\\n"},{"pos":[45342,45371],"content":"Requires<TException>(Boolean)","needQuote":true,"nodes":[{"content":"Requires&lt;TException&gt;(Boolean)","pos":[0,29],"source":"Requires<TException>(Boolean)"}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[46839,46885],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The exception to throw if the condition is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46948,47025],"source":"\\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\\n"},{"pos":[47673,47710],"content":"Requires<TException>(Boolean, String)","needQuote":true,"nodes":[{"content":"Requires&lt;TException&gt;(Boolean, String)","pos":[0,37],"source":"Requires<TException>(Boolean, String)"}]},{"content":"\\n&lt;p&gt;The conditional expression to test.&lt;/p&gt;\\n","pos":[49469,49515],"source":"\\n<p>The conditional expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The message to display if the condition is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49585,49662],"source":"\\n<p>The message to display if the condition is <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception to throw if the condition is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49725,49802],"source":"\\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\\n"},{"pos":[50393,50404],"content":"Result<T>()","needQuote":true,"nodes":[{"content":"Result&lt;T&gt;()","pos":[0,11],"source":"Result<T>()"}]},{"content":"\\n&lt;p&gt;Type of return value of the enclosing method or property.&lt;/p&gt;\\n","pos":[51548,51616],"source":"\\n<p>Type of return value of the enclosing method or property.</p>\\n"},{"content":"\\n&lt;p&gt;Return value of the enclosing method or property.&lt;/p&gt;\\n","pos":[51668,51728],"source":"\\n<p>Return value of the enclosing method or property.</p>\\n"},{"pos":[52240,52263],"content":"ValueAtReturn<T>(out T)","needQuote":true,"nodes":[{"content":"ValueAtReturn&lt;T&gt;(out T)","pos":[0,23],"source":"ValueAtReturn<T>(out T)"}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;out&lt;/strong&gt; parameter.&lt;/p&gt;\\n","pos":[53528,53574],"source":"\\n<p>The <strong>out</strong> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the &lt;strong&gt;out&lt;/strong&gt; parameter.&lt;/p&gt;\\n","pos":[53628,53686],"source":"\\n<p>The type of the <strong>out</strong> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The output value of the &lt;strong&gt;out&lt;/strong&gt; parameter.&lt;/p&gt;\\n","pos":[53738,53804],"source":"\\n<p>The output value of the <strong>out</strong> parameter.</p>\\n"},{"pos":[54190,54218],"content":"System.Diagnostics.Contracts","needQuote":true,"nodes":[{"content":"System.Diagnostics.Contracts","pos":[0,28]}]},{"pos":[54415,54421],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54581,54591],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[54686,54694],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[54763,54764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54791,54792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54862,54870],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[54939,54940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54967,54968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55151,55165],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[55284,55290],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55357,55358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55408,55414],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55474,55475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55558,55564],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55631,55632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55682,55688],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55748,55749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55963,55985],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[56133,56139],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56206,56207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56257,56263],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56324,56325]},{"pos":[56380,56386],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56446,56447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56544,56550],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56617,56618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56668,56674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56735,56736]},{"pos":[56791,56797],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56857,56858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57103,57134],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[57300,57315],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[57391,57392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57442,57448],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[57509,57510]},{"pos":[57565,57571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57631,57632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57738,57753],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[57829,57830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57880,57886],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[57947,57948]},{"pos":[58003,58009],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58069,58070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58300,58313],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[58414,58425],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[58497,58498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58525,58526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58599,58610],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[58682,58683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58710,58711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58886,58895],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[58988,58995],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[59063,59064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59091,59092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59161,59168],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[59236,59237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59264,59265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59440,59457],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[59566,59581],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[59657,59658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59685,59686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59763,59778],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[59854,59855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59882,59883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60028,60034],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[60241,60278],"content":"EventHandler<ContractFailedEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;ContractFailedEventArgs&gt;","pos":[0,37],"source":"EventHandler<ContractFailedEventArgs>"}]},{"pos":[60565,60577],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[60643,60644],"content":"<","needQuote":true,"nodes":[]},{"pos":[60733,60756],"content":"ContractFailedEventArgs","needQuote":true,"nodes":[{"content":"ContractFailedEventArgs","pos":[0,23]}]},{"pos":[60908,60920],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[60987,60990]},{"pos":[61086,61109],"content":"ContractFailedEventArgs","needQuote":true,"nodes":[{"content":"ContractFailedEventArgs","pos":[0,23]}]},{"pos":[61187,61188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61465,61489],"content":"EventHandler<TEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;TEventArgs&gt;","pos":[0,24],"source":"EventHandler<TEventArgs>"}]},{"pos":[61679,61691],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[61736,61737],"content":"<","needQuote":true,"nodes":[]},{"pos":[61764,61774],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[61884,61896],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[61942,61945]},{"pos":[61979,61989],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[62025,62026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62235,62242],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[62390,62396],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[62540,62545],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62717,62733],"content":"Predicate<Int32>","needQuote":true,"nodes":[{"content":"Predicate&lt;Int32&gt;","pos":[0,16],"source":"Predicate<Int32>"}]},{"pos":[62910,62919],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[62982,62983],"content":"<","needQuote":true,"nodes":[]},{"pos":[63032,63037],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63167,63176],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[63240,63243]},{"pos":[63299,63304],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63363,63364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63553,63565],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[63716,63725],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[63767,63768],"content":"<","needQuote":true,"nodes":[]},{"pos":[63795,63796],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63894,63903],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[63946,63949]},{"pos":[63983,63984],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64011,64012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64278,64292],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[64511,64522],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[64586,64587],"content":"<","needQuote":true,"nodes":[]},{"pos":[64614,64615],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64735,64746],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[64811,64814]},{"pos":[64848,64849],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64876,64877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65107,65119],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[65270,65279],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[65321,65322],"content":"<","needQuote":true,"nodes":[]},{"pos":[65349,65350],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65448,65457],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[65500,65503]},{"pos":[65537,65538],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65565,65566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65760,65774],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[65993,66004],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[66068,66069],"content":"<","needQuote":true,"nodes":[]},{"pos":[66096,66097],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66217,66228],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[66293,66296]},{"pos":[66330,66331],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66358,66359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66562,66588],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[66750,66751],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66840,66841],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66938,66959],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[67160,67177],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Diagnostics.Contracts.Contract\n  commentId: T:System.Diagnostics.Contracts.Contract\n  id: Contract\n  parent: System.Diagnostics.Contracts\n  children:\n  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.ContractFailed\n  - System.Diagnostics.Contracts.Contract.EndContractBlock\n  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  - System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  - System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  - System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Result``1\n  - System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  langs:\n  - csharp\n  - vb\n  name: Contract\n  fullName: System.Diagnostics.Contracts.Contract\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contract\n    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs\n    startLine: 42\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</p>\\n\"\n  syntax:\n    content: public class Contract\n    content.vb: Public Class Contract\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Contract\n- uid: System.Diagnostics.Contracts.Contract.ContractFailed\n  commentId: E:System.Diagnostics.Contracts.Contract.ContractFailed\n  id: ContractFailed\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: ContractFailed\n  fullName: System.Diagnostics.Contracts.Contract.ContractFailed\n  type: Event\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContractFailed\n    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs\n    startLine: 121\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Occurs when a contract fails.</p>\\n\"\n  syntax:\n    content: public static event EventHandler<ContractFailedEventArgs> ContractFailed\n    content.vb: Public Shared Event ContractFailed As EventHandler(Of ContractFailedEventArgs)\n    return:\n      type: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.ContractFailed\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  id: Assert(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assert\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 335\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, follows the escalation policy set for the analyzer.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Assert(bool condition)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Assert(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Assert(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  id: Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.Assert(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assert\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 352\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, follows the escalation policy set by the analyzer and displays the specified message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Assert(bool condition, string userMessage)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Assert(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>A message to display if the condition is not met.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Assert(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  id: Assume(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Assume(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assume\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 293\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Instructs code analysis tools to assume that the specified condition is <strong>true</strong>, even if it cannot be statically proven to always be <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Assume(bool condition)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Assume(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to assume <strong>true</strong>.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Assume(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  id: Assume(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Assume(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.Assume(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assume\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 314\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Instructs code analysis tools to assume that a condition is <strong>true</strong>, even if it cannot be statically proven to always be <strong>true</strong>, and displays a message if the assumption fails.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Assume(bool condition, string userMessage)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Assume(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to assume <strong>true</strong>.</p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>The message to post if the assumption fails.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Assume(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.EndContractBlock\n  commentId: M:System.Diagnostics.Contracts.Contract.EndContractBlock\n  id: EndContractBlock\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: EndContractBlock()\n  fullName: System.Diagnostics.Contracts.Contract.EndContractBlock()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EndContractBlock\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 869\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Marks the end of the contract section when a method's contracts contain only preconditions in the <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> form.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void EndContractBlock()\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.EndContractBlock()\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  id: Ensures(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Ensures(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ensures\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 462\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a postcondition contract for the enclosing method or property.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Ensures(bool condition)\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Ensures(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test. The expression may include <xref href=\\\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Diagnostics.Contracts.Contract.Result``1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Ensures(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  id: Ensures(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Ensures(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ensures\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 482\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <strong>false</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Ensures(bool condition, string userMessage)\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Ensures(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test. The expression may include <xref href=\\\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Diagnostics.Contracts.Contract.Result``1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>The message to display if the expression is not <strong>true</strong>.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Ensures(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  id: EnsuresOnThrow``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: EnsuresOnThrow<TException>(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsuresOnThrow\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 502\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\", Justification = \"Exception type used in tools.\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void EnsuresOnThrow<TException>(bool condition)where TException : Exception\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\", Justification:=\"Exception type used in tools.\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub EnsuresOnThrow(Of TException As Exception)(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    typeParameters:\n    - id: TException\n      description: \"\\n<p>The type of exception that invokes the postcondition check.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Of TException)(System.Boolean)\n  name.vb: EnsuresOnThrow(Of TException)(Boolean)\n  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean)\n  nameWithType.vb: Contract.EnsuresOnThrow(Of TException)(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  id: EnsuresOnThrow``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: EnsuresOnThrow<TException>(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsuresOnThrow\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 524\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a postcondition contract and a message to display if the condition is <strong>false</strong> for the enclosing method or property, based on the provided exception and condition.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\", Justification = \"Exception type used in tools.\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void EnsuresOnThrow<TException>(bool condition, string userMessage)where TException : Exception\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\", Justification:=\"Exception type used in tools.\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub EnsuresOnThrow(Of TException As Exception)(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>The message to display if the expression is <strong>false</strong>.</p>\\n\"\n    typeParameters:\n    - id: TException\n      description: \"\\n<p>The type of exception that invokes the postcondition check.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Of TException)(System.Boolean, System.String)\n  name.vb: EnsuresOnThrow(Of TException)(Boolean, String)\n  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean, String)\n  nameWithType.vb: Contract.EnsuresOnThrow(Of TException)(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  commentId: M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  id: Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Exists(Int32, Int32, Predicate<Int32>)\n  fullName: System.Diagnostics.Contracts.Contract.Exists(System.Int32, System.Int32, System.Predicate<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exists\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 707\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Determines whether a specified test is true for any integer within a range of integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static bool Exists(int fromInclusive, int toExclusive, Predicate<int> predicate)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function Exists(fromInclusive As Integer, toExclusive As Integer, predicate As Predicate(Of Integer)) As Boolean\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The first integer to pass to <em>predicate</em>.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\\n\"\n    - id: predicate\n      type: System.Predicate{System.Int32}\n      description: \"\\n<p>The function to evaluate for any value of the integer in the specified range.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for any integer starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.Exists(System.Int32, System.Int32, System.Predicate(Of System.Int32))\n  name.vb: Exists(Int32, Int32, Predicate(Of Int32))\n  nameWithType: Contract.Exists(Int32, Int32, Predicate<Int32>)\n  nameWithType.vb: Contract.Exists(Int32, Int32, Predicate(Of Int32))\n- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  commentId: M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  id: Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Exists<T>(IEnumerable<T>, Predicate<T>)\n  fullName: System.Diagnostics.Contracts.Contract.Exists<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exists\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 737\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Determines whether an element within a collection of elements exists within a function.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static bool Exists<T>(IEnumerable<T> collection, Predicate<T> predicate)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function Exists(Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\\n\"\n    - id: predicate\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The function to evaluate for an element in <em>collection</em>.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type that is contained in <em>collection</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for any element of type <em>T</em> in <em>collection</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})\n    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.Exists(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))\n  name.vb: Exists(Of T)(IEnumerable(Of T), Predicate(Of T))\n  nameWithType: Contract.Exists<T>(IEnumerable<T>, Predicate<T>)\n  nameWithType.vb: Contract.Exists(Of T)(IEnumerable(Of T), Predicate(Of T))\n- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  commentId: M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  id: ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: ForAll(Int32, Int32, Predicate<Int32>)\n  fullName: System.Diagnostics.Contracts.Contract.ForAll(System.Int32, System.Int32, System.Predicate<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForAll\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 645\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Determines whether a particular condition is valid for all integers in a specified range.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static bool ForAll(int fromInclusive, int toExclusive, Predicate<int> predicate)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function ForAll(fromInclusive As Integer, toExclusive As Integer, predicate As Predicate(Of Integer)) As Boolean\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The first integer to pass to <em>predicate</em>.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\\n\"\n    - id: predicate\n      type: System.Predicate{System.Int32}\n      description: \"\\n<p>The function to evaluate for the existence of the integers in the specified range.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for all integers starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.ForAll(System.Int32, System.Int32, System.Predicate(Of System.Int32))\n  name.vb: ForAll(Int32, Int32, Predicate(Of Int32))\n  nameWithType: Contract.ForAll(Int32, Int32, Predicate<Int32>)\n  nameWithType.vb: Contract.ForAll(Int32, Int32, Predicate(Of Int32))\n- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  commentId: M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  id: ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: ForAll<T>(IEnumerable<T>, Predicate<T>)\n  fullName: System.Diagnostics.Contracts.Contract.ForAll<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForAll\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 676\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Determines whether all the elements in a collection exist within a function.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static bool ForAll<T>(IEnumerable<T> collection, Predicate<T> predicate)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function ForAll(Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\\n\"\n    - id: predicate\n      type: System.Predicate{{T}}\n      description: \"\\n<p>The function to evaluate for the existence of all the elements in <em>collection</em>.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type that is contained in <em>collection</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for all elements of type <em>T</em> in <em>collection</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.ForAll(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))\n  name.vb: ForAll(Of T)(IEnumerable(Of T), Predicate(Of T))\n  nameWithType: Contract.ForAll<T>(IEnumerable<T>, Predicate<T>)\n  nameWithType.vb: Contract.ForAll(Of T)(IEnumerable(Of T), Predicate(Of T))\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  id: Invariant(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Invariant(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Invariant\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 599\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies an invariant contract for the enclosing method or property. </p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Invariant(bool condition)\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Invariant(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Invariant(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  id: Invariant(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Invariant(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Invariant\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 619\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Invariant(bool condition, string userMessage)\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Invariant(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>The message to display if the condition is <strong>false</strong>.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Invariant(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  commentId: M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  id: OldValue``1(``0)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: OldValue<T>(T)\n  fullName: System.Diagnostics.Contracts.Contract.OldValue<T>(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OldValue\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 577\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Represents values as they were at the start of a method or property.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId = \"value\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static T OldValue<T>(T value)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId:=\"value\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function OldValue(Of T)(value As T) As T\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The value to represent (field or parameter).</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of value.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The value of the parameter or field at the start of a method or property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.OldValue(Of T)(T)\n  name.vb: OldValue(Of T)(T)\n  nameWithType: Contract.OldValue<T>(T)\n  nameWithType.vb: Contract.OldValue(Of T)(T)\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  id: Requires(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Requires(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Requires\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 377\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a precondition contract for the enclosing method or property.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Requires(bool condition)\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Requires(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Requires(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  id: Requires(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Requires(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Requires\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 397\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"CONTRACTS_FULL\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Requires(bool condition, string userMessage)\n    content.vb: >-\n      <Conditional(\"CONTRACTS_FULL\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Requires(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>The message to display if the condition is <strong>false</strong>.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CONTRACTS_FULL\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Contract.Requires(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  id: Requires``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Requires<TException>(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Requires<TException>(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Requires\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 416\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId = \"condition\")]\n\n      [SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Requires<TException>(bool condition)where TException : Exception\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId:=\"condition\")>\n\n      <SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Requires(Of TException As Exception)(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    typeParameters:\n    - id: TException\n      description: \"\\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.Requires(Of TException)(System.Boolean)\n  name.vb: Requires(Of TException)(Boolean)\n  nameWithType: Contract.Requires<TException>(Boolean)\n  nameWithType.vb: Contract.Requires(Of TException)(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  id: Requires``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Requires<TException>(Boolean, String)\n  fullName: System.Diagnostics.Contracts.Contract.Requires<TException>(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Requires\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 437\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId = \"userMessage\")]\n\n      [SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId = \"condition\")]\n\n      [SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static void Requires<TException>(bool condition, string userMessage)where TException : Exception\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId:=\"userMessage\")>\n\n      <SuppressMessage(\"Microsoft.Usage\", \"CA1801:ReviewUnusedParameters\", MessageId:=\"condition\")>\n\n      <SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Sub Requires(Of TException As Exception)(condition As Boolean, userMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to test.</p>\\n\"\n    - id: userMessage\n      type: System.String\n      description: \"\\n<p>The message to display if the condition is <strong>false</strong>.</p>\\n\"\n    typeParameters:\n    - id: TException\n      description: \"\\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.Requires(Of TException)(System.Boolean, System.String)\n  name.vb: Requires(Of TException)(Boolean, String)\n  nameWithType: Contract.Requires<TException>(Boolean, String)\n  nameWithType.vb: Contract.Requires(Of TException)(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Result``1\n  commentId: M:System.Diagnostics.Contracts.Contract.Result``1\n  id: Result``1\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: Result<T>()\n  fullName: System.Diagnostics.Contracts.Contract.Result<T>()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Result\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 545\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Represents the return value of a method or property.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\", Justification = \"Not intended to be called at runtime.\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static T Result<T>()\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1004:GenericMethodsShouldProvideTypeParameter\", Justification:=\"Not intended to be called at runtime.\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Result(Of T) As T\n    typeParameters:\n    - id: T\n      description: \"\\n<p>Type of return value of the enclosing method or property.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>Return value of the enclosing method or property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.Result(Of T)()\n  name.vb: Result(Of T)()\n  nameWithType: Contract.Result<T>()\n  nameWithType.vb: Contract.Result(Of T)()\n- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  commentId: M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  id: ValueAtReturn``1(``0@)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  - vb\n  name: ValueAtReturn<T>(out T)\n  fullName: System.Diagnostics.Contracts.Contract.ValueAtReturn<T>(out T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ValueAtReturn\n    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs\n    startLine: 561\n  assemblies:\n  - System.Diagnostics.Contracts\n  namespace: System.Diagnostics.Contracts\n  summary: \"\\n<p>Represents the final (output) value of an <strong>out</strong> parameter when returning from a method.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1021:AvoidOutParameters\", MessageId = \"0#\", Justification = \"Not intended to be called at runtime.\")]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static T ValueAtReturn<T>(out T value)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1021:AvoidOutParameters\", MessageId:=\"0#\", Justification:=\"Not intended to be called at runtime.\")>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ValueAtReturn(Of T)(ByRef value As T) As T\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The <strong>out</strong> parameter.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the <strong>out</strong> parameter.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The output value of the <strong>out</strong> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Contracts.Contract.ValueAtReturn(Of T)(ByRef T)\n  name.vb: ValueAtReturn(Of T)(ByRef T)\n  nameWithType: Contract.ValueAtReturn<T>(out T)\n  nameWithType.vb: Contract.ValueAtReturn(Of T)(ByRef T)\nreferences:\n- uid: System.Diagnostics.Contracts\n  isExternal: false\n  name: System.Diagnostics.Contracts\n  fullName: System.Diagnostics.Contracts\n  nameWithType: System.Diagnostics.Contracts\n  commentId: N:System.Diagnostics.Contracts\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n  parent: System\n  definition: System.EventHandler`1\n  name: EventHandler<ContractFailedEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs>\n  fullname.vb: System.EventHandler(Of System.Diagnostics.Contracts.ContractFailedEventArgs)\n  name.vb: EventHandler(Of ContractFailedEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs\n    name: ContractFailedEventArgs\n    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs\n    name: ContractFailedEventArgs\n    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs\n  - name: )\n    fullName: )\n  nameWithType: EventHandler<ContractFailedEventArgs>\n  nameWithType.vb: EventHandler(Of ContractFailedEventArgs)\n  commentId: T:System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n- uid: System.EventHandler`1\n  isExternal: false\n  name: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n  fullname.vb: System.EventHandler(Of TEventArgs)\n  name.vb: EventHandler(Of TEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    fullName: <\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: )\n    fullName: )\n  nameWithType: EventHandler<TEventArgs>\n  nameWithType.vb: EventHandler(Of TEventArgs)\n  commentId: T:System.EventHandler`1\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Predicate{System.Int32}\n  parent: System\n  definition: System.Predicate`1\n  name: Predicate<Int32>\n  fullName: System.Predicate<System.Int32>\n  fullname.vb: System.Predicate(Of System.Int32)\n  name.vb: Predicate(Of Int32)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Predicate<Int32>\n  nameWithType.vb: Predicate(Of Int32)\n  commentId: T:System.Predicate{System.Int32}\n- uid: System.Predicate`1\n  isExternal: false\n  name: Predicate<T>\n  fullName: System.Predicate<T>\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n  commentId: T:System.Predicate`1\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.Predicate{{T}}\n  parent: System\n  definition: System.Predicate`1\n  name: Predicate<T>\n  fullName: System.Predicate<T>\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n  commentId: T:System.Predicate{``0}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}