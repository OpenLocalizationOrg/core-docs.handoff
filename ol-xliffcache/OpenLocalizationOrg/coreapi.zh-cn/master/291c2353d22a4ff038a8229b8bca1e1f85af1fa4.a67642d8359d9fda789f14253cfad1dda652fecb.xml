{"nodes":[{"pos":[487,513],"content":"XNodeDocumentOrderComparer","needQuote":true,"nodes":[{"content":"XNodeDocumentOrderComparer","pos":[0,26]}]},{"pos":[2093,2121],"content":"XNodeDocumentOrderComparer()","needQuote":true,"nodes":[{"content":"XNodeDocumentOrderComparer()","pos":[0,28]}]},{"pos":[3297,3318],"content":"Compare(XNode, XNode)","needQuote":true,"nodes":[{"content":"Compare(XNode, XNode)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The two nodes do not share a common ancestor.&lt;/p&gt;\\n","pos":[4755,4811],"source":"\\n<p>The two nodes do not share a common ancestor.</p>\\n"},{"pos":[5481,5514],"content":"IComparer.Compare(Object, Object)","needQuote":true,"nodes":[{"content":"IComparer.Compare(Object, Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The two nodes do not share a common ancestor.&lt;/p&gt;\\n","pos":[7035,7091],"source":"\\n<p>The two nodes do not share a common ancestor.</p>\\n"},{"pos":[7705,7720],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[7878,7884],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8128,8144],"content":"IComparer<XNode>","needQuote":true,"nodes":[{"content":"IComparer&lt;XNode&gt;","pos":[0,16],"source":"IComparer<XNode>"}]},{"pos":[8399,8408],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[8491,8492],"content":"<","needQuote":true,"nodes":[]},{"pos":[8550,8555],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[8693,8702],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[8786,8789]},{"pos":[8854,8859],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[8906,8907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9164,9173],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[9366,9376],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9471,9479],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9548,9549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9576,9577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9647,9655],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9724,9725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9752,9753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9936,9950],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[10069,10075],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10142,10143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10193,10199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10259,10260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10343,10349],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10416,10417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10467,10473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10533,10534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10748,10770],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10918,10924],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10991,10992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11042,11048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11109,11110]},{"pos":[11165,11171],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11231,11232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11329,11335],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11402,11403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11453,11459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11520,11521]},{"pos":[11576,11582],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11642,11643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11888,11919],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12085,12100],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12176,12177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12227,12233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12294,12295]},{"pos":[12350,12356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12416,12417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12523,12538],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12614,12615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12665,12671],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12732,12733]},{"pos":[12788,12794],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12854,12855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13085,13098],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13199,13210],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13282,13283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13310,13311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13384,13395],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13467,13468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13495,13496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13671,13680],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13773,13780],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13848,13849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13876,13877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13946,13953],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14021,14022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14049,14050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14225,14242],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14351,14366],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14442,14443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14470,14471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14548,14563],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14639,14640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14667,14668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14813,14819],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14958,14970],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[15181,15190],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[15252,15253],"content":"<","needQuote":true,"nodes":[]},{"pos":[15280,15281],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15399,15408],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[15471,15474]},{"pos":[15508,15509],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15536,15537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15734,15760],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[15939,15957],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[16324,16345],"content":"Compare(XNode, XNode)","needQuote":true,"nodes":[{"content":"Compare(XNode, XNode)","pos":[0,21]}]},{"pos":[16692,16699],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[16813,16814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16872,16877],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"content":",","pos":[16925,16926]},{"pos":[16989,16994],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[17041,17042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17143,17150],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[17267,17268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17326,17331],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"content":",","pos":[17379,17380]},{"pos":[17443,17448],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[17495,17496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17840,17845],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[18004,18009],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18173,18186],"content":"Compare(T, T)","needQuote":true,"nodes":[{"content":"Compare(T, T)","pos":[0,13]}]},{"pos":[18413,18420],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[18514,18515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18542,18543],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[18571,18572]},{"pos":[18604,18605],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18632,18633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18734,18741],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[18838,18839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18866,18867],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[18895,18896]},{"pos":[18928,18929],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18956,18957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19274,19297],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"pos":[19477,19484],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[19567,19568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19618,19624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19685,19686]},{"pos":[19741,19747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19807,19808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19921,19928],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[20011,20012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20062,20068],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20129,20130]},{"pos":[20185,20191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20251,20252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20485,20510],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[20723,20740],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Xml.Linq.XNodeDocumentOrderComparer\n  commentId: T:System.Xml.Linq.XNodeDocumentOrderComparer\n  id: XNodeDocumentOrderComparer\n  parent: System.Xml.Linq\n  children:\n  - System.Xml.Linq.XNodeDocumentOrderComparer.#ctor\n  - System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: XNodeDocumentOrderComparer\n  fullName: System.Xml.Linq.XNodeDocumentOrderComparer\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XNodeDocumentOrderComparer\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 374\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Contains functionality to compare nodes for their document order. This class cannot be inherited. </p>\\n\"\n  syntax:\n    content: 'public sealed class XNodeDocumentOrderComparer : IComparer<XNode>, IComparer'\n    content.vb: >-\n      Public NotInheritable Class XNodeDocumentOrderComparer\n          Implements IComparer(Of XNode), IComparer\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IComparer{System.Xml.Linq.XNode}\n  - System.Collections.IComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: XNodeDocumentOrderComparer\n- uid: System.Xml.Linq.XNodeDocumentOrderComparer.#ctor\n  commentId: M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor\n  id: '#ctor'\n  parent: System.Xml.Linq.XNodeDocumentOrderComparer\n  langs:\n  - csharp\n  - vb\n  name: XNodeDocumentOrderComparer()\n  fullName: System.Xml.Linq.XNodeDocumentOrderComparer.XNodeDocumentOrderComparer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 376\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.Linq.XNodeDocumentOrderComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public XNodeDocumentOrderComparer()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNodeDocumentOrderComparer.XNodeDocumentOrderComparer()\n- uid: System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  id: Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNodeDocumentOrderComparer\n  langs:\n  - csharp\n  - vb\n  name: Compare(XNode, XNode)\n  fullName: System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Compare\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 377\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares two nodes to determine their relative document order.</p>\\n\"\n  syntax:\n    content: public int Compare(XNode x, XNode y)\n    content.vb: Public Function Compare(x As XNode, y As XNode) As Integer\n    parameters:\n    - id: x\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: y\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains 0 if the nodes are equal; -1 if <em>x</em> is before <em>y</em>; 1 if <em>x</em> is after <em>y</em>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The two nodes do not share a common ancestor.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IComparer{System.Xml.Linq.XNode}.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNodeDocumentOrderComparer.Compare(XNode, XNode)\n- uid: System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  commentId: M:System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  id: System#Collections#IComparer#Compare(System.Object,System.Object)\n  isEii: true\n  parent: System.Xml.Linq.XNodeDocumentOrderComparer\n  langs:\n  - csharp\n  - vb\n  name: IComparer.Compare(Object, Object)\n  fullName: System.Xml.Linq.XNodeDocumentOrderComparer.System.Collections.IComparer.Compare(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IComparer.Compare\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 378\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares two nodes to determine their relative document order.</p>\\n\"\n  syntax:\n    content: int IComparer.Compare(object x, object y)\n    content.vb: Function System.Collections.IComparer.Compare(x As Object, y As Object) As Integer Implements IComparer.Compare\n    parameters:\n    - id: x\n      type: System.Object\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: y\n      type: System.Object\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains 0 if the nodes are equal; -1 if <em>x</em> is before <em>y</em>; 1 if <em>x</em> is after <em>y</em>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The two nodes do not share a common ancestor.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The two nodes are not derived from <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IComparer.Compare(System.Object,System.Object)\n  name.vb: System.Collections.IComparer.Compare(Object, Object)\n  nameWithType: XNodeDocumentOrderComparer.IComparer.Compare(Object, Object)\n  nameWithType.vb: XNodeDocumentOrderComparer.System.Collections.IComparer.Compare(Object, Object)\nreferences:\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.Generic.IComparer{System.Xml.Linq.XNode}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<XNode>\n  fullName: System.Collections.Generic.IComparer<System.Xml.Linq.XNode>\n  fullname.vb: System.Collections.Generic.IComparer(Of System.Xml.Linq.XNode)\n  name.vb: IComparer(Of XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer{System.Xml.Linq.XNode}\n  nameWithType: IComparer<XNode>\n  nameWithType.vb: IComparer(Of XNode)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  commentId: T:System.Collections.IComparer\n  nameWithType: IComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer`1\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Collections.Generic.IComparer{System.Xml.Linq.XNode}.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Collections.Generic.IComparer{System.Xml.Linq.XNode}\n  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  name: Compare(XNode, XNode)\n  fullName: System.Collections.Generic.IComparer<System.Xml.Linq.XNode>.Compare(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  fullname.vb: System.Collections.Generic.IComparer(Of System.Xml.Linq.XNode).Compare(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer<System.Xml.Linq.XNode>.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer(Of System.Xml.Linq.XNode).Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IComparer{System.Xml.Linq.XNode}.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  nameWithType: IComparer<XNode>.Compare(XNode, XNode)\n  nameWithType.vb: IComparer(Of XNode).Compare(XNode, XNode)\n- uid: System.Xml.Linq.XNode\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNode\n  fullName: System.Xml.Linq.XNode\n  commentId: T:System.Xml.Linq.XNode\n  nameWithType: XNode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  isExternal: true\n  name: Compare(T, T)\n  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)\n  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer<T>.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer(Of T).Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  nameWithType: IComparer<T>.Compare(T, T)\n  nameWithType.vb: IComparer(Of T).Compare(T, T)\n- uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n  parent: System.Collections.IComparer\n  isExternal: true\n  name: Compare(Object, Object)\n  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)\n  nameWithType: IComparer.Compare(Object, Object)\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}