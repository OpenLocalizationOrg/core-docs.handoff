{"nodes":[{"pos":[973,1000],"content":"UnicastIPAddressInformation","needQuote":true,"nodes":[{"content":"UnicastIPAddressInformation","pos":[0,27]}]},{"pos":[2792,2821],"content":"UnicastIPAddressInformation()","needQuote":true,"nodes":[{"content":"UnicastIPAddressInformation()","pos":[0,29]}]},{"pos":[4062,4086],"content":"AddressPreferredLifetime","needQuote":true,"nodes":[{"content":"AddressPreferredLifetime","pos":[0,24]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[5259,5354],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[5355,5361],"source":" </p>\\n"},{"pos":[5851,5871],"content":"AddressValidLifetime","needQuote":true,"nodes":[{"content":"AddressValidLifetime","pos":[0,20]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[7011,7106],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[7107,7113],"source":" </p>\\n"},{"pos":[7590,7607],"content":"DhcpLeaseLifetime","needQuote":true,"nodes":[{"content":"DhcpLeaseLifetime","pos":[0,17]}]},{"pos":[9251,9281],"content":"DuplicateAddressDetectionState","needQuote":true,"nodes":[{"content":"DuplicateAddressDetectionState","pos":[0,30]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[10645,10740],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[10741,10747],"source":" </p>\\n"},{"pos":[11207,11215],"content":"IPv4Mask","needQuote":true,"nodes":[{"content":"IPv4Mask","pos":[0,8]}]},{"pos":[12546,12558],"content":"PrefixLength","needQuote":true,"nodes":[{"content":"PrefixLength","pos":[0,12]}]},{"pos":[13984,13996],"content":"PrefixOrigin","needQuote":true,"nodes":[{"content":"PrefixOrigin","pos":[0,12]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[15186,15281],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[15282,15288],"source":" </p>\\n"},{"pos":[15742,15754],"content":"SuffixOrigin","needQuote":true,"nodes":[{"content":"SuffixOrigin","pos":[0,12]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[16944,17039],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[17040,17046],"source":" </p>\\n"},{"pos":[17291,17320],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[17520,17526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17731,17751],"content":"IPAddressInformation","needQuote":true,"nodes":[{"content":"IPAddressInformation","pos":[0,20]}]},{"pos":[18073,18080],"content":"Address","needQuote":true,"nodes":[{"content":"Address","pos":[0,7]}]},{"pos":[18432,18445],"content":"IsDnsEligible","needQuote":true,"nodes":[{"content":"IsDnsEligible","pos":[0,13]}]},{"pos":[18813,18824],"content":"IsTransient","needQuote":true,"nodes":[{"content":"IsTransient","pos":[0,11]}]},{"pos":[19108,19118],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19213,19221],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19290,19291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19318,19319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19389,19397],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19466,19467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19494,19495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19678,19692],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19811,19817],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19884,19885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19935,19941],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20001,20002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20085,20091],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20158,20159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20209,20215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20275,20276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20490,20512],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20660,20666],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20733,20734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20784,20790],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20851,20852]},{"pos":[20907,20913],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20973,20974],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21071,21077],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21144,21145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21195,21201],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21262,21263]},{"pos":[21318,21324],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21384,21385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21630,21661],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21827,21842],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21918,21919],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21969,21975],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22036,22037]},{"pos":[22092,22098],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22158,22159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22265,22280],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22356,22357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22407,22413],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22474,22475]},{"pos":[22530,22536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22596,22597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22827,22840],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22941,22952],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23024,23025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23052,23053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23126,23137],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23209,23210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23237,23238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23413,23422],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23515,23522],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23590,23591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23618,23619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23688,23695],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23763,23764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23791,23792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23967,23984],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[24093,24108],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24184,24185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24212,24213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24290,24305],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24381,24382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24409,24410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24555,24561],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24691,24696],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[24908,24938],"content":"DuplicateAddressDetectionState","needQuote":true,"nodes":[{"content":"DuplicateAddressDetectionState","pos":[0,30]}]},{"pos":[25212,25221],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[25363,25373],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[25515,25520],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25714,25726],"content":"PrefixOrigin","needQuote":true,"nodes":[{"content":"PrefixOrigin","pos":[0,12]}]},{"pos":[25987,25999],"content":"SuffixOrigin","needQuote":true,"nodes":[{"content":"SuffixOrigin","pos":[0,12]}]},{"pos":[26214,26243],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation\n  commentId: T:System.Net.NetworkInformation.UnicastIPAddressInformation\n  id: UnicastIPAddressInformation\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin\n  - System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin\n  langs:\n  - csharp\n  - vb\n  name: UnicastIPAddressInformation\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnicastIPAddressInformation\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 418\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides information about a network interface's unicast address.</p>\\n\"\n  syntax:\n    content: 'public abstract class UnicastIPAddressInformation : IPAddressInformation'\n    content.vb: >-\n      Public MustInherit Class UnicastIPAddressInformation\n          Inherits IPAddressInformation\n  inheritance:\n  - System.Object\n  - System.Net.NetworkInformation.IPAddressInformation\n  inheritedMembers:\n  - System.Net.NetworkInformation.IPAddressInformation.Address\n  - System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible\n  - System.Net.NetworkInformation.IPAddressInformation.IsTransient\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: UnicastIPAddressInformation\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor\n  commentId: M:System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: UnicastIPAddressInformation()\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.UnicastIPAddressInformation()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 420\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.UnicastIPAddressInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected UnicastIPAddressInformation()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: UnicastIPAddressInformation.UnicastIPAddressInformation()\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime\n  id: AddressPreferredLifetime\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: AddressPreferredLifetime\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddressPreferredLifetime\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 421\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the number of seconds remaining during which this address is the preferred address.</p>\\n\"\n  syntax:\n    content: public abstract long AddressPreferredLifetime { get; }\n    content.vb: Public MustOverride ReadOnly Property AddressPreferredLifetime As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>An <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the number of seconds left for this address to remain preferred.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.AddressPreferredLifetime\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime\n  id: AddressValidLifetime\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: AddressValidLifetime\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddressValidLifetime\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 422\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the number of seconds remaining during which this address is valid.</p>\\n\"\n  syntax:\n    content: public abstract long AddressValidLifetime { get; }\n    content.vb: Public MustOverride ReadOnly Property AddressValidLifetime As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>An <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the number of seconds left for this address to remain assigned.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.AddressValidLifetime\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime\n  id: DhcpLeaseLifetime\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: DhcpLeaseLifetime\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DhcpLeaseLifetime\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 423\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.</p>\\n\"\n  syntax:\n    content: public abstract long DhcpLeaseLifetime { get; }\n    content.vb: Public MustOverride ReadOnly Property DhcpLeaseLifetime As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>An <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that contains the number of seconds remaining before the computer must release the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.DhcpLeaseLifetime\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState\n  id: DuplicateAddressDetectionState\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: DuplicateAddressDetectionState\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DuplicateAddressDetectionState\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 424\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a value that indicates the state of the duplicate address detection algorithm.</p>\\n\"\n  syntax:\n    content: public abstract DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }\n    content.vb: Public MustOverride ReadOnly Property DuplicateAddressDetectionState As DuplicateAddressDetectionState\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.DuplicateAddressDetectionState\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.NetworkInformation.DuplicateAddressDetectionState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that indicates the progress of the algorithm in determining the uniqueness of this IP address.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.DuplicateAddressDetectionState\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask\n  id: IPv4Mask\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: IPv4Mask\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv4Mask\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 425\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the IPv4 mask.</p>\\n\"\n  syntax:\n    content: public abstract IPAddress IPv4Mask { get; }\n    content.vb: Public MustOverride ReadOnly Property IPv4Mask As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the IPv4 mask.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.IPv4Mask\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength\n  id: PrefixLength\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: PrefixLength\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrefixLength\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 426\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the length, in bits, of the prefix or network part of the IP address.</p>\\n\"\n  syntax:\n    content: public virtual int PrefixLength { get; }\n    content.vb: Public Overridable ReadOnly Property PrefixLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>the length, in bits, of the prefix or network part of the IP address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.PrefixLength\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin\n  id: PrefixOrigin\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: PrefixOrigin\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrefixOrigin\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 427\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a value that identifies the source of a unicast Internet Protocol (IP) address prefix.</p>\\n\"\n  syntax:\n    content: public abstract PrefixOrigin PrefixOrigin { get; }\n    content.vb: Public MustOverride ReadOnly Property PrefixOrigin As PrefixOrigin\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.PrefixOrigin\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.NetworkInformation.PrefixOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that identifies how the prefix information was obtained.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.PrefixOrigin\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin\n  commentId: P:System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin\n  id: SuffixOrigin\n  parent: System.Net.NetworkInformation.UnicastIPAddressInformation\n  langs:\n  - csharp\n  - vb\n  name: SuffixOrigin\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SuffixOrigin\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 428\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a value that identifies the source of a unicast Internet Protocol (IP) address suffix.</p>\\n\"\n  syntax:\n    content: public abstract SuffixOrigin SuffixOrigin { get; }\n    content.vb: Public MustOverride ReadOnly Property SuffixOrigin As SuffixOrigin\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.SuffixOrigin\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.NetworkInformation.SuffixOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that identifies how the suffix information was obtained.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: UnicastIPAddressInformation.SuffixOrigin\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.NetworkInformation.IPAddressInformation\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPAddressInformation\n  fullName: System.Net.NetworkInformation.IPAddressInformation\n  commentId: T:System.Net.NetworkInformation.IPAddressInformation\n  nameWithType: IPAddressInformation\n- uid: System.Net.NetworkInformation.IPAddressInformation.Address\n  parent: System.Net.NetworkInformation.IPAddressInformation\n  isExternal: false\n  name: Address\n  fullName: System.Net.NetworkInformation.IPAddressInformation.Address\n  commentId: P:System.Net.NetworkInformation.IPAddressInformation.Address\n  nameWithType: IPAddressInformation.Address\n- uid: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible\n  parent: System.Net.NetworkInformation.IPAddressInformation\n  isExternal: false\n  name: IsDnsEligible\n  fullName: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible\n  commentId: P:System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible\n  nameWithType: IPAddressInformation.IsDnsEligible\n- uid: System.Net.NetworkInformation.IPAddressInformation.IsTransient\n  parent: System.Net.NetworkInformation.IPAddressInformation\n  isExternal: false\n  name: IsTransient\n  fullName: System.Net.NetworkInformation.IPAddressInformation.IsTransient\n  commentId: P:System.Net.NetworkInformation.IPAddressInformation.IsTransient\n  nameWithType: IPAddressInformation.IsTransient\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Net.NetworkInformation.DuplicateAddressDetectionState\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: DuplicateAddressDetectionState\n  fullName: System.Net.NetworkInformation.DuplicateAddressDetectionState\n  commentId: T:System.Net.NetworkInformation.DuplicateAddressDetectionState\n  nameWithType: DuplicateAddressDetectionState\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.NetworkInformation.PrefixOrigin\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PrefixOrigin\n  fullName: System.Net.NetworkInformation.PrefixOrigin\n  commentId: T:System.Net.NetworkInformation.PrefixOrigin\n  nameWithType: PrefixOrigin\n- uid: System.Net.NetworkInformation.SuffixOrigin\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: SuffixOrigin\n  fullName: System.Net.NetworkInformation.SuffixOrigin\n  commentId: T:System.Net.NetworkInformation.SuffixOrigin\n  nameWithType: SuffixOrigin\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n"}