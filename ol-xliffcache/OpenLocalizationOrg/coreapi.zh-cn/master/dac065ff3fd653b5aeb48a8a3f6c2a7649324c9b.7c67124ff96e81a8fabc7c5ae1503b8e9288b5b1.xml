{"nodes":[{"pos":[711,730],"content":"EqualityComparer<T>","needQuote":true,"nodes":[{"content":"EqualityComparer&lt;T&gt;","pos":[0,19],"source":"EqualityComparer<T>"}]},{"content":"\\n&lt;p&gt;The type of objects to compare.&lt;/p&gt;\\n","pos":[1873,1915],"source":"\\n<p>The type of objects to compare.</p>\\n"},{"pos":[3067,3085],"content":"EqualityComparer()","needQuote":true,"nodes":[{"content":"EqualityComparer()","pos":[0,18]}]},{"pos":[4262,4269],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[6029,6041],"content":"Equals(T, T)","needQuote":true,"nodes":[{"content":"Equals(T, T)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[6809,6848],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[6900,6940],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified objects are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7001,7106],"source":"\\n<p>\\n<strong>true</strong> if the specified objects are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7721,7735],"content":"GetHashCode(T)","needQuote":true,"nodes":[{"content":"GetHashCode(T)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object for which to get a hash code.&lt;/p&gt;\\n","pos":[8568,8619],"source":"\\n<p>The object for which to get a hash code.</p>\\n"},{"content":"\\n&lt;p&gt;A hash code for the specified object.&lt;/p&gt;\\n","pos":[8678,8726],"source":"\\n<p>A hash code for the specified object.</p>\\n"},{"content":"\\n&lt;p&gt;The type of &lt;em&gt;obj&lt;/em&gt; is a reference type and &lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8845,8943],"source":"\\n<p>The type of <em>obj</em> is a reference type and <em>obj</em> is <strong>null</strong>.</p>\\n"},{"pos":[9750,9790],"content":"IEqualityComparer.Equals(Object, Object)","needQuote":true,"nodes":[{"content":"IEqualityComparer.Equals(Object, Object)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[10695,10734],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[10794,10834],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified objects are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10895,11000],"source":"\\n<p>\\n<strong>true</strong> if the specified objects are equal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; or &lt;em&gt;y&lt;/em&gt; is of a type that cannot be cast to type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11111,11201],"source":"\\n<p>\\n<em>x</em> or <em>y</em> is of a type that cannot be cast to type <em>T</em>.</p>\\n"},{"pos":[12100,12137],"content":"IEqualityComparer.GetHashCode(Object)","needQuote":true,"nodes":[{"content":"IEqualityComparer.GetHashCode(Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;A hash code for the specified object.&lt;/p&gt;\\n","pos":[13216,13264],"source":"\\n<p>A hash code for the specified object.</p>\\n"},{"content":"\\n&lt;p&gt;The type of &lt;em&gt;obj&lt;/em&gt; is a reference type and &lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;obj&lt;/em&gt; is of a type that cannot be cast to type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[13383,13570],"source":"\\n<p>The type of <em>obj</em> is a reference type and <em>obj</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>obj</em> is of a type that cannot be cast to type <em>T</em>.</p>\\n"},{"pos":[14098,14124],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[14315,14321],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14563,14583],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[14826,14843],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[14934,14935],"content":"<","needQuote":true,"nodes":[]},{"pos":[14962,14963],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15089,15106],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[15198,15201]},{"pos":[15235,15236],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15263,15264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15526,15543],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[15760,15770],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15865,15873],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15942,15943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15970,15971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16041,16049],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16118,16119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16146,16147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16330,16344],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16463,16469],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16536,16537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16587,16593],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16653,16654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16737,16743],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16810,16811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16861,16867],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16927,16928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17142,17164],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17312,17318],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17385,17386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17436,17442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17503,17504]},{"pos":[17559,17565],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17625,17626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17723,17729],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17796,17797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17847,17853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17914,17915]},{"pos":[17970,17976],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18036,18037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18282,18313],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18479,18494],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18570,18571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18621,18627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18688,18689]},{"pos":[18744,18750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18810,18811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18917,18932],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19008,19009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19059,19065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19126,19127]},{"pos":[19182,19188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19248,19249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19479,19492],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19593,19604],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19676,19677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19704,19705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19778,19789],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19861,19862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19889,19890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20065,20074],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20167,20174],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20242,20243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20270,20271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20340,20347],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20415,20416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20443,20444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20619,20636],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20745,20760],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20836,20837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20864,20865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20942,20957],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21033,21034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21061,21062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21207,21213],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21360,21380],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[21623,21640],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[21710,21711],"content":"<","needQuote":true,"nodes":[]},{"pos":[21738,21739],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21865,21882],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[21953,21956]},{"pos":[21990,21991],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22018,22019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22232,22250],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[22469,22488],"content":"EqualityComparer<T>","needQuote":true,"nodes":[{"content":"EqualityComparer&lt;T&gt;","pos":[0,19],"source":"EqualityComparer<T>"}]},{"pos":[22727,22743],"content":"EqualityComparer","needQuote":true,"nodes":[{"content":"EqualityComparer","pos":[0,16]}]},{"pos":[22812,22813],"content":"<","needQuote":true,"nodes":[]},{"pos":[22840,22841],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22966,22982],"content":"EqualityComparer","needQuote":true,"nodes":[{"content":"EqualityComparer","pos":[0,16]}]},{"content":"(Of","pos":[23052,23055]},{"pos":[23089,23090],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23117,23118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23490,23502],"content":"Equals(T, T)","needQuote":true,"nodes":[{"content":"Equals(T, T)","pos":[0,12]}]},{"pos":[23750,23756],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23857,23858],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23885,23886],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[23914,23915]},{"pos":[23947,23948],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23975,23976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24084,24090],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24194,24195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24222,24223],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[24251,24252]},{"pos":[24284,24285],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24312,24313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24551,24552],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24671,24678],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24855,24867],"content":"Equals(T, T)","needQuote":true,"nodes":[{"content":"Equals(T, T)","pos":[0,12]}]},{"pos":[25115,25121],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25222,25223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25250,25251],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[25279,25280]},{"pos":[25312,25313],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25340,25341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25449,25455],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25559,25560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25587,25588],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[25616,25617]},{"pos":[25649,25650],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25677,25678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25914,25915],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26167,26181],"content":"GetHashCode(T)","needQuote":true,"nodes":[{"content":"GetHashCode(T)","pos":[0,14]}]},{"pos":[26435,26446],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26552,26553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26580,26581],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26608,26609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26719,26730],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26839,26840],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26867,26868],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26895,26896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27168,27173],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27346,27360],"content":"GetHashCode(T)","needQuote":true,"nodes":[{"content":"GetHashCode(T)","pos":[0,14]}]},{"pos":[27614,27625],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27731,27732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27759,27760],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[27787,27788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27898,27909],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28018,28019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28046,28047],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28074,28075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28434,28456],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28650,28656],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28746,28747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28797,28803],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28864,28865]},{"pos":[28920,28926],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28986,28987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29107,29113],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29203,29204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29254,29260],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29321,29322]},{"pos":[29377,29383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29443,29444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29751,29770],"content":"GetHashCode(Object)","needQuote":true,"nodes":[{"content":"GetHashCode(Object)","pos":[0,19]}]},{"pos":[29945,29956],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30051,30052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30102,30108],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30168,30169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30280,30291],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30386,30387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30437,30443],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30503,30504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30718,30739],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[30940,30957],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.Generic.EqualityComparer`1\n  commentId: T:System.Collections.Generic.EqualityComparer`1\n  id: EqualityComparer`1\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.EqualityComparer`1.#ctor\n  - System.Collections.Generic.EqualityComparer`1.Default\n  - System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)\n  - System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)\n  - System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  - System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: EqualityComparer<T>\n  fullName: System.Collections.Generic.EqualityComparer<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EqualityComparer\n    path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n    startLine: 17\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Provides a base class for implementations of the <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [TypeDependency(\"System.Collections.Generic.ObjectEqualityComparer`1\")]\n\n      public abstract class EqualityComparer<T> : IEqualityComparer, IEqualityComparer<T>\n    content.vb: >-\n      <Serializable>\n\n      <TypeDependency(\"System.Collections.Generic.ObjectEqualityComparer`1\")>\n\n      Public MustInherit Class EqualityComparer(Of T)\n          Implements IEqualityComparer, IEqualityComparer(Of T)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of objects to compare.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IEqualityComparer`1\n    commentId: T:System.Collections.Generic.IEqualityComparer`1\n  - type: System.IEquatable`1\n    commentId: T:System.IEquatable`1\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEqualityComparer{{T}}\n  - System.Collections.IEqualityComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T)\n  name.vb: EqualityComparer(Of T)\n  nameWithType: EqualityComparer<T>\n  nameWithType.vb: EqualityComparer(Of T)\n- uid: System.Collections.Generic.EqualityComparer`1.#ctor\n  commentId: M:System.Collections.Generic.EqualityComparer`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.EqualityComparer`1\n  langs:\n  - csharp\n  - vb\n  name: EqualityComparer()\n  fullName: System.Collections.Generic.EqualityComparer<T>.EqualityComparer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections/ref/System.Collections.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections/ref/System.Collections.cs\n    startLine: 159\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Generic.EqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected EqualityComparer()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).EqualityComparer()\n  nameWithType: EqualityComparer<T>.EqualityComparer()\n  nameWithType.vb: EqualityComparer(Of T).EqualityComparer()\n- uid: System.Collections.Generic.EqualityComparer`1.Default\n  commentId: P:System.Collections.Generic.EqualityComparer`1.Default\n  id: Default\n  parent: System.Collections.Generic.EqualityComparer`1\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Collections.Generic.EqualityComparer<T>.Default\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Default\n    path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n    startLine: 23\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Returns a default equality comparer for the type specified by the generic argument.</p>\\n\"\n  syntax:\n    content: public static EqualityComparer<T> Default { get; }\n    content.vb: Public Shared ReadOnly Property Default As EqualityComparer(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.EqualityComparer`1\n      description: \"\\n<p>The default instance of the <xref href=\\\"System.Collections.Generic.EqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for type <em>T</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IEqualityComparer`1\n    commentId: T:System.Collections.Generic.IEqualityComparer`1\n  - type: System.IEquatable`1\n    commentId: T:System.IEquatable`1\n  - type: System.Object\n    commentId: T:System.Object\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).Default\n  nameWithType: EqualityComparer<T>.Default\n  nameWithType.vb: EqualityComparer(Of T).Default\n- uid: System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)\n  commentId: M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)\n  id: Equals(`0,`0)\n  parent: System.Collections.Generic.EqualityComparer`1\n  langs:\n  - csharp\n  - vb\n  name: Equals(T, T)\n  fullName: System.Collections.Generic.EqualityComparer<T>.Equals(T, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n    startLine: 93\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>When overridden in a derived class, determines whether two objects of type <em>T</em> are equal.</p>\\n\"\n  syntax:\n    content: public abstract bool Equals(T x, T y)\n    content.vb: Public MustOverride Function Equals(x As T, y As T) As Boolean\n    parameters:\n    - id: x\n      type: '{T}'\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: y\n      type: '{T}'\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified objects are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IEqualityComparer{{T}}.Equals({T},{T})\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).Equals(T, T)\n  nameWithType: EqualityComparer<T>.Equals(T, T)\n  nameWithType.vb: EqualityComparer(Of T).Equals(T, T)\n- uid: System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)\n  commentId: M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)\n  id: GetHashCode(`0)\n  parent: System.Collections.Generic.EqualityComparer`1\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode(T)\n  fullName: System.Collections.Generic.EqualityComparer<T>.GetHashCode(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n    startLine: 95\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.</p>\\n\"\n  syntax:\n    content: public abstract int GetHashCode(T obj)\n    content.vb: Public MustOverride Function GetHashCode(obj As T) As Integer\n    parameters:\n    - id: obj\n      type: '{T}'\n      description: \"\\n<p>The object for which to get a hash code.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the specified object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The type of <em>obj</em> is a reference type and <em>obj</em> is <strong>null</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IEqualityComparer{{T}}.GetHashCode({T})\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).GetHashCode(T)\n  nameWithType: EqualityComparer<T>.GetHashCode(T)\n  nameWithType.vb: EqualityComparer(Of T).GetHashCode(T)\n- uid: System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  commentId: M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  id: System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.EqualityComparer`1\n  langs:\n  - csharp\n  - vb\n  name: IEqualityComparer.Equals(Object, Object)\n  fullName: System.Collections.Generic.EqualityComparer<T>.System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEqualityComparer.Equals\n    path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n    startLine: 121\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the specified objects are equal.</p>\\n\"\n  syntax:\n    content: bool IEqualityComparer.Equals(object x, object y)\n    content.vb: Function System.Collections.IEqualityComparer.Equals(x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals\n    parameters:\n    - id: x\n      type: System.Object\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: y\n      type: System.Object\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified objects are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>x</em> or <em>y</em> is of a type that cannot be cast to type <em>T</em>.</p>\\n\"\n  implements:\n  - System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  name.vb: System.Collections.IEqualityComparer.Equals(Object, Object)\n  nameWithType: EqualityComparer<T>.IEqualityComparer.Equals(Object, Object)\n  nameWithType.vb: EqualityComparer(Of T).System.Collections.IEqualityComparer.Equals(Object, Object)\n- uid: System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  commentId: M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  id: System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.EqualityComparer`1\n  langs:\n  - csharp\n  - vb\n  name: IEqualityComparer.GetHashCode(Object)\n  fullName: System.Collections.Generic.EqualityComparer<T>.System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEqualityComparer.GetHashCode\n    path: src/mscorlib/src/System/Collections/Generic/EqualityComparer.cs\n    startLine: 114\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Returns a hash code for the specified object.</p>\\n\"\n  syntax:\n    content: int IEqualityComparer.GetHashCode(object obj)\n    content.vb: Function System.Collections.IEqualityComparer.GetHashCode(obj As Object) As Integer Implements IEqualityComparer.GetHashCode\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which a hash code is to be returned.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the specified object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The type of <em>obj</em> is a reference type and <em>obj</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>obj</em> is of a type that cannot be cast to type <em>T</em>.</p>\\n\"\n  implements:\n  - System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  fullName.vb: System.Collections.Generic.EqualityComparer(Of T).System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  name.vb: System.Collections.IEqualityComparer.GetHashCode(Object)\n  nameWithType: EqualityComparer<T>.IEqualityComparer.GetHashCode(Object)\n  nameWithType.vb: EqualityComparer(Of T).System.Collections.IEqualityComparer.GetHashCode(Object)\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEqualityComparer{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n  commentId: T:System.Collections.Generic.IEqualityComparer{`0}\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IEqualityComparer`1\n  isExternal: false\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n  commentId: T:System.Collections.Generic.IEqualityComparer`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.Generic.EqualityComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: EqualityComparer<T>\n  fullName: System.Collections.Generic.EqualityComparer<T>\n  fullname.vb: System.Collections.Generic.EqualityComparer(Of T)\n  name.vb: EqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.EqualityComparer`1\n    name: EqualityComparer\n    fullName: System.Collections.Generic.EqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.EqualityComparer`1\n    name: EqualityComparer\n    fullName: System.Collections.Generic.EqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: EqualityComparer<T>\n  nameWithType.vb: EqualityComparer(Of T)\n  commentId: T:System.Collections.Generic.EqualityComparer`1\n- uid: System.Collections.Generic.IEqualityComparer{{T}}.Equals({T},{T})\n  parent: System.Collections.Generic.IEqualityComparer{{T}}\n  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  name: Equals(T, T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>.Equals(T, T)\n  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)\n  commentId: M:System.Collections.Generic.IEqualityComparer{`0}.Equals(`0,`0)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  isExternal: true\n  name: Equals(T, T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>.Equals(T, T)\n  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)\n  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.IEqualityComparer{{T}}.GetHashCode({T})\n  parent: System.Collections.Generic.IEqualityComparer{{T}}\n  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  name: GetHashCode(T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>.GetHashCode(T)\n  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)\n  commentId: M:System.Collections.Generic.IEqualityComparer{`0}.GetHashCode(`0)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  isExternal: true\n  name: GetHashCode(T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>.GetHashCode(T)\n  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)\n  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n- uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  parent: System.Collections.IEqualityComparer\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Collections.IEqualityComparer.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Collections.IEqualityComparer.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer.Equals(Object, Object)\n  commentId: M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n- uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  parent: System.Collections.IEqualityComparer\n  isExternal: true\n  name: GetHashCode(Object)\n  fullName: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n    name: GetHashCode\n    fullName: System.Collections.IEqualityComparer.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n    name: GetHashCode\n    fullName: System.Collections.IEqualityComparer.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer.GetHashCode(Object)\n  commentId: M:System.Collections.IEqualityComparer.GetHashCode(System.Object)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}