{"nodes":[{"pos":[1215,1222],"content":"ECCurve","needQuote":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[2750,2751],"content":"A","needQuote":true,"nodes":[{"content":"A","pos":[0,1]}]},{"pos":[3627,3628],"content":"B","needQuote":true,"nodes":[{"content":"B","pos":[0,1]}]},{"pos":[4525,4533],"content":"Cofactor","needQuote":true,"nodes":[{"content":"Cofactor","pos":[0,8]}]},{"pos":[5468,5477],"content":"CurveType","needQuote":true,"nodes":[{"content":"CurveType","pos":[0,9]}]},{"pos":[6454,6455],"content":"G","needQuote":true,"nodes":[{"content":"G","pos":[0,1]}]},{"pos":[7365,7369],"content":"Hash","needQuote":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[8346,8351],"content":"Order","needQuote":true,"nodes":[{"content":"Order","pos":[0,5]}]},{"pos":[9274,9284],"content":"Polynomial","needQuote":true,"nodes":[{"content":"Polynomial","pos":[0,10]}]},{"pos":[10217,10222],"content":"Prime","needQuote":true,"nodes":[{"content":"Prime","pos":[0,5]}]},{"pos":[11127,11131],"content":"Seed","needQuote":true,"nodes":[{"content":"Seed","pos":[0,4]}]},{"pos":[12070,12087],"content":"IsCharacteristic2","needQuote":true,"nodes":[{"content":"IsCharacteristic2","pos":[0,17]}]},{"pos":[13140,13150],"content":"IsExplicit","needQuote":true,"nodes":[{"content":"IsExplicit","pos":[0,10]}]},{"pos":[14159,14166],"content":"IsNamed","needQuote":true,"nodes":[{"content":"IsNamed","pos":[0,7]}]},{"pos":[15160,15167],"content":"IsPrime","needQuote":true,"nodes":[{"content":"IsPrime","pos":[0,7]}]},{"pos":[16149,16152],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[17229,17259],"content":"CreateFromFriendlyName(String)","needQuote":true,"nodes":[{"content":"CreateFromFriendlyName(String)","pos":[0,30]}]},{"pos":[18591,18609],"content":"CreateFromOid(Oid)","needQuote":true,"nodes":[{"content":"CreateFromOid(Oid)","pos":[0,18]}]},{"pos":[19853,19876],"content":"CreateFromValue(String)","needQuote":true,"nodes":[{"content":"CreateFromValue(String)","pos":[0,23]}]},{"pos":[21035,21045],"content":"Validate()","needQuote":true,"nodes":[{"content":"Validate()","pos":[0,10]}]},{"pos":[21847,21875],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[22116,22130],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22296,22302],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22386,22387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22457,22463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22548,22549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22655,22661],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22745,22746],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22816,22822],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22907,22908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23080,23093],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23240,23251],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23345,23346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23393,23394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23490,23501],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23595,23596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23643,23644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23810,23820],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23958,23966],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24054,24055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24102,24103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24196,24204],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24292,24293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24340,24341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24551,24573],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[24767,24773],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24872,24873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24943,24949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25035,25036]},{"pos":[25114,25120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25205,25206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25323,25329],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25428,25429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25499,25505],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25591,25592]},{"pos":[25670,25676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25761,25762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25990,26021],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26242,26257],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26374,26375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26445,26451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26537,26538]},{"pos":[26616,26622],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26707,26708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26834,26849],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26966,26967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27037,27043],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27129,27130]},{"pos":[27208,27214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27299,27300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27454,27463],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27589,27596],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27697,27698],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27745,27746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27835,27842],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27943,27944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27991,27992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28130,28139],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[28290,28296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28410,28416],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[28488,28494],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[28663,28667],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[28749,28751]},{"pos":[28837,28841],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28922,28924],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[29150,29169],"content":"ECCurve.ECCurveType","needQuote":true,"nodes":[{"content":"ECCurve.ECCurveType","pos":[0,19]}]},{"pos":[29430,29437],"content":"ECPoint","needQuote":true,"nodes":[{"content":"ECPoint","pos":[0,7]}]},{"pos":[29718,29745],"content":"Nullable<HashAlgorithmName>","needQuote":true,"nodes":[{"content":"Nullable&lt;HashAlgorithmName&gt;","pos":[0,27],"source":"Nullable<HashAlgorithmName>"}]},{"pos":[30092,30100],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[30189,30190],"content":"<","needQuote":true,"nodes":[]},{"pos":[30293,30310],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[30531,30539],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[30629,30632]},{"pos":[30747,30764],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[30893,30894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31034,31045],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[31254,31262],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[31330,31331],"content":"<","needQuote":true,"nodes":[]},{"pos":[31378,31379],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[31518,31526],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[31595,31598]},{"pos":[31657,31658],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[31705,31706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31840,31847],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32054,32057],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[32218,32224],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32437,32444],"content":"ECCurve","needQuote":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]}],"content":"items:\n- uid: System.Security.Cryptography.ECCurve\n  commentId: T:System.Security.Cryptography.ECCurve\n  id: ECCurve\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ECCurve.A\n  - System.Security.Cryptography.ECCurve.B\n  - System.Security.Cryptography.ECCurve.Cofactor\n  - System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)\n  - System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)\n  - System.Security.Cryptography.ECCurve.CreateFromValue(System.String)\n  - System.Security.Cryptography.ECCurve.CurveType\n  - System.Security.Cryptography.ECCurve.G\n  - System.Security.Cryptography.ECCurve.Hash\n  - System.Security.Cryptography.ECCurve.IsCharacteristic2\n  - System.Security.Cryptography.ECCurve.IsExplicit\n  - System.Security.Cryptography.ECCurve.IsNamed\n  - System.Security.Cryptography.ECCurve.IsPrime\n  - System.Security.Cryptography.ECCurve.Oid\n  - System.Security.Cryptography.ECCurve.Order\n  - System.Security.Cryptography.ECCurve.Polynomial\n  - System.Security.Cryptography.ECCurve.Prime\n  - System.Security.Cryptography.ECCurve.Seed\n  - System.Security.Cryptography.ECCurve.Validate\n  langs:\n  - csharp\n  - vb\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n  type: Struct\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECCurve\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 25\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct ECCurve\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure ECCurve\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n- uid: System.Security.Cryptography.ECCurve.A\n  commentId: F:System.Security.Cryptography.ECCurve.A\n  id: A\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: A\n  nameWithType: ECCurve.A\n  fullName: System.Security.Cryptography.ECCurve.A\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: A\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 28\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] A\n    content.vb: Public A As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.B\n  commentId: F:System.Security.Cryptography.ECCurve.B\n  id: B\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: B\n  nameWithType: ECCurve.B\n  fullName: System.Security.Cryptography.ECCurve.B\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: B\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 29\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] B\n    content.vb: Public B As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.Cofactor\n  commentId: F:System.Security.Cryptography.ECCurve.Cofactor\n  id: Cofactor\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Cofactor\n  nameWithType: ECCurve.Cofactor\n  fullName: System.Security.Cryptography.ECCurve.Cofactor\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cofactor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 30\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] Cofactor\n    content.vb: Public Cofactor As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.CurveType\n  commentId: F:System.Security.Cryptography.ECCurve.CurveType\n  id: CurveType\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: CurveType\n  nameWithType: ECCurve.CurveType\n  fullName: System.Security.Cryptography.ECCurve.CurveType\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CurveType\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 31\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECCurve.ECCurveType CurveType\n    content.vb: Public CurveType As ECCurve.ECCurveType\n    return:\n      type: System.Security.Cryptography.ECCurve.ECCurveType\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.G\n  commentId: F:System.Security.Cryptography.ECCurve.G\n  id: G\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: G\n  nameWithType: ECCurve.G\n  fullName: System.Security.Cryptography.ECCurve.G\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: G\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 32\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECPoint G\n    content.vb: Public G As ECPoint\n    return:\n      type: System.Security.Cryptography.ECPoint\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.Hash\n  commentId: F:System.Security.Cryptography.ECCurve.Hash\n  id: Hash\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Hash\n  nameWithType: ECCurve.Hash\n  fullName: System.Security.Cryptography.ECCurve.Hash\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Hash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 33\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public HashAlgorithmName? Hash\n    content.vb: Public Hash As HashAlgorithmName?\n    return:\n      type: System.Nullable{System.Security.Cryptography.HashAlgorithmName}\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.Order\n  commentId: F:System.Security.Cryptography.ECCurve.Order\n  id: Order\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Order\n  nameWithType: ECCurve.Order\n  fullName: System.Security.Cryptography.ECCurve.Order\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Order\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 34\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] Order\n    content.vb: Public Order As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.Polynomial\n  commentId: F:System.Security.Cryptography.ECCurve.Polynomial\n  id: Polynomial\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Polynomial\n  nameWithType: ECCurve.Polynomial\n  fullName: System.Security.Cryptography.ECCurve.Polynomial\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Polynomial\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] Polynomial\n    content.vb: Public Polynomial As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.Prime\n  commentId: F:System.Security.Cryptography.ECCurve.Prime\n  id: Prime\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Prime\n  nameWithType: ECCurve.Prime\n  fullName: System.Security.Cryptography.ECCurve.Prime\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Prime\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 36\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] Prime\n    content.vb: Public Prime As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.Seed\n  commentId: F:System.Security.Cryptography.ECCurve.Seed\n  id: Seed\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Seed\n  nameWithType: ECCurve.Seed\n  fullName: System.Security.Cryptography.ECCurve.Seed\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Seed\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 37\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] Seed\n    content.vb: Public Seed As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECCurve.IsCharacteristic2\n  commentId: P:System.Security.Cryptography.ECCurve.IsCharacteristic2\n  id: IsCharacteristic2\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: IsCharacteristic2\n  nameWithType: ECCurve.IsCharacteristic2\n  fullName: System.Security.Cryptography.ECCurve.IsCharacteristic2\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsCharacteristic2\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 38\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool IsCharacteristic2 { get; }\n    content.vb: Public ReadOnly Property IsCharacteristic2 As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Security.Cryptography.ECCurve.IsExplicit\n  commentId: P:System.Security.Cryptography.ECCurve.IsExplicit\n  id: IsExplicit\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: IsExplicit\n  nameWithType: ECCurve.IsExplicit\n  fullName: System.Security.Cryptography.ECCurve.IsExplicit\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsExplicit\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 39\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool IsExplicit { get; }\n    content.vb: Public ReadOnly Property IsExplicit As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Security.Cryptography.ECCurve.IsNamed\n  commentId: P:System.Security.Cryptography.ECCurve.IsNamed\n  id: IsNamed\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: IsNamed\n  nameWithType: ECCurve.IsNamed\n  fullName: System.Security.Cryptography.ECCurve.IsNamed\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNamed\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 40\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool IsNamed { get; }\n    content.vb: Public ReadOnly Property IsNamed As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Security.Cryptography.ECCurve.IsPrime\n  commentId: P:System.Security.Cryptography.ECCurve.IsPrime\n  id: IsPrime\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: IsPrime\n  nameWithType: ECCurve.IsPrime\n  fullName: System.Security.Cryptography.ECCurve.IsPrime\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPrime\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 41\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool IsPrime { get; }\n    content.vb: Public ReadOnly Property IsPrime As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Security.Cryptography.ECCurve.Oid\n  commentId: P:System.Security.Cryptography.ECCurve.Oid\n  id: Oid\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Oid\n  nameWithType: ECCurve.Oid\n  fullName: System.Security.Cryptography.ECCurve.Oid\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Oid\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 42\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public Oid Oid { get; }\n    content.vb: Public ReadOnly Property Oid As Oid\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Oid\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)\n  commentId: M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)\n  id: CreateFromFriendlyName(System.String)\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFriendlyName(String)\n  nameWithType: ECCurve.CreateFromFriendlyName(String)\n  fullName: System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFriendlyName\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 43\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static ECCurve CreateFromFriendlyName(string oidFriendlyName)\n    content.vb: Public Shared Function CreateFromFriendlyName(oidFriendlyName As String) As ECCurve\n    parameters:\n    - id: oidFriendlyName\n      type: System.String\n    return:\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)\n  commentId: M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)\n  id: CreateFromOid(System.Security.Cryptography.Oid)\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: CreateFromOid(Oid)\n  nameWithType: ECCurve.CreateFromOid(Oid)\n  fullName: System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromOid\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 44\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static ECCurve CreateFromOid(Oid curveOid)\n    content.vb: Public Shared Function CreateFromOid(curveOid As Oid) As ECCurve\n    parameters:\n    - id: curveOid\n      type: System.Security.Cryptography.Oid\n    return:\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Security.Cryptography.ECCurve.CreateFromValue(System.String)\n  commentId: M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)\n  id: CreateFromValue(System.String)\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: CreateFromValue(String)\n  nameWithType: ECCurve.CreateFromValue(String)\n  fullName: System.Security.Cryptography.ECCurve.CreateFromValue(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromValue\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 45\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static ECCurve CreateFromValue(string oidValue)\n    content.vb: Public Shared Function CreateFromValue(oidValue As String) As ECCurve\n    parameters:\n    - id: oidValue\n      type: System.String\n    return:\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Security.Cryptography.ECCurve.Validate\n  commentId: M:System.Security.Cryptography.ECCurve.Validate\n  id: Validate\n  parent: System.Security.Cryptography.ECCurve\n  langs:\n  - csharp\n  - vb\n  name: Validate()\n  nameWithType: ECCurve.Validate()\n  fullName: System.Security.Cryptography.ECCurve.Validate()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Validate\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 46\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Validate()\n    content.vb: Public Sub Validate\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\nreferences:\n- uid: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n- uid: System.ValueType.Equals(System.Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: ValueType.Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType.GetHashCode\n  commentId: M:System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ValueType.GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType.ToString\n  commentId: M:System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  nameWithType: ValueType.ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType\n  commentId: T:System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Byte[]\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  nameWithType.vb: Byte()\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Security.Cryptography.ECCurve.ECCurveType\n  commentId: T:System.Security.Cryptography.ECCurve.ECCurveType\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve.ECCurveType\n  nameWithType: ECCurve.ECCurveType\n  fullName: System.Security.Cryptography.ECCurve.ECCurveType\n- uid: System.Security.Cryptography.ECPoint\n  commentId: T:System.Security.Cryptography.ECPoint\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECPoint\n  nameWithType: ECPoint\n  fullName: System.Security.Cryptography.ECPoint\n- uid: System.Nullable{System.Security.Cryptography.HashAlgorithmName}\n  commentId: T:System.Nullable{System.Security.Cryptography.HashAlgorithmName}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<HashAlgorithmName>\n  nameWithType: Nullable<HashAlgorithmName>\n  fullName: System.Nullable<System.Security.Cryptography.HashAlgorithmName>\n  nameWithType.vb: Nullable(Of HashAlgorithmName)\n  fullname.vb: System.Nullable(Of System.Security.Cryptography.HashAlgorithmName)\n  name.vb: Nullable(Of HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Nullable`1\n  commentId: T:System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  nameWithType: Oid\n  fullName: System.Security.Cryptography.Oid\n- uid: System.String\n  commentId: T:System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECCurve\n  commentId: T:System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n"}