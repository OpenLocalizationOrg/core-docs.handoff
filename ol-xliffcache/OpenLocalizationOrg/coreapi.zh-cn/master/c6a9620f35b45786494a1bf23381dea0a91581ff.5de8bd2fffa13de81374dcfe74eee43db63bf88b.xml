{"nodes":[{"pos":[9659,9669],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[11442,11460],"content":"BigInteger(Byte[])","needQuote":true,"nodes":[{"content":"BigInteger(Byte[])","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An array of byte values in little-endian order.&lt;/p&gt;\\n","pos":[12327,12385],"source":"\\n<p>An array of byte values in little-endian order.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12504,12557],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[13323,13342],"content":"BigInteger(Decimal)","needQuote":true,"nodes":[{"content":"BigInteger(Decimal)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A decimal number.&lt;/p&gt;\\n","pos":[14193,14221],"source":"\\n<p>A decimal number.</p>\\n"},{"pos":[14547,14565],"content":"BigInteger(Double)","needQuote":true,"nodes":[{"content":"BigInteger(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point value.&lt;/p&gt;\\n","pos":[15369,15420],"source":"\\n<p>A double-precision floating-point value.</p>\\n"},{"pos":[16261,16278],"content":"BigInteger(Int32)","needQuote":true,"nodes":[{"content":"BigInteger(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer.&lt;/p&gt;\\n","pos":[17068,17103],"source":"\\n<p>A 32-bit signed integer.</p>\\n"},{"pos":[17424,17441],"content":"BigInteger(Int64)","needQuote":true,"nodes":[{"content":"BigInteger(Int64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A 64-bit signed integer.&lt;/p&gt;\\n","pos":[18229,18264],"source":"\\n<p>A 64-bit signed integer.</p>\\n"},{"pos":[18588,18606],"content":"BigInteger(Single)","needQuote":true,"nodes":[{"content":"BigInteger(Single)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point value.&lt;/p&gt;\\n","pos":[19409,19460],"source":"\\n<p>A single-precision floating-point value.</p>\\n"},{"pos":[20304,20322],"content":"BigInteger(UInt32)","needQuote":true,"nodes":[{"content":"BigInteger(UInt32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An unsigned 32-bit integer value.&lt;/p&gt;\\n","pos":[21195,21239],"source":"\\n<p>An unsigned 32-bit integer value.</p>\\n"},{"pos":[21739,21757],"content":"BigInteger(UInt64)","needQuote":true,"nodes":[{"content":"BigInteger(UInt64)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An unsigned 64-bit integer.&lt;/p&gt;\\n","pos":[22627,22665],"source":"\\n<p>An unsigned 64-bit integer.</p>\\n"},{"pos":[23121,23127],"content":"IsEven","needQuote":true,"nodes":[{"content":"IsEven","pos":[0,6]}]},{"pos":[24384,24389],"content":"IsOne","needQuote":true,"nodes":[{"content":"IsOne","pos":[0,5]}]},{"pos":[25914,25926],"content":"IsPowerOfTwo","needQuote":true,"nodes":[{"content":"IsPowerOfTwo","pos":[0,12]}]},{"pos":[27216,27222],"content":"IsZero","needQuote":true,"nodes":[{"content":"IsZero","pos":[0,6]}]},{"pos":[28744,28752],"content":"MinusOne","needQuote":true,"nodes":[{"content":"MinusOne","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An integer whose value is negative one (-1).&lt;/p&gt;\\n","pos":[29466,29521],"source":"\\n<p>An integer whose value is negative one (-1).</p>\\n"},{"pos":[30019,30022],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object whose value is one (1).&lt;/p&gt;\\n","pos":[30706,30750],"source":"\\n<p>An object whose value is one (1).</p>\\n"},{"pos":[31256,31260],"content":"Sign","needQuote":true,"nodes":[{"content":"Sign","pos":[0,4]}]},{"pos":[32828,32832],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An integer whose value is 0 (zero).&lt;/p&gt;\\n","pos":[33521,33567],"source":"\\n<p>An integer whose value is 0 (zero).</p>\\n"},{"pos":[34058,34073],"content":"Abs(BigInteger)","needQuote":true,"nodes":[{"content":"Abs(BigInteger)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number.&lt;/p&gt;\\n","pos":[34880,34900],"source":"\\n<p>A number.</p>\\n"},{"content":"\\n&lt;p&gt;The absolute value of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34973,35021],"source":"\\n<p>The absolute value of <em>value</em>.</p>\\n"},{"pos":[35575,35602],"content":"Add(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Add(BigInteger, BigInteger)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to add.&lt;/p&gt;\\n","pos":[36476,36510],"source":"\\n<p>The first value to add.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to add.&lt;/p&gt;\\n","pos":[36587,36622],"source":"\\n<p>The second value to add.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[36695,36750],"source":"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[37456,37487],"content":"Compare(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Compare(BigInteger, BigInteger)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[38467,38505],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[38582,38621],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative values of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Condition&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; equals &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[38680,39187],"source":"\\n<p>A signed integer that indicates the relative values of <em>left</em> and <em>right</em>, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Condition</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>left</em> is less than <em>right</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>left</em> equals <em>right</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>left</em> is greater than <em>right</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[39694,39710],"content":"CompareTo(Int64)","needQuote":true,"nodes":[{"content":"CompareTo(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The signed 64-bit integer to compare.&lt;/p&gt;\\n","pos":[40556,40604],"source":"\\n<p>The signed 64-bit integer to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer value that indicates the relationship of this instance to &lt;em&gt;other&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance is less than &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance equals &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance is greater than &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[40663,41196],"source":"\\n<p>A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current instance is less than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current instance equals <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current instance is greater than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[41568,41589],"content":"CompareTo(BigInteger)","needQuote":true,"nodes":[{"content":"CompareTo(BigInteger)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The object to compare.&lt;/p&gt;\\n","pos":[42542,42575],"source":"\\n<p>The object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer value that indicates the relationship of this instance to &lt;em&gt;other&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance is less than &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance equals &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance is greater than &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[42634,43167],"source":"\\n<p>A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current instance is less than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current instance equals <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current instance is greater than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[44046,44063],"content":"CompareTo(UInt64)","needQuote":true,"nodes":[{"content":"CompareTo(UInt64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The unsigned 64-bit integer to compare.&lt;/p&gt;\\n","pos":[44994,45044],"source":"\\n<p>The unsigned 64-bit integer to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative value of this instance and &lt;em&gt;other&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance is less than &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance equals &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The current instance is greater than &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[45103,45633],"source":"\\n<p>A signed integer that indicates the relative value of this instance and <em>other</em>, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current instance is less than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current instance equals <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current instance is greater than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[46253,46283],"content":"Divide(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Divide(BigInteger, BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The value to be divided.&lt;/p&gt;\\n","pos":[47198,47233],"source":"\\n<p>The value to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The value to divide by.&lt;/p&gt;\\n","pos":[47312,47346],"source":"\\n<p>The value to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The quotient of the division.&lt;/p&gt;\\n","pos":[47419,47459],"source":"\\n<p>The quotient of the division.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;divisor&lt;/em&gt; is 0 (zero).&lt;/p&gt;\\n","pos":[47578,47620],"source":"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n"},{"pos":[48882,48928],"content":"DivRem(BigInteger, BigInteger, out BigInteger)","needQuote":true,"nodes":[{"content":"DivRem(BigInteger, BigInteger, out BigInteger)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The value to be divided.&lt;/p&gt;\\n","pos":[49979,50014],"source":"\\n<p>The value to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The value to divide by.&lt;/p&gt;\\n","pos":[50093,50127],"source":"\\n<p>The value to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The quotient of the division.&lt;/p&gt;\\n","pos":[50510,50550],"source":"\\n<p>The quotient of the division.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;divisor&lt;/em&gt; is 0 (zero).&lt;/p&gt;\\n","pos":[50669,50711],"source":"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n"},{"pos":[51362,51375],"content":"Equals(Int64)","needQuote":true,"nodes":[{"content":"Equals(Int64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The signed 64-bit integer value to compare.&lt;/p&gt;\\n","pos":[52116,52170],"source":"\\n<p>The signed 64-bit integer value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signed 64-bit integer and the current instance have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52231,52375],"source":"\\n<p>\\n<strong>true</strong> if the signed 64-bit integer and the current instance have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[52735,52753],"content":"Equals(BigInteger)","needQuote":true,"nodes":[{"content":"Equals(BigInteger)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The object to compare.&lt;/p&gt;\\n","pos":[53616,53649],"source":"\\n<p>The object to compare.</p>\\n"},{"pos":[54346,54360],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare.","pos":[55115,55142],"source":"\\n<p>The object to compare."},{"content":"&lt;/p&gt;\\n","pos":[55143,55149],"source":" </p>\\n"},{"pos":[56096,56110],"content":"Equals(UInt64)","needQuote":true,"nodes":[{"content":"Equals(UInt64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The unsigned 64-bit integer to compare.&lt;/p&gt;\\n","pos":[56934,56984],"source":"\\n<p>The unsigned 64-bit integer to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance and the unsigned 64-bit integer have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57045,57191],"source":"\\n<p>\\n<strong>true</strong> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[57658,57671],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[58417,58462],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[59018,59063],"content":"GreatestCommonDivisor(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"GreatestCommonDivisor(BigInteger, BigInteger)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The first value.&lt;/p&gt;\\n","pos":[60018,60045],"source":"\\n<p>The first value.</p>\\n"},{"content":"\\n&lt;p&gt;The second value.&lt;/p&gt;\\n","pos":[60122,60150],"source":"\\n<p>The second value.</p>\\n"},{"content":"\\n&lt;p&gt;The greatest common divisor of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60223,60298],"source":"\\n<p>The greatest common divisor of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[60703,60718],"content":"Log(BigInteger)","needQuote":true,"nodes":[{"content":"Log(BigInteger)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number whose logarithm is to be found.&lt;/p&gt;\\n","pos":[61472,61525],"source":"\\n<p>The number whose logarithm is to be found.</p>\\n"},{"content":"\\n&lt;p&gt;The natural (base &lt;strong&gt;e&lt;/strong&gt;) logarithm of &lt;em&gt;value&lt;/em&gt;, as shown in the table in the Remarks section.&lt;/p&gt;\\n","pos":[61585,61708],"source":"\\n<p>The natural (base <strong>e</strong>) logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\\n"},{"pos":[62568,62591],"content":"Log(BigInteger, Double)","needQuote":true,"nodes":[{"content":"Log(BigInteger, Double)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A number whose logarithm is to be found.&lt;/p&gt;\\n","pos":[63385,63436],"source":"\\n<p>A number whose logarithm is to be found.</p>\\n"},{"content":"\\n&lt;p&gt;The base of the logarithm.&lt;/p&gt;\\n","pos":[63504,63541],"source":"\\n<p>The base of the logarithm.</p>\\n"},{"content":"\\n&lt;p&gt;The base &lt;em&gt;baseValue&lt;/em&gt; logarithm of &lt;em&gt;value&lt;/em&gt;, as shown in the table in the Remarks section.&lt;/p&gt;\\n","pos":[63601,63714],"source":"\\n<p>The base <em>baseValue</em> logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\\n"},{"pos":[64538,64555],"content":"Log10(BigInteger)","needQuote":true,"nodes":[{"content":"Log10(BigInteger)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A number whose logarithm is to be found.&lt;/p&gt;\\n","pos":[65291,65342],"source":"\\n<p>A number whose logarithm is to be found.</p>\\n"},{"content":"\\n&lt;p&gt;The base 10 logarithm of &lt;em&gt;value&lt;/em&gt;, as shown in the table in the Remarks section.&lt;/p&gt;\\n","pos":[65402,65499],"source":"\\n<p>The base 10 logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\\n"},{"pos":[66240,66267],"content":"Max(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Max(BigInteger, BigInteger)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[67135,67173],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[67250,67289],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; parameter, whichever is larger.&lt;/p&gt;\\n","pos":[67362,67440],"source":"\\n<p>The <em>left</em> or <em>right</em> parameter, whichever is larger.</p>\\n"},{"pos":[68118,68145],"content":"Min(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Min(BigInteger, BigInteger)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[69014,69052],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[69129,69168],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; parameter, whichever is smaller.&lt;/p&gt;\\n","pos":[69241,69320],"source":"\\n<p>The <em>left</em> or <em>right</em> parameter, whichever is smaller.</p>\\n"},{"pos":[70088,70130],"content":"ModPow(BigInteger, BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"ModPow(BigInteger, BigInteger, BigInteger)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The number to raise to the &lt;em&gt;exponent&lt;/em&gt; power.&lt;/p&gt;\\n","pos":[71046,71108],"source":"\\n<p>The number to raise to the <em>exponent</em> power.</p>\\n"},{"content":"\\n&lt;p&gt;The exponent to raise &lt;em&gt;value&lt;/em&gt; by.&lt;/p&gt;\\n","pos":[71188,71239],"source":"\\n<p>The exponent to raise <em>value</em> by.</p>\\n"},{"content":"\\n&lt;p&gt;The number by which to divide &lt;em&gt;value&lt;/em&gt; raised to the &lt;em&gt;exponent&lt;/em&gt; power.&lt;/p&gt;\\n","pos":[71318,71412],"source":"\\n<p>The number by which to divide <em>value</em> raised to the <em>exponent</em> power.</p>\\n"},{"content":"\\n&lt;p&gt;The remainder after dividing &lt;em&gt;value&lt;/em&gt;exponent by &lt;em&gt;modulus&lt;/em&gt;.&lt;/p&gt;\\n","pos":[71485,71568],"source":"\\n<p>The remainder after dividing <em>value</em>exponent by <em>modulus</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;modulus&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[71687,71725],"source":"\\n<p>\\n<em>modulus</em> is zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;exponent&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[71842,71885],"source":"\\n<p>\\n<em>exponent</em> is negative.</p>\\n"},{"pos":[72565,72597],"content":"Multiply(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Multiply(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first number to multiply.&lt;/p&gt;\\n","pos":[73486,73526],"source":"\\n<p>The first number to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The second number to multiply.&lt;/p&gt;\\n","pos":[73603,73644],"source":"\\n<p>The second number to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The product of the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[73717,73791],"source":"\\n<p>The product of the <em>left</em> and <em>right</em> parameters.</p>\\n"},{"pos":[74418,74436],"content":"Negate(BigInteger)","needQuote":true,"nodes":[{"content":"Negate(BigInteger)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The value to negate.&lt;/p&gt;\\n","pos":[75245,75276],"source":"\\n<p>The value to negate.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the &lt;em&gt;value&lt;/em&gt; parameter multiplied by negative one (-1).&lt;/p&gt;\\n","pos":[75349,75435],"source":"\\n<p>The result of the <em>value</em> parameter multiplied by negative one (-1).</p>\\n"},{"pos":[76100,76132],"content":"Addition(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Addition(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first value to add.&lt;/p&gt;\\n","pos":[77028,77062],"source":"\\n<p>The first value to add.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to add.&lt;/p&gt;\\n","pos":[77139,77174],"source":"\\n<p>The second value to add.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[77247,77302],"source":"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[78015,78049],"content":"BitwiseAnd(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"BitwiseAnd(BigInteger, BigInteger)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first value.&lt;/p&gt;\\n","pos":[78974,79001],"source":"\\n<p>The first value.</p>\\n"},{"content":"\\n&lt;p&gt;The second value.&lt;/p&gt;\\n","pos":[79078,79106],"source":"\\n<p>The second value.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the bitwise &lt;strong&gt;And&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[79179,79247],"source":"\\n<p>The result of the bitwise <strong>And</strong> operation.</p>\\n"},{"pos":[79749,79782],"content":"BitwiseOr(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"BitwiseOr(BigInteger, BigInteger)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The first value.&lt;/p&gt;\\n","pos":[80703,80730],"source":"\\n<p>The first value.</p>\\n"},{"content":"\\n&lt;p&gt;The second value.&lt;/p&gt;\\n","pos":[80807,80835],"source":"\\n<p>The second value.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the bitwise &lt;strong&gt;Or&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[80908,80975],"source":"\\n<p>The result of the bitwise <strong>Or</strong> operation.</p>\\n"},{"pos":[81395,81416],"content":"Decrement(BigInteger)","needQuote":true,"nodes":[{"content":"Decrement(BigInteger)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The value to decrement.&lt;/p&gt;\\n","pos":[82207,82241],"source":"\\n<p>The value to decrement.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;value&lt;/em&gt; parameter decremented by 1.&lt;/p&gt;\\n","pos":[82314,82384],"source":"\\n<p>The value of the <em>value</em> parameter decremented by 1.</p>\\n"},{"pos":[83044,83076],"content":"Division(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Division(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The value to be divided.&lt;/p&gt;\\n","pos":[84113,84148],"source":"\\n<p>The value to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The value to divide by.&lt;/p&gt;\\n","pos":[84227,84261],"source":"\\n<p>The value to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The integral result of the division.&lt;/p&gt;\\n","pos":[84334,84381],"source":"\\n<p>The integral result of the division.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;divisor&lt;/em&gt; is 0 (zero).&lt;/p&gt;\\n","pos":[84500,84542],"source":"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n"},{"pos":[85213,85240],"content":"Equality(Int64, BigInteger)","needQuote":true,"nodes":[{"content":"Equality(Int64, BigInteger)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[86136,86174],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[86251,86290],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86351,86492],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[87144,87171],"content":"Equality(BigInteger, Int64)","needQuote":true,"nodes":[{"content":"Equality(BigInteger, Int64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[88081,88119],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[88182,88221],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[88282,88423],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[89117,89149],"content":"Equality(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Equality(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[90071,90109],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[90186,90225],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[90286,90427],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[91210,91238],"content":"Equality(BigInteger, UInt64)","needQuote":true,"nodes":[{"content":"Equality(BigInteger, UInt64)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[92230,92268],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[92332,92371],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[92432,92573],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[93404,93432],"content":"Equality(UInt64, BigInteger)","needQuote":true,"nodes":[{"content":"Equality(UInt64, BigInteger)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[94411,94449],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[94526,94565],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[94626,94767],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[95646,95681],"content":"ExclusiveOr(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"ExclusiveOr(BigInteger, BigInteger)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first value.&lt;/p&gt;\\n","pos":[96640,96667],"source":"\\n<p>The first value.</p>\\n"},{"content":"\\n&lt;p&gt;The second value.&lt;/p&gt;\\n","pos":[96744,96772],"source":"\\n<p>The second value.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the bitwise &lt;strong&gt;Or&lt;/strong&gt; operation.&lt;/p&gt;\\n","pos":[96845,96912],"source":"\\n<p>The result of the bitwise <strong>Or</strong> operation.</p>\\n"},{"pos":[97376,97407],"content":"Explicit(Decimal to BigInteger)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to BigInteger)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[98545,98622],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[99284,99314],"content":"Explicit(Double to BigInteger)","needQuote":true,"nodes":[{"content":"Explicit(Double to BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[100446,100523],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[101661,101689],"content":"Explicit(BigInteger to Byte)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Byte)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[102741,102818],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[103841,103872],"content":"Explicit(BigInteger to Decimal)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Decimal)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[104999,105076],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[106113,106143],"content":"Explicit(BigInteger to Double)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Double)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[107264,107341],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[107996,108025],"content":"Explicit(BigInteger to Int16)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Int16)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value to convert to a 16-bit signed integer.&lt;/p&gt;\\n","pos":[108920,108979],"source":"\\n<p>The value to convert to a 16-bit signed integer.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[109038,109115],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[110137,110166],"content":"Explicit(BigInteger to Int32)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value to convert to a 32-bit signed integer.","pos":[111061,111114],"source":"\\n<p>The value to convert to a 32-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[111115,111121],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[111180,111257],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[112279,112308],"content":"Explicit(BigInteger to Int64)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Int64)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value to convert to a 64-bit signed integer.&lt;/p&gt;\\n","pos":[113201,113260],"source":"\\n<p>The value to convert to a 64-bit signed integer.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[113319,113396],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[114418,114447],"content":"Explicit(BigInteger to SByte)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to SByte)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value to convert to a signed 8-bit value.&lt;/p&gt;\\n","pos":[115409,115465],"source":"\\n<p>The value to convert to a signed 8-bit value.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[115524,115601],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[116801,116831],"content":"Explicit(BigInteger to Single)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Single)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The value to convert to a single-precision floating-point value.&lt;/p&gt;\\n","pos":[117738,117813],"source":"\\n<p>The value to convert to a single-precision floating-point value.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the closest possible representation of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[117873,117976],"source":"\\n<p>An object that contains the closest possible representation of the <em>value</em> parameter.</p>\\n"},{"pos":[118634,118664],"content":"Explicit(BigInteger to UInt16)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to UInt16)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The value to convert to an unsigned 16-bit integer.&lt;/p&gt;\\n","pos":[119641,119703],"source":"\\n<p>The value to convert to an unsigned 16-bit integer.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter&lt;/p&gt;\\n","pos":[119763,119839],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter</p>\\n"},{"pos":[121046,121076],"content":"Explicit(BigInteger to UInt32)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to UInt32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The value to convert to an unsigned 32-bit integer.&lt;/p&gt;\\n","pos":[122053,122115],"source":"\\n<p>The value to convert to an unsigned 32-bit integer.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[122175,122252],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[123458,123488],"content":"Explicit(BigInteger to UInt64)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to UInt64)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The value to convert to an unsigned 64-bit integer.&lt;/p&gt;\\n","pos":[124463,124525],"source":"\\n<p>The value to convert to an unsigned 64-bit integer.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[124585,124662],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[125869,125899],"content":"Explicit(Single to BigInteger)","needQuote":true,"nodes":[{"content":"Explicit(Single to BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[127031,127108],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[128258,128288],"content":"GreaterThan(Int64, BigInteger)","needQuote":true,"nodes":[{"content":"GreaterThan(Int64, BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[129185,129223],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[129300,129339],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[129400,129518],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[130198,130228],"content":"GreaterThan(BigInteger, Int64)","needQuote":true,"nodes":[{"content":"GreaterThan(BigInteger, Int64)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[131139,131177],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[131240,131279],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[131340,131458],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[132180,132215],"content":"GreaterThan(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"GreaterThan(BigInteger, BigInteger)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[133229,133267],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[133344,133383],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[133444,133562],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[134250,134281],"content":"GreaterThan(BigInteger, UInt64)","needQuote":true,"nodes":[{"content":"GreaterThan(BigInteger, UInt64)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[135273,135311],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[135375,135414],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[135475,135593],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[136234,136265],"content":"GreaterThan(UInt64, BigInteger)","needQuote":true,"nodes":[{"content":"GreaterThan(UInt64, BigInteger)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[137244,137282],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[137359,137398],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[137459,137577],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[138454,138491],"content":"GreaterThanOrEqual(Int64, BigInteger)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Int64, BigInteger)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[139418,139456],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[139533,139572],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[139633,139751],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[140445,140482],"content":"GreaterThanOrEqual(BigInteger, Int64)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(BigInteger, Int64)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[141429,141467],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[141530,141569],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[141630,141748],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[142484,142526],"content":"GreaterThanOrEqual(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(BigInteger, BigInteger)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[143570,143608],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[143685,143724],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[143785,143903],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[144605,144643],"content":"GreaterThanOrEqual(BigInteger, UInt64)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(BigInteger, UInt64)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[145671,145709],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[145773,145812],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[145873,145991],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[146864,146902],"content":"GreaterThanOrEqual(UInt64, BigInteger)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(UInt64, BigInteger)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[147911,147949],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[148026,148065],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[148126,148244],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[149081,149109],"content":"Implicit(Byte to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(Byte to BigInteger)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[150168,150245],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[150889,150918],"content":"Implicit(Int16 to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(Int16 to BigInteger)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[151988,152065],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[152713,152742],"content":"Implicit(Int32 to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(Int32 to BigInteger)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[153812,153889],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[154537,154566],"content":"Implicit(Int64 to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(Int64 to BigInteger)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[155634,155711],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[156359,156388],"content":"Implicit(SByte to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(SByte to BigInteger)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[157534,157611],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[158437,158467],"content":"Implicit(UInt16 to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(UInt16 to BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[159619,159696],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[160526,160556],"content":"Implicit(UInt32 to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(UInt32 to BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[161708,161785],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[162615,162645],"content":"Implicit(UInt64 to BigInteger)","needQuote":true,"nodes":[{"content":"Implicit(UInt64 to BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[163795,163872],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n"},{"pos":[164663,164684],"content":"Increment(BigInteger)","needQuote":true,"nodes":[{"content":"Increment(BigInteger)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The value to increment.&lt;/p&gt;\\n","pos":[165476,165510],"source":"\\n<p>The value to increment.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;value&lt;/em&gt; parameter incremented by 1.&lt;/p&gt;\\n","pos":[165583,165653],"source":"\\n<p>The value of the <em>value</em> parameter incremented by 1.</p>\\n"},{"pos":[166277,166306],"content":"Inequality(Int64, BigInteger)","needQuote":true,"nodes":[{"content":"Inequality(Int64, BigInteger)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[167208,167246],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[167323,167362],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[167423,167543],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[168199,168228],"content":"Inequality(BigInteger, Int64)","needQuote":true,"nodes":[{"content":"Inequality(BigInteger, Int64)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[169144,169182],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[169245,169284],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[169345,169465],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[170163,170197],"content":"Inequality(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Inequality(BigInteger, BigInteger)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[171123,171161],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[171238,171277],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[171338,171458],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[172122,172152],"content":"Inequality(BigInteger, UInt64)","needQuote":true,"nodes":[{"content":"Inequality(BigInteger, UInt64)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[173149,173187],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[173251,173290],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[173351,173471],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[174306,174336],"content":"Inequality(UInt64, BigInteger)","needQuote":true,"nodes":[{"content":"Inequality(UInt64, BigInteger)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[175320,175358],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[175435,175474],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[175535,175655],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[176484,176512],"content":"LeftShift(BigInteger, Int32)","needQuote":true,"nodes":[{"content":"LeftShift(BigInteger, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The value whose bits are to be shifted.&lt;/p&gt;\\n","pos":[177405,177455],"source":"\\n<p>The value whose bits are to be shifted.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bits to shift &lt;em&gt;value&lt;/em&gt; to the left.&lt;/p&gt;\\n","pos":[177518,177584],"source":"\\n<p>The number of bits to shift <em>value</em> to the left.</p>\\n"},{"content":"\\n&lt;p&gt;A value that has been shifted to the left by the specified number of bits.&lt;/p&gt;\\n","pos":[177657,177742],"source":"\\n<p>A value that has been shifted to the left by the specified number of bits.</p>\\n"},{"pos":[178395,178422],"content":"LessThan(Int64, BigInteger)","needQuote":true,"nodes":[{"content":"LessThan(Int64, BigInteger)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[179313,179351],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[179428,179467],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[179528,179643],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[180305,180332],"content":"LessThan(BigInteger, Int64)","needQuote":true,"nodes":[{"content":"LessThan(BigInteger, Int64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[181237,181275],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[181338,181377],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[181438,181553],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[182257,182289],"content":"LessThan(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"LessThan(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[183297,183335],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[183412,183451],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[183512,183627],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[184297,184325],"content":"LessThan(BigInteger, UInt64)","needQuote":true,"nodes":[{"content":"LessThan(BigInteger, UInt64)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[185311,185349],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[185413,185452],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[185513,185628],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[186469,186497],"content":"LessThan(UInt64, BigInteger)","needQuote":true,"nodes":[{"content":"LessThan(UInt64, BigInteger)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[187470,187508],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[187585,187624],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[187685,187800],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[188659,188693],"content":"LessThanOrEqual(Int64, BigInteger)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Int64, BigInteger)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[189612,189650],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[189727,189766],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[189827,189954],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[190630,190664],"content":"LessThanOrEqual(BigInteger, Int64)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(BigInteger, Int64)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[191597,191635],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[191698,191737],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[191798,191925],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[192643,192682],"content":"LessThanOrEqual(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(BigInteger, BigInteger)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[193718,193756],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[193833,193872],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[193933,194060],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[194744,194779],"content":"LessThanOrEqual(BigInteger, UInt64)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(BigInteger, UInt64)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[195793,195831],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[195895,195934],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[195995,196122],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[196977,197012],"content":"LessThanOrEqual(UInt64, BigInteger)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(UInt64, BigInteger)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[198013,198051],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[198128,198167],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[198228,198355],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[199225,199256],"content":"Modulus(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Modulus(BigInteger, BigInteger)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The value to be divided.&lt;/p&gt;\\n","pos":[200203,200238],"source":"\\n<p>The value to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The value to divide by.&lt;/p&gt;\\n","pos":[200317,200351],"source":"\\n<p>The value to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The remainder that results from the division.&lt;/p&gt;\\n","pos":[200424,200480],"source":"\\n<p>The remainder that results from the division.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;divisor&lt;/em&gt; is 0 (zero).&lt;/p&gt;\\n","pos":[200599,200641],"source":"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n"},{"pos":[201624,201656],"content":"Multiply(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Multiply(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first value to multiply.&lt;/p&gt;\\n","pos":[202544,202583],"source":"\\n<p>The first value to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to multiply.&lt;/p&gt;\\n","pos":[202660,202700],"source":"\\n<p>The second value to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The product of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[202773,202832],"source":"\\n<p>The product of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[203486,203512],"content":"OnesComplement(BigInteger)","needQuote":true,"nodes":[{"content":"OnesComplement(BigInteger)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An integer value.&lt;/p&gt;\\n","pos":[204366,204394],"source":"\\n<p>An integer value.</p>\\n"},{"content":"\\n&lt;p&gt;The bitwise one's complement of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[204467,204525],"source":"\\n<p>The bitwise one's complement of <em>value</em>.</p>\\n"},{"pos":[204980,205009],"content":"RightShift(BigInteger, Int32)","needQuote":true,"nodes":[{"content":"RightShift(BigInteger, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value whose bits are to be shifted.&lt;/p&gt;\\n","pos":[205905,205955],"source":"\\n<p>The value whose bits are to be shifted.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bits to shift &lt;em&gt;value&lt;/em&gt; to the right.&lt;/p&gt;\\n","pos":[206018,206085],"source":"\\n<p>The number of bits to shift <em>value</em> to the right.</p>\\n"},{"content":"\\n&lt;p&gt;A value that has been shifted to the right by the specified number of bits.&lt;/p&gt;\\n","pos":[206158,206244],"source":"\\n<p>A value that has been shifted to the right by the specified number of bits.</p>\\n"},{"pos":[206947,206982],"content":"Subtraction(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Subtraction(BigInteger, BigInteger)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The value to subtract from (the minuend).&lt;/p&gt;\\n","pos":[207968,208020],"source":"\\n<p>The value to subtract from (the minuend).</p>\\n"},{"content":"\\n&lt;p&gt;The value to subtract (the subtrahend).&lt;/p&gt;\\n","pos":[208097,208147],"source":"\\n<p>The value to subtract (the subtrahend).</p>\\n"},{"content":"\\n&lt;p&gt;The result of subtracting &lt;em&gt;right&lt;/em&gt; from &lt;em&gt;left&lt;/em&gt;.&lt;/p&gt;\\n","pos":[208220,208291],"source":"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n"},{"pos":[208945,208970],"content":"UnaryNegation(BigInteger)","needQuote":true,"nodes":[{"content":"UnaryNegation(BigInteger)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The value to negate.&lt;/p&gt;\\n","pos":[209723,209754],"source":"\\n<p>The value to negate.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the &lt;em&gt;value&lt;/em&gt; parameter multiplied by negative one (-1).&lt;/p&gt;\\n","pos":[209827,209913],"source":"\\n<p>The result of the <em>value</em> parameter multiplied by negative one (-1).</p>\\n"},{"pos":[210325,210346],"content":"UnaryPlus(BigInteger)","needQuote":true,"nodes":[{"content":"UnaryPlus(BigInteger)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An integer value.&lt;/p&gt;\\n","pos":[211213,211241],"source":"\\n<p>An integer value.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;value&lt;/em&gt; operand.&lt;/p&gt;\\n","pos":[211314,211365],"source":"\\n<p>The value of the <em>value</em> operand.</p>\\n"},{"pos":[211713,211726],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.&lt;/p&gt;\\n","pos":[212537,212593],"source":"\\n<p>A string that contains the number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A value that is equivalent to the number specified in the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[212666,212760],"source":"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[212879,212932],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in the correct format.&lt;/p&gt;\\n","pos":[213025,213082],"source":"\\n<p>\\n<em>value</em> is not in the correct format.</p>\\n"},{"pos":[213834,213861],"content":"Parse(String, NumberStyles)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[214771,214819],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[214820,214826],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the permitted format of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[214910,215021],"source":"\\n<p>A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A value that is equivalent to the number specified in the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[215094,215188],"source":"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[215842,215895],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[216997,217041],"content":"Parse(String, NumberStyles, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles, IFormatProvider)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.&lt;/p&gt;\\n","pos":[218058,218112],"source":"\\n<p>A string that contains a number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the permitted format of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[218196,218307],"source":"\\n<p>A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information about &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[218383,218479],"source":"\\n<p>An object that provides culture-specific formatting information about <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A value that is equivalent to the number specified in the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[218552,218646],"source":"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[219300,219353],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not comply with the input pattern specified by &lt;em&gt;style&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219446,219541],"source":"\\n<p>\\n<em>value</em> does not comply with the input pattern specified by <em>style</em>.</p>\\n"},{"pos":[220291,220321],"content":"Parse(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.&lt;/p&gt;\\n","pos":[221250,221304],"source":"\\n<p>A string that contains a number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information about &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[221380,221476],"source":"\\n<p>An object that provides culture-specific formatting information about <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A value that is equivalent to the number specified in the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[221549,221643],"source":"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[221762,221815],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in the correct format.&lt;/p&gt;\\n","pos":[221908,221965],"source":"\\n<p>\\n<em>value</em> is not in the correct format.</p>\\n"},{"pos":[222704,222726],"content":"Pow(BigInteger, Int32)","needQuote":true,"nodes":[{"content":"Pow(BigInteger, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number to raise to the &lt;em&gt;exponent&lt;/em&gt; power.&lt;/p&gt;\\n","pos":[223596,223658],"source":"\\n<p>The number to raise to the <em>exponent</em> power.</p>\\n"},{"content":"\\n&lt;p&gt;The exponent to raise &lt;em&gt;value&lt;/em&gt; by.&lt;/p&gt;\\n","pos":[223724,223775],"source":"\\n<p>The exponent to raise <em>value</em> by.</p>\\n"},{"content":"\\n&lt;p&gt;The result of raising &lt;em&gt;value&lt;/em&gt; to the &lt;em&gt;exponent&lt;/em&gt; power.&lt;/p&gt;\\n","pos":[223848,223927],"source":"\\n<p>The result of raising <em>value</em> to the <em>exponent</em> power.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;exponent&lt;/em&gt; parameter is negative.&lt;/p&gt;\\n","pos":[224058,224126],"source":"\\n<p>The value of the <em>exponent</em> parameter is negative.</p>\\n"},{"pos":[224607,224640],"content":"Remainder(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Remainder(BigInteger, BigInteger)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The value to be divided.&lt;/p&gt;\\n","pos":[225582,225617],"source":"\\n<p>The value to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The value to divide by.&lt;/p&gt;\\n","pos":[225696,225730],"source":"\\n<p>The value to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The remainder after dividing &lt;em&gt;dividend&lt;/em&gt; by &lt;em&gt;divisor&lt;/em&gt;.&lt;/p&gt;\\n","pos":[225803,225881],"source":"\\n<p>The remainder after dividing <em>dividend</em> by <em>divisor</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;divisor&lt;/em&gt; is 0 (zero).&lt;/p&gt;\\n","pos":[226000,226042],"source":"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n"},{"pos":[227016,227048],"content":"Subtract(BigInteger, BigInteger)","needQuote":true,"nodes":[{"content":"Subtract(BigInteger, BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The value to subtract from (the minuend).&lt;/p&gt;\\n","pos":[227960,228012],"source":"\\n<p>The value to subtract from (the minuend).</p>\\n"},{"content":"\\n&lt;p&gt;The value to subtract (the subtrahend).&lt;/p&gt;\\n","pos":[228089,228139],"source":"\\n<p>The value to subtract (the subtrahend).</p>\\n"},{"content":"\\n&lt;p&gt;The result of subtracting &lt;em&gt;right&lt;/em&gt; from &lt;em&gt;left&lt;/em&gt;.&lt;/p&gt;\\n","pos":[228212,228283],"source":"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n"},{"pos":[228957,228986],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[230135,230148],"content":"ToByteArray()","needQuote":true,"nodes":[{"content":"ToByteArray()","pos":[0,13]}]},{"pos":[231310,231320],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[232665,232690],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[233623,233698],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"pos":[234301,234317],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string.&lt;/p&gt;\\n","pos":[235175,235229],"source":"\\n<p>A standard or custom numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid format string.&lt;/p&gt;\\n","pos":[235598,235656],"source":"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n"},{"pos":[236055,236088],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string.&lt;/p&gt;\\n","pos":[237065,237119],"source":"\\n<p>A standard or custom numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[237195,237270],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid format string.&lt;/p&gt;\\n","pos":[237651,237709],"source":"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n"},{"pos":[238396,238459],"content":"TryParse(String, NumberStyles, IFormatProvider, out BigInteger)","needQuote":true,"nodes":[{"content":"TryParse(String, NumberStyles, IFormatProvider, out BigInteger)","pos":[0,63]}]},{"content":"\\n&lt;p&gt;The string representation of a number.","pos":[239639,239682],"source":"\\n<p>The string representation of a number."},{"content":"The string is interpreted using the style specified by &lt;em&gt;style&lt;/em&gt;.&lt;/p&gt;\\n","pos":[239683,239759],"source":" The string is interpreted using the style specified by <em>style</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[240179,240275],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;value&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[240912,241041],"source":"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[242516,242548],"content":"TryParse(String, out BigInteger)","needQuote":true,"nodes":[{"content":"TryParse(String, out BigInteger)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The string representation of a number.&lt;/p&gt;\\n","pos":[243522,243571],"source":"\\n<p>The string representation of a number.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[244096,244211],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[244330,244383],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[244939,244954],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[245117,245128],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[245336,245359],"content":"IComparable<BigInteger>","needQuote":true,"nodes":[{"content":"IComparable&lt;BigInteger&gt;","pos":[0,23],"source":"IComparable<BigInteger>"}]},{"pos":[245577,245588],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[245653,245654],"content":"<","needQuote":true,"nodes":[]},{"pos":[245717,245727],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[245852,245863],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[245929,245932]},{"pos":[246002,246012],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[246064,246065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[246342,246364],"content":"IEquatable<BigInteger>","needQuote":true,"nodes":[{"content":"IEquatable&lt;BigInteger&gt;","pos":[0,22],"source":"IEquatable<BigInteger>"}]},{"pos":[246578,246588],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[246652,246653],"content":"<","needQuote":true,"nodes":[]},{"pos":[246716,246726],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[246850,246860],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[246925,246928]},{"pos":[246998,247008],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[247060,247061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[247295,247307],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[247512,247534],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[247682,247688],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[247755,247756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[247806,247812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[247873,247874]},{"pos":[247929,247935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[247995,247996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[248093,248099],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[248166,248167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[248217,248223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[248284,248285]},{"pos":[248340,248346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[248406,248407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[248652,248683],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[248849,248864],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[248940,248941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[248991,248997],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[249058,249059]},{"pos":[249114,249120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[249180,249181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249287,249302],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[249378,249379],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[249429,249435],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[249496,249497]},{"pos":[249552,249558],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[249618,249619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249845,249854],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[249947,249954],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[250022,250023],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[250050,250051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[250120,250127],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[250195,250196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[250223,250224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[250353,250359],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[250480,250494],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[250653,250664],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[250708,250709],"content":"<","needQuote":true,"nodes":[]},{"pos":[250736,250737],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[250837,250848],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[250893,250896]},{"pos":[250930,250931],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[250958,250959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251135,251148],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[251303,251313],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[251356,251357],"content":"<","needQuote":true,"nodes":[]},{"pos":[251384,251385],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[251484,251494],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[251538,251541]},{"pos":[251575,251576],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[251603,251604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251788,251794],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[251902,251908],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[252028,252032],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[252091,252093]},{"pos":[252156,252160],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[252218,252220],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[252354,252361],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[252509,252515],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[252659,252664],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[252805,252810],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[252952,252958],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[253103,253109],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[253254,253260],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[253406,253413],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[253583,253593],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[253908,253929],"content":"CompareTo(BigInteger)","needQuote":true,"nodes":[{"content":"CompareTo(BigInteger)","pos":[0,21]}]},{"pos":[254199,254208],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[254311,254312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[254375,254385],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[254437,254438],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[254520,254529],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[254635,254636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[254699,254709],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[254761,254762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255079,255091],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[255261,255270],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[255327,255328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255355,255356],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[255383,255384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255466,255475],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[255535,255536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255563,255564],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[255591,255592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255950,255968],"content":"Equals(BigInteger)","needQuote":true,"nodes":[{"content":"Equals(BigInteger)","pos":[0,18]}]},{"pos":[256226,256232],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[256331,256332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256395,256405],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[256457,256458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256536,256542],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[256644,256645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256708,256718],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[256770,256771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[257072,257081],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[257239,257245],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[257298,257299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[257326,257327],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[257354,257355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[257433,257439],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[257495,257496],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[257523,257524],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[257551,257552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[257801,257815],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[257940,257946],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[257995,257996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[258046,258052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[258112,258113],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[258199,258205],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[258254,258255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[258305,258311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[258371,258372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[258553,258562],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[258741,258754],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[258861,258872],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[258926,258927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[258954,258955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[259031,259042],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[259096,259097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[259124,259125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[259290,259294],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[259432,259437],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[259578,259583],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[259725,259731],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[259876,259882],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[260061,260073],"content":"NumberStyles","needQuote":true,"nodes":[{"content":"NumberStyles","pos":[0,12]}]},{"pos":[260254,260274],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[260456,260471],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[260684,260701],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[260836,260845],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[260899,260900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[260950,260956],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[261016,261017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[261108,261117],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[261171,261172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[261222,261228],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[261288,261289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[261499,261509],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[261610,261618],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[261669,261670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[261697,261698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[261771,261779],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[261830,261831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[261858,261859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[262085,262118],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[262300,262308],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[262362,262363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[262413,262419],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[262480,262481]},{"pos":[262545,262560],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[262608,262609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[262723,262731],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[262785,262786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[262836,262842],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[262903,262904]},{"pos":[262968,262983],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[263031,263032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[263258,263279],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[263463,263480],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[263656,263677],"content":"DivideByZeroException","needQuote":true,"nodes":[{"content":"DivideByZeroException","pos":[0,21]}]},{"pos":[263871,263898],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[264115,264130],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[264313,264330],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Numerics.BigInteger\n  commentId: T:System.Numerics.BigInteger\n  id: BigInteger\n  parent: System.Numerics\n  children:\n  - System.Numerics.BigInteger.#ctor(System.Byte[])\n  - System.Numerics.BigInteger.#ctor(System.Decimal)\n  - System.Numerics.BigInteger.#ctor(System.Double)\n  - System.Numerics.BigInteger.#ctor(System.Int32)\n  - System.Numerics.BigInteger.#ctor(System.Int64)\n  - System.Numerics.BigInteger.#ctor(System.Single)\n  - System.Numerics.BigInteger.#ctor(System.UInt32)\n  - System.Numerics.BigInteger.#ctor(System.UInt64)\n  - System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.CompareTo(System.Int64)\n  - System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.CompareTo(System.UInt64)\n  - System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  - System.Numerics.BigInteger.Equals(System.Int64)\n  - System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Equals(System.Object)\n  - System.Numerics.BigInteger.Equals(System.UInt64)\n  - System.Numerics.BigInteger.GetHashCode\n  - System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.IsEven\n  - System.Numerics.BigInteger.IsOne\n  - System.Numerics.BigInteger.IsPowerOfTwo\n  - System.Numerics.BigInteger.IsZero\n  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  - System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.MinusOne\n  - System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.One\n  - System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64\n  - System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger\n  - System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  - System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  - System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Parse(System.String)\n  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  - System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  - System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  - System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Sign\n  - System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  - System.Numerics.BigInteger.ToByteArray\n  - System.Numerics.BigInteger.ToString\n  - System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  - System.Numerics.BigInteger.ToString(System.String)\n  - System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  - System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  - System.Numerics.BigInteger.Zero\n  langs:\n  - csharp\n  - vb\n  name: BigInteger\n  fullName: System.Numerics.BigInteger\n  type: Struct\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BigInteger\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 10\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Represents an arbitrarily large signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct BigInteger : IComparable, IComparable<BigInteger>, IEquatable<BigInteger>, IFormattable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure BigInteger\n          Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Numerics.BigInteger}\n  - System.IEquatable{System.Numerics.BigInteger}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: BigInteger\n- uid: System.Numerics.BigInteger.#ctor(System.Byte[])\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(Byte[])\n  fullName: System.Numerics.BigInteger.BigInteger(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 13\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the values in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public BigInteger(byte[] value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(value As Byte())\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values in little-endian order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.ToByteArray\n    commentId: M:System.Numerics.BigInteger.ToByteArray\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.BigInteger.BigInteger(System.Byte())\n  name.vb: BigInteger(Byte())\n  nameWithType: BigInteger.BigInteger(Byte[])\n  nameWithType.vb: BigInteger.BigInteger(Byte())\n- uid: System.Numerics.BigInteger.#ctor(System.Decimal)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Decimal)\n  id: '#ctor(System.Decimal)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(Decimal)\n  fullName: System.Numerics.BigInteger.BigInteger(System.Decimal)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 15\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public BigInteger(decimal value)\n    content.vb: Public Sub New(value As Decimal)\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>A decimal number.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(Decimal)\n- uid: System.Numerics.BigInteger.#ctor(System.Double)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(Double)\n  fullName: System.Numerics.BigInteger.BigInteger(System.Double)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 16\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using a double-precision floating-point value.</p>\\n\"\n  syntax:\n    content: public BigInteger(double value)\n    content.vb: Public Sub New(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point value.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of <em>value</em> is <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The value of <em>value</em> is <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The value of <em>value</em> is <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(Double)\n- uid: System.Numerics.BigInteger.#ctor(System.Int32)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(Int32)\n  fullName: System.Numerics.BigInteger.BigInteger(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 17\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using a 32-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public BigInteger(int value)\n    content.vb: Public Sub New(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(Int32)\n- uid: System.Numerics.BigInteger.#ctor(System.Int64)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(Int64)\n  fullName: System.Numerics.BigInteger.BigInteger(System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 18\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using a 64-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public BigInteger(long value)\n    content.vb: Public Sub New(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(Int64)\n- uid: System.Numerics.BigInteger.#ctor(System.Single)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(Single)\n  fullName: System.Numerics.BigInteger.BigInteger(System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using a single-precision floating-point value.</p>\\n\"\n  syntax:\n    content: public BigInteger(float value)\n    content.vb: Public Sub New(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point value.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of <em>value</em> is <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The value of <em>value</em> is <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The value of <em>value</em> is <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(Single)\n- uid: System.Numerics.BigInteger.#ctor(System.UInt32)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt32)\n  id: '#ctor(System.UInt32)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(UInt32)\n  fullName: System.Numerics.BigInteger.BigInteger(System.UInt32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 20\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using an unsigned 32-bit integer value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public BigInteger(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(value As UInteger)\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>An unsigned 32-bit integer value.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(UInt32)\n- uid: System.Numerics.BigInteger.#ctor(System.UInt64)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt64)\n  id: '#ctor(System.UInt64)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BigInteger(UInt64)\n  fullName: System.Numerics.BigInteger.BigInteger(System.UInt64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 22\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure with an unsigned 64-bit integer value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public BigInteger(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(value As ULong)\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>An unsigned 64-bit integer.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.BigInteger(UInt64)\n- uid: System.Numerics.BigInteger.IsEven\n  commentId: P:System.Numerics.BigInteger.IsEven\n  id: IsEven\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: IsEven\n  fullName: System.Numerics.BigInteger.IsEven\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEven\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Indicates whether the value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is an even number.</p>\\n\"\n  syntax:\n    content: public bool IsEven { get; }\n    content.vb: Public ReadOnly Property IsEven As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is an even number; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BigInteger.IsEven\n- uid: System.Numerics.BigInteger.IsOne\n  commentId: P:System.Numerics.BigInteger.IsOne\n  id: IsOne\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: IsOne\n  fullName: System.Numerics.BigInteger.IsOne\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsOne\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 25\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Indicates whether the value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is <xref href=\\\"System.Numerics.BigInteger.One\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool IsOne { get; }\n    content.vb: Public ReadOnly Property IsOne As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is <xref href=\\\"System.Numerics.BigInteger.One\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.One\n    commentId: P:System.Numerics.BigInteger.One\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BigInteger.IsOne\n- uid: System.Numerics.BigInteger.IsPowerOfTwo\n  commentId: P:System.Numerics.BigInteger.IsPowerOfTwo\n  id: IsPowerOfTwo\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: IsPowerOfTwo\n  fullName: System.Numerics.BigInteger.IsPowerOfTwo\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPowerOfTwo\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 26\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Indicates whether the value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a power of two.</p>\\n\"\n  syntax:\n    content: public bool IsPowerOfTwo { get; }\n    content.vb: Public ReadOnly Property IsPowerOfTwo As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a power of two; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BigInteger.IsPowerOfTwo\n- uid: System.Numerics.BigInteger.IsZero\n  commentId: P:System.Numerics.BigInteger.IsZero\n  id: IsZero\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: IsZero\n  fullName: System.Numerics.BigInteger.IsZero\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsZero\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 27\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Indicates whether the value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is <xref href=\\\"System.Numerics.BigInteger.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool IsZero { get; }\n    content.vb: Public ReadOnly Property IsZero As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is <xref href=\\\"System.Numerics.BigInteger.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Zero\n    commentId: P:System.Numerics.BigInteger.Zero\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BigInteger.IsZero\n- uid: System.Numerics.BigInteger.MinusOne\n  commentId: P:System.Numerics.BigInteger.MinusOne\n  id: MinusOne\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: MinusOne\n  fullName: System.Numerics.BigInteger.MinusOne\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinusOne\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a value that represents the number negative one (-1).</p>\\n\"\n  syntax:\n    content: public static BigInteger MinusOne { get; }\n    content.vb: Public Shared ReadOnly Property MinusOne As BigInteger\n    parameters: []\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An integer whose value is negative one (-1).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.One\n    commentId: P:System.Numerics.BigInteger.One\n  - type: System.Numerics.BigInteger.IsOne\n    commentId: P:System.Numerics.BigInteger.IsOne\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: BigInteger.MinusOne\n- uid: System.Numerics.BigInteger.One\n  commentId: P:System.Numerics.BigInteger.One\n  id: One\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: One\n  fullName: System.Numerics.BigInteger.One\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: One\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 29\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a value that represents the number one (1).</p>\\n\"\n  syntax:\n    content: public static BigInteger One { get; }\n    content.vb: Public Shared ReadOnly Property One As BigInteger\n    parameters: []\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object whose value is one (1).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.IsOne\n    commentId: P:System.Numerics.BigInteger.IsOne\n  - type: System.Numerics.BigInteger.MinusOne\n    commentId: P:System.Numerics.BigInteger.MinusOne\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: BigInteger.One\n- uid: System.Numerics.BigInteger.Sign\n  commentId: P:System.Numerics.BigInteger.Sign\n  id: Sign\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Sign\n  fullName: System.Numerics.BigInteger.Sign\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sign\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 30\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Sign { get; }\n    content.vb: Public ReadOnly Property Sign As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, as shown in the following table.</p>\\n<p>Number</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>-1</p>\\n</td><td>\\n<p>The value of this object is negative.</p>\\n</td></tr><tr><td>\\n<p>0</p>\\n</td><td>\\n<p>The value of this object is 0 (zero).</p>\\n</td></tr><tr><td>\\n<p>1</p>\\n</td><td>\\n<p>The value of this object is positive.</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BigInteger.Sign\n- uid: System.Numerics.BigInteger.Zero\n  commentId: P:System.Numerics.BigInteger.Zero\n  id: Zero\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Numerics.BigInteger.Zero\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 31\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a value that represents the number 0 (zero).</p>\\n\"\n  syntax:\n    content: public static BigInteger Zero { get; }\n    content.vb: Public Shared ReadOnly Property Zero As BigInteger\n    parameters: []\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An integer whose value is 0 (zero).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.IsZero\n    commentId: P:System.Numerics.BigInteger.IsZero\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: BigInteger.Zero\n- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  id: Abs(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Abs(BigInteger)\n  fullName: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Abs\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the absolute value of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static BigInteger Abs(BigInteger value)\n    content.vb: Public Shared Function Abs(value As BigInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A number.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The absolute value of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Abs(System.SByte)\n    commentId: M:System.Math.Abs(System.SByte)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Abs(BigInteger)\n- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Add(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Add(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values and returns the result.</p>\\n\"\n  syntax:\n    content: public static BigInteger Add(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function Add(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to add.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to add.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Add(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Compare(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Compare\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</p>\\n\"\n  syntax:\n    content: public static int Compare(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function Compare(left As BigInteger, right As BigInteger) As Integer\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of <em>left</em> and <em>right</em>, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Condition</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>left</em> is less than <em>right</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>left</em> equals <em>right</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>left</em> is greater than <em>right</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.CompareTo(System.Int64)\n    commentId: M:System.Numerics.BigInteger.CompareTo(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Compare(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.CompareTo(System.Int64)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.Int64)\n  id: CompareTo(System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Int64)\n  fullName: System.Numerics.BigInteger.CompareTo(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</p>\\n\"\n  syntax:\n    content: public int CompareTo(long other)\n    content.vb: Public Function CompareTo(other As Long) As Integer\n    parameters:\n    - id: other\n      type: System.Int64\n      description: \"\\n<p>The signed 64-bit integer to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current instance is less than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current instance equals <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current instance is greater than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.CompareTo(Int64)\n- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  id: CompareTo(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(BigInteger)\n  fullName: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Compares this instance to a second <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</p>\\n\"\n  syntax:\n    content: public int CompareTo(BigInteger other)\n    content.vb: Public Function CompareTo(other As BigInteger) As Integer\n    parameters:\n    - id: other\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The object to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current instance is less than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current instance equals <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current instance is greater than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  implements:\n  - System.IComparable{System.Numerics.BigInteger}.CompareTo(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.CompareTo(BigInteger)\n- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.UInt64)\n  id: CompareTo(System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(UInt64)\n  fullName: System.Numerics.BigInteger.CompareTo(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 37\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public int CompareTo(ulong other)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function CompareTo(other As ULong) As Integer\n    parameters:\n    - id: other\n      type: System.UInt64\n      description: \"\\n<p>The unsigned 64-bit integer to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative value of this instance and <em>other</em>, as shown in the following table.</p>\\n<p>Return value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The current instance is less than <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The current instance equals <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The current instance is greater than <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.CompareTo(UInt64)\n- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Divide(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides one <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by another and returns the result.</p>\\n\"\n  syntax:\n    content: public static BigInteger Divide(BigInteger dividend, BigInteger divisor)\n    content.vb: Public Shared Function Divide(dividend As BigInteger, divisor As BigInteger) As BigInteger\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to be divided.</p>\\n\"\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to divide by.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The quotient of the division.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - type: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  - type: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Divide(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  id: DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: DivRem(BigInteger, BigInteger, out BigInteger)\n  fullName: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, out System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DivRem\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides one <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by another, returns the result, and returns the remainder in an output parameter.</p>\\n\"\n  syntax:\n    content: public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, out BigInteger remainder)\n    content.vb: Public Shared Function DivRem(dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to be divided.</p>\\n\"\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to divide by.</p>\\n\"\n    - id: remainder\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>When this method returns, contains a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The quotient of the division.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, ByRef System.Numerics.BigInteger)\n  name.vb: DivRem(BigInteger, BigInteger, ByRef BigInteger)\n  nameWithType: BigInteger.DivRem(BigInteger, BigInteger, out BigInteger)\n  nameWithType.vb: BigInteger.DivRem(BigInteger, BigInteger, ByRef BigInteger)\n- uid: System.Numerics.BigInteger.Equals(System.Int64)\n  commentId: M:System.Numerics.BigInteger.Equals(System.Int64)\n  id: Equals(System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equals(Int64)\n  fullName: System.Numerics.BigInteger.Equals(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(long other)\n    content.vb: Public Function Equals(other As Long) As Boolean\n    parameters:\n    - id: other\n      type: System.Int64\n      description: \"\\n<p>The signed 64-bit integer value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signed 64-bit integer and the current instance have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.Equals(Int64)\n- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  id: Equals(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equals(BigInteger)\n  fullName: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 42\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and a specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(BigInteger other)\n    content.vb: Public Function Equals(other As BigInteger) As Boolean\n    parameters:\n    - id: other\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and <em>other</em> have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Numerics.BigInteger}.Equals(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.Equals(BigInteger)\n- uid: System.Numerics.BigInteger.Equals(System.Object)\n  commentId: M:System.Numerics.BigInteger.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Numerics.BigInteger.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and a specified object have the same value.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object or a type capable of implicit conversion to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value, and its value is equal to the value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BigInteger.Equals(Object)\n- uid: System.Numerics.BigInteger.Equals(System.UInt64)\n  commentId: M:System.Numerics.BigInteger.Equals(System.UInt64)\n  id: Equals(System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equals(UInt64)\n  fullName: System.Numerics.BigInteger.Equals(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 44\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public bool Equals(ulong other)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Equals(other As ULong) As Boolean\n    parameters:\n    - id: other\n      type: System.UInt64\n      description: \"\\n<p>The unsigned 64-bit integer to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.Equals(UInt64)\n- uid: System.Numerics.BigInteger.GetHashCode\n  commentId: M:System.Numerics.BigInteger.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Numerics.BigInteger.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 46\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BigInteger.GetHashCode()\n- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreatestCommonDivisor(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreatestCommonDivisor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 47\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Finds the greatest common divisor of two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function GreatestCommonDivisor(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The greatest common divisor of <em>left</em> and <em>right</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  id: Log(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Log(BigInteger)\n  fullName: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Log\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 48\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the natural (base <strong>e</strong>) logarithm of a specified number.</p>\\n\"\n  syntax:\n    content: public static double Log(BigInteger value)\n    content.vb: Public Shared Function Log(value As BigInteger) As Double\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The number whose logarithm is to be found.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The natural (base <strong>e</strong>) logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The natural log of <em>value</em> is out of range of the <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data type.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Log(BigInteger)\n- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  id: Log(System.Numerics.BigInteger,System.Double)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Log(BigInteger, Double)\n  fullName: System.Numerics.BigInteger.Log(System.Numerics.BigInteger, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Log\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the logarithm of a specified number in a specified base.</p>\\n\"\n  syntax:\n    content: public static double Log(BigInteger value, double baseValue)\n    content.vb: Public Shared Function Log(value As BigInteger, baseValue As Double) As Double\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A number whose logarithm is to be found.</p>\\n\"\n    - id: baseValue\n      type: System.Double\n      description: \"\\n<p>The base of the logarithm.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The base <em>baseValue</em> logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The log of <em>value</em> is out of range of the <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data type.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Log(BigInteger, Double)\n- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  id: Log10(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Log10(BigInteger)\n  fullName: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Log10\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 50\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the base 10 logarithm of a specified number.</p>\\n\"\n  syntax:\n    content: public static double Log10(BigInteger value)\n    content.vb: Public Shared Function Log10(value As BigInteger) As Double\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A number whose logarithm is to be found.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The base 10 logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The base 10 log of <em>value</em> is out of range of the <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Log10(BigInteger)\n- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Max(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Max(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 51\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the larger of two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger Max(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function Max(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The <em>left</em> or <em>right</em> parameter, whichever is larger.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Max(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Min(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Min(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 52\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the smaller of two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger Min(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function Min(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The <em>left</em> or <em>right</em> parameter, whichever is smaller.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Min(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ModPow(BigInteger, BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger, System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModPow\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs modulus division on a number raised to the power of another number.</p>\\n\"\n  syntax:\n    content: public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus)\n    content.vb: Public Shared Function ModPow(value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The number to raise to the <em>exponent</em> power.</p>\\n\"\n    - id: exponent\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The exponent to raise <em>value</em> by.</p>\\n\"\n    - id: modulus\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The number by which to divide <em>value</em> raised to the <em>exponent</em> power.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The remainder after dividing <em>value</em>exponent by <em>modulus</em>.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>modulus</em> is zero.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>exponent</em> is negative.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n    commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Multiply(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 54\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the product of two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger Multiply(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function Multiply(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first number to multiply.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second number to multiply.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The product of the <em>left</em> and <em>right</em> parameters.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Multiply(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  id: Negate(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Negate(BigInteger)\n  fullName: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 55\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Negates a specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static BigInteger Negate(BigInteger value)\n    content.vb: Public Shared Function Negate(value As BigInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to negate.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of the <em>value</em> parameter multiplied by negative one (-1).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Negate(BigInteger)\n- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Addition(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Addition(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 56\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds the values of two specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator +(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator +(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to add.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to add.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Addition(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.BitwiseAnd(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseAnd\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 57\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs a bitwise <strong>And</strong> operation on two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator &(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator And(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of the bitwise <strong>And</strong> operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.BitwiseAnd(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.BitwiseOr(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseOr\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 58\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs a bitwise <strong>Or</strong> operation on two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator |(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator Or(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of the bitwise <strong>Or</strong> operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.BitwiseOr(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  id: op_Decrement(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Decrement(BigInteger)\n  fullName: System.Numerics.BigInteger.Decrement(System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Decrement\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 59\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Decrements a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by 1.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator --(BigInteger value)\n    content.vb: VB cannot support this operator.\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to decrement.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value of the <em>value</em> parameter decremented by 1.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Decrement(BigInteger)\n- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Division(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Division(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 60\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides a specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by another specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by using integer division.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator /(BigInteger dividend, BigInteger divisor)\n    content.vb: Public Shared Operator /(dividend As BigInteger, divisor As BigInteger) As BigInteger\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to be divided.</p>\\n\"\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to divide by.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The integral result of the division.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Division(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  id: op_Equality(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equality(Int64, BigInteger)\n  fullName: System.Numerics.BigInteger.Equality(System.Int64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 61\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a signed long integer value and a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(long left, BigInteger right)\n    content.vb: Public Shared Operator =(left As Long, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Int64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Equality(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  id: op_Equality(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equality(BigInteger, Int64)\n  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 62\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value and a signed long integer value are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(BigInteger left, long right)\n    content.vb: Public Shared Operator =(left As BigInteger, right As Long) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Int64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Equality(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equality(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 63\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the values of two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator =(left As BigInteger, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Equals(System.Int64)\n    commentId: M:System.Numerics.BigInteger.Equals(System.Int64)\n  - type: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Equality(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  id: op_Equality(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equality(BigInteger, UInt64)\n  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 64\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value and an unsigned long integer value are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator ==(BigInteger left, ulong right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator =(left As BigInteger, right As ULong) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.UInt64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Equality(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  id: op_Equality(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Equality(UInt64, BigInteger)\n  fullName: System.Numerics.BigInteger.Equality(System.UInt64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether an unsigned long integer value and a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator ==(ulong left, BigInteger right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator =(left As ULong, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Equality(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.ExclusiveOr(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_ExclusiveOr\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 68\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs a bitwise exclusive <strong>Or</strong> (<strong>XOr</strong>) operation on two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator ^(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator Xor(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of the bitwise <strong>Or</strong> operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.ExclusiveOr(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\n  id: op_Explicit(System.Decimal)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to BigInteger)\n  fullName: System.Numerics.BigInteger.Explicit(System.Decimal to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 69\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static explicit operator BigInteger(decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As BigInteger\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Decimal to System.Numerics.BigInteger)\n  name.vb: Narrowing(Decimal to BigInteger)\n  nameWithType: BigInteger.Explicit(Decimal to BigInteger)\n  nameWithType.vb: BigInteger.Narrowing(Decimal to BigInteger)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger\n  id: op_Explicit(System.Double)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Double to BigInteger)\n  fullName: System.Numerics.BigInteger.Explicit(System.Double to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 70\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static explicit operator BigInteger(double value)\n    content.vb: Public Shared Narrowing Operator CType(value As Double) As BigInteger\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Double to System.Numerics.BigInteger)\n  name.vb: Narrowing(Double to BigInteger)\n  nameWithType: BigInteger.Explicit(Double to BigInteger)\n  nameWithType.vb: BigInteger.Narrowing(Double to BigInteger)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte\n  id: op_Explicit(System.Numerics.BigInteger)~System.Byte\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Byte)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Byte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 71\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an unsigned byte value.</p>\\n\"\n  syntax:\n    content: public static explicit operator byte (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Byte\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Byte)\n  name.vb: Narrowing(BigInteger to Byte)\n  nameWithType: BigInteger.Explicit(BigInteger to Byte)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Byte)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal\n  id: op_Explicit(System.Numerics.BigInteger)~System.Decimal\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Decimal)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 72\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static explicit operator decimal (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Decimal\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Decimal)\n  name.vb: Narrowing(BigInteger to Decimal)\n  nameWithType: BigInteger.Explicit(BigInteger to Decimal)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Decimal)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double\n  id: op_Explicit(System.Numerics.BigInteger)~System.Double\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Double)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 73\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static explicit operator double (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Double\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Double)\n  name.vb: Narrowing(BigInteger to Double)\n  nameWithType: BigInteger.Explicit(BigInteger to Double)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Double)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16\n  id: op_Explicit(System.Numerics.BigInteger)~System.Int16\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Int16)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int16)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 74\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a 16-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public static explicit operator short (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Short\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a 16-bit signed integer.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int16)\n  name.vb: Narrowing(BigInteger to Int16)\n  nameWithType: BigInteger.Explicit(BigInteger to Int16)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Int16)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32\n  id: op_Explicit(System.Numerics.BigInteger)~System.Int32\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Int32)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 75\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a 32-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public static explicit operator int (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Integer\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a 32-bit signed integer. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int32)\n  name.vb: Narrowing(BigInteger to Int32)\n  nameWithType: BigInteger.Explicit(BigInteger to Int32)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Int32)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64\n  id: op_Explicit(System.Numerics.BigInteger)~System.Int64\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Int64)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 76\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a 64-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public static explicit operator long (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Long\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a 64-bit signed integer.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int64)\n  name.vb: Narrowing(BigInteger to Int64)\n  nameWithType: BigInteger.Explicit(BigInteger to Int64)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Int64)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte\n  id: op_Explicit(System.Numerics.BigInteger)~System.SByte\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to SByte)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.SByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 77\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a signed 8-bit value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator sbyte (BigInteger value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As BigInteger) As SByte\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a signed 8-bit value.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.SByte)\n  name.vb: Narrowing(BigInteger to SByte)\n  nameWithType: BigInteger.Explicit(BigInteger to SByte)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to SByte)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single\n  id: op_Explicit(System.Numerics.BigInteger)~System.Single\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Single)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 79\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a single-precision floating-point value.</p>\\n\"\n  syntax:\n    content: public static explicit operator float (BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Single\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a single-precision floating-point value.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>An object that contains the closest possible representation of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Single)\n  name.vb: Narrowing(BigInteger to Single)\n  nameWithType: BigInteger.Explicit(BigInteger to Single)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to Single)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16\n  id: op_Explicit(System.Numerics.BigInteger)~System.UInt16\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to UInt16)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt16)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 80\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an unsigned 16-bit integer value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator ushort (BigInteger value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As BigInteger) As UShort\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to an unsigned 16-bit integer.</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt16)\n  name.vb: Narrowing(BigInteger to UInt16)\n  nameWithType: BigInteger.Explicit(BigInteger to UInt16)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to UInt16)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32\n  id: op_Explicit(System.Numerics.BigInteger)~System.UInt32\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to UInt32)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt32)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 82\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an unsigned 32-bit integer value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator uint (BigInteger value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As BigInteger) As UInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to an unsigned 32-bit integer.</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt32)\n  name.vb: Narrowing(BigInteger to UInt32)\n  nameWithType: BigInteger.Explicit(BigInteger to UInt32)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to UInt32)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64\n  id: op_Explicit(System.Numerics.BigInteger)~System.UInt64\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to UInt64)\n  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 84\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an unsigned 64-bit integer value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator ulong (BigInteger value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As BigInteger) As ULong\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to an unsigned 64-bit integer.</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt64)\n  name.vb: Narrowing(BigInteger to UInt64)\n  nameWithType: BigInteger.Explicit(BigInteger to UInt64)\n  nameWithType.vb: BigInteger.Narrowing(BigInteger to UInt64)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger\n  id: op_Explicit(System.Single)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Single to BigInteger)\n  fullName: System.Numerics.BigInteger.Explicit(System.Single to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static explicit operator BigInteger(float value)\n    content.vb: Public Shared Narrowing Operator CType(value As Single) As BigInteger\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Single to System.Numerics.BigInteger)\n  name.vb: Narrowing(Single to BigInteger)\n  nameWithType: BigInteger.Explicit(Single to BigInteger)\n  nameWithType.vb: BigInteger.Narrowing(Single to BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  id: op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Int64, BigInteger)\n  fullName: System.Numerics.BigInteger.GreaterThan(System.Int64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 87\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator>(long left, BigInteger right)\n    content.vb: Public Shared Operator>(left As Long, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Int64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThan(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  id: op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(BigInteger, Int64)\n  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 88\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than a 64-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public static bool operator>(BigInteger left, long right)\n    content.vb: Public Shared Operator>(left As BigInteger, right As Long) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Int64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThan(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than another <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator>(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator>(left As BigInteger, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThan(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  id: op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(BigInteger, UInt64)\n  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 90\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator>(BigInteger left, ulong right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator>(left As BigInteger, right As ULong) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.UInt64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThan(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  id: op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(UInt64, BigInteger)\n  fullName: System.Numerics.BigInteger.GreaterThan(System.UInt64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 92\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator>(ulong left, BigInteger right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator>(left As ULong, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThan(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  id: op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Int64, BigInteger)\n  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Int64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 94\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator >=(long left, BigInteger right)\n    content.vb: Public Shared Operator >=(left As Long, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Int64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThanOrEqual(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(BigInteger, Int64)\n  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 95\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than or equal to a 64-bit signed integer value.</p>\\n\"\n  syntax:\n    content: public static bool operator >=(BigInteger left, long right)\n    content.vb: Public Shared Operator >=(left As BigInteger, right As Long) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Int64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThanOrEqual(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 96\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than or equal to another <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator >=(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator >=(left As BigInteger, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThanOrEqual(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(BigInteger, UInt64)\n  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 97\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than or equal to a 64-bit unsigned integer value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator >=(BigInteger left, ulong right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator >=(left As BigInteger, right As ULong) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.UInt64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThanOrEqual(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  id: op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(UInt64, BigInteger)\n  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.UInt64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 99\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator >=(ulong left, BigInteger right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator >=(left As ULong, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.GreaterThanOrEqual(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\n  id: op_Implicit(System.Byte)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Byte to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.Byte to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of an unsigned byte to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static implicit operator BigInteger(byte value)\n    content.vb: Public Shared Widening Operator CType(value As Byte) As BigInteger\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.Byte to System.Numerics.BigInteger)\n  name.vb: Widening(Byte to BigInteger)\n  nameWithType: BigInteger.Implicit(Byte to BigInteger)\n  nameWithType.vb: BigInteger.Widening(Byte to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger\n  id: op_Implicit(System.Int16)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int16 to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.Int16 to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 102\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a signed 16-bit integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static implicit operator BigInteger(short value)\n    content.vb: Public Shared Widening Operator CType(value As Short) As BigInteger\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.Int16 to System.Numerics.BigInteger)\n  name.vb: Widening(Int16 to BigInteger)\n  nameWithType: BigInteger.Implicit(Int16 to BigInteger)\n  nameWithType.vb: BigInteger.Widening(Int16 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger\n  id: op_Implicit(System.Int32)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int32 to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.Int32 to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a signed 32-bit integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static implicit operator BigInteger(int value)\n    content.vb: Public Shared Widening Operator CType(value As Integer) As BigInteger\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.Int32 to System.Numerics.BigInteger)\n  name.vb: Widening(Int32 to BigInteger)\n  nameWithType: BigInteger.Implicit(Int32 to BigInteger)\n  nameWithType.vb: BigInteger.Widening(Int32 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger\n  id: op_Implicit(System.Int64)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int64 to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.Int64 to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 104\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a signed 64-bit integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static implicit operator BigInteger(long value)\n    content.vb: Public Shared Widening Operator CType(value As Long) As BigInteger\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.Int64 to System.Numerics.BigInteger)\n  name.vb: Widening(Int64 to BigInteger)\n  nameWithType: BigInteger.Implicit(Int64 to BigInteger)\n  nameWithType.vb: BigInteger.Widening(Int64 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger\n  id: op_Implicit(System.SByte)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SByte to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.SByte to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 105\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of an 8-bit signed integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator BigInteger(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As SByte) As BigInteger\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.SByte to System.Numerics.BigInteger)\n  name.vb: Widening(SByte to BigInteger)\n  nameWithType: BigInteger.Implicit(SByte to BigInteger)\n  nameWithType.vb: BigInteger.Widening(SByte to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger\n  id: op_Implicit(System.UInt16)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt16 to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.UInt16 to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 107\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 16-bit unsigned integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator BigInteger(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As UShort) As BigInteger\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt16 to System.Numerics.BigInteger)\n  name.vb: Widening(UInt16 to BigInteger)\n  nameWithType: BigInteger.Implicit(UInt16 to BigInteger)\n  nameWithType.vb: BigInteger.Widening(UInt16 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger\n  id: op_Implicit(System.UInt32)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt32 to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.UInt32 to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 109\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 32-bit unsigned integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator BigInteger(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As UInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt32 to System.Numerics.BigInteger)\n  name.vb: Widening(UInt32 to BigInteger)\n  nameWithType: BigInteger.Implicit(UInt32 to BigInteger)\n  nameWithType.vb: BigInteger.Widening(UInt32 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger\n  id: op_Implicit(System.UInt64)~System.Numerics.BigInteger\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt64 to BigInteger)\n  fullName: System.Numerics.BigInteger.Implicit(System.UInt64 to System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 111\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 64-bit unsigned integer to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator BigInteger(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As ULong) As BigInteger\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to convert to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt64 to System.Numerics.BigInteger)\n  name.vb: Widening(UInt64 to BigInteger)\n  nameWithType: BigInteger.Implicit(UInt64 to BigInteger)\n  nameWithType.vb: BigInteger.Widening(UInt64 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  id: op_Increment(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Increment(BigInteger)\n  fullName: System.Numerics.BigInteger.Increment(System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Increment\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 113\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Increments a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by 1.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator ++(BigInteger value)\n    content.vb: VB cannot support this operator.\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to increment.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value of the <em>value</em> parameter incremented by 1.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Increment(BigInteger)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  id: op_Inequality(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Int64, BigInteger)\n  fullName: System.Numerics.BigInteger.Inequality(System.Int64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 114\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit signed integer and a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(long left, BigInteger right)\n    content.vb: Public Shared Operator <>(left As Long, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Int64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Inequality(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  id: op_Inequality(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Inequality(BigInteger, Int64)\n  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 115\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value and a 64-bit signed integer are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(BigInteger left, long right)\n    content.vb: Public Shared Operator <>(left As BigInteger, right As Long) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Int64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Inequality(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Inequality(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 116\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have different values.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator <>(left As BigInteger, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Inequality(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  id: op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Inequality(BigInteger, UInt64)\n  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 117\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value and a 64-bit unsigned integer are not equal.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator !=(BigInteger left, ulong right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator <>(left As BigInteger, right As ULong) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.UInt64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Inequality(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  id: op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Inequality(UInt64, BigInteger)\n  fullName: System.Numerics.BigInteger.Inequality(System.UInt64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 119\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit unsigned integer and a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value are not equal.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator !=(ulong left, BigInteger right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator <>(left As ULong, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Inequality(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  id: op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LeftShift(BigInteger, Int32)\n  fullName: System.Numerics.BigInteger.LeftShift(System.Numerics.BigInteger, System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LeftShift\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 121\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Shifts a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value a specified number of bits to the left.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator <<(BigInteger value, int shift)\n    content.vb: Public Shared Operator <<(value As BigInteger, shift As Integer) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value whose bits are to be shifted.</p>\\n\"\n    - id: shift\n      type: System.Int32\n      description: \"\\n<p>The number of bits to shift <em>value</em> to the left.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A value that has been shifted to the left by the specified number of bits.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n    commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LeftShift(BigInteger, Int32)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  id: op_LessThan(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Int64, BigInteger)\n  fullName: System.Numerics.BigInteger.LessThan(System.Int64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 122\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit signed integer is less than a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator <(long left, BigInteger right)\n    content.vb: Public Shared Operator <(left As Long, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Int64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThan(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  id: op_LessThan(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThan(BigInteger, Int64)\n  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 123\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static bool operator <(BigInteger left, long right)\n    content.vb: Public Shared Operator <(left As BigInteger, right As Long) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Int64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThan(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThan(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 124\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than another <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator <(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator <(left As BigInteger, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThan(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  id: op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThan(BigInteger, UInt64)\n  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 125\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator <(BigInteger left, ulong right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator <(left As BigInteger, right As ULong) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.UInt64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThan(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  id: op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThan(UInt64, BigInteger)\n  fullName: System.Numerics.BigInteger.LessThan(System.UInt64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 127\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator <(ulong left, BigInteger right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator <(left As ULong, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThan(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  id: op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Int64, BigInteger)\n  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Int64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 129\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator <=(long left, BigInteger right)\n    content.vb: Public Shared Operator <=(left As Long, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Int64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThanOrEqual(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(BigInteger, Int64)\n  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 130\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than or equal to a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static bool operator <=(BigInteger left, long right)\n    content.vb: Public Shared Operator <=(left As BigInteger, right As Long) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Int64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThanOrEqual(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 131\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than or equal to another <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static bool operator <=(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator <=(left As BigInteger, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThanOrEqual(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(BigInteger, UInt64)\n  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 132\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than or equal to a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator <=(BigInteger left, ulong right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator <=(left As BigInteger, right As ULong) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.UInt64\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThanOrEqual(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  id: op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(UInt64, BigInteger)\n  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.UInt64, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 134\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool operator <=(ulong left, BigInteger right)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Operator <=(left As ULong, right As BigInteger) As Boolean\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.LessThanOrEqual(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Modulus(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Modulus(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Modulus\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 136\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the remainder that results from division with two specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator %(BigInteger dividend, BigInteger divisor)\n    content.vb: Public Shared Operator Mod(dividend As BigInteger, divisor As BigInteger) As BigInteger\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to be divided.</p>\\n\"\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to divide by.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The remainder that results from the division.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - type: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Modulus(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Multiply(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 137\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies two specified <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator *(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator *(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The first value to multiply.</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The second value to multiply.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The product of <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Multiply(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  id: op_OnesComplement(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(BigInteger)\n  fullName: System.Numerics.BigInteger.OnesComplement(System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_OnesComplement\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 138\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the bitwise one's complement of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator ~(BigInteger value)\n    content.vb: Public Shared Operator Not(value As BigInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An integer value.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The bitwise one's complement of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.OnesComplement(BigInteger)\n- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  id: op_RightShift(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: RightShift(BigInteger, Int32)\n  fullName: System.Numerics.BigInteger.RightShift(System.Numerics.BigInteger, System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_RightShift\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 139\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Shifts a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value a specified number of bits to the right.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator >>(BigInteger value, int shift)\n    content.vb: Public Shared Operator >>(value As BigInteger, shift As Integer) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value whose bits are to be shifted.</p>\\n\"\n    - id: shift\n      type: System.Int32\n      description: \"\\n<p>The number of bits to shift <em>value</em> to the right.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A value that has been shifted to the right by the specified number of bits.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n    commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.RightShift(BigInteger, Int32)\n- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Subtraction(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 140\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value from another <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static BigInteger operator -(BigInteger left, BigInteger right)\n    content.vb: Public Shared Operator -(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to subtract from (the minuend).</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to subtract (the subtrahend).</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Subtraction(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  id: op_UnaryNegation(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(BigInteger)\n  fullName: System.Numerics.BigInteger.UnaryNegation(System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 141\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Negates a specified BigInteger value. </p>\\n\"\n  syntax:\n    content: public static BigInteger operator -(BigInteger value)\n    content.vb: Public Shared Operator -(value As BigInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to negate.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of the <em>value</em> parameter multiplied by negative one (-1).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.UnaryNegation(BigInteger)\n- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  id: op_UnaryPlus(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: UnaryPlus(BigInteger)\n  fullName: System.Numerics.BigInteger.UnaryPlus(System.Numerics.BigInteger)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryPlus\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 142\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the value of the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand. (The sign of the operand is unchanged.)</p>\\n\"\n  syntax:\n    content: public static BigInteger operator +(BigInteger value)\n    content.vb: Public Shared Operator +(value As BigInteger) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>An integer value.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value of the <em>value</em> operand.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.UnaryPlus(BigInteger)\n- uid: System.Numerics.BigInteger.Parse(System.String)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Numerics.BigInteger.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 143\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the string representation of a number to its <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static BigInteger Parse(string value)\n    content.vb: Public Shared Function Parse(value As String) As BigInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in the correct format.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Parse(String)\n- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  id: Parse(System.String,System.Globalization.NumberStyles)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles)\n  fullName: System.Numerics.BigInteger.Parse(System.String, System.Globalization.NumberStyles)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 144\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the string representation of a number in a specified style to its <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static BigInteger Parse(string value, NumberStyles style)\n    content.vb: Public Shared Function Parse(value As String, style As NumberStyles) As BigInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Globalization.NumberStyles.HexNumber\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag along with another value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not comply with the input pattern specified by <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Parse(String, NumberStyles)\n- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles, IFormatProvider)\n  fullName: System.Numerics.BigInteger.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 145\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the string representation of a number in a specified style and culture-specific format to its <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static BigInteger Parse(string value, NumberStyles style, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert.</p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information about <em>value</em>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Globalization.NumberStyles.HexNumber\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag along with another value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not comply with the input pattern specified by <em>style</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Parse(String, NumberStyles, IFormatProvider)\n- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider)\n  fullName: System.Numerics.BigInteger.Parse(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 146\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the string representation of a number in a specified culture-specific format to its <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static BigInteger Parse(string value, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(value As String, provider As IFormatProvider) As BigInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information about <em>value</em>.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in the correct format.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Parse(String, IFormatProvider)\n- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  id: Pow(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Pow(BigInteger, Int32)\n  fullName: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pow\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 147\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Raises a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to the power of a specified value.</p>\\n\"\n  syntax:\n    content: public static BigInteger Pow(BigInteger value, int exponent)\n    content.vb: Public Shared Function Pow(value As BigInteger, exponent As Integer) As BigInteger\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The number to raise to the <em>exponent</em> power.</p>\\n\"\n    - id: exponent\n      type: System.Int32\n      description: \"\\n<p>The exponent to raise <em>value</em> by.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of raising <em>value</em> to the <em>exponent</em> power.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>exponent</em> parameter is negative.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Pow(BigInteger, Int32)\n- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Remainder(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remainder\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 148\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs integer division on two <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values and returns the remainder.</p>\\n\"\n  syntax:\n    content: public static BigInteger Remainder(BigInteger dividend, BigInteger divisor)\n    content.vb: Public Shared Function Remainder(dividend As BigInteger, divisor As BigInteger) As BigInteger\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to be divided.</p>\\n\"\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to divide by.</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The remainder after dividing <em>dividend</em> by <em>divisor</em>.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>divisor</em> is 0 (zero).</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n    commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  - type: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Remainder(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: Subtract(BigInteger, BigInteger)\n  fullName: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger, System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 149\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts one <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value from another and returns the result.</p>\\n\"\n  syntax:\n    content: public static BigInteger Subtract(BigInteger left, BigInteger right)\n    content.vb: Public Shared Function Subtract(left As BigInteger, right As BigInteger) As BigInteger\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to subtract from (the minuend).</p>\\n\"\n    - id: right\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to subtract (the subtrahend).</p>\\n\"\n    return:\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n    commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BigInteger.Subtract(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Numerics.BigInteger.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 150\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  syntax:\n    content: int IComparable.CompareTo(object obj)\n    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: obj\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: BigInteger.IComparable.CompareTo(Object)\n  nameWithType.vb: BigInteger.System.IComparable.CompareTo(Object)\n- uid: System.Numerics.BigInteger.ToByteArray\n  commentId: M:System.Numerics.BigInteger.ToByteArray\n  id: ToByteArray\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ToByteArray()\n  fullName: System.Numerics.BigInteger.ToByteArray()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToByteArray\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 151\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to a byte array.</p>\\n\"\n  syntax:\n    content: public byte[] ToByteArray()\n    content.vb: Public Function ToByteArray As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object converted to an array of bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.ToByteArray()\n- uid: System.Numerics.BigInteger.ToString\n  commentId: M:System.Numerics.BigInteger.ToString\n  id: ToString\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Numerics.BigInteger.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 152\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the numeric value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BigInteger.ToString()\n- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 153\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the numeric value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation by using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public string ToString(IFormatProvider provider)\n    content.vb: Public Function ToString(provider As IFormatProvider) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value in the format specified by the <em>provider</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.ToString(IFormatProvider)\n- uid: System.Numerics.BigInteger.ToString(System.String)\n  commentId: M:System.Numerics.BigInteger.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Numerics.BigInteger.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 154\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the numeric value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation by using the specified format.</p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value in the format specified by the <em>format</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.ToString(String)\n- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Numerics.BigInteger.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 155\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the numeric value of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation by using the specified format and culture-specific format information.</p>\\n\"\n  syntax:\n    content: public string ToString(string format, IFormatProvider provider)\n    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value as specified by the <em>format</em> and <em>provider</em> parameters.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n\"\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BigInteger.ToString(String, IFormatProvider)\n- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, NumberStyles, IFormatProvider, out BigInteger)\n  fullName: System.Numerics.BigInteger.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 156\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, out BigInteger result)\n    content.vb: Public Shared Function TryParse(value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string representation of a number. The string is interpreted using the style specified by <em>style</em>.</p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <em>value</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Integer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>value</em>.</p>\\n\"\n    - id: result\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent to the number that is contained in <em>value</em>, or <xref href=\\\"System.Numerics.BigInteger.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the conversion failed. The conversion fails if the <em>value</em> parameter is <strong>null</strong> or is not in a format that is compliant with <em>style</em>. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Globalization.NumberStyles.HexNumber\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag along with another value. </p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.ToString\n    commentId: M:System.Numerics.BigInteger.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Numerics.BigInteger)\n  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef BigInteger)\n  nameWithType: BigInteger.TryParse(String, NumberStyles, IFormatProvider, out BigInteger)\n  nameWithType.vb: BigInteger.TryParse(String, NumberStyles, IFormatProvider, ByRef BigInteger)\n- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  id: TryParse(System.String,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out BigInteger)\n  fullName: System.Numerics.BigInteger.TryParse(System.String, out System.Numerics.BigInteger)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 157\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Tries to convert the string representation of a number to its <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string value, out BigInteger result)\n    content.vb: Public Shared Function TryParse(value As String, ByRef result As BigInteger) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string representation of a number.</p>\\n\"\n    - id: result\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent to the number that is contained in <em>value</em>, or zero (0) if the conversion fails. The conversion fails if the <em>value</em> parameter is <strong>null</strong> or is not of the correct format. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.BigInteger.ToString(System.String)\n    commentId: M:System.Numerics.BigInteger.ToString(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.BigInteger.TryParse(System.String, ByRef System.Numerics.BigInteger)\n  name.vb: TryParse(String, ByRef BigInteger)\n  nameWithType: BigInteger.TryParse(String, out BigInteger)\n  nameWithType.vb: BigInteger.TryParse(String, ByRef BigInteger)\nreferences:\n- uid: System.Numerics\n  isExternal: false\n  name: System.Numerics\n  fullName: System.Numerics\n  commentId: N:System.Numerics\n  nameWithType: System.Numerics\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  commentId: T:System.IComparable\n  nameWithType: IComparable\n- uid: System.IComparable{System.Numerics.BigInteger}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<BigInteger>\n  fullName: System.IComparable<System.Numerics.BigInteger>\n  fullname.vb: System.IComparable(Of System.Numerics.BigInteger)\n  name.vb: IComparable(Of BigInteger)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: )\n    fullName: )\n  commentId: T:System.IComparable{System.Numerics.BigInteger}\n  nameWithType: IComparable<BigInteger>\n  nameWithType.vb: IComparable(Of BigInteger)\n- uid: System.IEquatable{System.Numerics.BigInteger}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<BigInteger>\n  fullName: System.IEquatable<System.Numerics.BigInteger>\n  fullname.vb: System.IEquatable(Of System.Numerics.BigInteger)\n  name.vb: IEquatable(Of BigInteger)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Numerics.BigInteger}\n  nameWithType: IEquatable<BigInteger>\n  nameWithType.vb: IEquatable(Of BigInteger)\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  commentId: T:System.IFormattable\n  nameWithType: IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IComparable`1\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  commentId: T:System.UInt32\n  nameWithType: UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  commentId: T:System.UInt64\n  nameWithType: UInt64\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Numerics.BigInteger\n  parent: System.Numerics\n  isExternal: false\n  name: BigInteger\n  fullName: System.Numerics.BigInteger\n  commentId: T:System.Numerics.BigInteger\n  nameWithType: BigInteger\n- uid: System.IComparable{System.Numerics.BigInteger}.CompareTo(System.Numerics.BigInteger)\n  parent: System.IComparable{System.Numerics.BigInteger}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(BigInteger)\n  fullName: System.IComparable<System.Numerics.BigInteger>.CompareTo(System.Numerics.BigInteger)\n  fullname.vb: System.IComparable(Of System.Numerics.BigInteger).CompareTo(System.Numerics.BigInteger)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Numerics.BigInteger>.CompareTo\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Numerics.BigInteger).CompareTo\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: )\n    fullName: )\n  commentId: M:System.IComparable{System.Numerics.BigInteger}.CompareTo(System.Numerics.BigInteger)\n  nameWithType: IComparable<BigInteger>.CompareTo(BigInteger)\n  nameWithType.vb: IComparable(Of BigInteger).CompareTo(BigInteger)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IComparable`1.CompareTo(`0)\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n- uid: System.IEquatable{System.Numerics.BigInteger}.Equals(System.Numerics.BigInteger)\n  parent: System.IEquatable{System.Numerics.BigInteger}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(BigInteger)\n  fullName: System.IEquatable<System.Numerics.BigInteger>.Equals(System.Numerics.BigInteger)\n  fullname.vb: System.IEquatable(Of System.Numerics.BigInteger).Equals(System.Numerics.BigInteger)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Numerics.BigInteger>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Numerics.BigInteger).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Numerics.BigInteger}.Equals(System.Numerics.BigInteger)\n  nameWithType: IEquatable<BigInteger>.Equals(BigInteger)\n  nameWithType.vb: IEquatable(Of BigInteger).Equals(BigInteger)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  commentId: T:System.Int16\n  nameWithType: Int16\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  commentId: T:System.SByte\n  nameWithType: SByte\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  commentId: T:System.UInt16\n  nameWithType: UInt16\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Globalization.NumberStyles\n  parent: System.Globalization\n  isExternal: false\n  name: NumberStyles\n  fullName: System.Globalization.NumberStyles\n  commentId: T:System.Globalization.NumberStyles\n  nameWithType: NumberStyles\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  commentId: N:System.Globalization\n  nameWithType: System.Globalization\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  commentId: T:System.IFormatProvider\n  nameWithType: IFormatProvider\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IComparable.CompareTo(System.Object)\n  nameWithType: IComparable.CompareTo(Object)\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.DivideByZeroException\n  isExternal: false\n  name: DivideByZeroException\n  fullName: System.DivideByZeroException\n  nameWithType: DivideByZeroException\n  commentId: T:System.DivideByZeroException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}