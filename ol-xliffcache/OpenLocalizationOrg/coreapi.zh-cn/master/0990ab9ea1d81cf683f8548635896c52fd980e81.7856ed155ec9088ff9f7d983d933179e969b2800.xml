{"nodes":[{"pos":[1185,1206],"content":"IPInterfaceProperties","needQuote":true,"nodes":[{"content":"IPInterfaceProperties","pos":[0,21]}]},{"pos":[2689,2712],"content":"IPInterfaceProperties()","needQuote":true,"nodes":[{"content":"IPInterfaceProperties()","pos":[0,23]}]},{"pos":[3875,3891],"content":"AnycastAddresses","needQuote":true,"nodes":[{"content":"AnycastAddresses","pos":[0,16]}]},{"pos":[5433,5452],"content":"DhcpServerAddresses","needQuote":true,"nodes":[{"content":"DhcpServerAddresses","pos":[0,19]}]},{"pos":[7022,7034],"content":"DnsAddresses","needQuote":true,"nodes":[{"content":"DnsAddresses","pos":[0,12]}]},{"pos":[8482,8491],"content":"DnsSuffix","needQuote":true,"nodes":[{"content":"DnsSuffix","pos":[0,9]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows 2000.","pos":[9678,9775],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows 2000."},{"content":"&lt;/p&gt;\\n","pos":[9776,9782],"source":" </p>\\n"},{"pos":[10221,10237],"content":"GatewayAddresses","needQuote":true,"nodes":[{"content":"GatewayAddresses","pos":[0,16]}]},{"pos":[11836,11848],"content":"IsDnsEnabled","needQuote":true,"nodes":[{"content":"IsDnsEnabled","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if NetBt is configured to use DNS name resolution on this interface; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12753,12891],"source":"\\n<p>\\n<strong>true</strong> if NetBt is configured to use DNS name resolution on this interface; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13342,13361],"content":"IsDynamicDnsEnabled","needQuote":true,"nodes":[{"content":"IsDynamicDnsEnabled","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14345,14538],"source":"\\n<p>\\n<strong>true</strong> if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14993,15011],"content":"MulticastAddresses","needQuote":true,"nodes":[{"content":"MulticastAddresses","pos":[0,18]}]},{"pos":[16591,16607],"content":"UnicastAddresses","needQuote":true,"nodes":[{"content":"UnicastAddresses","pos":[0,16]}]},{"pos":[18177,18197],"content":"WinsServersAddresses","needQuote":true,"nodes":[{"content":"WinsServersAddresses","pos":[0,20]}]},{"pos":[19762,19781],"content":"GetIPv4Properties()","needQuote":true,"nodes":[{"content":"GetIPv4Properties()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The interface does not support the IPv4 protocol.&lt;/p&gt;\\n","pos":[21077,21137],"source":"\\n<p>The interface does not support the IPv4 protocol.</p>\\n"},{"pos":[21568,21587],"content":"GetIPv6Properties()","needQuote":true,"nodes":[{"content":"GetIPv6Properties()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The interface does not support the IPv6 protocol.&lt;/p&gt;\\n","pos":[22815,22875],"source":"\\n<p>The interface does not support the IPv6 protocol.</p>\\n"},{"pos":[23100,23129],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[23329,23335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23495,23505],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23600,23608],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23677,23678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23705,23706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23776,23784],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23853,23854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23881,23882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24065,24079],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24198,24204],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24271,24272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24322,24328],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24388,24389],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24472,24478],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24545,24546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24596,24602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24662,24663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24877,24899],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25047,25053],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25120,25121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25171,25177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25238,25239]},{"pos":[25294,25300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25360,25361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25458,25464],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25531,25532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25582,25588],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25649,25650]},{"pos":[25705,25711],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25771,25772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26017,26048],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26214,26229],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26305,26306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26356,26362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26423,26424]},{"pos":[26479,26485],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26545,26546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26652,26667],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26743,26744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26794,26800],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26861,26862]},{"pos":[26917,26923],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26983,26984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27214,27227],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27328,27339],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27411,27412],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27439,27440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27513,27524],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27596,27597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27624,27625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27800,27809],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27902,27909],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27977,27978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28005,28006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28075,28082],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28150,28151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28178,28179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28354,28371],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[28480,28495],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28571,28572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28599,28600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28677,28692],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28768,28769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28796,28797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28942,28948],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29149,29179],"content":"IPAddressInformationCollection","needQuote":true,"nodes":[{"content":"IPAddressInformationCollection","pos":[0,30]}]},{"pos":[29461,29480],"content":"IPAddressCollection","needQuote":true,"nodes":[{"content":"IPAddressCollection","pos":[0,19]}]},{"pos":[29710,29716],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[29938,29975],"content":"GatewayIPAddressInformationCollection","needQuote":true,"nodes":[{"content":"GatewayIPAddressInformationCollection","pos":[0,37]}]},{"pos":[30260,30267],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30494,30533],"content":"MulticastIPAddressInformationCollection","needQuote":true,"nodes":[{"content":"MulticastIPAddressInformationCollection","pos":[0,39]}]},{"pos":[30900,30937],"content":"UnicastIPAddressInformationCollection","needQuote":true,"nodes":[{"content":"UnicastIPAddressInformationCollection","pos":[0,37]}]},{"pos":[31284,31307],"content":"IPv4InterfaceProperties","needQuote":true,"nodes":[{"content":"IPv4InterfaceProperties","pos":[0,23]}]},{"pos":[31612,31635],"content":"IPv6InterfaceProperties","needQuote":true,"nodes":[{"content":"IPv6InterfaceProperties","pos":[0,23]}]},{"pos":[31883,31912],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[32153,32180],"content":"NetworkInformationException","needQuote":true,"nodes":[{"content":"NetworkInformationException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.IPInterfaceProperties\n  commentId: T:System.Net.NetworkInformation.IPInterfaceProperties\n  id: IPInterfaceProperties\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.IPInterfaceProperties.#ctor\n  - System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses\n  - System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses\n  - System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses\n  - System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix\n  - System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses\n  - System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties\n  - System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties\n  - System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled\n  - System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled\n  - System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses\n  - System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses\n  - System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses\n  langs:\n  - csharp\n  - vb\n  name: IPInterfaceProperties\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPInterfaceProperties\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 172\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).</p>\\n\"\n  syntax:\n    content: public abstract class IPInterfaceProperties\n    content.vb: Public MustInherit Class IPInterfaceProperties\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: IPInterfaceProperties\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.#ctor\n  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IPInterfaceProperties()\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IPInterfaceProperties()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 174\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.IPInterfaceProperties\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected IPInterfaceProperties()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: IPInterfaceProperties.IPInterfaceProperties()\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses\n  id: AnycastAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: AnycastAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AnycastAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 175\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the anycast IP addresses assigned to this interface.</p>\\n\"\n  syntax:\n    content: public abstract IPAddressInformationCollection AnycastAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property AnycastAddresses As IPAddressInformationCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.IPAddressInformationCollection\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPAddressInformationCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the anycast addresses for this interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.AnycastAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses\n  id: DhcpServerAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: DhcpServerAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DhcpServerAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 176\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.</p>\\n\"\n  syntax:\n    content: public abstract IPAddressCollection DhcpServerAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property DhcpServerAddresses As IPAddressCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.IPAddressCollection\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPAddressCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the address information for DHCP servers, or an empty array if no servers are found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.DhcpServerAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses\n  id: DnsAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: DnsAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DnsAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 177\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the addresses of Domain Name System (DNS) servers for this interface.</p>\\n\"\n  syntax:\n    content: public abstract IPAddressCollection DnsAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property DnsAddresses As IPAddressCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.IPAddressCollection\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.IPAddressCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the DNS server addresses.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.DnsAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix\n  id: DnsSuffix\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: DnsSuffix\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DnsSuffix\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 178\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the Domain Name System (DNS) suffix associated with this interface.</p>\\n\"\n  syntax:\n    content: public abstract string DnsSuffix { get; }\n    content.vb: Public MustOverride ReadOnly Property DnsSuffix As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the DNS suffix for this interface, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if there is no DNS suffix for the interface.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows 2000. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.DnsSuffix\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses\n  id: GatewayAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: GatewayAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GatewayAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 179\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the IPv4 network gateway addresses for this interface.</p>\\n\"\n  syntax:\n    content: public abstract GatewayIPAddressInformationCollection GatewayAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property GatewayAddresses As GatewayIPAddressInformationCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.GatewayIPAddressInformationCollection\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.GatewayIPAddressInformationCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the address information for network gateways, or an empty array if no gateways are found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.GatewayAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled\n  id: IsDnsEnabled\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IsDnsEnabled\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDnsEnabled\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 180\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether NetBt is configured to use DNS name resolution on this interface.</p>\\n\"\n  syntax:\n    content: public abstract bool IsDnsEnabled { get; }\n    content.vb: Public MustOverride ReadOnly Property IsDnsEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if NetBt is configured to use DNS name resolution on this interface; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.IsDnsEnabled\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled\n  id: IsDynamicDnsEnabled\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IsDynamicDnsEnabled\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDynamicDnsEnabled\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 181\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).</p>\\n\"\n  syntax:\n    content: public abstract bool IsDynamicDnsEnabled { get; }\n    content.vb: Public MustOverride ReadOnly Property IsDynamicDnsEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.IsDynamicDnsEnabled\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses\n  id: MulticastAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: MulticastAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MulticastAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 182\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the multicast addresses assigned to this interface.</p>\\n\"\n  syntax:\n    content: public abstract MulticastIPAddressInformationCollection MulticastAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property MulticastAddresses As MulticastIPAddressInformationCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.MulticastIPAddressInformationCollection\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.MulticastIPAddressInformationCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the multicast addresses for this interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.MulticastAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses\n  id: UnicastAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: UnicastAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnicastAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 183\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the unicast addresses assigned to this interface.</p>\\n\"\n  syntax:\n    content: public abstract UnicastIPAddressInformationCollection UnicastAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property UnicastAddresses As UnicastIPAddressInformationCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.UnicastIPAddressInformationCollection\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.UnicastIPAddressInformationCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the unicast addresses for this interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.UnicastAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses\n  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses\n  id: WinsServersAddresses\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: WinsServersAddresses\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WinsServersAddresses\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 184\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the addresses of Windows Internet Name Service (WINS) servers.</p>\\n\"\n  syntax:\n    content: public abstract IPAddressCollection WinsServersAddresses { get; }\n    content.vb: Public MustOverride ReadOnly Property WinsServersAddresses As IPAddressCollection\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.IPAddressCollection\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPAddressCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the address information for WINS servers, or an empty array if no servers are found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPInterfaceProperties.WinsServersAddresses\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties\n  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties\n  id: GetIPv4Properties\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: GetIPv4Properties()\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetIPv4Properties\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 185\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.</p>\\n\"\n  syntax:\n    content: public abstract IPv4InterfaceProperties GetIPv4Properties()\n    content.vb: Public MustOverride Function GetIPv4Properties As IPv4InterfaceProperties\n    return:\n      type: System.Net.NetworkInformation.IPv4InterfaceProperties\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPv4InterfaceProperties\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains IPv4 configuration data, or <strong>null</strong> if no data is available for the interface.</p>\\n\"\n  exceptions:\n  - type: System.Net.NetworkInformation.NetworkInformationException\n    commentId: T:System.Net.NetworkInformation.NetworkInformationException\n    description: \"\\n<p>The interface does not support the IPv4 protocol.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: IPInterfaceProperties.GetIPv4Properties()\n- uid: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties\n  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties\n  id: GetIPv6Properties\n  parent: System.Net.NetworkInformation.IPInterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: GetIPv6Properties()\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetIPv6Properties\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 186\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.</p>\\n\"\n  syntax:\n    content: public abstract IPv6InterfaceProperties GetIPv6Properties()\n    content.vb: Public MustOverride Function GetIPv6Properties As IPv6InterfaceProperties\n    return:\n      type: System.Net.NetworkInformation.IPv6InterfaceProperties\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPv6InterfaceProperties\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains IPv6 configuration data.</p>\\n\"\n  exceptions:\n  - type: System.Net.NetworkInformation.NetworkInformationException\n    commentId: T:System.Net.NetworkInformation.NetworkInformationException\n    description: \"\\n<p>The interface does not support the IPv6 protocol.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: IPInterfaceProperties.GetIPv6Properties()\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.NetworkInformation.IPAddressInformationCollection\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPAddressInformationCollection\n  fullName: System.Net.NetworkInformation.IPAddressInformationCollection\n  commentId: T:System.Net.NetworkInformation.IPAddressInformationCollection\n  nameWithType: IPAddressInformationCollection\n- uid: System.Net.NetworkInformation.IPAddressCollection\n  isExternal: false\n  name: IPAddressCollection\n  fullName: System.Net.NetworkInformation.IPAddressCollection\n  commentId: T:System.Net.NetworkInformation.IPAddressCollection\n  nameWithType: IPAddressCollection\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Net.NetworkInformation.GatewayIPAddressInformationCollection\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: GatewayIPAddressInformationCollection\n  fullName: System.Net.NetworkInformation.GatewayIPAddressInformationCollection\n  commentId: T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection\n  nameWithType: GatewayIPAddressInformationCollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.NetworkInformation.MulticastIPAddressInformationCollection\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: MulticastIPAddressInformationCollection\n  fullName: System.Net.NetworkInformation.MulticastIPAddressInformationCollection\n  commentId: T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection\n  nameWithType: MulticastIPAddressInformationCollection\n- uid: System.Net.NetworkInformation.UnicastIPAddressInformationCollection\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: UnicastIPAddressInformationCollection\n  fullName: System.Net.NetworkInformation.UnicastIPAddressInformationCollection\n  commentId: T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection\n  nameWithType: UnicastIPAddressInformationCollection\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPv4InterfaceProperties\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties\n  commentId: T:System.Net.NetworkInformation.IPv4InterfaceProperties\n  nameWithType: IPv4InterfaceProperties\n- uid: System.Net.NetworkInformation.IPv6InterfaceProperties\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPv6InterfaceProperties\n  fullName: System.Net.NetworkInformation.IPv6InterfaceProperties\n  commentId: T:System.Net.NetworkInformation.IPv6InterfaceProperties\n  nameWithType: IPv6InterfaceProperties\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.Net.NetworkInformation.NetworkInformationException\n  isExternal: false\n  name: NetworkInformationException\n  fullName: System.Net.NetworkInformation.NetworkInformationException\n  commentId: T:System.Net.NetworkInformation.NetworkInformationException\n  nameWithType: NetworkInformationException\n"}