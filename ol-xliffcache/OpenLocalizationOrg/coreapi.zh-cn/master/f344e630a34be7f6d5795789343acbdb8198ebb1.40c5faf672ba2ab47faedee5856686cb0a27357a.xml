{"nodes":[{"pos":[651,660],"content":"CommonAce","needQuote":true,"nodes":[{"content":"CommonAce","pos":[0,9]}]},{"pos":[3626,3703],"content":"CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])","needQuote":true,"nodes":[{"content":"CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])","pos":[0,77]}]},{"content":"\\n&lt;p&gt;Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).&lt;/p&gt;\\n","pos":[4929,5082],"source":"\\n<p>Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).</p>\\n"},{"content":"\\n&lt;p&gt;The use of the new ACE.&lt;/p&gt;\\n","pos":[5179,5213],"source":"\\n<p>The use of the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;The access mask for the ACE.&lt;/p&gt;\\n","pos":[5281,5320],"source":"\\n<p>The access mask for the ACE.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify that the new ACE is a callback type ACE.&lt;/p&gt;\\n","pos":[5631,5717],"source":"\\n<p>\\n<strong>true</strong> to specify that the new ACE is a callback type ACE.</p>\\n"},{"pos":[6931,6943],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[8771,8799],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[10028,10079],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[11155,11179],"content":"MaxOpaqueLength(Boolean)","needQuote":true,"nodes":[{"content":"MaxOpaqueLength(Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The allowed length of an opaque data BLOB.&lt;/p&gt;\\n","pos":[12283,12336],"source":"\\n<p>The allowed length of an opaque data BLOB.</p>\\n"},{"pos":[12546,12575],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[12775,12781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12976,12986],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[13237,13245],"content":"KnownAce","needQuote":true,"nodes":[{"content":"KnownAce","pos":[0,8]}]},{"pos":[13494,13506],"content":"QualifiedAce","needQuote":true,"nodes":[{"content":"QualifiedAce","pos":[0,12]}]},{"pos":[13793,13805],"content":"AceQualifier","needQuote":true,"nodes":[{"content":"AceQualifier","pos":[0,12]}]},{"pos":[14129,14139],"content":"IsCallback","needQuote":true,"nodes":[{"content":"IsCallback","pos":[0,10]}]},{"pos":[14459,14471],"content":"OpaqueLength","needQuote":true,"nodes":[{"content":"OpaqueLength","pos":[0,12]}]},{"pos":[14794,14805],"content":"GetOpaque()","needQuote":true,"nodes":[{"content":"GetOpaque()","pos":[0,11]}]},{"pos":[14960,14969],"content":"GetOpaque","needQuote":true,"nodes":[{"content":"GetOpaque","pos":[0,9]}]},{"pos":[15047,15048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15075,15076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15176,15185],"content":"GetOpaque","needQuote":true,"nodes":[{"content":"GetOpaque","pos":[0,9]}]},{"pos":[15263,15264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15291,15292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15573,15590],"content":"SetOpaque(Byte[])","needQuote":true,"nodes":[{"content":"SetOpaque(Byte[])","pos":[0,17]}]},{"pos":[15885,15894],"content":"SetOpaque","needQuote":true,"nodes":[{"content":"SetOpaque","pos":[0,9]}]},{"pos":[15972,15973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16021,16025],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[16084,16086]},{"pos":[16117,16118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16233,16242],"content":"SetOpaque","needQuote":true,"nodes":[{"content":"SetOpaque","pos":[0,9]}]},{"pos":[16320,16321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16369,16373],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16431,16433],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[16461,16462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16793,16803],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[17109,17127],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[17451,17459],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[17758,17765],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[18064,18074],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[18388,18404],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[18731,18742],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[19059,19075],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[19395,19401],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[19542,19546],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[19617,19618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19645,19646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19739,19743],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[19814,19815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19842,19843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20130,20165],"content":"CreateFromBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[], Int32)","pos":[0,35]}]},{"pos":[20546,20566],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[20653,20654],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20702,20706],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[20765,20767]},{"content":",","pos":[20799,20800]},{"pos":[20854,20859],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20918,20919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21056,21076],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[21163,21164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21212,21216],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21274,21276],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[21305,21306]},{"pos":[21360,21365],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21424,21425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21824,21838],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22011,22017],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22090,22091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22141,22147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22207,22208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22318,22324],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22397,22398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22448,22454],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22514,22515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22791,22804],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22959,22970],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23048,23049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23076,23077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23177,23188],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23266,23267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23294,23295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23502,23512],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23607,23615],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23684,23685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23712,23713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23783,23791],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23860,23861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23888,23889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24086,24108],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[24256,24262],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24329,24330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24380,24386],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24447,24448]},{"pos":[24503,24509],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24569,24570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24667,24673],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24740,24741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24791,24797],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24858,24859]},{"pos":[24914,24920],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24980,24981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25226,25257],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[25423,25438],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25514,25515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25565,25571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25632,25633]},{"pos":[25688,25694],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25754,25755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25861,25876],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25952,25953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26003,26009],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26070,26071]},{"pos":[26126,26132],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26192,26193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26419,26428],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26521,26528],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26596,26597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26624,26625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26694,26701],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26769,26770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26797,26798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26973,26990],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27099,27114],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27190,27191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27218,27219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27296,27311],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27387,27388],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27415,27416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27561,27567],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[27746,27754],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[28003,28015],"content":"AceQualifier","needQuote":true,"nodes":[{"content":"AceQualifier","pos":[0,12]}]},{"pos":[28223,28228],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28420,28438],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[28658,28665],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28776,28782],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[28902,28906],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[28965,28967]},{"pos":[29030,29034],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29092,29094],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[29222,29247],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[29509,29521],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[29865,29893],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[30246,30259],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[30339,30340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30388,30392],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[30451,30453]},{"content":",","pos":[30485,30486]},{"pos":[30540,30545],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30604,30605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30735,30748],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[30828,30829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30877,30881],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30939,30941],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[30970,30971]},{"pos":[31025,31030],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31089,31090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31390,31417],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.CommonAce\n  commentId: T:System.Security.AccessControl.CommonAce\n  id: CommonAce\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])\n  - System.Security.AccessControl.CommonAce.BinaryLength\n  - System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)\n  langs:\n  - csharp\n  - vb\n  name: CommonAce\n  fullName: System.Security.AccessControl.CommonAce\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommonAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 140\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an access control entry (ACE).</p>\\n\"\n  syntax:\n    content: 'public sealed class CommonAce : QualifiedAce'\n    content.vb: >-\n      Public NotInheritable Class CommonAce\n          Inherits QualifiedAce\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAce\n  - System.Security.AccessControl.KnownAce\n  - System.Security.AccessControl.QualifiedAce\n  inheritedMembers:\n  - System.Security.AccessControl.QualifiedAce.AceQualifier\n  - System.Security.AccessControl.QualifiedAce.IsCallback\n  - System.Security.AccessControl.QualifiedAce.OpaqueLength\n  - System.Security.AccessControl.QualifiedAce.GetOpaque\n  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  - System.Security.AccessControl.KnownAce.AccessMask\n  - System.Security.AccessControl.KnownAce.SecurityIdentifier\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CommonAce\n- uid: System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])\n  commentId: M:System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])\n  id: '#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])'\n  parent: System.Security.AccessControl.CommonAce\n  langs:\n  - csharp\n  - vb\n  name: CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])\n  fullName: System.Security.AccessControl.CommonAce.CommonAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Boolean, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 142\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CommonAce(AceFlags flags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, bool isCallback, byte[] opaque)\n    content.vb: Public Sub New(flags As AceFlags, qualifier As AceQualifier, accessMask As Integer, sid As SecurityIdentifier, isCallback As Boolean, opaque As Byte())\n    parameters:\n    - id: flags\n      type: System.Security.AccessControl.AceFlags\n      description: \"\\n<p>Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).</p>\\n\"\n    - id: qualifier\n      type: System.Security.AccessControl.AceQualifier\n      description: \"\\n<p>The use of the new ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask for the ACE.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the new ACE.</p>\\n\"\n    - id: isCallback\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that the new ACE is a callback type ACE.</p>\\n\"\n    - id: opaque\n      type: System.Byte[]\n      description: \"\\n<p>Opaque data associated with the new ACE. Opaque data is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <xref href=\\\"System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.CommonAce.CommonAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Boolean, System.Byte())\n  name.vb: CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte())\n  nameWithType: CommonAce.CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])\n  nameWithType.vb: CommonAce.CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte())\n- uid: System.Security.AccessControl.CommonAce.BinaryLength\n  commentId: P:System.Security.AccessControl.CommonAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.CommonAce\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.CommonAce.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 143\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Use this length with the <xref href=\\\"System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method before marshaling the ACL into a binary array.</p>\\n\"\n  syntax:\n    content: public override int BinaryLength { get; }\n    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAce.BinaryLength\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: CommonAce.BinaryLength\n- uid: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAce\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 144\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public override void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into the <em>binaryForm</em> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: CommonAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: CommonAce.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)\n  commentId: M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)\n  id: MaxOpaqueLength(System.Boolean)\n  parent: System.Security.AccessControl.CommonAce\n  langs:\n  - csharp\n  - vb\n  name: MaxOpaqueLength(Boolean)\n  fullName: System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxOpaqueLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 145\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the maximum allowed length of an opaque data BLOB for callback access control entries (ACEs).</p>\\n\"\n  syntax:\n    content: public static int MaxOpaqueLength(bool isCallback)\n    content.vb: Public Shared Function MaxOpaqueLength(isCallback As Boolean) As Integer\n    parameters:\n    - id: isCallback\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a callback ACE type.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The allowed length of an opaque data BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CommonAce.MaxOpaqueLength(Boolean)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.KnownAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: KnownAce\n  fullName: System.Security.AccessControl.KnownAce\n  commentId: T:System.Security.AccessControl.KnownAce\n  nameWithType: KnownAce\n- uid: System.Security.AccessControl.QualifiedAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: QualifiedAce\n  fullName: System.Security.AccessControl.QualifiedAce\n  commentId: T:System.Security.AccessControl.QualifiedAce\n  nameWithType: QualifiedAce\n- uid: System.Security.AccessControl.QualifiedAce.AceQualifier\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: AceQualifier\n  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier\n  commentId: P:System.Security.AccessControl.QualifiedAce.AceQualifier\n  nameWithType: QualifiedAce.AceQualifier\n- uid: System.Security.AccessControl.QualifiedAce.IsCallback\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: IsCallback\n  fullName: System.Security.AccessControl.QualifiedAce.IsCallback\n  commentId: P:System.Security.AccessControl.QualifiedAce.IsCallback\n  nameWithType: QualifiedAce.IsCallback\n- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: OpaqueLength\n  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength\n  commentId: P:System.Security.AccessControl.QualifiedAce.OpaqueLength\n  nameWithType: QualifiedAce.OpaqueLength\n- uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: GetOpaque()\n  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()\n  spec.csharp:\n  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n    name: GetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n    name: GetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.QualifiedAce.GetOpaque\n  nameWithType: QualifiedAce.GetOpaque()\n- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: true\n  name: SetOpaque(Byte[])\n  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  fullname.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())\n  name.vb: SetOpaque(Byte())\n  spec.csharp:\n  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n    name: SetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n    name: SetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  nameWithType: QualifiedAce.SetOpaque(Byte[])\n  nameWithType.vb: QualifiedAce.SetOpaque(Byte())\n- uid: System.Security.AccessControl.KnownAce.AccessMask\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.KnownAce.AccessMask\n  commentId: P:System.Security.AccessControl.KnownAce.AccessMask\n  nameWithType: KnownAce.AccessMask\n- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  commentId: P:System.Security.AccessControl.KnownAce.SecurityIdentifier\n  nameWithType: KnownAce.SecurityIdentifier\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AceFlags\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  commentId: P:System.Security.AccessControl.GenericAce.AceType\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  commentId: P:System.Security.AccessControl.GenericAce.IsInherited\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Copy\n  nameWithType: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: CreateFromBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)\n  name.vb: CreateFromBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)\n  nameWithType: GenericAce.Equals(Object)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode\n  nameWithType: GenericAce.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n  commentId: T:System.Security.AccessControl.AceFlags\n  nameWithType: AceFlags\n- uid: System.Security.AccessControl.AceQualifier\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceQualifier\n  fullName: System.Security.AccessControl.AceQualifier\n  commentId: T:System.Security.AccessControl.AceQualifier\n  nameWithType: AceQualifier\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}