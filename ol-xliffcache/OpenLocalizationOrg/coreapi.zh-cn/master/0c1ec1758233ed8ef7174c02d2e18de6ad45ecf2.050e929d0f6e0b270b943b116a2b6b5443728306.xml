{"nodes":[{"pos":[2986,2995],"content":"SslStream","needQuote":true,"nodes":[{"content":"SslStream","pos":[0,9]}]},{"pos":[6964,6981],"content":"SslStream(Stream)","needQuote":true,"nodes":[{"content":"SslStream(Stream)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not readable.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not writable.&lt;/p&gt;\\n","pos":[8185,8296],"source":"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n"},{"pos":[8985,9011],"content":"SslStream(Stream, Boolean)","needQuote":true,"nodes":[{"content":"SslStream(Stream, Boolean)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not readable.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not writable.&lt;/p&gt;\\n","pos":[10745,10856],"source":"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n"},{"pos":[11722,11785],"content":"SslStream(Stream, Boolean, RemoteCertificateValidationCallback)","needQuote":true,"nodes":[{"content":"SslStream(Stream, Boolean, RemoteCertificateValidationCallback)","pos":[0,63]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not readable.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not writable.&lt;/p&gt;\\n","pos":[14098,14209],"source":"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n"},{"pos":[15274,15372],"content":"SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback)","needQuote":true,"nodes":[{"content":"SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback)","pos":[0,98]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not readable.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not writable.&lt;/p&gt;\\n","pos":[18244,18355],"source":"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n"},{"pos":[19566,19682],"content":"SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback, EncryptionPolicy)","needQuote":true,"nodes":[{"content":"SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback, EncryptionPolicy)","pos":[0,116]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not readable.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;innerStream&lt;/em&gt; is not writable.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;encryptionPolicy&lt;/em&gt; is not valid.&lt;/p&gt;\\n","pos":[22788,22962],"source":"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n<p>-or-</p>\\n<p>\\n<em>encryptionPolicy</em> is not valid.</p>\\n"},{"pos":[23655,23662],"content":"CanRead","needQuote":true,"nodes":[{"content":"CanRead","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if authentication has occurred and the underlying stream is readable; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24430,24568],"source":"\\n<p>\\n<strong>true</strong> if authentication has occurred and the underlying stream is readable; otherwise <strong>false</strong>.</p>\\n"},{"pos":[24936,24943],"content":"CanSeek","needQuote":true,"nodes":[{"content":"CanSeek","pos":[0,7]}]},{"content":"\\n&lt;p&gt;This property always returns &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25711,25774],"source":"\\n<p>This property always returns <strong>false</strong>.</p>\\n"},{"pos":[26344,26354],"content":"CanTimeout","needQuote":true,"nodes":[{"content":"CanTimeout","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the underlying stream supports time-outs; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27141,27255],"source":"\\n<p>\\n<strong>true</strong> if the underlying stream supports time-outs; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27632,27640],"content":"CanWrite","needQuote":true,"nodes":[{"content":"CanWrite","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if authentication has occurred and the underlying stream is writable; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28412,28550],"source":"\\n<p>\\n<strong>true</strong> if authentication has occurred and the underlying stream is writable; otherwise <strong>false</strong>.</p>\\n"},{"pos":[28974,28999],"content":"CheckCertRevocationStatus","needQuote":true,"nodes":[{"content":"CheckCertRevocationStatus","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the certificate revocation list is checked; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29891,30007],"source":"\\n<p>\\n<strong>true</strong> if the certificate revocation list is checked; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30379,30394],"content":"CipherAlgorithm","needQuote":true,"nodes":[{"content":"CipherAlgorithm","pos":[0,15]}]},{"pos":[32123,32137],"content":"CipherStrength","needQuote":true,"nodes":[{"content":"CipherStrength","pos":[0,14]}]},{"pos":[33457,33470],"content":"HashAlgorithm","needQuote":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[35086,35098],"content":"HashStrength","needQuote":true,"nodes":[{"content":"HashStrength","pos":[0,12]}]},{"pos":[36469,36484],"content":"IsAuthenticated","needQuote":true,"nodes":[{"content":"IsAuthenticated","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if successful authentication occurred; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37280,37388],"source":"\\n<p>\\n<strong>true</strong> if successful authentication occurred; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[37807,37818],"content":"IsEncrypted","needQuote":true,"nodes":[{"content":"IsEncrypted","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38684,38866],"source":"\\n<p>\\n<strong>true</strong> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <strong>false</strong>.</p>\\n"},{"pos":[39313,39336],"content":"IsMutuallyAuthenticated","needQuote":true,"nodes":[{"content":"IsMutuallyAuthenticated","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the server has been authenticated; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40181,40287],"source":"\\n<p>\\n<strong>true</strong> if the server has been authenticated; otherwise <strong>false</strong>.</p>\\n"},{"pos":[41006,41014],"content":"IsServer","needQuote":true,"nodes":[{"content":"IsServer","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41920,42093],"source":"\\n<p>\\n<strong>true</strong> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <strong>false</strong>.</p>\\n"},{"pos":[42489,42497],"content":"IsSigned","needQuote":true,"nodes":[{"content":"IsSigned","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the data is signed before being transmitted; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43277,43393],"source":"\\n<p>\\n<strong>true</strong> if the data is signed before being transmitted; otherwise <strong>false</strong>.</p>\\n"},{"pos":[43825,43845],"content":"KeyExchangeAlgorithm","needQuote":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[45237,45256],"content":"KeyExchangeStrength","needQuote":true,"nodes":[{"content":"KeyExchangeStrength","pos":[0,19]}]},{"pos":[46618,46624],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[48110,48126],"content":"LocalCertificate","needQuote":true,"nodes":[{"content":"LocalCertificate","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An X509Certificate object that represents the certificate supplied for authentication or &lt;strong&gt;null&lt;/strong&gt; if no certificate was supplied.&lt;/p&gt;\\n","pos":[48913,49066],"source":"\\n<p>An X509Certificate object that represents the certificate supplied for authentication or <strong>null</strong> if no certificate was supplied.</p>\\n"},{"content":"\\n&lt;p&gt;Authentication failed or has not occurred.&lt;/p&gt;\\n","pos":[49193,49246],"source":"\\n<p>Authentication failed or has not occurred.</p>\\n"},{"pos":[49588,49596],"content":"Position","needQuote":true,"nodes":[{"content":"Position","pos":[0,8]}]},{"pos":[51159,51170],"content":"ReadTimeout","needQuote":true,"nodes":[{"content":"ReadTimeout","pos":[0,11]}]},{"pos":[52451,52468],"content":"RemoteCertificate","needQuote":true,"nodes":[{"content":"RemoteCertificate","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An X509Certificate object that represents the certificate supplied for authentication or &lt;strong&gt;null&lt;/strong&gt; if no certificate was supplied.&lt;/p&gt;\\n","pos":[53260,53413],"source":"\\n<p>An X509Certificate object that represents the certificate supplied for authentication or <strong>null</strong> if no certificate was supplied.</p>\\n"},{"content":"\\n&lt;p&gt;Authentication failed or has not occurred.&lt;/p&gt;\\n","pos":[53540,53593],"source":"\\n<p>Authentication failed or has not occurred.</p>\\n"},{"pos":[53945,53956],"content":"SslProtocol","needQuote":true,"nodes":[{"content":"SslProtocol","pos":[0,11]}]},{"pos":[55264,55280],"content":"TransportContext","needQuote":true,"nodes":[{"content":"TransportContext","pos":[0,16]}]},{"pos":[56780,56792],"content":"WriteTimeout","needQuote":true,"nodes":[{"content":"WriteTimeout","pos":[0,12]}]},{"pos":[58152,58185],"content":"AuthenticateAsClientAsync(String)","needQuote":true,"nodes":[{"content":"AuthenticateAsClientAsync(String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;targetHost&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59555,59613],"source":"\\n<p>\\n<em>targetHost</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The authentication failed and left this object in an unusable state.&lt;/p&gt;\\n","pos":[59770,59849],"source":"\\n<p>The authentication failed and left this object in an unusable state.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been closed.&lt;/p&gt;\\n","pos":[60345,60384],"source":"\\n<p>This object has been closed.</p>\\n"},{"pos":[61211,61294],"content":"AuthenticateAsClientAsync(String, X509CertificateCollection, SslProtocols, Boolean)","needQuote":true,"nodes":[{"content":"AuthenticateAsClientAsync(String, X509CertificateCollection, SslProtocols, Boolean)","pos":[0,83]}]},{"pos":[64506,64548],"content":"AuthenticateAsServerAsync(X509Certificate)","needQuote":true,"nodes":[{"content":"AuthenticateAsServerAsync(X509Certificate)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The certificate used to authenticate the server.&lt;/p&gt;\\n","pos":[65580,65639],"source":"\\n<p>The certificate used to authenticate the server.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;serverCertificate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[66003,66068],"source":"\\n<p>\\n<em>serverCertificate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The authentication failed and left this object in an unusable state.&lt;/p&gt;\\n","pos":[66225,66304],"source":"\\n<p>The authentication failed and left this object in an unusable state.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been closed.&lt;/p&gt;\\n","pos":[66800,66839],"source":"\\n<p>This object has been closed.</p>\\n"},{"pos":[68036,68110],"content":"AuthenticateAsServerAsync(X509Certificate, Boolean, SslProtocols, Boolean)","needQuote":true,"nodes":[{"content":"AuthenticateAsServerAsync(X509Certificate, Boolean, SslProtocols, Boolean)","pos":[0,74]}]},{"content":"\\n&lt;p&gt;The X509Certificate used to authenticate the server.&lt;/p&gt;\\n","pos":[69469,69532],"source":"\\n<p>The X509Certificate used to authenticate the server.</p>\\n"},{"pos":[71077,71084],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[72111,72137],"content":"Read(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Byte[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[73984,74038],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt;\\n&lt;em&gt;&lt;&lt;/em&gt;\\n&lt;em&gt;0&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;-or-&lt;/em&gt;\\n&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; &gt; the length of &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; + count &gt; the length of &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[74135,74353],"source":"\\n<p>\\n<em>offset</em>\\n<em><</em>\\n<em>0</em>.</p>\\n<p>\\n<em>-or-</em>\\n</p>\\n<p>\\n<em>offset</em> > the length of <em>buffer</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + count > the length of <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The read operation failed.","pos":[74444,74475],"source":"\\n<p>The read operation failed."},{"content":"Check the inner exception, if present to determine the cause of the failure.&lt;/p&gt;\\n","pos":[74476,74558],"source":" Check the inner exception, if present to determine the cause of the failure.</p>\\n"},{"content":"\\n&lt;p&gt;There is already a read operation in progress.&lt;/p&gt;\\n","pos":[74663,74720],"source":"\\n<p>There is already a read operation in progress.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been closed.&lt;/p&gt;\\n","pos":[74829,74868],"source":"\\n<p>This object has been closed.</p>\\n"},{"content":"\\n&lt;p&gt;Authentication has not occurred.&lt;/p&gt;\\n","pos":[74981,75024],"source":"\\n<p>Authentication has not occurred.</p>\\n"},{"pos":[75634,75657],"content":"Seek(Int64, SeekOrigin)","needQuote":true,"nodes":[{"content":"Seek(Int64, SeekOrigin)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;This value is ignored.&lt;/p&gt;\\n","pos":[76450,76483],"source":"\\n<p>This value is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;This value is ignored.&lt;/p&gt;\\n","pos":[76555,76588],"source":"\\n<p>This value is ignored.</p>\\n"},{"pos":[77462,77478],"content":"SetLength(Int64)","needQuote":true,"nodes":[{"content":"SetLength(Int64)","pos":[0,16]}]},{"pos":[78699,78712],"content":"Write(Byte[])","needQuote":true,"nodes":[{"content":"Write(Byte[])","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79619,79673],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The write operation failed.&lt;/p&gt;\\n","pos":[79764,79802],"source":"\\n<p>The write operation failed.</p>\\n"},{"content":"\\n&lt;p&gt;There is already a write operation in progress.&lt;/p&gt;\\n","pos":[79907,79965],"source":"\\n<p>There is already a write operation in progress.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been closed.&lt;/p&gt;\\n","pos":[80074,80113],"source":"\\n<p>This object has been closed.</p>\\n"},{"content":"\\n&lt;p&gt;Authentication has not occurred.&lt;/p&gt;\\n","pos":[80226,80269],"source":"\\n<p>Authentication has not occurred.</p>\\n"},{"pos":[80807,80834],"content":"Write(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Byte[], Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82530,82584],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt;\\n&lt;em&gt;&lt;&lt;/em&gt;\\n&lt;em&gt;0&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;-or-&lt;/em&gt;\\n&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; &gt; the length of &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; + count &gt; the length of &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[82681,82899],"source":"\\n<p>\\n<em>offset</em>\\n<em><</em>\\n<em>0</em>.</p>\\n<p>\\n<em>-or-</em>\\n</p>\\n<p>\\n<em>offset</em> > the length of <em>buffer</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + count > the length of <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The write operation failed.&lt;/p&gt;\\n","pos":[82990,83028],"source":"\\n<p>The write operation failed.</p>\\n"},{"content":"\\n&lt;p&gt;There is already a write operation in progress.&lt;/p&gt;\\n","pos":[83133,83191],"source":"\\n<p>There is already a write operation in progress.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been closed.&lt;/p&gt;\\n","pos":[83300,83339],"source":"\\n<p>This object has been closed.</p>\\n"},{"content":"\\n&lt;p&gt;Authentication has not occurred.&lt;/p&gt;\\n","pos":[83452,83495],"source":"\\n<p>Authentication has not occurred.</p>\\n"},{"pos":[83893,83912],"content":"System.Net.Security","needQuote":true,"nodes":[{"content":"System.Net.Security","pos":[0,19]}]},{"pos":[84082,84088],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84244,84262],"content":"MarshalByRefObject","needQuote":true,"nodes":[{"content":"MarshalByRefObject","pos":[0,18]}]},{"pos":[84449,84455],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[84645,84664],"content":"AuthenticatedStream","needQuote":true,"nodes":[{"content":"AuthenticatedStream","pos":[0,19]}]},{"pos":[84879,84890],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[85130,85150],"content":"LeaveInnerStreamOpen","needQuote":true,"nodes":[{"content":"LeaveInnerStreamOpen","pos":[0,20]}]},{"pos":[85494,85505],"content":"InnerStream","needQuote":true,"nodes":[{"content":"InnerStream","pos":[0,11]}]},{"pos":[85833,85849],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[86024,86031],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[86104,86105],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86156,86163],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[86224,86225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86336,86343],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[86416,86417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86468,86475],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[86536,86537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86970,86989],"content":"CopyToAsync(Stream)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream)","pos":[0,19]}]},{"pos":[87130,87141],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[87195,87196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87249,87255],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[87297,87298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87392,87403],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[87457,87458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87511,87517],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[87559,87560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87803,87829],"content":"CopyToAsync(Stream, Int32)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32)","pos":[0,26]}]},{"pos":[87997,88008],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[88062,88063],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88116,88122],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[88165,88166]},{"pos":[88220,88225],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88284,88285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88392,88403],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[88457,88458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88511,88517],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[88560,88561]},{"pos":[88615,88620],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88679,88680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88978,89023],"content":"CopyToAsync(Stream, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32, CancellationToken)","pos":[0,45]}]},{"pos":[89262,89273],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[89327,89328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89381,89387],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[89430,89431]},{"pos":[89485,89490],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89550,89551]},{"pos":[89627,89644],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[89725,89726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89868,89879],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[89933,89934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89987,89993],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[90036,90037]},{"pos":[90091,90096],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[90156,90157]},{"pos":[90233,90250],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[90331,90332],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90632,90646],"content":"CopyTo(Stream)","needQuote":true,"nodes":[{"content":"CopyTo(Stream)","pos":[0,14]}]},{"pos":[90777,90783],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[90832,90833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90886,90892],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[90934,90935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91024,91030],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[91079,91080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91133,91139],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[91181,91182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91410,91431],"content":"CopyTo(Stream, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Stream, Int32)","pos":[0,21]}]},{"pos":[91589,91595],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[91644,91645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91698,91704],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[91747,91748]},{"pos":[91802,91807],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91866,91867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91969,91975],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[92024,92025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92078,92084],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[92127,92128]},{"pos":[92182,92187],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92246,92247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92463,92470],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[92565,92570],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[92639,92640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92667,92668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92738,92743],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[92812,92813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92840,92841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93014,93023],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[93122,93129],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[93179,93180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93207,93208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93280,93287],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[93337,93338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93365,93366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93546,93558],"content":"FlushAsync()","needQuote":true,"nodes":[{"content":"FlushAsync()","pos":[0,12]}]},{"pos":[93663,93673],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[93726,93727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93754,93755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93830,93840],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[93893,93894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93921,93922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94143,94172],"content":"FlushAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"FlushAsync(CancellationToken)","pos":[0,29]}]},{"pos":[94347,94357],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[94410,94411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94482,94499],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[94580,94581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94692,94702],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[94755,94756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94827,94844],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[94925,94926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95170,95188],"content":"CreateWaitHandle()","needQuote":true,"nodes":[{"content":"CreateWaitHandle()","pos":[0,18]}]},{"pos":[95305,95321],"content":"CreateWaitHandle","needQuote":true,"nodes":[{"content":"CreateWaitHandle","pos":[0,16]}]},{"pos":[95401,95402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95429,95430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95511,95527],"content":"CreateWaitHandle","needQuote":true,"nodes":[{"content":"CreateWaitHandle","pos":[0,16]}]},{"pos":[95607,95608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95635,95636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95908,95962],"content":"BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)","needQuote":true,"nodes":[{"content":"BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)","pos":[0,54]}]},{"pos":[96407,96416],"content":"BeginRead","needQuote":true,"nodes":[{"content":"BeginRead","pos":[0,9]}]},{"pos":[96489,96490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96538,96542],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[96601,96603]},{"content":",","pos":[96635,96636]},{"pos":[96690,96695],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[96755,96756]},{"pos":[96810,96815],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[96875,96876]},{"pos":[96938,96951],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[97019,97020]},{"pos":[97075,97081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97141,97142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97292,97301],"content":"BeginRead","needQuote":true,"nodes":[{"content":"BeginRead","pos":[0,9]}]},{"pos":[97374,97375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97423,97427],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[97485,97487],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[97516,97517]},{"pos":[97571,97576],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97636,97637]},{"pos":[97691,97696],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97756,97757]},{"pos":[97819,97832],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[97900,97901]},{"pos":[97956,97962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98022,98023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98424,98445],"content":"EndRead(IAsyncResult)","needQuote":true,"nodes":[{"content":"EndRead(IAsyncResult)","pos":[0,21]}]},{"pos":[98584,98591],"content":"EndRead","needQuote":true,"nodes":[{"content":"EndRead","pos":[0,7]}]},{"pos":[98662,98663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98719,98731],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[98797,98798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98891,98898],"content":"EndRead","needQuote":true,"nodes":[{"content":"EndRead","pos":[0,7]}]},{"pos":[98969,98970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99026,99038],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[99104,99105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99357,99388],"content":"ReadAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[99701,99710],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[99762,99763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99811,99815],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[99874,99876]},{"content":",","pos":[99908,99909]},{"pos":[99963,99968],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100028,100029]},{"pos":[100083,100088],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100147,100148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100263,100272],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[100324,100325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100373,100377],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[100435,100437],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[100466,100467]},{"pos":[100521,100526],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100586,100587]},{"pos":[100641,100646],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100705,100706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101083,101133],"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,50]}]},{"pos":[101572,101581],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[101633,101634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101682,101686],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[101745,101747]},{"content":",","pos":[101779,101780]},{"pos":[101834,101839],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[101899,101900]},{"pos":[101954,101959],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102019,102020]},{"pos":[102096,102113],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[102194,102195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102345,102354],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[102406,102407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102455,102459],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[102517,102519],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[102548,102549]},{"pos":[102603,102608],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102668,102669]},{"pos":[102723,102728],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102788,102789]},{"pos":[102865,102882],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[102963,102964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103415,103470],"content":"BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)","needQuote":true,"nodes":[{"content":"BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)","pos":[0,55]}]},{"pos":[103919,103929],"content":"BeginWrite","needQuote":true,"nodes":[{"content":"BeginWrite","pos":[0,10]}]},{"pos":[104003,104004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104052,104056],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[104115,104117]},{"content":",","pos":[104149,104150]},{"pos":[104204,104209],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104269,104270]},{"pos":[104324,104329],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104389,104390]},{"pos":[104452,104465],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[104533,104534]},{"pos":[104589,104595],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104655,104656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104807,104817],"content":"BeginWrite","needQuote":true,"nodes":[{"content":"BeginWrite","pos":[0,10]}]},{"pos":[104891,104892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104940,104944],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[105002,105004],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[105033,105034]},{"pos":[105088,105093],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[105153,105154]},{"pos":[105208,105213],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[105273,105274]},{"pos":[105336,105349],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[105417,105418]},{"pos":[105473,105479],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[105539,105540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105945,105967],"content":"EndWrite(IAsyncResult)","needQuote":true,"nodes":[{"content":"EndWrite(IAsyncResult)","pos":[0,22]}]},{"pos":[106108,106116],"content":"EndWrite","needQuote":true,"nodes":[{"content":"EndWrite","pos":[0,8]}]},{"pos":[106188,106189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106245,106257],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[106323,106324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106418,106426],"content":"EndWrite","needQuote":true,"nodes":[{"content":"EndWrite","pos":[0,8]}]},{"pos":[106498,106499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106555,106567],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[106633,106634],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106889,106921],"content":"WriteAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32)","pos":[0,32]}]},{"pos":[107238,107248],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[107301,107302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107350,107354],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[107413,107415]},{"content":",","pos":[107447,107448]},{"pos":[107502,107507],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[107567,107568]},{"pos":[107622,107627],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107686,107687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107803,107813],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[107866,107867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107915,107919],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[107977,107979],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[108008,108009]},{"pos":[108063,108068],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[108128,108129]},{"pos":[108183,108188],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[108247,108248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108629,108680],"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,51]}]},{"pos":[109123,109133],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[109186,109187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109235,109239],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[109298,109300]},{"content":",","pos":[109332,109333]},{"pos":[109387,109392],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109452,109453]},{"pos":[109507,109512],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109572,109573]},{"pos":[109649,109666],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[109747,109748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109899,109909],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[109962,109963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110011,110015],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[110073,110075],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[110104,110105]},{"pos":[110159,110164],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110224,110225]},{"pos":[110279,110284],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110344,110345]},{"pos":[110421,110438],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[110519,110520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110897,110907],"content":"ReadByte()","needQuote":true,"nodes":[{"content":"ReadByte()","pos":[0,10]}]},{"pos":[111008,111016],"content":"ReadByte","needQuote":true,"nodes":[{"content":"ReadByte","pos":[0,8]}]},{"pos":[111067,111068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111095,111096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111169,111177],"content":"ReadByte","needQuote":true,"nodes":[{"content":"ReadByte","pos":[0,8]}]},{"pos":[111228,111229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111256,111257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111450,111465],"content":"WriteByte(Byte)","needQuote":true,"nodes":[{"content":"WriteByte(Byte)","pos":[0,15]}]},{"pos":[111592,111601],"content":"WriteByte","needQuote":true,"nodes":[{"content":"WriteByte","pos":[0,9]}]},{"pos":[111653,111654],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111702,111706],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[111764,111765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111852,111861],"content":"WriteByte","needQuote":true,"nodes":[{"content":"WriteByte","pos":[0,9]}]},{"pos":[111913,111914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111962,111966],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[112024,112025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112245,112265],"content":"Synchronized(Stream)","needQuote":true,"nodes":[{"content":"Synchronized(Stream)","pos":[0,20]}]},{"pos":[112408,112420],"content":"Synchronized","needQuote":true,"nodes":[{"content":"Synchronized","pos":[0,12]}]},{"pos":[112496,112497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112550,112556],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[112619,112620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112715,112727],"content":"Synchronized","needQuote":true,"nodes":[{"content":"Synchronized","pos":[0,12]}]},{"pos":[112803,112804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112857,112863],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[112926,112927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113145,113162],"content":"ObjectInvariant()","needQuote":true,"nodes":[{"content":"ObjectInvariant()","pos":[0,17]}]},{"pos":[113277,113292],"content":"ObjectInvariant","needQuote":true,"nodes":[{"content":"ObjectInvariant","pos":[0,15]}]},{"pos":[113371,113372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113399,113400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113480,113495],"content":"ObjectInvariant","needQuote":true,"nodes":[{"content":"ObjectInvariant","pos":[0,15]}]},{"pos":[113574,113575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113602,113603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113837,113861],"content":"MemberwiseClone(Boolean)","needQuote":true,"nodes":[{"content":"MemberwiseClone(Boolean)","pos":[0,24]}]},{"pos":[114024,114039],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[114127,114128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114179,114186],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[114247,114248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114353,114368],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[114456,114457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114508,114515],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[114576,114577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114842,114862],"content":"GetLifetimeService()","needQuote":true,"nodes":[{"content":"GetLifetimeService()","pos":[0,20]}]},{"pos":[115001,115019],"content":"GetLifetimeService","needQuote":true,"nodes":[{"content":"GetLifetimeService","pos":[0,18]}]},{"pos":[115110,115111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115138,115139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115231,115249],"content":"GetLifetimeService","needQuote":true,"nodes":[{"content":"GetLifetimeService","pos":[0,18]}]},{"pos":[115340,115341],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115368,115369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115624,115651],"content":"InitializeLifetimeService()","needQuote":true,"nodes":[{"content":"InitializeLifetimeService()","pos":[0,27]}]},{"pos":[115804,115829],"content":"InitializeLifetimeService","needQuote":true,"nodes":[{"content":"InitializeLifetimeService","pos":[0,25]}]},{"pos":[115927,115928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115955,115956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116055,116080],"content":"InitializeLifetimeService","needQuote":true,"nodes":[{"content":"InitializeLifetimeService","pos":[0,25]}]},{"pos":[116178,116179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116206,116207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116476,116494],"content":"CreateObjRef(Type)","needQuote":true,"nodes":[{"content":"CreateObjRef(Type)","pos":[0,18]}]},{"pos":[116645,116657],"content":"CreateObjRef","needQuote":true,"nodes":[{"content":"CreateObjRef","pos":[0,12]}]},{"pos":[116742,116743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116791,116795],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[116853,116854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116953,116965],"content":"CreateObjRef","needQuote":true,"nodes":[{"content":"CreateObjRef","pos":[0,12]}]},{"pos":[117050,117051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117099,117103],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[117161,117162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117381,117391],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[117486,117494],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[117563,117564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117591,117592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117662,117670],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[117739,117740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117767,117768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117951,117965],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[118084,118090],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[118157,118158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118208,118214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118274,118275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118358,118364],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[118431,118432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118482,118488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118548,118549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118763,118785],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[118933,118939],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[119006,119007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119057,119063],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[119124,119125]},{"pos":[119180,119186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119246,119247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119344,119350],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[119417,119418],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119468,119474],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[119535,119536]},{"pos":[119591,119597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119657,119658],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119903,119934],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[120100,120115],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[120191,120192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120242,120248],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[120309,120310]},{"pos":[120365,120371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120431,120432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120538,120553],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[120629,120630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120680,120686],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[120747,120748]},{"pos":[120803,120809],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120869,120870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121100,121113],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[121214,121225],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[121297,121298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121325,121326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121399,121410],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[121482,121483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121510,121511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121686,121695],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[121788,121795],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[121863,121864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121891,121892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121961,121968],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[122036,122037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122064,122065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122240,122257],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[122366,122381],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[122457,122458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122485,122486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122563,122578],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[122654,122655],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122682,122683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123011,123026],"content":"AsInputStream()","needQuote":true,"nodes":[{"content":"AsInputStream()","pos":[0,15]}]},{"pos":[123185,123198],"content":"AsInputStream","needQuote":true,"nodes":[{"content":"AsInputStream","pos":[0,13]}]},{"pos":[123278,123279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123306,123307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123409,123422],"content":"AsInputStream","needQuote":true,"nodes":[{"content":"AsInputStream","pos":[0,13]}]},{"pos":[123502,123503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123530,123531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123926,123942],"content":"AsOutputStream()","needQuote":true,"nodes":[{"content":"AsOutputStream()","pos":[0,16]}]},{"pos":[124103,124117],"content":"AsOutputStream","needQuote":true,"nodes":[{"content":"AsOutputStream","pos":[0,14]}]},{"pos":[124198,124199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124226,124227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124330,124344],"content":"AsOutputStream","needQuote":true,"nodes":[{"content":"AsOutputStream","pos":[0,14]}]},{"pos":[124425,124426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124453,124454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124863,124885],"content":"AsRandomAccessStream()","needQuote":true,"nodes":[{"content":"AsRandomAccessStream()","pos":[0,22]}]},{"pos":[125058,125078],"content":"AsRandomAccessStream","needQuote":true,"nodes":[{"content":"AsRandomAccessStream","pos":[0,20]}]},{"pos":[125165,125166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125193,125194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125303,125323],"content":"AsRandomAccessStream","needQuote":true,"nodes":[{"content":"AsRandomAccessStream","pos":[0,20]}]},{"pos":[125410,125411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125438,125439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125663,125669],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[125779,125788],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[125969,125990],"content":"AsInputStream(Stream)","needQuote":true,"nodes":[{"content":"AsInputStream(Stream)","pos":[0,21]}]},{"pos":[126183,126196],"content":"AsInputStream","needQuote":true,"nodes":[{"content":"AsInputStream","pos":[0,13]}]},{"pos":[126276,126277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126330,126336],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[126399,126400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126520,126533],"content":"AsInputStream","needQuote":true,"nodes":[{"content":"AsInputStream","pos":[0,13]}]},{"pos":[126613,126614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126667,126673],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[126736,126737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127007,127037],"content":"WindowsRuntimeStreamExtensions","needQuote":true,"nodes":[{"content":"WindowsRuntimeStreamExtensions","pos":[0,30]}]},{"pos":[127302,127324],"content":"AsOutputStream(Stream)","needQuote":true,"nodes":[{"content":"AsOutputStream(Stream)","pos":[0,22]}]},{"pos":[127519,127533],"content":"AsOutputStream","needQuote":true,"nodes":[{"content":"AsOutputStream","pos":[0,14]}]},{"pos":[127614,127615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127668,127674],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[127737,127738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127859,127873],"content":"AsOutputStream","needQuote":true,"nodes":[{"content":"AsOutputStream","pos":[0,14]}]},{"pos":[127954,127955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128008,128014],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[128077,128078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128368,128396],"content":"AsRandomAccessStream(Stream)","needQuote":true,"nodes":[{"content":"AsRandomAccessStream(Stream)","pos":[0,28]}]},{"pos":[128603,128623],"content":"AsRandomAccessStream","needQuote":true,"nodes":[{"content":"AsRandomAccessStream","pos":[0,20]}]},{"pos":[128710,128711],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128764,128770],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[128833,128834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128961,128981],"content":"AsRandomAccessStream","needQuote":true,"nodes":[{"content":"AsRandomAccessStream","pos":[0,20]}]},{"pos":[129068,129069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129122,129128],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[129191,129192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129447,129454],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[129657,129692],"content":"RemoteCertificateValidationCallback","needQuote":true,"nodes":[{"content":"RemoteCertificateValidationCallback","pos":[0,35]}]},{"pos":[130003,130036],"content":"LocalCertificateSelectionCallback","needQuote":true,"nodes":[{"content":"LocalCertificateSelectionCallback","pos":[0,33]}]},{"pos":[130324,130340],"content":"EncryptionPolicy","needQuote":true,"nodes":[{"content":"EncryptionPolicy","pos":[0,16]}]},{"pos":[130562,130569],"content":"CanRead","needQuote":true,"nodes":[{"content":"CanRead","pos":[0,7]}]},{"pos":[130765,130772],"content":"CanSeek","needQuote":true,"nodes":[{"content":"CanSeek","pos":[0,7]}]},{"pos":[130971,130981],"content":"CanTimeout","needQuote":true,"nodes":[{"content":"CanTimeout","pos":[0,10]}]},{"pos":[131187,131195],"content":"CanWrite","needQuote":true,"nodes":[{"content":"CanWrite","pos":[0,8]}]},{"pos":[131434,131453],"content":"CipherAlgorithmType","needQuote":true,"nodes":[{"content":"CipherAlgorithmType","pos":[0,19]}]},{"pos":[131685,131715],"content":"System.Security.Authentication","needQuote":true,"nodes":[{"content":"System.Security.Authentication","pos":[0,30]}]},{"pos":[131917,131922],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[132123,132140],"content":"HashAlgorithmType","needQuote":true,"nodes":[{"content":"HashAlgorithmType","pos":[0,17]}]},{"pos":[132441,132456],"content":"IsAuthenticated","needQuote":true,"nodes":[{"content":"IsAuthenticated","pos":[0,15]}]},{"pos":[132785,132796],"content":"IsEncrypted","needQuote":true,"nodes":[{"content":"IsEncrypted","pos":[0,11]}]},{"pos":[133125,133148],"content":"IsMutuallyAuthenticated","needQuote":true,"nodes":[{"content":"IsMutuallyAuthenticated","pos":[0,23]}]},{"pos":[133498,133506],"content":"IsServer","needQuote":true,"nodes":[{"content":"IsServer","pos":[0,8]}]},{"pos":[133811,133819],"content":"IsSigned","needQuote":true,"nodes":[{"content":"IsSigned","pos":[0,8]}]},{"pos":[134119,134140],"content":"ExchangeAlgorithmType","needQuote":true,"nodes":[{"content":"ExchangeAlgorithmType","pos":[0,21]}]},{"pos":[134398,134404],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[134575,134580],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[134809,134824],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[135089,135134],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[135404,135412],"content":"Position","needQuote":true,"nodes":[{"content":"Position","pos":[0,8]}]},{"pos":[135615,135626],"content":"ReadTimeout","needQuote":true,"nodes":[{"content":"ReadTimeout","pos":[0,11]}]},{"pos":[135867,135879],"content":"SslProtocols","needQuote":true,"nodes":[{"content":"SslProtocols","pos":[0,12]}]},{"pos":[136087,136103],"content":"TransportContext","needQuote":true,"nodes":[{"content":"TransportContext","pos":[0,16]}]},{"pos":[136312,136324],"content":"WriteTimeout","needQuote":true,"nodes":[{"content":"WriteTimeout","pos":[0,12]}]},{"pos":[136514,136520],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[136695,136699],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[136862,136884],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[137160,137185],"content":"X509CertificateCollection","needQuote":true,"nodes":[{"content":"X509CertificateCollection","pos":[0,25]}]},{"pos":[137484,137491],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[137586,137591],"content":"Flush","needQuote":true,"nodes":[{"content":"Flush","pos":[0,5]}]},{"pos":[137639,137640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137667,137668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137738,137743],"content":"Flush","needQuote":true,"nodes":[{"content":"Flush","pos":[0,5]}]},{"pos":[137791,137792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137819,137820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138030,138056],"content":"Read(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Byte[], Int32, Int32)","pos":[0,26]}]},{"pos":[138349,138353],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[138400,138401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138449,138453],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[138512,138514]},{"content":",","pos":[138546,138547]},{"pos":[138601,138606],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[138666,138667]},{"pos":[138721,138726],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[138785,138786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138896,138900],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[138947,138948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138996,139000],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[139058,139060],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[139089,139090]},{"pos":[139144,139149],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[139209,139210]},{"pos":[139264,139269],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[139328,139329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139556,139562],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[139682,139686],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[139745,139747]},{"pos":[139810,139814],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[139872,139874],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[140059,140082],"content":"Seek(Int64, SeekOrigin)","needQuote":true,"nodes":[{"content":"Seek(Int64, SeekOrigin)","pos":[0,23]}]},{"pos":[140244,140248],"content":"Seek","needQuote":true,"nodes":[{"content":"Seek","pos":[0,4]}]},{"pos":[140295,140296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140345,140350],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[140410,140411]},{"pos":[140473,140483],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[140529,140530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140634,140638],"content":"Seek","needQuote":true,"nodes":[{"content":"Seek","pos":[0,4]}]},{"pos":[140685,140686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140735,140740],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[140800,140801]},{"pos":[140863,140873],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[140919,140920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141132,141142],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[141341,141357],"content":"SetLength(Int64)","needQuote":true,"nodes":[{"content":"SetLength(Int64)","pos":[0,16]}]},{"pos":[141486,141495],"content":"SetLength","needQuote":true,"nodes":[{"content":"SetLength","pos":[0,9]}]},{"pos":[141547,141548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141597,141602],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[141661,141662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141750,141759],"content":"SetLength","needQuote":true,"nodes":[{"content":"SetLength","pos":[0,9]}]},{"pos":[141811,141812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141861,141866],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[141925,141926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142164,142191],"content":"Write(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Byte[], Int32, Int32)","pos":[0,27]}]},{"pos":[142488,142493],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[142541,142542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142590,142594],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[142653,142655]},{"content":",","pos":[142687,142688]},{"pos":[142742,142747],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[142807,142808]},{"pos":[142862,142867],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[142926,142927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143038,143043],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[143091,143092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143140,143144],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[143202,143204],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[143233,143234]},{"pos":[143288,143293],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[143353,143354]},{"pos":[143408,143413],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[143472,143473],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143751,143768],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[143944,143965],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[144174,144199],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[144416,144437],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[144692,144715],"content":"AuthenticationException","needQuote":true,"nodes":[{"content":"AuthenticationException","pos":[0,23]}]},{"pos":[144959,144982],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[145184,145213],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[145438,145449],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]}],"content":"items:\n- uid: System.Net.Security.SslStream\n  commentId: T:System.Net.Security.SslStream\n  id: SslStream\n  parent: System.Net.Security\n  children:\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)\n  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  - System.Net.Security.SslStream.CanRead\n  - System.Net.Security.SslStream.CanSeek\n  - System.Net.Security.SslStream.CanTimeout\n  - System.Net.Security.SslStream.CanWrite\n  - System.Net.Security.SslStream.CheckCertRevocationStatus\n  - System.Net.Security.SslStream.CipherAlgorithm\n  - System.Net.Security.SslStream.CipherStrength\n  - System.Net.Security.SslStream.Flush\n  - System.Net.Security.SslStream.HashAlgorithm\n  - System.Net.Security.SslStream.HashStrength\n  - System.Net.Security.SslStream.IsAuthenticated\n  - System.Net.Security.SslStream.IsEncrypted\n  - System.Net.Security.SslStream.IsMutuallyAuthenticated\n  - System.Net.Security.SslStream.IsServer\n  - System.Net.Security.SslStream.IsSigned\n  - System.Net.Security.SslStream.KeyExchangeAlgorithm\n  - System.Net.Security.SslStream.KeyExchangeStrength\n  - System.Net.Security.SslStream.Length\n  - System.Net.Security.SslStream.LocalCertificate\n  - System.Net.Security.SslStream.Position\n  - System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.SslStream.ReadTimeout\n  - System.Net.Security.SslStream.RemoteCertificate\n  - System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Net.Security.SslStream.SetLength(System.Int64)\n  - System.Net.Security.SslStream.SslProtocol\n  - System.Net.Security.SslStream.TransportContext\n  - System.Net.Security.SslStream.Write(System.Byte[])\n  - System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.SslStream.WriteTimeout\n  langs:\n  - csharp\n  - vb\n  name: SslStream\n  fullName: System.Net.Security.SslStream\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SslStream\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 70\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.</p>\\n\"\n  syntax:\n    content: 'public class SslStream : AuthenticatedStream, IDisposable'\n    content.vb: >-\n      Public Class SslStream\n          Inherits AuthenticatedStream\n          Implements IDisposable\n  seealso:\n  - type: System.Net.Security.NegotiateStream\n    commentId: T:System.Net.Security.NegotiateStream\n  - type: System.Net.Security.AuthenticatedStream\n    commentId: T:System.Net.Security.AuthenticatedStream\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n  - type: System.IO.Stream\n    commentId: T:System.IO.Stream\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.IO.Stream\n  - System.Net.Security.AuthenticatedStream\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  - System.Net.Security.AuthenticatedStream.InnerStream\n  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  - System.IO.Stream.Null\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.Close\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.EndRead(System.IAsyncResult)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.EndWrite(System.IAsyncResult)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.ReadByte\n  - System.IO.Stream.WriteByte(System.Byte)\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.ObjectInvariant\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SslStream\n  extensionMethods:\n  - System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n  - System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n  - System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)\n  commentId: M:System.Net.Security.SslStream.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SslStream(Stream)\n  fullName: System.Net.Security.SslStream.SslStream(System.IO.Stream)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 72\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SslStream(Stream innerStream)\n    content.vb: Public Sub New(innerStream As Stream)\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: \"\\n<p>A <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>innerStream</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is equal to <xref href=\\\"System.IO.Stream.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SslStream.SslStream(Stream)\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)\n  commentId: M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Boolean)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SslStream(Stream, Boolean)\n  fullName: System.Net.Security.SslStream.SslStream(System.IO.Stream, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 73\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and stream closure behavior.</p>\\n\"\n  syntax:\n    content: public SslStream(Stream innerStream, bool leaveInnerStreamOpen)\n    content.vb: Public Sub New(innerStream As Stream, leaveInnerStreamOpen As Boolean)\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: \"\\n<p>A <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data.</p>\\n\"\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates the closure behavior of the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>innerStream</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is equal to <xref href=\\\"System.IO.Stream.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SslStream.SslStream(Stream, Boolean)\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)\n  commentId: M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)\n  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SslStream(Stream, Boolean, RemoteCertificateValidationCallback)\n  fullName: System.Net.Security.SslStream.SslStream(System.IO.Stream, System.Boolean, System.Net.Security.RemoteCertificateValidationCallback)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 74\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, stream closure behavior and certificate validation delegate.</p>\\n\"\n  syntax:\n    content: public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback)\n    content.vb: Public Sub New(innerStream As Stream, leaveInnerStreamOpen As Boolean, userCertificateValidationCallback As RemoteCertificateValidationCallback)\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: \"\\n<p>A <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data.</p>\\n\"\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates the closure behavior of the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.</p>\\n\"\n    - id: userCertificateValidationCallback\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: \"\\n<p>A <xref href=\\\"System.Net.Security.RemoteCertificateValidationCallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate responsible for validating the certificate supplied by the remote party.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>innerStream</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is equal to <xref href=\\\"System.IO.Stream.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SslStream.SslStream(Stream, Boolean, RemoteCertificateValidationCallback)\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)\n  commentId: M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)\n  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback)\n  fullName: System.Net.Security.SslStream.SslStream(System.IO.Stream, System.Boolean, System.Net.Security.RemoteCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 75\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, stream closure behavior, certificate validation delegate and certificate selection delegate.</p>\\n\"\n  syntax:\n    content: public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, LocalCertificateSelectionCallback userCertificateSelectionCallback)\n    content.vb: Public Sub New(innerStream As Stream, leaveInnerStreamOpen As Boolean, userCertificateValidationCallback As RemoteCertificateValidationCallback, userCertificateSelectionCallback As LocalCertificateSelectionCallback)\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: \"\\n<p>A <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data.</p>\\n\"\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates the closure behavior of the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.</p>\\n\"\n    - id: userCertificateValidationCallback\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: \"\\n<p>A <xref href=\\\"System.Net.Security.RemoteCertificateValidationCallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate responsible for validating the certificate supplied by the remote party.</p>\\n\"\n    - id: userCertificateSelectionCallback\n      type: System.Net.Security.LocalCertificateSelectionCallback\n      description: \"\\n<p>A <xref href=\\\"System.Net.Security.LocalCertificateSelectionCallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate responsible for selecting the certificate used for authentication.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>innerStream</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is equal to <xref href=\\\"System.IO.Stream.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SslStream.SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback)\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)\n  commentId: M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)\n  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback, EncryptionPolicy)\n  fullName: System.Net.Security.SslStream.SslStream(System.IO.Stream, System.Boolean, System.Net.Security.RemoteCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback, System.Net.Security.EncryptionPolicy)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 76\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  syntax:\n    content: public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, LocalCertificateSelectionCallback userCertificateSelectionCallback, EncryptionPolicy encryptionPolicy)\n    content.vb: Public Sub New(innerStream As Stream, leaveInnerStreamOpen As Boolean, userCertificateValidationCallback As RemoteCertificateValidationCallback, userCertificateSelectionCallback As LocalCertificateSelectionCallback, encryptionPolicy As EncryptionPolicy)\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: \"\\n<p>A <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data.</p>\\n\"\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates the closure behavior of the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used by the <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.</p>\\n\"\n    - id: userCertificateValidationCallback\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: \"\\n<p>A <xref href=\\\"System.Net.Security.RemoteCertificateValidationCallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate responsible for validating the certificate supplied by the remote party.</p>\\n\"\n    - id: userCertificateSelectionCallback\n      type: System.Net.Security.LocalCertificateSelectionCallback\n      description: \"\\n<p>A <xref href=\\\"System.Net.Security.LocalCertificateSelectionCallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate responsible for selecting the certificate used for authentication.</p>\\n\"\n    - id: encryptionPolicy\n      type: System.Net.Security.EncryptionPolicy\n      description: \"\\n<p>The <xref href=\\\"System.Net.Security.EncryptionPolicy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>innerStream</em> is not readable.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is not writable.</p>\\n<p>-or-</p>\\n<p>\\n<em>encryptionPolicy</em> is not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>innerStream</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>innerStream</em> is equal to <xref href=\\\"System.IO.Stream.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SslStream.SslStream(Stream, Boolean, RemoteCertificateValidationCallback, LocalCertificateSelectionCallback, EncryptionPolicy)\n- uid: System.Net.Security.SslStream.CanRead\n  commentId: P:System.Net.Security.SslStream.CanRead\n  id: CanRead\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CanRead\n  fullName: System.Net.Security.SslStream.CanRead\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanRead\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 77\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the underlying stream is readable.</p>\\n\"\n  syntax:\n    content: public override bool CanRead { get; }\n    content.vb: Public Overrides ReadOnly Property CanRead As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if authentication has occurred and the underlying stream is readable; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.IO.Stream.CanRead\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.CanRead\n- uid: System.Net.Security.SslStream.CanSeek\n  commentId: P:System.Net.Security.SslStream.CanSeek\n  id: CanSeek\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CanSeek\n  fullName: System.Net.Security.SslStream.CanSeek\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanSeek\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 78\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the underlying stream is seekable.</p>\\n\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This property always returns <strong>false</strong>.</p>\\n\"\n  overridden: System.IO.Stream.CanSeek\n  seealso:\n  - type: System.IO.Stream.CanSeek\n    commentId: P:System.IO.Stream.CanSeek\n  - type: System.Net.Security.SslStream.Position\n    commentId: P:System.Net.Security.SslStream.Position\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.CanSeek\n- uid: System.Net.Security.SslStream.CanTimeout\n  commentId: P:System.Net.Security.SslStream.CanTimeout\n  id: CanTimeout\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CanTimeout\n  fullName: System.Net.Security.SslStream.CanTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanTimeout\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 79\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the underlying stream supports time-outs.</p>\\n\"\n  syntax:\n    content: public override bool CanTimeout { get; }\n    content.vb: Public Overrides ReadOnly Property CanTimeout As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the underlying stream supports time-outs; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.IO.Stream.CanTimeout\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.CanTimeout\n- uid: System.Net.Security.SslStream.CanWrite\n  commentId: P:System.Net.Security.SslStream.CanWrite\n  id: CanWrite\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CanWrite\n  fullName: System.Net.Security.SslStream.CanWrite\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanWrite\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 80\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the underlying stream is writable.</p>\\n\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if authentication has occurred and the underlying stream is writable; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.IO.Stream.CanWrite\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.CanWrite\n- uid: System.Net.Security.SslStream.CheckCertRevocationStatus\n  commentId: P:System.Net.Security.SslStream.CheckCertRevocationStatus\n  id: CheckCertRevocationStatus\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CheckCertRevocationStatus\n  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CheckCertRevocationStatus\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 81\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the certificate revocation list is checked during the certificate validation process.</p>\\n\"\n  syntax:\n    content: public virtual bool CheckCertRevocationStatus { get; }\n    content.vb: Public Overridable ReadOnly Property CheckCertRevocationStatus As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the certificate revocation list is checked; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.CheckCertRevocationStatus\n- uid: System.Net.Security.SslStream.CipherAlgorithm\n  commentId: P:System.Net.Security.SslStream.CipherAlgorithm\n  id: CipherAlgorithm\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CipherAlgorithm\n  fullName: System.Net.Security.SslStream.CipherAlgorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CipherAlgorithm\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 82\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a value that identifies the bulk encryption algorithm used by this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual CipherAlgorithmType CipherAlgorithm { get; }\n    content.vb: Public Overridable ReadOnly Property CipherAlgorithm As CipherAlgorithmType\n    parameters: []\n    return:\n      type: System.Security.Authentication.CipherAlgorithmType\n      description: \"\\n<p>A <xref href=\\\"System.Security.Authentication.CipherAlgorithmType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Security.SslStream.CipherAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property was accessed before the completion of the authentication process or the authentication process failed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.CipherAlgorithm\n- uid: System.Net.Security.SslStream.CipherStrength\n  commentId: P:System.Net.Security.SslStream.CipherStrength\n  id: CipherStrength\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: CipherStrength\n  fullName: System.Net.Security.SslStream.CipherStrength\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CipherStrength\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 83\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a value that identifies the strength of the cipher algorithm used by this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int CipherStrength { get; }\n    content.vb: Public Overridable ReadOnly Property CipherStrength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the strength of the algorithm, in bits.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.CipherStrength\n- uid: System.Net.Security.SslStream.HashAlgorithm\n  commentId: P:System.Net.Security.SslStream.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: HashAlgorithm\n  fullName: System.Net.Security.SslStream.HashAlgorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashAlgorithm\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 84\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets the algorithm used for generating message authentication codes (MACs).</p>\\n\"\n  syntax:\n    content: public virtual HashAlgorithmType HashAlgorithm { get; }\n    content.vb: Public Overridable ReadOnly Property HashAlgorithm As HashAlgorithmType\n    parameters: []\n    return:\n      type: System.Security.Authentication.HashAlgorithmType\n      description: \"\\n<p>A <xref href=\\\"System.Security.Authentication.HashAlgorithmType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Security.SslStream.HashAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property was accessed before the completion of the authentication process or the authentication process failed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.HashAlgorithm\n- uid: System.Net.Security.SslStream.HashStrength\n  commentId: P:System.Net.Security.SslStream.HashStrength\n  id: HashStrength\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: HashStrength\n  fullName: System.Net.Security.SslStream.HashStrength\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashStrength\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 85\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a value that identifies the strength of the hash algorithm used by this instance.</p>\\n\"\n  syntax:\n    content: public virtual int HashStrength { get; }\n    content.vb: Public Overridable ReadOnly Property HashStrength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the strength of the <xref href=\\\"System.Security.Authentication.HashAlgorithmType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm, in bits. Valid values are 128 or 160.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.HashStrength\n- uid: System.Net.Security.SslStream.IsAuthenticated\n  commentId: P:System.Net.Security.SslStream.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: IsAuthenticated\n  fullName: System.Net.Security.SslStream.IsAuthenticated\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAuthenticated\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 86\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether authentication was successful.</p>\\n\"\n  syntax:\n    content: public override bool IsAuthenticated { get; }\n    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if successful authentication occurred; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Net.Security.AuthenticatedStream.IsAuthenticated\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.IsAuthenticated\n- uid: System.Net.Security.SslStream.IsEncrypted\n  commentId: P:System.Net.Security.SslStream.IsEncrypted\n  id: IsEncrypted\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: IsEncrypted\n  fullName: System.Net.Security.SslStream.IsEncrypted\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEncrypted\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 87\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> uses data encryption.</p>\\n\"\n  syntax:\n    content: public override bool IsEncrypted { get; }\n    content.vb: Public Overrides ReadOnly Property IsEncrypted As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Net.Security.AuthenticatedStream.IsEncrypted\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.IsEncrypted\n- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated\n  commentId: P:System.Net.Security.SslStream.IsMutuallyAuthenticated\n  id: IsMutuallyAuthenticated\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: IsMutuallyAuthenticated\n  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMutuallyAuthenticated\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 88\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether both server and client have been authenticated.</p>\\n\"\n  syntax:\n    content: public override bool IsMutuallyAuthenticated { get; }\n    content.vb: Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the server has been authenticated; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  seealso:\n  - type: System.Net.Security.SslStream.AuthenticateAsServer\n    commentId: Overload:System.Net.Security.SslStream.AuthenticateAsServer\n  - type: System.Net.Security.SslStream.BeginAuthenticateAsServer\n    commentId: Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.SslStream.IsServer\n  commentId: P:System.Net.Security.SslStream.IsServer\n  id: IsServer\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: IsServer\n  fullName: System.Net.Security.SslStream.IsServer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsServer\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 89\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the local side of the connection used by this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was authenticated as the server.</p>\\n\"\n  syntax:\n    content: public override bool IsServer { get; }\n    content.vb: Public Overrides ReadOnly Property IsServer As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Net.Security.AuthenticatedStream.IsServer\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.IsServer\n- uid: System.Net.Security.SslStream.IsSigned\n  commentId: P:System.Net.Security.SslStream.IsSigned\n  id: IsSigned\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: IsSigned\n  fullName: System.Net.Security.SslStream.IsSigned\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSigned\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 90\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the data sent using this stream is signed.</p>\\n\"\n  syntax:\n    content: public override bool IsSigned { get; }\n    content.vb: Public Overrides ReadOnly Property IsSigned As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the data is signed before being transmitted; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Net.Security.AuthenticatedStream.IsSigned\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.IsSigned\n- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm\n  commentId: P:System.Net.Security.SslStream.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: KeyExchangeAlgorithm\n  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyExchangeAlgorithm\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 91\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets the key exchange algorithm used by this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ExchangeAlgorithmType KeyExchangeAlgorithm { get; }\n    content.vb: Public Overridable ReadOnly Property KeyExchangeAlgorithm As ExchangeAlgorithmType\n    parameters: []\n    return:\n      type: System.Security.Authentication.ExchangeAlgorithmType\n      description: \"\\n<p>An <xref href=\\\"System.Security.Authentication.ExchangeAlgorithmType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.KeyExchangeAlgorithm\n- uid: System.Net.Security.SslStream.KeyExchangeStrength\n  commentId: P:System.Net.Security.SslStream.KeyExchangeStrength\n  id: KeyExchangeStrength\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: KeyExchangeStrength\n  fullName: System.Net.Security.SslStream.KeyExchangeStrength\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyExchangeStrength\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 92\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a value that identifies the strength of the key exchange algorithm used by this instance.</p>\\n\"\n  syntax:\n    content: public virtual int KeyExchangeStrength { get; }\n    content.vb: Public Overridable ReadOnly Property KeyExchangeStrength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the strength of the <xref href=\\\"System.Security.Authentication.ExchangeAlgorithmType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm, in bits.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.KeyExchangeStrength\n- uid: System.Net.Security.SslStream.Length\n  commentId: P:System.Net.Security.SslStream.Length\n  id: Length\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Net.Security.SslStream.Length\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 93\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets the length of the underlying stream.</p>\\n\"\n  syntax:\n    content: public override long Length { get; }\n    content.vb: Public Overrides ReadOnly Property Length As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The length of the underlying stream.</p>\\n\"\n  overridden: System.IO.Stream.Length\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Getting the value of this property is not supported when the underlying stream is a <xref href=\\\"System.Net.Sockets.NetworkStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SslStream.Length\n- uid: System.Net.Security.SslStream.LocalCertificate\n  commentId: P:System.Net.Security.SslStream.LocalCertificate\n  id: LocalCertificate\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: LocalCertificate\n  fullName: System.Net.Security.SslStream.LocalCertificate\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalCertificate\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 94\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets the certificate used to authenticate the local endpoint.</p>\\n\"\n  syntax:\n    content: public virtual X509Certificate LocalCertificate { get; }\n    content.vb: Public Overridable ReadOnly Property LocalCertificate As X509Certificate\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>An X509Certificate object that represents the certificate supplied for authentication or <strong>null</strong> if no certificate was supplied.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication failed or has not occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.LocalCertificate\n- uid: System.Net.Security.SslStream.Position\n  commentId: P:System.Net.Security.SslStream.Position\n  id: Position\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Position\n  fullName: System.Net.Security.SslStream.Position\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Position\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 95\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets or sets the current position in the underlying stream.</p>\\n\"\n  syntax:\n    content: public override long Position { get; set; }\n    content.vb: Public Overrides Property Position As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The current position in the underlying stream.</p>\\n\"\n  overridden: System.IO.Stream.Position\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Setting this property is not supported.</p>\\n<p>-or-</p>\\n<p>Getting the value of this property is not supported when the underlying stream is a <xref href=\\\"System.Net.Sockets.NetworkStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SslStream.Position\n- uid: System.Net.Security.SslStream.ReadTimeout\n  commentId: P:System.Net.Security.SslStream.ReadTimeout\n  id: ReadTimeout\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: ReadTimeout\n  fullName: System.Net.Security.SslStream.ReadTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadTimeout\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 96\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets or sets the amount of time a read operation blocks waiting for data.</p>\\n\"\n  syntax:\n    content: public override int ReadTimeout { get; set; }\n    content.vb: Public Overrides Property ReadTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the amount of time that elapses before a synchronous read operation fails.</p>\\n\"\n  overridden: System.IO.Stream.ReadTimeout\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SslStream.ReadTimeout\n- uid: System.Net.Security.SslStream.RemoteCertificate\n  commentId: P:System.Net.Security.SslStream.RemoteCertificate\n  id: RemoteCertificate\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: RemoteCertificate\n  fullName: System.Net.Security.SslStream.RemoteCertificate\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoteCertificate\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 97\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets the certificate used to authenticate the remote endpoint.</p>\\n\"\n  syntax:\n    content: public virtual X509Certificate RemoteCertificate { get; }\n    content.vb: Public Overridable ReadOnly Property RemoteCertificate As X509Certificate\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>An X509Certificate object that represents the certificate supplied for authentication or <strong>null</strong> if no certificate was supplied.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication failed or has not occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.RemoteCertificate\n- uid: System.Net.Security.SslStream.SslProtocol\n  commentId: P:System.Net.Security.SslStream.SslProtocol\n  id: SslProtocol\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SslProtocol\n  fullName: System.Net.Security.SslStream.SslProtocol\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SslProtocol\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 98\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets a value that indicates the security protocol used to authenticate this connection.</p>\\n\"\n  syntax:\n    content: public virtual SslProtocols SslProtocol { get; }\n    content.vb: Public Overridable ReadOnly Property SslProtocol As SslProtocols\n    parameters: []\n    return:\n      type: System.Security.Authentication.SslProtocols\n      description: \"\\n<p>The <xref href=\\\"System.Security.Authentication.SslProtocols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the protocol used for authentication.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SslStream.SslProtocol\n- uid: System.Net.Security.SslStream.TransportContext\n  commentId: P:System.Net.Security.SslStream.TransportContext\n  id: TransportContext\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: TransportContext\n  fullName: System.Net.Security.SslStream.TransportContext\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransportContext\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 99\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Net.TransportContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used for authentication using extended protection.</p>\\n\"\n  syntax:\n    content: public TransportContext TransportContext { get; }\n    content.vb: Public ReadOnly Property TransportContext As TransportContext\n    parameters: []\n    return:\n      type: System.Net.TransportContext\n      description: \"\\n<p>The <xref href=\\\"System.Net.TransportContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the channel binding token (CBT) used for extended protection.</p>\\n\"\n  seealso:\n  - type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n    commentId: T:System.Security.Authentication.ExtendedProtection.ChannelBinding\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SslStream.TransportContext\n- uid: System.Net.Security.SslStream.WriteTimeout\n  commentId: P:System.Net.Security.SslStream.WriteTimeout\n  id: WriteTimeout\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: WriteTimeout\n  fullName: System.Net.Security.SslStream.WriteTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTimeout\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 100\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Gets or sets the amount of time a write operation blocks waiting for data.</p>\\n\"\n  syntax:\n    content: public override int WriteTimeout { get; set; }\n    content.vb: Public Overrides Property WriteTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the amount of time that elapses before a synchronous write operation fails. </p>\\n\"\n  overridden: System.IO.Stream.WriteTimeout\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SslStream.WriteTimeout\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  commentId: M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  id: AuthenticateAsClientAsync(System.String)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: AuthenticateAsClientAsync(String)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuthenticateAsClientAsync\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 101\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public virtual Task AuthenticateAsClientAsync(string targetHost)\n    content.vb: Public Overridable Function AuthenticateAsClientAsync(targetHost As String) As Task\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: \"\\n<p>The name of the server that shares this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>targetHost</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: \"\\n<p>The authentication failed and left this object in an unusable state.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication has already occurred.</p>\\n<p>-or-</p>\\n<p>Server authentication using this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was tried previously.</p>\\n<p>-or- </p>\\n<p>Authentication is already in progress.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been closed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SslStream.AuthenticateAsClientAsync(String)\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  commentId: M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  id: AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: AuthenticateAsClientAsync(String, X509CertificateCollection, SslProtocols, Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Authentication.SslProtocols, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuthenticateAsClientAsync\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 102\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol.</p>\\n\"\n  syntax:\n    content: public virtual Task AuthenticateAsClientAsync(string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation)\n    content.vb: Public Overridable Function AuthenticateAsClientAsync(targetHost As String, clientCertificates As X509CertificateCollection, enabledSslProtocols As SslProtocols, checkCertificateRevocation As Boolean) As Task\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: \"\\n<p>The name of the server that will share this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: clientCertificates\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains client certificates.</p>\\n\"\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: \"\\n<p>The <xref href=\\\"System.Security.Authentication.SslProtocols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the protocol used for authentication.</p>\\n\"\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the certificate revocation list is checked during authentication.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SslStream.AuthenticateAsClientAsync(String, X509CertificateCollection, SslProtocols, Boolean)\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: AuthenticateAsServerAsync(X509Certificate)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuthenticateAsServerAsync\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 103\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public virtual Task AuthenticateAsServerAsync(X509Certificate serverCertificate)\n    content.vb: Public Overridable Function AuthenticateAsServerAsync(serverCertificate As X509Certificate) As Task\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The certificate used to authenticate the server.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>serverCertificate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: \"\\n<p>The authentication failed and left this object in an unusable state.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication has already occurred.</p>\\n<p>-or-</p>\\n<p>Client authentication using this <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was tried previously.</p>\\n<p>-or- </p>\\n<p>Authentication is already in progress.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been closed.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is not supported on Windows 95, Windows 98, or Windows Millennium.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  commentId: M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: AuthenticateAsServerAsync(X509Certificate, Boolean, SslProtocols, Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate, System.Boolean, System.Security.Authentication.SslProtocols, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuthenticateAsServerAsync\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 104\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public virtual Task AuthenticateAsServerAsync(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation)\n    content.vb: Public Overridable Function AuthenticateAsServerAsync(serverCertificate As X509Certificate, clientCertificateRequired As Boolean, enabledSslProtocols As SslProtocols, checkCertificateRevocation As Boolean) As Task\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The X509Certificate used to authenticate the server.</p>\\n\"\n    - id: clientCertificateRequired\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</p>\\n\"\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: \"\\n<p>The <xref href=\\\"System.Security.Authentication.SslProtocols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  value that represents the protocol used for authentication.</p>\\n\"\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the certificate revocation list is checked during authentication.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate, Boolean, SslProtocols, Boolean)\n- uid: System.Net.Security.SslStream.Flush\n  commentId: M:System.Net.Security.SslStream.Flush\n  id: Flush\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.Net.Security.SslStream.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Flush\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 105\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Causes any buffered data to be written to the underlying device.</p>\\n\"\n  syntax:\n    content: public override void Flush()\n    content.vb: Public Overrides Sub Flush\n  overridden: System.IO.Stream.Flush\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SslStream.Flush()\n- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Read(Byte[], Int32, Int32)\n  fullName: System.Net.Security.SslStream.Read(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Read\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 106\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Reads data from this stream and stores it in the specified array.</p>\\n\"\n  syntax:\n    content: public override int Read(byte[] buffer, int offset, int count)\n    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that receives the bytes read from this stream.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the zero-based location in <em>buffer</em> at which to begin storing the data read from this stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the maximum number of bytes to read from this stream.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the number of bytes read. When there is no more data to be read, returns 0.</p>\\n\"\n  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em>\\n<em><</em>\\n<em>0</em>.</p>\\n<p>\\n<em>-or-</em>\\n</p>\\n<p>\\n<em>offset</em> > the length of <em>buffer</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + count > the length of <em>buffer</em>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The read operation failed. Check the inner exception, if present to determine the cause of the failure.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>There is already a read operation in progress.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been closed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication has not occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Net.Security.SslStream.Read(System.Byte(), System.Int32, System.Int32)\n  name.vb: Read(Byte(), Int32, Int32)\n  nameWithType: SslStream.Read(Byte[], Int32, Int32)\n  nameWithType.vb: SslStream.Read(Byte(), Int32, Int32)\n- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Seek(Int64, SeekOrigin)\n  fullName: System.Net.Security.SslStream.Seek(System.Int64, System.IO.SeekOrigin)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Seek\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 107\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override long Seek(long offset, SeekOrigin origin)\n    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>This value is ignored.</p>\\n\"\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: \"\\n<p>This value is ignored.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>Always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Seeking is not supported by <xref href=\\\"System.Net.Security.SslStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SslStream.Seek(Int64, SeekOrigin)\n- uid: System.Net.Security.SslStream.SetLength(System.Int64)\n  commentId: M:System.Net.Security.SslStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: SetLength(Int64)\n  fullName: System.Net.Security.SslStream.SetLength(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetLength\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 108\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Sets the length of the underlying stream.</p>\\n\"\n  syntax:\n    content: public override void SetLength(long value)\n    content.vb: Public Overrides Sub SetLength(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>An <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the length of the stream.</p>\\n\"\n  overridden: System.IO.Stream.SetLength(System.Int64)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SslStream.SetLength(Int64)\n- uid: System.Net.Security.SslStream.Write(System.Byte[])\n  commentId: M:System.Net.Security.SslStream.Write(System.Byte[])\n  id: Write(System.Byte[])\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte[])\n  fullName: System.Net.Security.SslStream.Write(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 109\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Writes the specified data to this stream.</p>\\n\"\n  syntax:\n    content: public void Write(byte[] buffer)\n    content.vb: Public Sub Write(buffer As Byte())\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that supplies the bytes written to the stream.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The write operation failed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>There is already a write operation in progress.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been closed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication has not occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Security.SslStream.Write(System.Byte())\n  name.vb: Write(Byte())\n  nameWithType: SslStream.Write(Byte[])\n  nameWithType.vb: SslStream.Write(Byte())\n- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte[], Int32, Int32)\n  fullName: System.Net.Security.SslStream.Write(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Security/ref/System.Net.Security.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Net.Security/ref/System.Net.Security.cs\n    startLine: 110\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: \"\\n<p>Write the specified number of <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>s to the underlying stream using the specified buffer and offset.</p>\\n\"\n  syntax:\n    content: public override void Write(byte[] buffer, int offset, int count)\n    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that supplies the bytes written to the stream.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the zero-based location in <em>buffer</em> at which to begin reading bytes to be written to the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the number of bytes to read from <em>buffer</em>.</p>\\n\"\n  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em>\\n<em><</em>\\n<em>0</em>.</p>\\n<p>\\n<em>-or-</em>\\n</p>\\n<p>\\n<em>offset</em> > the length of <em>buffer</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + count > the length of <em>buffer</em>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The write operation failed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>There is already a write operation in progress.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been closed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Authentication has not occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Net.Security.SslStream.Write(System.Byte(), System.Int32, System.Int32)\n  name.vb: Write(Byte(), Int32, Int32)\n  nameWithType: SslStream.Write(Byte[], Int32, Int32)\n  nameWithType.vb: SslStream.Write(Byte(), Int32, Int32)\nreferences:\n- uid: System.Net.Security\n  isExternal: false\n  name: System.Net.Security\n  fullName: System.Net.Security\n  commentId: N:System.Net.Security\n  nameWithType: System.Net.Security\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: true\n  name: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n  commentId: T:System.MarshalByRefObject\n  nameWithType: MarshalByRefObject\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.Net.Security.AuthenticatedStream\n  parent: System.Net.Security\n  isExternal: false\n  name: AuthenticatedStream\n  fullName: System.Net.Security.AuthenticatedStream\n  commentId: T:System.Net.Security.AuthenticatedStream\n  nameWithType: AuthenticatedStream\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: LeaveInnerStreamOpen\n  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  commentId: P:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen\n- uid: System.Net.Security.AuthenticatedStream.InnerStream\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: InnerStream\n  fullName: System.Net.Security.AuthenticatedStream.InnerStream\n  commentId: P:System.Net.Security.AuthenticatedStream.InnerStream\n  nameWithType: AuthenticatedStream.InnerStream\n- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Net.Security.AuthenticatedStream.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Net.Security.AuthenticatedStream.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  nameWithType: AuthenticatedStream.Dispose(Boolean)\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  fullName: System.IO.Stream.Null\n  commentId: F:System.IO.Stream.Null\n  nameWithType: Stream.Null\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: CopyToAsync(Stream, Int32)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  fullName: System.IO.Stream.CopyTo(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)\n  nameWithType: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: CopyTo(Stream, Int32)\n  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: true\n  name: Close()\n  fullName: System.IO.Stream.Close()\n  spec.csharp:\n  - uid: System.IO.Stream.Close\n    name: Close\n    fullName: System.IO.Stream.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Close\n    name: Close\n    fullName: System.IO.Stream.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Close\n  nameWithType: Stream.Close()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  fullName: System.IO.Stream.Dispose()\n  spec.csharp:\n  - uid: System.IO.Stream.Dispose\n    name: Dispose\n    fullName: System.IO.Stream.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Dispose\n    name: Dispose\n    fullName: System.IO.Stream.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Dispose\n  nameWithType: Stream.Dispose()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  fullName: System.IO.Stream.FlushAsync()\n  spec.csharp:\n  - uid: System.IO.Stream.FlushAsync\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.FlushAsync\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.FlushAsync\n  nameWithType: Stream.FlushAsync()\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: FlushAsync(CancellationToken)\n  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  nameWithType: Stream.FlushAsync(CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: true\n  name: CreateWaitHandle()\n  fullName: System.IO.Stream.CreateWaitHandle()\n  spec.csharp:\n  - uid: System.IO.Stream.CreateWaitHandle\n    name: CreateWaitHandle\n    fullName: System.IO.Stream.CreateWaitHandle\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CreateWaitHandle\n    name: CreateWaitHandle\n    fullName: System.IO.Stream.CreateWaitHandle\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.CreateWaitHandle\n  nameWithType: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: true\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)\n  fullname.vb: System.IO.Stream.BeginRead(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)\n  name.vb: BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)\n  spec.csharp:\n  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n    name: BeginRead\n    fullName: System.IO.Stream.BeginRead\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n    name: BeginRead\n    fullName: System.IO.Stream.BeginRead\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType.vb: Stream.BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.EndRead(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: true\n  name: EndRead(IAsyncResult)\n  fullName: System.IO.Stream.EndRead(System.IAsyncResult)\n  spec.csharp:\n  - uid: System.IO.Stream.EndRead(System.IAsyncResult)\n    name: EndRead\n    fullName: System.IO.Stream.EndRead\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.EndRead(System.IAsyncResult)\n    name: EndRead\n    fullName: System.IO.Stream.EndRead\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.EndRead(System.IAsyncResult)\n  nameWithType: Stream.EndRead(IAsyncResult)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: ReadAsync(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: true\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)\n  fullname.vb: System.IO.Stream.BeginWrite(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)\n  name.vb: BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)\n  spec.csharp:\n  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n    name: BeginWrite\n    fullName: System.IO.Stream.BeginWrite\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n    name: BeginWrite\n    fullName: System.IO.Stream.BeginWrite\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType.vb: Stream.BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: true\n  name: EndWrite(IAsyncResult)\n  fullName: System.IO.Stream.EndWrite(System.IAsyncResult)\n  spec.csharp:\n  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n    name: EndWrite\n    fullName: System.IO.Stream.EndWrite\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n    name: EndWrite\n    fullName: System.IO.Stream.EndWrite\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.EndWrite(System.IAsyncResult)\n  nameWithType: Stream.EndWrite(IAsyncResult)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: WriteAsync(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteAsync(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.ReadByte\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadByte()\n  fullName: System.IO.Stream.ReadByte()\n  spec.csharp:\n  - uid: System.IO.Stream.ReadByte\n    name: ReadByte\n    fullName: System.IO.Stream.ReadByte\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ReadByte\n    name: ReadByte\n    fullName: System.IO.Stream.ReadByte\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.ReadByte\n  nameWithType: Stream.ReadByte()\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  parent: System.IO.Stream\n  isExternal: true\n  name: WriteByte(Byte)\n  fullName: System.IO.Stream.WriteByte(System.Byte)\n  spec.csharp:\n  - uid: System.IO.Stream.WriteByte(System.Byte)\n    name: WriteByte\n    fullName: System.IO.Stream.WriteByte\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.WriteByte(System.Byte)\n    name: WriteByte\n    fullName: System.IO.Stream.WriteByte\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.WriteByte(System.Byte)\n  nameWithType: Stream.WriteByte(Byte)\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Synchronized(Stream)\n  fullName: System.IO.Stream.Synchronized(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.Stream.Synchronized(System.IO.Stream)\n    name: Synchronized\n    fullName: System.IO.Stream.Synchronized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Synchronized(System.IO.Stream)\n    name: Synchronized\n    fullName: System.IO.Stream.Synchronized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Synchronized(System.IO.Stream)\n  nameWithType: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: true\n  name: ObjectInvariant()\n  fullName: System.IO.Stream.ObjectInvariant()\n  spec.csharp:\n  - uid: System.IO.Stream.ObjectInvariant\n    name: ObjectInvariant\n    fullName: System.IO.Stream.ObjectInvariant\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ObjectInvariant\n    name: ObjectInvariant\n    fullName: System.IO.Stream.ObjectInvariant\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.ObjectInvariant\n  nameWithType: Stream.ObjectInvariant()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: MemberwiseClone(Boolean)\n  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  spec.csharp:\n  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n    name: MemberwiseClone\n    fullName: System.MarshalByRefObject.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n    name: MemberwiseClone\n    fullName: System.MarshalByRefObject.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: GetLifetimeService()\n  fullName: System.MarshalByRefObject.GetLifetimeService()\n  spec.csharp:\n  - uid: System.MarshalByRefObject.GetLifetimeService\n    name: GetLifetimeService\n    fullName: System.MarshalByRefObject.GetLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.GetLifetimeService\n    name: GetLifetimeService\n    fullName: System.MarshalByRefObject.GetLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.MarshalByRefObject.GetLifetimeService\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: InitializeLifetimeService()\n  fullName: System.MarshalByRefObject.InitializeLifetimeService()\n  spec.csharp:\n  - uid: System.MarshalByRefObject.InitializeLifetimeService\n    name: InitializeLifetimeService\n    fullName: System.MarshalByRefObject.InitializeLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.InitializeLifetimeService\n    name: InitializeLifetimeService\n    fullName: System.MarshalByRefObject.InitializeLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.MarshalByRefObject.InitializeLifetimeService\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: CreateObjRef(Type)\n  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)\n  spec.csharp:\n  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n    name: CreateObjRef\n    fullName: System.MarshalByRefObject.CreateObjRef\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n    name: CreateObjRef\n    fullName: System.MarshalByRefObject.CreateObjRef\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n  parent: System.IO.WindowsRuntimeStreamExtensions\n  definition: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n  name: AsInputStream()\n  fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream()\n  spec.csharp:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n    name: AsInputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n    name: AsInputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n  nameWithType: WindowsRuntimeStreamExtensions.AsInputStream()\n- uid: System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n  parent: System.IO.WindowsRuntimeStreamExtensions\n  definition: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n  name: AsOutputStream()\n  fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream()\n  spec.csharp:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n    name: AsOutputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n    name: AsOutputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n  nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream()\n- uid: System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n  parent: System.IO.WindowsRuntimeStreamExtensions\n  definition: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n  name: AsRandomAccessStream()\n  fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream()\n  spec.csharp:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n    name: AsRandomAccessStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n    name: AsRandomAccessStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n  nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n  isExternal: true\n  name: AsInputStream(Stream)\n  fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n    name: AsInputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n    name: AsInputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)\n  nameWithType: WindowsRuntimeStreamExtensions.AsInputStream(Stream)\n- uid: System.IO.WindowsRuntimeStreamExtensions\n  parent: System.IO\n  isExternal: false\n  name: WindowsRuntimeStreamExtensions\n  fullName: System.IO.WindowsRuntimeStreamExtensions\n  commentId: T:System.IO.WindowsRuntimeStreamExtensions\n  nameWithType: WindowsRuntimeStreamExtensions\n- uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n  isExternal: true\n  name: AsOutputStream(Stream)\n  fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n    name: AsOutputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n    name: AsOutputStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)\n  nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream(Stream)\n- uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n  isExternal: true\n  name: AsRandomAccessStream(Stream)\n  fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n    name: AsRandomAccessStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n    name: AsRandomAccessStream\n    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)\n  nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream(Stream)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.Security.RemoteCertificateValidationCallback\n  parent: System.Net.Security\n  isExternal: false\n  name: RemoteCertificateValidationCallback\n  fullName: System.Net.Security.RemoteCertificateValidationCallback\n  commentId: T:System.Net.Security.RemoteCertificateValidationCallback\n  nameWithType: RemoteCertificateValidationCallback\n- uid: System.Net.Security.LocalCertificateSelectionCallback\n  parent: System.Net.Security\n  isExternal: false\n  name: LocalCertificateSelectionCallback\n  fullName: System.Net.Security.LocalCertificateSelectionCallback\n  commentId: T:System.Net.Security.LocalCertificateSelectionCallback\n  nameWithType: LocalCertificateSelectionCallback\n- uid: System.Net.Security.EncryptionPolicy\n  parent: System.Net.Security\n  isExternal: false\n  name: EncryptionPolicy\n  fullName: System.Net.Security.EncryptionPolicy\n  commentId: T:System.Net.Security.EncryptionPolicy\n  nameWithType: EncryptionPolicy\n- uid: System.IO.Stream.CanRead\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanRead\n  fullName: System.IO.Stream.CanRead\n  commentId: P:System.IO.Stream.CanRead\n  nameWithType: Stream.CanRead\n- uid: System.IO.Stream.CanSeek\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanSeek\n  fullName: System.IO.Stream.CanSeek\n  commentId: P:System.IO.Stream.CanSeek\n  nameWithType: Stream.CanSeek\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  fullName: System.IO.Stream.CanTimeout\n  commentId: P:System.IO.Stream.CanTimeout\n  nameWithType: Stream.CanTimeout\n- uid: System.IO.Stream.CanWrite\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanWrite\n  fullName: System.IO.Stream.CanWrite\n  commentId: P:System.IO.Stream.CanWrite\n  nameWithType: Stream.CanWrite\n- uid: System.Security.Authentication.CipherAlgorithmType\n  parent: System.Security.Authentication\n  isExternal: false\n  name: CipherAlgorithmType\n  fullName: System.Security.Authentication.CipherAlgorithmType\n  commentId: T:System.Security.Authentication.CipherAlgorithmType\n  nameWithType: CipherAlgorithmType\n- uid: System.Security.Authentication\n  isExternal: false\n  name: System.Security.Authentication\n  fullName: System.Security.Authentication\n  commentId: N:System.Security.Authentication\n  nameWithType: System.Security.Authentication\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Authentication.HashAlgorithmType\n  parent: System.Security.Authentication\n  isExternal: false\n  name: HashAlgorithmType\n  fullName: System.Security.Authentication.HashAlgorithmType\n  commentId: T:System.Security.Authentication.HashAlgorithmType\n  nameWithType: HashAlgorithmType\n- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsAuthenticated\n  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated\n  commentId: P:System.Net.Security.AuthenticatedStream.IsAuthenticated\n  nameWithType: AuthenticatedStream.IsAuthenticated\n- uid: System.Net.Security.AuthenticatedStream.IsEncrypted\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsEncrypted\n  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted\n  commentId: P:System.Net.Security.AuthenticatedStream.IsEncrypted\n  nameWithType: AuthenticatedStream.IsEncrypted\n- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  commentId: P:System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.AuthenticatedStream.IsServer\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsServer\n  fullName: System.Net.Security.AuthenticatedStream.IsServer\n  commentId: P:System.Net.Security.AuthenticatedStream.IsServer\n  nameWithType: AuthenticatedStream.IsServer\n- uid: System.Net.Security.AuthenticatedStream.IsSigned\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsSigned\n  fullName: System.Net.Security.AuthenticatedStream.IsSigned\n  commentId: P:System.Net.Security.AuthenticatedStream.IsSigned\n  nameWithType: AuthenticatedStream.IsSigned\n- uid: System.Security.Authentication.ExchangeAlgorithmType\n  parent: System.Security.Authentication\n  isExternal: false\n  name: ExchangeAlgorithmType\n  fullName: System.Security.Authentication.ExchangeAlgorithmType\n  commentId: T:System.Security.Authentication.ExchangeAlgorithmType\n  nameWithType: ExchangeAlgorithmType\n- uid: System.IO.Stream.Length\n  parent: System.IO.Stream\n  isExternal: false\n  name: Length\n  fullName: System.IO.Stream.Length\n  commentId: P:System.IO.Stream.Length\n  nameWithType: Stream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate\n  nameWithType: X509Certificate\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.IO.Stream.Position\n  parent: System.IO.Stream\n  isExternal: false\n  name: Position\n  fullName: System.IO.Stream.Position\n  commentId: P:System.IO.Stream.Position\n  nameWithType: Stream.Position\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  fullName: System.IO.Stream.ReadTimeout\n  commentId: P:System.IO.Stream.ReadTimeout\n  nameWithType: Stream.ReadTimeout\n- uid: System.Security.Authentication.SslProtocols\n  parent: System.Security.Authentication\n  isExternal: false\n  name: SslProtocols\n  fullName: System.Security.Authentication.SslProtocols\n  commentId: T:System.Security.Authentication.SslProtocols\n  nameWithType: SslProtocols\n- uid: System.Net.TransportContext\n  isExternal: false\n  name: TransportContext\n  fullName: System.Net.TransportContext\n  commentId: T:System.Net.TransportContext\n  nameWithType: TransportContext\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  fullName: System.IO.Stream.WriteTimeout\n  commentId: P:System.IO.Stream.WriteTimeout\n  nameWithType: Stream.WriteTimeout\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  nameWithType: Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509CertificateCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  commentId: T:System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  nameWithType: X509CertificateCollection\n- uid: System.IO.Stream.Flush\n  parent: System.IO.Stream\n  isExternal: false\n  name: Flush()\n  fullName: System.IO.Stream.Flush()\n  spec.csharp:\n  - uid: System.IO.Stream.Flush\n    name: Flush\n    fullName: System.IO.Stream.Flush\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Flush\n    name: Flush\n    fullName: System.IO.Stream.Flush\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Flush\n  nameWithType: Stream.Flush()\n- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Read(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)\n  name.vb: Read(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.Stream.Read\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.Stream.Read\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  nameWithType: Stream.Read(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.Read(Byte(), Int32, Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Seek(Int64, SeekOrigin)\n  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)\n  spec.csharp:\n  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n    name: Seek\n    fullName: System.IO.Stream.Seek\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IO.SeekOrigin\n    name: SeekOrigin\n    fullName: System.IO.SeekOrigin\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n    name: Seek\n    fullName: System.IO.Stream.Seek\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IO.SeekOrigin\n    name: SeekOrigin\n    fullName: System.IO.SeekOrigin\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  nameWithType: Stream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  fullName: System.IO.SeekOrigin\n  commentId: T:System.IO.SeekOrigin\n  nameWithType: SeekOrigin\n- uid: System.IO.Stream.SetLength(System.Int64)\n  parent: System.IO.Stream\n  isExternal: true\n  name: SetLength(Int64)\n  fullName: System.IO.Stream.SetLength(System.Int64)\n  spec.csharp:\n  - uid: System.IO.Stream.SetLength(System.Int64)\n    name: SetLength\n    fullName: System.IO.Stream.SetLength\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.SetLength(System.Int64)\n    name: SetLength\n    fullName: System.IO.Stream.SetLength\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.SetLength(System.Int64)\n  nameWithType: Stream.SetLength(Int64)\n- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Write(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)\n  name.vb: Write(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n    name: Write\n    fullName: System.IO.Stream.Write\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n    name: Write\n    fullName: System.IO.Stream.Write\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  nameWithType: Stream.Write(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.Write(Byte(), Int32, Int32)\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.Security.Authentication.AuthenticationException\n  parent: System.Security.Authentication\n  isExternal: false\n  name: AuthenticationException\n  fullName: System.Security.Authentication.AuthenticationException\n  commentId: T:System.Security.Authentication.AuthenticationException\n  nameWithType: AuthenticationException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n"}