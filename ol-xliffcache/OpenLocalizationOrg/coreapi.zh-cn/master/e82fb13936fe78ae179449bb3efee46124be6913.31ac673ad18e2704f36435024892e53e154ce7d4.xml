{"nodes":[{"pos":[520,538],"content":"RuntimeFieldHandle","needQuote":true,"nodes":[{"content":"RuntimeFieldHandle","pos":[0,18]}]},{"pos":[2042,2056],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare to the current instance.&lt;/p&gt;\\n","pos":[2958,3015],"source":"\\n<p>The object to compare to the current instance.</p>\\n"},{"pos":[3743,3769],"content":"Equals(RuntimeFieldHandle)","needQuote":true,"nodes":[{"content":"Equals(RuntimeFieldHandle)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;handle&lt;/em&gt; is equal to the value of the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4985,5133],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>handle</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5442,5455],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is the hash code for this instance.&lt;/p&gt;\\n","pos":[6137,6212],"source":"\\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\\n"},{"pos":[6833,6881],"content":"Equality(RuntimeFieldHandle, RuntimeFieldHandle)","needQuote":true,"nodes":[{"content":"Equality(RuntimeFieldHandle, RuntimeFieldHandle)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8145,8259],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8777,8827],"content":"Inequality(RuntimeFieldHandle, RuntimeFieldHandle)","needQuote":true,"nodes":[{"content":"Inequality(RuntimeFieldHandle, RuntimeFieldHandle)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is not equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10100,10218],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is not equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10440,10446],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10599,10609],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10710,10718],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10769,10770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10797,10798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10871,10879],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10930,10931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10958,10959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11162,11184],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11332,11338],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11405,11406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11456,11462],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11523,11524]},{"pos":[11579,11585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11645,11646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11743,11749],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11816,11817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11867,11873],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11934,11935]},{"pos":[11990,11996],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12056,12057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12302,12333],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12499,12514],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12590,12591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12641,12647],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12708,12709]},{"pos":[12764,12770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12830,12831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12937,12952],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13028,13029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13079,13085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13146,13147]},{"pos":[13202,13208],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13268,13269],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13495,13504],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13597,13604],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13672,13673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13700,13701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13770,13777],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13845,13846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13873,13874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14030,14039],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[14193,14199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14378,14392],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14517,14523],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14572,14573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14623,14629],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14689,14690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14776,14782],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14831,14832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14882,14888],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14948,14949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15128,15135],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15295,15313],"content":"RuntimeFieldHandle","needQuote":true,"nodes":[{"content":"RuntimeFieldHandle","pos":[0,18]}]},{"pos":[15519,15532],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15639,15650],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15704,15705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15732,15733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15809,15820],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15874,15875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15902,15903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16069,16074],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.RuntimeFieldHandle\n  commentId: T:System.RuntimeFieldHandle\n  id: RuntimeFieldHandle\n  parent: System\n  children:\n  - System.RuntimeFieldHandle.Equals(System.Object)\n  - System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)\n  - System.RuntimeFieldHandle.GetHashCode\n  - System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  - System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  langs:\n  - csharp\n  - vb\n  name: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RuntimeFieldHandle\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1468\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a field using an internal metadata token.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct RuntimeFieldHandle : ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure RuntimeFieldHandle\n          Implements ISerializable\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: RuntimeFieldHandle\n- uid: System.RuntimeFieldHandle.Equals(System.Object)\n  commentId: M:System.RuntimeFieldHandle.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.RuntimeFieldHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.RuntimeFieldHandle.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1514\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the current instance is equal to the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RuntimeFieldHandle.Equals(Object)\n- uid: System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)\n  commentId: M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)\n  id: Equals(System.RuntimeFieldHandle)\n  parent: System.RuntimeFieldHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(RuntimeFieldHandle)\n  fullName: System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1526\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the current instance is equal to the specified <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public bool Equals(RuntimeFieldHandle handle)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Function Equals(handle As RuntimeFieldHandle) As Boolean\n    parameters:\n    - id: handle\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>The <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>handle</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RuntimeFieldHandle.Equals(RuntimeFieldHandle)\n- uid: System.RuntimeFieldHandle.GetHashCode\n  commentId: M:System.RuntimeFieldHandle.GetHashCode\n  id: GetHashCode\n  parent: System.RuntimeFieldHandle\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.RuntimeFieldHandle.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1508\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  seealso:\n  - type: System.ValueType.GetHashCode\n    commentId: M:System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RuntimeFieldHandle.GetHashCode()\n- uid: System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  commentId: M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  id: op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  parent: System.RuntimeFieldHandle\n  langs:\n  - csharp\n  - vb\n  name: Equality(RuntimeFieldHandle, RuntimeFieldHandle)\n  fullName: System.RuntimeFieldHandle.Equality(System.RuntimeFieldHandle, System.RuntimeFieldHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1533\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(RuntimeFieldHandle left, RuntimeFieldHandle right)\n    content.vb: Public Shared Operator =(left As RuntimeFieldHandle, right As RuntimeFieldHandle) As Boolean\n    parameters:\n    - id: left\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>The <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>The <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeFieldHandle.Equality(RuntimeFieldHandle, RuntimeFieldHandle)\n- uid: System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  commentId: M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  id: op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)\n  parent: System.RuntimeFieldHandle\n  langs:\n  - csharp\n  - vb\n  name: Inequality(RuntimeFieldHandle, RuntimeFieldHandle)\n  fullName: System.RuntimeFieldHandle.Inequality(System.RuntimeFieldHandle, System.RuntimeFieldHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1538\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(RuntimeFieldHandle left, RuntimeFieldHandle right)\n    content.vb: Public Shared Operator <>(left As RuntimeFieldHandle, right As RuntimeFieldHandle) As Boolean\n    parameters:\n    - id: left\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>The <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>The <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is not equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeFieldHandle.Inequality(RuntimeFieldHandle, RuntimeFieldHandle)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: false\n  name: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  commentId: T:System.RuntimeFieldHandle\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}