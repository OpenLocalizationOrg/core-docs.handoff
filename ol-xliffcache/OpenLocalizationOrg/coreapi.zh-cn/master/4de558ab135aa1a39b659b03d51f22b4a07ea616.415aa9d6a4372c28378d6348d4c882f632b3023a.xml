{"nodes":[{"pos":[1326,1341],"content":"ClientWebSocket","needQuote":true,"nodes":[{"content":"ClientWebSocket","pos":[0,15]}]},{"pos":[2413,2430],"content":"ClientWebSocket()","needQuote":true,"nodes":[{"content":"ClientWebSocket()","pos":[0,17]}]},{"pos":[3451,3462],"content":"CloseStatus","needQuote":true,"nodes":[{"content":"CloseStatus","pos":[0,11]}]},{"pos":[4984,5006],"content":"CloseStatusDescription","needQuote":true,"nodes":[{"content":"CloseStatusDescription","pos":[0,22]}]},{"pos":[6535,6542],"content":"Options","needQuote":true,"nodes":[{"content":"Options","pos":[0,7]}]},{"pos":[8002,8007],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[9482,9493],"content":"SubProtocol","needQuote":true,"nodes":[{"content":"SubProtocol","pos":[0,11]}]},{"pos":[10840,10847],"content":"Abort()","needQuote":true,"nodes":[{"content":"Abort()","pos":[0,7]}]},{"pos":[12091,12150],"content":"CloseAsync(WebSocketCloseStatus, String, CancellationToken)","needQuote":true,"nodes":[{"content":"CloseAsync(WebSocketCloseStatus, String, CancellationToken)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The WebSocket close status.&lt;/p&gt;\\n","pos":[13296,13334],"source":"\\n<p>The WebSocket close status.</p>\\n"},{"content":"\\n&lt;p&gt;A description of the close status.&lt;/p&gt;\\n","pos":[13410,13455],"source":"\\n<p>A description of the close status.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token used to propagate notification that this  operation should be canceled.&lt;/p&gt;\\n","pos":[13552,13655],"source":"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n"},{"pos":[14597,14662],"content":"CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)","needQuote":true,"nodes":[{"content":"CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;The WebSocket close status.&lt;/p&gt;\\n","pos":[15847,15885],"source":"\\n<p>The WebSocket close status.</p>\\n"},{"content":"\\n&lt;p&gt;A description of the close status.&lt;/p&gt;\\n","pos":[15961,16006],"source":"\\n<p>A description of the close status.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token used to propagate notification that this  operation should be canceled.&lt;/p&gt;\\n","pos":[16103,16206],"source":"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n"},{"pos":[17004,17040],"content":"ConnectAsync(Uri, CancellationToken)","needQuote":true,"nodes":[{"content":"ConnectAsync(Uri, CancellationToken)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The URI of the WebSocket server to connect to.&lt;/p&gt;\\n","pos":[17896,17953],"source":"\\n<p>The URI of the WebSocket server to connect to.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token used to propagate notification that the  operation should be canceled.&lt;/p&gt;\\n","pos":[18050,18152],"source":"\\n<p>A cancellation token used to propagate notification that the  operation should be canceled.</p>\\n"},{"pos":[18738,18747],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[20027,20078],"content":"ReceiveAsync(ArraySegment<Byte>, CancellationToken)","needQuote":true,"nodes":[{"content":"ReceiveAsync(ArraySegment&lt;Byte&gt;, CancellationToken)","pos":[0,51],"source":"ReceiveAsync(ArraySegment<Byte>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The buffer to receive the response.&lt;/p&gt;\\n","pos":[21174,21220],"source":"\\n<p>The buffer to receive the response.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token used to propagate notification that this  operation should be canceled.&lt;/p&gt;\\n","pos":[21317,21420],"source":"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n"},{"pos":[22778,22857],"content":"SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)","needQuote":true,"nodes":[{"content":"SendAsync(ArraySegment&lt;Byte&gt;, WebSocketMessageType, Boolean, CancellationToken)","pos":[0,79],"source":"SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The buffer containing the message to be sent.&lt;/p&gt;\\n","pos":[24062,24118],"source":"\\n<p>The buffer containing the message to be sent.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies whether the buffer is clear text or in a binary format.&lt;/p&gt;\\n","pos":[24217,24293],"source":"\\n<p>Specifies whether the buffer is clear text or in a binary format.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies whether this is the final asynchronous send.","pos":[24365,24424],"source":"\\n<p>Specifies whether this is the final asynchronous send."},{"content":"Set to &lt;strong&gt;true&lt;/strong&gt; if this is the final send; &lt;strong&gt;false&lt;/strong&gt; otherwise.&lt;/p&gt;\\n","pos":[24425,24520],"source":" Set to <strong>true</strong> if this is the final send; <strong>false</strong> otherwise.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token used to propagate notification that this  operation should be canceled.&lt;/p&gt;\\n","pos":[24617,24720],"source":"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n"},{"pos":[25642,25663],"content":"System.Net.WebSockets","needQuote":true,"nodes":[{"content":"System.Net.WebSockets","pos":[0,21]}]},{"pos":[25839,25845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25966,25972],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26161,26191],"content":"Nullable<WebSocketCloseStatus>","needQuote":true,"nodes":[{"content":"Nullable&lt;WebSocketCloseStatus&gt;","pos":[0,30],"source":"Nullable<WebSocketCloseStatus>"}]},{"pos":[26439,26447],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[26509,26510],"content":"<","needQuote":true,"nodes":[]},{"pos":[26589,26609],"content":"WebSocketCloseStatus","needQuote":true,"nodes":[{"content":"WebSocketCloseStatus","pos":[0,20]}]},{"pos":[26747,26755],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[26818,26821]},{"pos":[26907,26927],"content":"WebSocketCloseStatus","needQuote":true,"nodes":[{"content":"WebSocketCloseStatus","pos":[0,20]}]},{"pos":[26995,26996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27258,27269],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[27416,27424],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[27465,27466],"content":"<","needQuote":true,"nodes":[]},{"pos":[27493,27494],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[27591,27599],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[27641,27644]},{"pos":[27678,27679],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[27706,27707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27885,27891],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28082,28104],"content":"ClientWebSocketOptions","needQuote":true,"nodes":[{"content":"ClientWebSocketOptions","pos":[0,22]}]},{"pos":[28365,28379],"content":"WebSocketState","needQuote":true,"nodes":[{"content":"WebSocketState","pos":[0,14]}]},{"pos":[28622,28642],"content":"WebSocketCloseStatus","needQuote":true,"nodes":[{"content":"WebSocketCloseStatus","pos":[0,20]}]},{"pos":[28890,28907],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[29135,29139],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[29296,29312],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[29465,29487],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[29663,29666],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"pos":[29837,29855],"content":"ArraySegment<Byte>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;Byte&gt;","pos":[0,18],"source":"ArraySegment<Byte>"}]},{"pos":[30041,30053],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[30119,30120],"content":"<","needQuote":true,"nodes":[]},{"pos":[30168,30172],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30304,30316],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[30383,30386]},{"pos":[30441,30445],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30503,30504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30811,30839],"content":"Task<WebSocketReceiveResult>","needQuote":true,"nodes":[{"content":"Task&lt;WebSocketReceiveResult&gt;","pos":[0,28],"source":"Task<WebSocketReceiveResult>"}]},{"pos":[31125,31129],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[31203,31204],"content":"<","needQuote":true,"nodes":[]},{"pos":[31285,31307],"content":"WebSocketReceiveResult","needQuote":true,"nodes":[{"content":"WebSocketReceiveResult","pos":[0,22]}]},{"pos":[31459,31463],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[31538,31541]},{"pos":[31629,31651],"content":"WebSocketReceiveResult","needQuote":true,"nodes":[{"content":"WebSocketReceiveResult","pos":[0,22]}]},{"pos":[31721,31722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31998,32013],"content":"ArraySegment<T>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;T&gt;","pos":[0,15],"source":"ArraySegment<T>"}]},{"pos":[32176,32188],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[32233,32234],"content":"<","needQuote":true,"nodes":[]},{"pos":[32261,32262],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32363,32375],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[32421,32424]},{"pos":[32458,32459],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32486,32487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32676,32689],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[32886,32890],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[32943,32944],"content":"<","needQuote":true,"nodes":[]},{"pos":[32971,32978],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[33093,33097],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[33151,33154]},{"pos":[33188,33195],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[33228,33229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33467,33487],"content":"WebSocketMessageType","needQuote":true,"nodes":[{"content":"WebSocketMessageType","pos":[0,20]}]},{"pos":[33705,33712],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Net.WebSockets.ClientWebSocket\n  commentId: T:System.Net.WebSockets.ClientWebSocket\n  id: ClientWebSocket\n  parent: System.Net.WebSockets\n  children:\n  - System.Net.WebSockets.ClientWebSocket.#ctor\n  - System.Net.WebSockets.ClientWebSocket.Abort\n  - System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.CloseStatus\n  - System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  - System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.Dispose\n  - System.Net.WebSockets.ClientWebSocket.Options\n  - System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.State\n  - System.Net.WebSockets.ClientWebSocket.SubProtocol\n  langs:\n  - csharp\n  - vb\n  name: ClientWebSocket\n  fullName: System.Net.WebSockets.ClientWebSocket\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClientWebSocket\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 10\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Provides a client for connecting to WebSocket services.</p>\\n\"\n  syntax:\n    content: 'public sealed class ClientWebSocket : WebSocket'\n    content.vb: >-\n      Public NotInheritable Class ClientWebSocket\n          Inherits WebSocket\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ClientWebSocket\n- uid: System.Net.WebSockets.ClientWebSocket.#ctor\n  commentId: M:System.Net.WebSockets.ClientWebSocket.#ctor\n  id: '#ctor'\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: ClientWebSocket()\n  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 12\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Creates an instance of the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ClientWebSocket()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClientWebSocket.ClientWebSocket()\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus\n  commentId: P:System.Net.WebSockets.ClientWebSocket.CloseStatus\n  id: CloseStatus\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: CloseStatus\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseStatus\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 13\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Gets the reason why the close handshake was initiated on <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override WebSocketCloseStatus? CloseStatus { get; }\n    content.vb: Public Overrides ReadOnly Property CloseStatus As WebSocketCloseStatus?\n    parameters: []\n    return:\n      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.WebSockets.WebSocketCloseStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The reason why the close handshake was initiated.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ClientWebSocket.CloseStatus\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  commentId: P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  id: CloseStatusDescription\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: CloseStatusDescription\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseStatusDescription\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 14\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Gets a description of the reason why the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance was closed.</p>\\n\"\n  syntax:\n    content: public override string CloseStatusDescription { get; }\n    content.vb: Public Overrides ReadOnly Property CloseStatusDescription As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The description of the reason why the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance was closed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ClientWebSocket.CloseStatusDescription\n- uid: System.Net.WebSockets.ClientWebSocket.Options\n  commentId: P:System.Net.WebSockets.ClientWebSocket.Options\n  id: Options\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: Options\n  fullName: System.Net.WebSockets.ClientWebSocket.Options\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Options\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 15\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Gets the WebSocket options for the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public ClientWebSocketOptions Options { get; }\n    content.vb: Public ReadOnly Property Options As ClientWebSocketOptions\n    parameters: []\n    return:\n      type: System.Net.WebSockets.ClientWebSocketOptions\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.WebSockets.ClientWebSocketOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The WebSocket options for the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ClientWebSocket.Options\n- uid: System.Net.WebSockets.ClientWebSocket.State\n  commentId: P:System.Net.WebSockets.ClientWebSocket.State\n  id: State\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: State\n  fullName: System.Net.WebSockets.ClientWebSocket.State\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: State\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 16\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Get the WebSocket state of the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override WebSocketState State { get; }\n    content.vb: Public Overrides ReadOnly Property State As WebSocketState\n    parameters: []\n    return:\n      type: System.Net.WebSockets.WebSocketState\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.WebSockets.WebSocketState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The WebSocket state of the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ClientWebSocket.State\n- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol\n  commentId: P:System.Net.WebSockets.ClientWebSocket.SubProtocol\n  id: SubProtocol\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: SubProtocol\n  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubProtocol\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 17\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Gets the supported WebSocket sub-protocol for the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override string SubProtocol { get; }\n    content.vb: Public Overrides ReadOnly Property SubProtocol As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The supported WebSocket sub-protocol.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ClientWebSocket.SubProtocol\n- uid: System.Net.WebSockets.ClientWebSocket.Abort\n  commentId: M:System.Net.WebSockets.ClientWebSocket.Abort\n  id: Abort\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: Abort()\n  fullName: System.Net.WebSockets.ClientWebSocket.Abort()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Abort\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 18\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Aborts the connection and cancels any pending IO operations.</p>\\n\"\n  syntax:\n    content: public override void Abort()\n    content.vb: Public Overrides Sub Abort\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ClientWebSocket.Abort()\n- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  commentId: M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: CloseAsync(WebSocketCloseStatus, String, CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseAsync\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 19\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Close the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public override Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function CloseAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: closeStatus\n      type: System.Net.WebSockets.WebSocketCloseStatus\n      description: \"\\n<p>The WebSocket close status.</p>\\n\"\n    - id: statusDescription\n      type: System.String\n      description: \"\\n<p>A description of the close status.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus, String, CancellationToken)\n- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  commentId: M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseOutputAsync\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 20\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Close the output for the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public override Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function CloseOutputAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: closeStatus\n      type: System.Net.WebSockets.WebSocketCloseStatus\n      description: \"\\n<p>The WebSocket close status.</p>\\n\"\n    - id: statusDescription\n      type: System.String\n      description: \"\\n<p>A description of the close status.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)\n- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  commentId: M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  id: ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(Uri, CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 21\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Connect to a WebSocket server as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task ConnectAsync(Uri uri, CancellationToken cancellationToken)\n    content.vb: Public Function ConnectAsync(uri As Uri, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: \"\\n<p>The URI of the WebSocket server to connect to.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token used to propagate notification that the  operation should be canceled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClientWebSocket.ConnectAsync(Uri, CancellationToken)\n- uid: System.Net.WebSockets.ClientWebSocket.Dispose\n  commentId: M:System.Net.WebSockets.ClientWebSocket.Dispose\n  id: Dispose\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 22\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override void Dispose()\n    content.vb: Public Overrides Sub Dispose\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ClientWebSocket.Dispose()\n- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  commentId: M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: ReceiveAsync(ArraySegment<Byte>, CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment<System.Byte>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveAsync\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 23\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Receive data on <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public override Task<WebSocketReceiveResult> ReceiveAsync(ArraySegment<byte> buffer, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function ReceiveAsync(buffer As ArraySegment(Of Byte), cancellationToken As CancellationToken) As Task(Of WebSocketReceiveResult)\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: \"\\n<p>The buffer to receive the response.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment(Of System.Byte), System.Threading.CancellationToken)\n  name.vb: ReceiveAsync(ArraySegment(Of Byte), CancellationToken)\n  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>, CancellationToken)\n  nameWithType.vb: ClientWebSocket.ReceiveAsync(ArraySegment(Of Byte), CancellationToken)\n- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  commentId: M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment<System.Byte>, System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs\n    startLine: 24\n  assemblies:\n  - System.Net.WebSockets.Client\n  namespace: System.Net.WebSockets\n  summary: \"\\n<p>Send data on <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public override Task SendAsync(ArraySegment<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function SendAsync(buffer As ArraySegment(Of Byte), messageType As WebSocketMessageType, endOfMessage As Boolean, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: \"\\n<p>The buffer containing the message to be sent.</p>\\n\"\n    - id: messageType\n      type: System.Net.WebSockets.WebSocketMessageType\n      description: \"\\n<p>Specifies whether the buffer is clear text or in a binary format.</p>\\n\"\n    - id: endOfMessage\n      type: System.Boolean\n      description: \"\\n<p>Specifies whether this is the final asynchronous send. Set to <strong>true</strong> if this is the final send; <strong>false</strong> otherwise.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment(Of System.Byte), System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)\n  name.vb: SendAsync(ArraySegment(Of Byte), WebSocketMessageType, Boolean, CancellationToken)\n  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)\n  nameWithType.vb: ClientWebSocket.SendAsync(ArraySegment(Of Byte), WebSocketMessageType, Boolean, CancellationToken)\nreferences:\n- uid: System.Net.WebSockets\n  isExternal: false\n  name: System.Net.WebSockets\n  fullName: System.Net.WebSockets\n  commentId: N:System.Net.WebSockets\n  nameWithType: System.Net.WebSockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<WebSocketCloseStatus>\n  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>\n  fullname.vb: System.Nullable(Of System.Net.WebSockets.WebSocketCloseStatus)\n  name.vb: Nullable(Of WebSocketCloseStatus)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.WebSockets.WebSocketCloseStatus\n    name: WebSocketCloseStatus\n    fullName: System.Net.WebSockets.WebSocketCloseStatus\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.WebSockets.WebSocketCloseStatus\n    name: WebSocketCloseStatus\n    fullName: System.Net.WebSockets.WebSocketCloseStatus\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n  nameWithType: Nullable<WebSocketCloseStatus>\n  nameWithType.vb: Nullable(Of WebSocketCloseStatus)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Net.WebSockets.ClientWebSocketOptions\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: ClientWebSocketOptions\n  fullName: System.Net.WebSockets.ClientWebSocketOptions\n  commentId: T:System.Net.WebSockets.ClientWebSocketOptions\n  nameWithType: ClientWebSocketOptions\n- uid: System.Net.WebSockets.WebSocketState\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketState\n  fullName: System.Net.WebSockets.WebSocketState\n  commentId: T:System.Net.WebSockets.WebSocketState\n  nameWithType: WebSocketState\n- uid: System.Net.WebSockets.WebSocketCloseStatus\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketCloseStatus\n  fullName: System.Net.WebSockets.WebSocketCloseStatus\n  commentId: T:System.Net.WebSockets.WebSocketCloseStatus\n  nameWithType: WebSocketCloseStatus\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  nameWithType: CancellationToken\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  nameWithType: Task\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  commentId: N:System.Threading\n  nameWithType: System.Threading\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  fullName: System.Uri\n  commentId: T:System.Uri\n  nameWithType: Uri\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  definition: System.ArraySegment`1\n  name: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  fullname.vb: System.ArraySegment(Of System.Byte)\n  name.vb: ArraySegment(Of Byte)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.ArraySegment{System.Byte}\n  nameWithType: ArraySegment<Byte>\n  nameWithType.vb: ArraySegment(Of Byte)\n- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<WebSocketReceiveResult>\n  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.WebSockets.WebSocketReceiveResult)\n  name.vb: Task(Of WebSocketReceiveResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.WebSockets.WebSocketReceiveResult\n    name: WebSocketReceiveResult\n    fullName: System.Net.WebSockets.WebSocketReceiveResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.WebSockets.WebSocketReceiveResult\n    name: WebSocketReceiveResult\n    fullName: System.Net.WebSockets.WebSocketReceiveResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n  nameWithType: Task<WebSocketReceiveResult>\n  nameWithType.vb: Task(Of WebSocketReceiveResult)\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n  fullname.vb: System.ArraySegment(Of T)\n  name.vb: ArraySegment(Of T)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.ArraySegment`1\n  nameWithType: ArraySegment<T>\n  nameWithType.vb: ArraySegment(Of T)\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Net.WebSockets.WebSocketMessageType\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketMessageType\n  fullName: System.Net.WebSockets.WebSocketMessageType\n  commentId: T:System.Net.WebSockets.WebSocketMessageType\n  nameWithType: WebSocketMessageType\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n"}