{"nodes":[{"pos":[2288,2301],"content":"TraceListener","needQuote":true,"nodes":[{"content":"TraceListener","pos":[0,13]}]},{"pos":[4340,4355],"content":"TraceListener()","needQuote":true,"nodes":[{"content":"TraceListener()","pos":[0,15]}]},{"pos":[6096,6117],"content":"TraceListener(String)","needQuote":true,"nodes":[{"content":"TraceListener(String)","pos":[0,21]}]},{"pos":[8101,8107],"content":"Filter","needQuote":true,"nodes":[{"content":"Filter","pos":[0,6]}]},{"pos":[10001,10012],"content":"IndentLevel","needQuote":true,"nodes":[{"content":"IndentLevel","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The indent level.","pos":[10716,10738],"source":"\\n<p>The indent level."},{"content":"The default is zero.&lt;/p&gt;\\n","pos":[10739,10765],"source":" The default is zero.</p>\\n"},{"pos":[11782,11792],"content":"IndentSize","needQuote":true,"nodes":[{"content":"IndentSize","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The number of spaces in an indent.","pos":[12509,12548],"source":"\\n<p>The number of spaces in an indent."},{"content":"The default is four spaces.&lt;/p&gt;\\n","pos":[12549,12582],"source":" The default is four spaces.</p>\\n"},{"content":"\\n&lt;p&gt;Set operation failed because the value is less than zero.&lt;/p&gt;\\n","pos":[12713,12781],"source":"\\n<p>Set operation failed because the value is less than zero.</p>\\n"},{"pos":[13803,13815],"content":"IsThreadSafe","needQuote":true,"nodes":[{"content":"IsThreadSafe","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the trace listener is thread safe; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[14587,14688],"source":"\\n<p>\\n<strong>true</strong> if the trace listener is thread safe; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14689,14733],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[15072,15076],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[17064,17074],"content":"NeedIndent","needQuote":true,"nodes":[{"content":"NeedIndent","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the output should be indented; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17815,17918],"source":"\\n<p>\\n<strong>true</strong> if the output should be indented; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18964,18982],"content":"TraceOutputOptions","needQuote":true,"nodes":[{"content":"TraceOutputOptions","pos":[0,18]}]},{"content":"\\n&lt;p&gt;Set operation failed because the value is invalid.&lt;/p&gt;\\n","pos":[20060,20121],"source":"\\n<p>Set operation failed because the value is invalid.</p>\\n"},{"pos":[20442,20451],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[21521,21537],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[22435,22572],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[22573,22579],"source":" </p>\\n"},{"pos":[22952,22964],"content":"Fail(String)","needQuote":true,"nodes":[{"content":"Fail(String)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A message to emit.","pos":[23826,23849],"source":"\\n<p>A message to emit."},{"content":"&lt;/p&gt;\\n","pos":[23850,23856],"source":" </p>\\n"},{"pos":[24955,24975],"content":"Fail(String, String)","needQuote":true,"nodes":[{"content":"Fail(String, String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A message to emit.","pos":[25928,25951],"source":"\\n<p>A message to emit."},{"content":"&lt;/p&gt;\\n","pos":[25952,25958],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A detailed message to emit.","pos":[26030,26062],"source":"\\n<p>A detailed message to emit."},{"content":"&lt;/p&gt;\\n","pos":[26063,26069],"source":" </p>\\n"},{"pos":[27092,27099],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[29081,29146],"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object)","needQuote":true,"nodes":[{"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[30495,30611],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[30937,30983],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;The trace data to emit.&lt;/p&gt;\\n","pos":[31046,31080],"source":"\\n<p>The trace data to emit.</p>\\n"},{"pos":[32499,32566],"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])","needQuote":true,"nodes":[{"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])","pos":[0,67]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[33950,34066],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[34392,34438],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;An array of objects to emit as data.&lt;/p&gt;\\n","pos":[34503,34550],"source":"\\n<p>An array of objects to emit as data.</p>\\n"},{"pos":[36281,36339],"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32)","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[37621,37737],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[38063,38109],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"pos":[39518,39584],"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[40940,41056],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[41382,41428],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;A message to write.&lt;/p&gt;\\n","pos":[41494,41524],"source":"\\n<p>A message to write.</p>\\n"},{"pos":[42989,43065],"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])","pos":[0,76]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[44505,44621],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[44947,44993],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;A format string that contains zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[45058,45181],"source":"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[45246,45332],"source":"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n"},{"pos":[46845,46858],"content":"Write(Object)","needQuote":true,"nodes":[{"content":"Write(Object)","pos":[0,13]}]},{"pos":[49049,49070],"content":"Write(Object, String)","needQuote":true,"nodes":[{"content":"Write(Object, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[50297,50346],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[50347,50353],"source":" </p>\\n"},{"pos":[51422,51435],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[52244,52268],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[52269,52275],"source":" </p>\\n"},{"pos":[53380,53401],"content":"Write(String, String)","needQuote":true,"nodes":[{"content":"Write(String, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[54333,54357],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[54358,54364],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[54431,54480],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[54481,54487],"source":" </p>\\n"},{"pos":[55529,55542],"content":"WriteIndent()","needQuote":true,"nodes":[{"content":"WriteIndent()","pos":[0,13]}]},{"pos":[57447,57464],"content":"WriteLine(Object)","needQuote":true,"nodes":[{"content":"WriteLine(Object)","pos":[0,17]}]},{"pos":[59718,59743],"content":"WriteLine(Object, String)","needQuote":true,"nodes":[{"content":"WriteLine(Object, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[61017,61066],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[61067,61073],"source":" </p>\\n"},{"pos":[62158,62175],"content":"WriteLine(String)","needQuote":true,"nodes":[{"content":"WriteLine(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[63019,63043],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[63044,63050],"source":" </p>\\n"},{"pos":[64171,64196],"content":"WriteLine(String, String)","needQuote":true,"nodes":[{"content":"WriteLine(String, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[65175,65199],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[65200,65206],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[65273,65322],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[65323,65329],"source":" </p>\\n"},{"pos":[66233,66251],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[66418,66424],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66574,66585],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[66760,66770],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[66865,66873],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66942,66943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66970,66971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67041,67049],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[67118,67119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67146,67147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67330,67344],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[67463,67469],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67536,67537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67587,67593],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67653,67654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67737,67743],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67810,67811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67861,67867],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67927,67928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68142,68164],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[68312,68318],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68385,68386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68436,68442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68503,68504]},{"pos":[68559,68565],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68625,68626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68723,68729],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68796,68797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68847,68853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68914,68915]},{"pos":[68970,68976],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69036,69037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69282,69313],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[69479,69494],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69570,69571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69621,69627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69688,69689]},{"pos":[69744,69750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69810,69811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69917,69932],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[70008,70009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70059,70065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70126,70127]},{"pos":[70182,70188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70248,70249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70479,70492],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[70593,70604],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70676,70677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70704,70705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70778,70789],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70861,70862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70889,70890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71065,71074],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[71167,71174],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[71242,71243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71270,71271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71340,71347],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[71415,71416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71443,71444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71619,71636],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[71745,71760],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71836,71837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71864,71865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71942,71957],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[72033,72034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72061,72062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72207,72213],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[72344,72350],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[72524,72535],"content":"TraceFilter","needQuote":true,"nodes":[{"content":"TraceFilter","pos":[0,11]}]},{"pos":[72718,72723],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72866,72873],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[73051,73063],"content":"TraceOptions","needQuote":true,"nodes":[{"content":"TraceOptions","pos":[0,12]}]},{"pos":[73275,73284],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[73387,73394],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[73446,73447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73474,73475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73549,73556],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[73608,73609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73636,73637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73833,73848],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"pos":[74076,74090],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[74248,74256],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[74384,74390],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[74451,74453]},{"pos":[74518,74524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74584,74586],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74727,74754],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Diagnostics.TraceListener\n  commentId: T:System.Diagnostics.TraceListener\n  id: TraceListener\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.TraceListener.#ctor\n  - System.Diagnostics.TraceListener.#ctor(System.String)\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.Flush\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  langs:\n  - csharp\n  - vb\n  name: TraceListener\n  fullName: System.Diagnostics.TraceListener\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceListener\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 16\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides the <strong>abstract</strong> base class for the listeners who monitor trace and debug output.</p>\\n\"\n  syntax:\n    content: 'public abstract class TraceListener : IDisposable'\n    content.vb: >-\n      Public MustInherit Class TraceListener\n          Implements IDisposable\n  seealso:\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TraceListener\n- uid: System.Diagnostics.TraceListener.#ctor\n  commentId: M:System.Diagnostics.TraceListener.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceListener()\n  fullName: System.Diagnostics.TraceListener.TraceListener()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 29\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TraceListener()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TraceListener.TraceListener()\n- uid: System.Diagnostics.TraceListener.#ctor(System.String)\n  commentId: M:System.Diagnostics.TraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceListener(String)\n  fullName: System.Diagnostics.TraceListener.TraceListener(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 37\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified name as the listener.</p>\\n\"\n  syntax:\n    content: protected TraceListener(string name)\n    content.vb: Protected Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TraceListener.TraceListener(String)\n- uid: System.Diagnostics.TraceListener.Filter\n  commentId: P:System.Diagnostics.TraceListener.Filter\n  id: Filter\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Filter\n  fullName: System.Diagnostics.TraceListener.Filter\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Filter\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 114\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets and sets the trace filter for the trace listener.</p>\\n\"\n  syntax:\n    content: public TraceFilter Filter { get; set; }\n    content.vb: Public Property Filter As TraceFilter\n    parameters: []\n    return:\n      type: System.Diagnostics.TraceFilter\n      description: \"\\n<p>An object derived from the <xref href=\\\"System.Diagnostics.TraceFilter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> base class.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListener.Filter\n- uid: System.Diagnostics.TraceListener.IndentLevel\n  commentId: P:System.Diagnostics.TraceListener.IndentLevel\n  id: IndentLevel\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: IndentLevel\n  fullName: System.Diagnostics.TraceListener.IndentLevel\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndentLevel\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 83\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the indent level.</p>\\n\"\n  syntax:\n    content: public int IndentLevel { get; set; }\n    content.vb: Public Property IndentLevel As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The indent level. The default is zero.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListener.IndentLevel\n- uid: System.Diagnostics.TraceListener.IndentSize\n  commentId: P:System.Diagnostics.TraceListener.IndentSize\n  id: IndentSize\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: IndentSize\n  fullName: System.Diagnostics.TraceListener.IndentSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndentSize\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 99\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the number of spaces in an indent.</p>\\n\"\n  syntax:\n    content: public int IndentSize { get; set; }\n    content.vb: Public Property IndentSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of spaces in an indent. The default is four spaces.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Set operation failed because the value is less than zero.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListener.IndentSize\n- uid: System.Diagnostics.TraceListener.IsThreadSafe\n  commentId: P:System.Diagnostics.TraceListener.IsThreadSafe\n  id: IsThreadSafe\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: IsThreadSafe\n  fullName: System.Diagnostics.TraceListener.IsThreadSafe\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsThreadSafe\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 52\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value indicating whether the trace listener is thread safe. </p>\\n\"\n  syntax:\n    content: public virtual bool IsThreadSafe { get; }\n    content.vb: Public Overridable ReadOnly Property IsThreadSafe As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the trace listener is thread safe; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TraceListener.IsThreadSafe\n- uid: System.Diagnostics.TraceListener.Name\n  commentId: P:System.Diagnostics.TraceListener.Name\n  id: Name\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Diagnostics.TraceListener.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 45\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a name for this <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; set; }\n    content.vb: Public Overridable Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A name for this <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The default is an empty string (\\\"\\\").</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Name\n- uid: System.Diagnostics.TraceListener.NeedIndent\n  commentId: P:System.Diagnostics.TraceListener.NeedIndent\n  id: NeedIndent\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: NeedIndent\n  fullName: System.Diagnostics.TraceListener.NeedIndent\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NeedIndent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 130\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value indicating whether to indent the output.</p>\\n\"\n  syntax:\n    content: protected bool NeedIndent { get; set; }\n    content.vb: Protected Property NeedIndent As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the output should be indented; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: TraceListener.NeedIndent\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions\n  commentId: P:System.Diagnostics.TraceListener.TraceOutputOptions\n  id: TraceOutputOptions\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceOutputOptions\n  fullName: System.Diagnostics.TraceListener.TraceOutputOptions\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceOutputOptions\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 143\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the trace output options.</p>\\n\"\n  syntax:\n    content: public TraceOptions TraceOutputOptions { get; set; }\n    content.vb: Public Property TraceOutputOptions As TraceOptions\n    parameters: []\n    return:\n      type: System.Diagnostics.TraceOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values. The default is <xref href=\\\"System.Diagnostics.TraceOptions.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Set operation failed because the value is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListener.TraceOutputOptions\n- uid: System.Diagnostics.TraceListener.Dispose\n  commentId: M:System.Diagnostics.TraceListener.Dispose\n  id: Dispose\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Diagnostics.TraceListener.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 59\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceListener.Dispose()\n- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  commentId: M:System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 67\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TraceListener.Dispose(Boolean)\n- uid: System.Diagnostics.TraceListener.Fail(System.String)\n  commentId: M:System.Diagnostics.TraceListener.Fail(System.String)\n  id: Fail(System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Fail(String)\n  fullName: System.Diagnostics.TraceListener.Fail(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Fail\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 160\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Emits an error message to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public virtual void Fail(string message)\n    content.vb: Public Overridable Sub Fail(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to emit. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Fail(String)\n- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  commentId: M:System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Fail(String, String)\n  fullName: System.Diagnostics.TraceListener.Fail(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Fail\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 168\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Emits an error message and a detailed error message to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public virtual void Fail(string message, string detailMessage)\n    content.vb: Public Overridable Sub Fail(message As String, detailMessage As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to emit. </p>\\n\"\n    - id: detailMessage\n      type: System.String\n      description: \"\\n<p>A detailed message to emit. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Fail(String, String)\n- uid: System.Diagnostics.TraceListener.Flush\n  commentId: M:System.Diagnostics.TraceListener.Flush\n  id: Flush\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.Diagnostics.TraceListener.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Flush\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 75\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>When overridden in a derived class, flushes the output buffer.</p>\\n\"\n  syntax:\n    content: public virtual void Flush()\n    content.vb: Public Overridable Sub Flush\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Flush()\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  commentId: M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceData\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 309\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, a data object and event information to the listener specific output.</p>\\n\"\n  syntax:\n    content: public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data)\n    content.vb: Public Overridable Sub TraceData(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: data\n      type: System.Object\n      description: \"\\n<p>The trace data to emit.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  commentId: M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceData\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 323\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, an array of data objects and event information to the listener specific output.</p>\\n\"\n  syntax:\n    content: public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, params object[] data)\n    content.vb: Public Overridable Sub TraceData(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: data\n      type: System.Object[]\n      description: \"\\n<p>An array of objects to emit as data.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object())\n  name.vb: TraceData(TraceEventCache, String, TraceEventType, Int32, Object())\n  nameWithType: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType.vb: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object())\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  commentId: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  fullName: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 347\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace and event information to the listener specific output.</p>\\n\"\n  syntax:\n    content: public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id)\n    content.vb: Public Overridable Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer)\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  commentId: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 353\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, a message, and event information to the listener specific output.</p>\\n\"\n  syntax:\n    content: public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message)\n    content.vb: Public Overridable Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  commentId: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 364\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, a formatted array of objects and event information to the listener specific output.</p>\\n\"\n  syntax:\n    content: public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, params object[] args)\n    content.vb: Public Overridable Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object())\n  name.vb: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object())\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType.vb: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object())\n- uid: System.Diagnostics.TraceListener.Write(System.Object)\n  commentId: M:System.Diagnostics.TraceListener.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Write(Object)\n  fullName: System.Diagnostics.TraceListener.Write(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 193\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public virtual void Write(object o)\n    content.vb: Public Overridable Sub Write(o As Object)\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose fully qualified class name you want to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Write(Object)\n- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  commentId: M:System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  id: Write(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Write(Object, String)\n  fullName: System.Diagnostics.TraceListener.Write(System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 223\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public virtual void Write(object o, string category)\n    content.vb: Public Overridable Sub Write(o As Object, category As String)\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose fully qualified class name you want to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Write(Object, String)\n- uid: System.Diagnostics.TraceListener.Write(System.String)\n  commentId: M:System.Diagnostics.TraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Write(String)\n  fullName: System.Diagnostics.TraceListener.Write(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 187\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>When overridden in a derived class, writes the specified message to the listener you create in the derived class.</p>\\n\"\n  syntax:\n    content: public abstract void Write(string message)\n    content.vb: Public MustOverride Sub Write(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TraceListener.Write(String)\n- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)\n  commentId: M:System.Diagnostics.TraceListener.Write(System.String,System.String)\n  id: Write(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: Write(String, String)\n  fullName: System.Diagnostics.TraceListener.Write(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 207\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and a message to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public virtual void Write(string message, string category)\n    content.vb: Public Overridable Sub Write(message As String, category As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.Write(String, String)\n- uid: System.Diagnostics.TraceListener.WriteIndent\n  commentId: M:System.Diagnostics.TraceListener.WriteIndent\n  id: WriteIndent\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: WriteIndent()\n  fullName: System.Diagnostics.TraceListener.WriteIndent()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIndent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 239\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the indent to the listener you create when you implement this class, and resets the <xref href=\\\"System.Diagnostics.TraceListener.NeedIndent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to <strong>false</strong>.</p>\\n\"\n  syntax:\n    content: protected virtual void WriteIndent()\n    content.vb: Protected Overridable Sub WriteIndent\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TraceListener.WriteIndent()\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object)\n  fullName: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 268\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, followed by a line terminator.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(object o)\n    content.vb: Public Overridable Sub WriteLine(o As Object)\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose fully qualified class name you want to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.WriteLine(Object)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  id: WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object, String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 298\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, followed by a line terminator.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(object o, string category)\n    content.vb: Public Overridable Sub WriteLine(o As Object, category As String)\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose fully qualified class name you want to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.WriteLine(Object, String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String)\n  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 261\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.</p>\\n\"\n  syntax:\n    content: public abstract void WriteLine(string message)\n    content.vb: Public MustOverride Sub WriteLine(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TraceListener.WriteLine(String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  id: WriteLine(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, String)\n  fullName: System.Diagnostics.TraceListener.WriteLine(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs\n    startLine: 281\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and a message to the listener you create when you implement the <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, followed by a line terminator.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(string message, string category)\n    content.vb: Public Overridable Sub WriteLine(message As String, category As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TextWriterTraceListener\n    commentId: T:System.Diagnostics.TextWriterTraceListener\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TraceListener.WriteLine(String, String)\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.TraceFilter\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceFilter\n  fullName: System.Diagnostics.TraceFilter\n  nameWithType: TraceFilter\n  commentId: T:System.Diagnostics.TraceFilter\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Diagnostics.TraceOptions\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceOptions\n  fullName: System.Diagnostics.TraceOptions\n  nameWithType: TraceOptions\n  commentId: T:System.Diagnostics.TraceOptions\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n  nameWithType: TraceEventCache\n  commentId: T:System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}