{"nodes":[{"pos":[733,782],"content":"Dictionary<TKey, TValue>.KeyCollection.Enumerator","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TValue&gt;.KeyCollection.Enumerator","pos":[0,49],"source":"Dictionary<TKey, TValue>.KeyCollection.Enumerator"}]},{"pos":[3525,3532],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[5526,5545],"content":"IEnumerator.Current","needQuote":true,"nodes":[{"content":"IEnumerator.Current","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The element in the collection at the current position of the enumerator.&lt;/p&gt;\\n","pos":[6409,6492],"source":"\\n<p>The element in the collection at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[6619,6722],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[6723,6729],"source":" </p>\\n"},{"pos":[7931,7940],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[9489,9499],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the enumerator was successfully advanced to the next element; &lt;strong&gt;false&lt;/strong&gt; if the enumerator has passed the end of the collection.&lt;/p&gt;\\n","pos":[10306,10484],"source":"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[10611,10677],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[10678,10684],"source":" </p>\\n"},{"pos":[11645,11664],"content":"IEnumerator.Reset()","needQuote":true,"nodes":[{"content":"IEnumerator.Reset()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[12561,12627],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[12628,12634],"source":" </p>\\n"},{"pos":[13559,13585],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[13864,13881],"content":"IEnumerator<TKey>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;TKey&gt;","pos":[0,17],"source":"IEnumerator<TKey>"}]},{"pos":[14109,14120],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[14205,14206],"content":"<","needQuote":true,"nodes":[]},{"pos":[14233,14237],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[14360,14371],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[14457,14460]},{"pos":[14494,14498],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[14528,14529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14773,14784],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[14973,14984],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[15178,15192],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15317,15323],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15372,15373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15423,15429],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15489,15490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15576,15582],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15631,15632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15682,15688],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15748,15749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15952,15965],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16072,16083],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16137,16138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16165,16166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16242,16253],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16307,16308],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16335,16336],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16525,16535],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16636,16644],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16695,16696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16723,16724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16797,16805],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16856,16857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16884,16885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17088,17110],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17258,17264],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17331,17332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17382,17388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17449,17450]},{"pos":[17505,17511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17571,17572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17669,17675],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17742,17743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17793,17799],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17860,17861]},{"pos":[17916,17922],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17982,17983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18228,18259],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18425,18440],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18516,18517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18567,18573],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18634,18635]},{"pos":[18690,18696],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18756,18757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18863,18878],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18954,18955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19005,19011],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19072,19073]},{"pos":[19128,19134],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19194,19195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19421,19430],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19523,19530],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19598,19599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19626,19627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19696,19703],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19771,19772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19799,19800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19963,19977],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[20196,20207],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[20271,20272],"content":"<","needQuote":true,"nodes":[]},{"pos":[20299,20300],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20420,20431],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[20496,20499]},{"pos":[20533,20534],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20561,20562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20757,20775],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[20918,20924],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21058,21067],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[21221,21227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21496,21503],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[21839,21843],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[21987,21994],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[22313,22317],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[22471,22478],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[22711,22720],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[22823,22830],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[22882,22883],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22910,22911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22985,22992],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[23044,23045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23072,23073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23286,23296],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[23425,23433],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[23498,23499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23526,23527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23614,23622],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[23687,23688],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23715,23716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23894,23901],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24096,24103],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[24226,24231],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[24293,24294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24321,24322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24406,24411],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[24473,24474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24501,24502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24692,24717],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  commentId: T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  id: Dictionary`2.KeyCollection.Enumerator\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset\n  langs:\n  - csharp\n  - vb\n  name: Dictionary<TKey, TValue>.KeyCollection.Enumerator\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Enumerator\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 938\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Enumerates the elements of a <xref href=\\\"System.Collections.Generic.Dictionary`2.KeyCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public struct Enumerator : IEnumerator<TKey>, IDisposable, IEnumerator\n    content.vb: >-\n      <Serializable>\n\n      Public Structure Enumerator\n          Implements IEnumerator(Of TKey), IDisposable, IEnumerator\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.Enumerator\n    commentId: T:System.Collections.Generic.Dictionary`2.Enumerator\n  - type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator\n    commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator\n  - type: System.Collections.Generic.IEnumerable`1\n    commentId: T:System.Collections.Generic.IEnumerable`1\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerator{{TKey}}\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator\n  name.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator\n  nameWithType: Dictionary<TKey, TValue>.KeyCollection.Enumerator\n  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\n  commentId: P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\n  id: Current\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Current\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 975\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: public TKey Current { get; }\n    content.vb: Public ReadOnly Property Current As TKey\n    parameters: []\n    return:\n      type: '{TKey}'\n      description: \"\\n<p>The element in the <xref href=\\\"System.Collections.Generic.Dictionary`2.KeyCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the current position of the enumerator.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.Generic.IEnumerator{{TKey}}.Current\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.Current\n  nameWithType: Dictionary<TKey, TValue>.KeyCollection.Enumerator.Current\n  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator.Current\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current\n  commentId: P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Current\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.System.Collections.IEnumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerator.Current\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 981\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IEnumerator.Current { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The element in the collection at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.Current\n    commentId: P:System.Collections.IEnumerator.Current\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Current\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.System.Collections.IEnumerator.Current\n  name.vb: System.Collections.IEnumerator.Current\n  nameWithType: Dictionary<TKey, TValue>.KeyCollection.Enumerator.IEnumerator.Current\n  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator.System.Collections.IEnumerator.Current\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose\n  commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose\n  id: Dispose\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 953\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  seealso:\n  - type: System.IDisposable.Dispose\n    commentId: M:System.IDisposable.Dispose\n  - type: System.Object.Finalize\n    commentId: M:System.Object.Finalize\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.Dispose()\n  nameWithType: Dictionary<TKey, TValue>.KeyCollection.Enumerator.Dispose()\n  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator.Dispose()\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\n  commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\n  id: MoveNext\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: MoveNext()\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.MoveNext()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MoveNext\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 956\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Advances the enumerator to the next element of the <xref href=\\\"System.Collections.Generic.Dictionary`2.KeyCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool MoveNext()\n    content.vb: Public Function MoveNext As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\n  implements:\n  - System.Collections.IEnumerator.MoveNext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.MoveNext()\n  nameWithType: Dictionary<TKey, TValue>.KeyCollection.Enumerator.MoveNext()\n  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator.MoveNext()\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset\n  commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset\n  id: System#Collections#IEnumerator#Reset\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Reset()\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.System.Collections.IEnumerator.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerator.Reset\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 991\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\\n\"\n  syntax:\n    content: void IEnumerator.Reset()\n    content.vb: Sub System.Collections.IEnumerator.Reset Implements IEnumerator.Reset\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.Current\n    commentId: P:System.Collections.IEnumerator.Current\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Reset\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.System.Collections.IEnumerator.Reset()\n  name.vb: System.Collections.IEnumerator.Reset()\n  nameWithType: Dictionary<TKey, TValue>.KeyCollection.Enumerator.IEnumerator.Reset()\n  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator.System.Collections.IEnumerator.Reset()\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerator{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<TKey>\n  fullName: System.Collections.Generic.IEnumerator<TKey>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of TKey)\n  name.vb: IEnumerator(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<TKey>\n  nameWithType.vb: IEnumerator(Of TKey)\n  commentId: T:System.Collections.Generic.IEnumerator{`0}\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEnumerator{{TKey}}.Current\n  parent: System.Collections.Generic.IEnumerator{{TKey}}\n  definition: System.Collections.Generic.IEnumerator`1.Current\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<TKey>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of TKey).Current\n  nameWithType: IEnumerator<TKey>.Current\n  nameWithType.vb: IEnumerator(Of TKey).Current\n  commentId: P:System.Collections.Generic.IEnumerator{`0}.Current\n- uid: '{TKey}'\n  definition: TKey\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n  commentId: '!:TKey'\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  isExternal: true\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator`1.Current\n- uid: TKey\n  isExternal: false\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n- uid: System.Collections.IEnumerator.Current\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Current\n  fullName: System.Collections.IEnumerator.Current\n  nameWithType: IEnumerator.Current\n  commentId: P:System.Collections.IEnumerator.Current\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Collections.IEnumerator.MoveNext\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: MoveNext()\n  fullName: System.Collections.IEnumerator.MoveNext()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.MoveNext()\n  commentId: M:System.Collections.IEnumerator.MoveNext\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IEnumerator.Reset\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Reset()\n  fullName: System.Collections.IEnumerator.Reset()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.Reset()\n  commentId: M:System.Collections.IEnumerator.Reset\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}