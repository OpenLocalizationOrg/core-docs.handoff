{"nodes":[{"pos":[528,540],"content":"QualifiedAce","needQuote":true,"nodes":[{"content":"QualifiedAce","pos":[0,12]}]},{"pos":[3454,3466],"content":"AceQualifier","needQuote":true,"nodes":[{"content":"AceQualifier","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.&lt;/p&gt;\\n","pos":[4325,4451],"source":"\\n<p>A value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</p>\\n"},{"pos":[4809,4819],"content":"IsCallback","needQuote":true,"nodes":[{"content":"IsCallback","pos":[0,10]}]},{"pos":[6221,6233],"content":"OpaqueLength","needQuote":true,"nodes":[{"content":"OpaqueLength","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The length of the opaque callback data.&lt;/p&gt;\\n","pos":[7175,7225],"source":"\\n<p>The length of the opaque callback data.</p>\\n"},{"pos":[7580,7591],"content":"GetOpaque()","needQuote":true,"nodes":[{"content":"GetOpaque()","pos":[0,11]}]},{"pos":[8992,9009],"content":"SetOpaque(Byte[])","needQuote":true,"nodes":[{"content":"SetOpaque(Byte[])","pos":[0,17]}]},{"pos":[10410,10439],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[10639,10645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10840,10850],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[11101,11109],"content":"KnownAce","needQuote":true,"nodes":[{"content":"KnownAce","pos":[0,8]}]},{"pos":[11374,11384],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[11690,11708],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[12032,12040],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[12339,12346],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[12645,12655],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[12965,12977],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[13297,13313],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[13640,13651],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[13968,13984],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[14304,14310],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[14451,14455],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[14526,14527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14554,14555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14648,14652],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[14723,14724],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14751,14752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15039,15074],"content":"CreateFromBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[], Int32)","pos":[0,35]}]},{"pos":[15455,15475],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[15562,15563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15611,15615],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[15674,15676]},{"content":",","pos":[15708,15709]},{"pos":[15763,15768],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15827,15828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15965,15985],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[16072,16073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16121,16125],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16183,16185],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[16214,16215]},{"pos":[16269,16274],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16333,16334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16733,16747],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16920,16926],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16999,17000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17050,17056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17116,17117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17227,17233],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17306,17307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17357,17363],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17423,17424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17729,17757],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[18110,18123],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[18203,18204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18252,18256],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[18315,18317]},{"content":",","pos":[18349,18350]},{"pos":[18404,18409],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18468,18469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18599,18612],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[18692,18693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18741,18745],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[18803,18805],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[18834,18835]},{"pos":[18889,18894],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18953,18954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19323,19336],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19491,19502],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19580,19581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19608,19609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19709,19720],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19798,19799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19826,19827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20034,20044],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20139,20147],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20216,20217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20244,20245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20315,20323],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20392,20393],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20420,20421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20618,20640],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20788,20794],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20861,20862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20912,20918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20979,20980]},{"pos":[21035,21041],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21101,21102],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21199,21205],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21272,21273],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21323,21329],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21390,21391]},{"pos":[21446,21452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21512,21513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21758,21789],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21955,21970],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22046,22047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22097,22103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22164,22165]},{"pos":[22220,22226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22286,22287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22393,22408],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22484,22485],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22535,22541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22602,22603]},{"pos":[22658,22664],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22724,22725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22951,22960],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23053,23060],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23128,23129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23156,23157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23226,23233],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23301,23302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23329,23330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23505,23522],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23631,23646],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23722,23723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23750,23751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23828,23843],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23919,23920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23947,23948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24093,24099],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24282,24294],"content":"AceQualifier","needQuote":true,"nodes":[{"content":"AceQualifier","pos":[0,12]}]},{"pos":[24504,24511],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24658,24663],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24768,24774],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[24894,24898],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[24957,24959]},{"pos":[25022,25026],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25084,25086],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Security.AccessControl.QualifiedAce\n  commentId: T:System.Security.AccessControl.QualifiedAce\n  id: QualifiedAce\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.QualifiedAce.AceQualifier\n  - System.Security.AccessControl.QualifiedAce.GetOpaque\n  - System.Security.AccessControl.QualifiedAce.IsCallback\n  - System.Security.AccessControl.QualifiedAce.OpaqueLength\n  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: QualifiedAce\n  fullName: System.Security.AccessControl.QualifiedAce\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: QualifiedAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 455\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an Access Control Entry (ACE) that contains a qualifier. The qualifier, represented by an <xref href=\\\"System.Security.AccessControl.AceQualifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms. The <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class is the abstract base class for the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> classes.</p>\\n\"\n  syntax:\n    content: 'public abstract class QualifiedAce : KnownAce'\n    content.vb: >-\n      Public MustInherit Class QualifiedAce\n          Inherits KnownAce\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAce\n  - System.Security.AccessControl.KnownAce\n  inheritedMembers:\n  - System.Security.AccessControl.KnownAce.AccessMask\n  - System.Security.AccessControl.KnownAce.SecurityIdentifier\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.BinaryLength\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: QualifiedAce\n- uid: System.Security.AccessControl.QualifiedAce.AceQualifier\n  commentId: P:System.Security.AccessControl.QualifiedAce.AceQualifier\n  id: AceQualifier\n  parent: System.Security.AccessControl.QualifiedAce\n  langs:\n  - csharp\n  - vb\n  name: AceQualifier\n  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AceQualifier\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 458\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</p>\\n\"\n  syntax:\n    content: public AceQualifier AceQualifier { get; }\n    content.vb: Public ReadOnly Property AceQualifier As AceQualifier\n    parameters: []\n    return:\n      type: System.Security.AccessControl.AceQualifier\n      description: \"\\n<p>A value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: QualifiedAce.AceQualifier\n- uid: System.Security.AccessControl.QualifiedAce.IsCallback\n  commentId: P:System.Security.AccessControl.QualifiedAce.IsCallback\n  id: IsCallback\n  parent: System.Security.AccessControl.QualifiedAce\n  langs:\n  - csharp\n  - vb\n  name: IsCallback\n  fullName: System.Security.AccessControl.QualifiedAce.IsCallback\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsCallback\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 459\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies whether this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains callback data.</p>\\n\"\n  syntax:\n    content: public bool IsCallback { get; }\n    content.vb: Public ReadOnly Property IsCallback As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains callback data; otherwise, false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: QualifiedAce.IsCallback\n- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength\n  commentId: P:System.Security.AccessControl.QualifiedAce.OpaqueLength\n  id: OpaqueLength\n  parent: System.Security.AccessControl.QualifiedAce\n  langs:\n  - csharp\n  - vb\n  name: OpaqueLength\n  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpaqueLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 460\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length of the opaque callback data associated with this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This property is valid only for callback Access Control Entries (ACEs).</p>\\n\"\n  syntax:\n    content: public int OpaqueLength { get; }\n    content.vb: Public ReadOnly Property OpaqueLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of the opaque callback data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: QualifiedAce.OpaqueLength\n- uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n  commentId: M:System.Security.AccessControl.QualifiedAce.GetOpaque\n  id: GetOpaque\n  parent: System.Security.AccessControl.QualifiedAce\n  langs:\n  - csharp\n  - vb\n  name: GetOpaque()\n  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOpaque\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 461\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns the opaque callback data associated with this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public byte[] GetOpaque()\n    content.vb: Public Function GetOpaque As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the opaque callback data associated with this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: QualifiedAce.GetOpaque()\n- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  commentId: M:System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  id: SetOpaque(System.Byte[])\n  parent: System.Security.AccessControl.QualifiedAce\n  langs:\n  - csharp\n  - vb\n  name: SetOpaque(Byte[])\n  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetOpaque\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 462\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the opaque callback data associated with this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetOpaque(byte[] opaque)\n    content.vb: Public Sub SetOpaque(opaque As Byte())\n    parameters:\n    - id: opaque\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the opaque callback data for this <xref href=\\\"System.Security.AccessControl.QualifiedAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())\n  name.vb: SetOpaque(Byte())\n  nameWithType: QualifiedAce.SetOpaque(Byte[])\n  nameWithType.vb: QualifiedAce.SetOpaque(Byte())\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.KnownAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: KnownAce\n  fullName: System.Security.AccessControl.KnownAce\n  commentId: T:System.Security.AccessControl.KnownAce\n  nameWithType: KnownAce\n- uid: System.Security.AccessControl.KnownAce.AccessMask\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.KnownAce.AccessMask\n  commentId: P:System.Security.AccessControl.KnownAce.AccessMask\n  nameWithType: KnownAce.AccessMask\n- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  commentId: P:System.Security.AccessControl.KnownAce.SecurityIdentifier\n  nameWithType: KnownAce.SecurityIdentifier\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AceFlags\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  commentId: P:System.Security.AccessControl.GenericAce.AceType\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  commentId: P:System.Security.AccessControl.GenericAce.IsInherited\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Copy\n  nameWithType: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: CreateFromBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)\n  name.vb: CreateFromBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)\n  nameWithType: GenericAce.Equals(Object)\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode\n  nameWithType: GenericAce.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.AccessControl.AceQualifier\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceQualifier\n  fullName: System.Security.AccessControl.AceQualifier\n  commentId: T:System.Security.AccessControl.AceQualifier\n  nameWithType: AceQualifier\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n"}