{"nodes":[{"pos":[1245,1268],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[2927,2943],"content":"AttachedToParent","needQuote":true,"nodes":[{"content":"AttachedToParent","pos":[0,16]}]},{"pos":[4880,4895],"content":"DenyChildAttach","needQuote":true,"nodes":[{"content":"DenyChildAttach","pos":[0,15]}]},{"pos":[6319,6339],"content":"ExecuteSynchronously","needQuote":true,"nodes":[{"content":"ExecuteSynchronously","pos":[0,20]}]},{"pos":[8283,8296],"content":"HideScheduler","needQuote":true,"nodes":[{"content":"HideScheduler","pos":[0,13]}]},{"pos":[9804,9820],"content":"LazyCancellation","needQuote":true,"nodes":[{"content":"LazyCancellation","pos":[0,16]}]},{"pos":[10887,10898],"content":"LongRunning","needQuote":true,"nodes":[{"content":"LongRunning","pos":[0,11]}]},{"pos":[12049,12053],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"pos":[13382,13395],"content":"NotOnCanceled","needQuote":true,"nodes":[{"content":"NotOnCanceled","pos":[0,13]}]},{"pos":[14747,14759],"content":"NotOnFaulted","needQuote":true,"nodes":[{"content":"NotOnFaulted","pos":[0,12]}]},{"pos":[16165,16185],"content":"NotOnRanToCompletion","needQuote":true,"nodes":[{"content":"NotOnRanToCompletion","pos":[0,20]}]},{"pos":[17590,17604],"content":"OnlyOnCanceled","needQuote":true,"nodes":[{"content":"OnlyOnCanceled","pos":[0,14]}]},{"pos":[18960,18973],"content":"OnlyOnFaulted","needQuote":true,"nodes":[{"content":"OnlyOnFaulted","pos":[0,13]}]},{"pos":[21190,21211],"content":"OnlyOnRanToCompletion","needQuote":true,"nodes":[{"content":"OnlyOnRanToCompletion","pos":[0,21]}]},{"pos":[22616,22630],"content":"PreferFairness","needQuote":true,"nodes":[{"content":"PreferFairness","pos":[0,14]}]},{"pos":[23915,23945],"content":"RunContinuationsAsynchronously","needQuote":true,"nodes":[{"content":"RunContinuationsAsynchronously","pos":[0,30]}]},{"pos":[25000,25022],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[25250,25273],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]}],"content":"items:\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  commentId: T:System.Threading.Tasks.TaskContinuationOptions\n  id: TaskContinuationOptions\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.TaskContinuationOptions.AttachedToParent\n  - System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach\n  - System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\n  - System.Threading.Tasks.TaskContinuationOptions.HideScheduler\n  - System.Threading.Tasks.TaskContinuationOptions.LazyCancellation\n  - System.Threading.Tasks.TaskContinuationOptions.LongRunning\n  - System.Threading.Tasks.TaskContinuationOptions.None\n  - System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled\n  - System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted\n  - System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion\n  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\n  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted\n  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion\n  - System.Threading.Tasks.TaskContinuationOptions.PreferFairness\n  - System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously\n  langs:\n  - csharp\n  - vb\n  name: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TaskContinuationOptions\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6897\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies the behavior for a task that is created by using the <xref href=\\\"System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [Flags]\n\n      [Serializable]\n\n      public enum TaskContinuationOptions\n    content.vb: >-\n      <Flags>\n\n      <Serializable>\n\n      Public Enum TaskContinuationOptions\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent\n  id: AttachedToParent\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: AttachedToParent\n  fullName: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AttachedToParent\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6927\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy. The continuation can be a child task only if its antecedent is also a child task. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.AttachedToParent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> option so that the parent and child tasks are synchronized. </p>\\n<p>Note that if a parent task is configured with the <xref href=\\\"System.Threading.Tasks.TaskCreationOptions.DenyChildAttach\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> option, the <xref href=\\\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> option in the child task has no effect, and the child task will execute as a detached child task. </p>\\n<p>For more information, see Attached and Detached Child Tasks. </p>\\n\"\n  syntax:\n    content: AttachedToParent = 4\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.AttachedToParent\n- uid: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach\n  id: DenyChildAttach\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: DenyChildAttach\n  fullName: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DenyChildAttach\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6932\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <xref href=\\\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see Attached and Detached Child Tasks. </p>\\n\"\n  syntax:\n    content: DenyChildAttach = 8\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.DenyChildAttach\n- uid: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\n  id: ExecuteSynchronously\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: ExecuteSynchronously\n  fullName: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ExecuteSynchronously\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6985\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation task should be executed synchronously. With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation. If the antecedent's <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is disposed in a <strong>finally</strong> block (<strong>Finally</strong> in Visual Basic), a continuation with this option will run in that <strong>finally</strong> block. Only very short-running continuations should be executed synchronously. </p>\\n<p>Because the task executes synchronously, there is no need to call a method such as <xref href=\\\"System.Threading.Tasks.Task.Wait\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to ensure that the calling thread waits for the task to complete. </p>\\n\"\n  syntax:\n    content: ExecuteSynchronously = 524288\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.ExecuteSynchronously\n- uid: System.Threading.Tasks.TaskContinuationOptions.HideScheduler\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler\n  id: HideScheduler\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: HideScheduler\n  fullName: System.Threading.Tasks.TaskContinuationOptions.HideScheduler\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HideScheduler\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6937\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that tasks created by the continuation by calling methods such as <xref href=\\\"System.Threading.Tasks.Task.Run(System.Action)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> see the default scheduler (<xref href=\\\"System.Threading.Tasks.TaskScheduler.Default\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) rather than the scheduler on which this continuation is running as the current scheduler.  </p>\\n\"\n  syntax:\n    content: HideScheduler = 16\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.HideScheduler\n- uid: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation\n  id: LazyCancellation\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: LazyCancellation\n  fullName: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LazyCancellation\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6942\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</p>\\n\"\n  syntax:\n    content: LazyCancellation = 32\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.LazyCancellation\n- uid: System.Threading.Tasks.TaskContinuationOptions.LongRunning\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.LongRunning\n  id: LongRunning\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: LongRunning\n  fullName: System.Threading.Tasks.TaskContinuationOptions.LongRunning\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LongRunning\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6923\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that a continuation will be a long-running, course-grained operation. It provides a hint to the <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that oversubscription may be warranted. </p>\\n\"\n  syntax:\n    content: LongRunning = 2\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.LongRunning\n- uid: System.Threading.Tasks.TaskContinuationOptions.None\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.None\n  id: None\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.Threading.Tasks.TaskContinuationOptions.None\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: None\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6907\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>When no continuation options are specified, specifies that default behavior should be used when executing a continuation. The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property value. It the continuation is a child task, it is created as a detached nested task.  </p>\\n\"\n  syntax:\n    content: None = 0\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.None\n- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled\n  id: NotOnCanceled\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: NotOnCanceled\n  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NotOnCanceled\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6962\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation task should not be scheduled if its antecedent was canceled. An antecedent is canceled if its <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property upon completion is <xref href=\\\"System.Threading.Tasks.TaskStatus.Canceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This option is not valid for multi-task continuations.</p>\\n\"\n  syntax:\n    content: NotOnCanceled = 262144\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.NotOnCanceled\n- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted\n  id: NotOnFaulted\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: NotOnFaulted\n  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NotOnFaulted\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6957\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property upon completion is <xref href=\\\"System.Threading.Tasks.TaskStatus.Faulted\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This option is not valid for multi-task continuations. </p>\\n\"\n  syntax:\n    content: NotOnFaulted = 131072\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.NotOnFaulted\n- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion\n  id: NotOnRanToCompletion\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: NotOnRanToCompletion\n  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NotOnRanToCompletion\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6952\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation task should not be scheduled if its antecedent ran to completion. An antecedent runs to completion if its <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property upon completion is <xref href=\\\"System.Threading.Tasks.TaskStatus.RanToCompletion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This option is not valid for multi-task continuations. </p>\\n\"\n  syntax:\n    content: NotOnRanToCompletion = 65536\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.NotOnRanToCompletion\n- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\n  id: OnlyOnCanceled\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: OnlyOnCanceled\n  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnlyOnCanceled\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6977\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation should be scheduled only if its antecedent was canceled.  An antecedent is canceled if its <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property upon completion is <xref href=\\\"System.Threading.Tasks.TaskStatus.Canceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This option is not valid for multi-task continuations.</p>\\n\"\n  syntax:\n    content: OnlyOnCanceled = 196608\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.OnlyOnCanceled\n- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted\n  id: OnlyOnFaulted\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: OnlyOnFaulted\n  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnlyOnFaulted\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6972\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property upon completion is <xref href=\\\"System.Threading.Tasks.TaskStatus.Faulted\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  option guarantees that the <xref href=\\\"System.Threading.Tasks.Task.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the antecedent is not <strong>null</strong>. You can use that property to catch the exception and see which exception caused the task to fault. If you do not access the <xref href=\\\"System.Threading.Tasks.Task.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, the exception is unhandled. Also, if you attempt to access the <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of a task that has been canceled or has faulted, a new exception is thrown. </p>\\n<p>This option is not valid for multi-task continuations. </p>\\n\"\n  syntax:\n    content: OnlyOnFaulted = 327680\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.OnlyOnFaulted\n- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion\n  id: OnlyOnRanToCompletion\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: OnlyOnRanToCompletion\n  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnlyOnRanToCompletion\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6967\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation should be scheduled only if its antecedent ran to completion. An antecedent runs to completion if its <xref href=\\\"System.Threading.Tasks.Task.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property upon completion is <xref href=\\\"System.Threading.Tasks.TaskStatus.RanToCompletion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This option is not valid for multi-task continuations.</p>\\n\"\n  syntax:\n    content: OnlyOnRanToCompletion = 393216\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.OnlyOnRanToCompletion\n- uid: System.Threading.Tasks.TaskContinuationOptions.PreferFairness\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness\n  id: PreferFairness\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: PreferFairness\n  fullName: System.Threading.Tasks.TaskContinuationOptions.PreferFairness\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PreferFairness\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6916\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>A hint to a <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later. </p>\\n\"\n  syntax:\n    content: PreferFairness = 1\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.PreferFairness\n- uid: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously\n  commentId: F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously\n  id: RunContinuationsAsynchronously\n  parent: System.Threading.Tasks.TaskContinuationOptions\n  langs:\n  - csharp\n  - vb\n  name: RunContinuationsAsynchronously\n  fullName: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RunContinuationsAsynchronously\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6944\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Specifies that the continuation task should be run asynchronously.  This option has precedence over <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: RunContinuationsAsynchronously = 64\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TaskContinuationOptions.RunContinuationsAsynchronously\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  commentId: T:System.Threading.Tasks.TaskContinuationOptions\n"}