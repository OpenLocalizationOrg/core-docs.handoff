{"nodes":[{"pos":[1205,1226],"content":"RawSecurityDescriptor","needQuote":true,"nodes":[{"content":"RawSecurityDescriptor","pos":[0,21]}]},{"pos":[3438,3474],"content":"RawSecurityDescriptor(Byte[], Int32)","needQuote":true,"nodes":[{"content":"RawSecurityDescriptor(Byte[], Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The offset in the  &lt;em&gt;binaryForm&lt;/em&gt; array at which to begin copying.&lt;/p&gt;\\n","pos":[4693,4775],"source":"\\n<p>The offset in the  <em>binaryForm</em> array at which to begin copying.</p>\\n"},{"pos":[6027,6118],"content":"RawSecurityDescriptor(ControlFlags, SecurityIdentifier, SecurityIdentifier, RawAcl, RawAcl)","needQuote":true,"nodes":[{"content":"RawSecurityDescriptor(ControlFlags, SecurityIdentifier, SecurityIdentifier, RawAcl, RawAcl)","pos":[0,91]}]},{"pos":[9166,9195],"content":"RawSecurityDescriptor(String)","needQuote":true,"nodes":[{"content":"RawSecurityDescriptor(String)","pos":[0,29]}]},{"pos":[10719,10731],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[12369,12385],"content":"DiscretionaryAcl","needQuote":true,"nodes":[{"content":"DiscretionaryAcl","pos":[0,16]}]},{"pos":[13871,13876],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[15411,15416],"content":"Owner","needQuote":true,"nodes":[{"content":"Owner","pos":[0,5]}]},{"pos":[17038,17060],"content":"ResourceManagerControl","needQuote":true,"nodes":[{"content":"ResourceManagerControl","pos":[0,22]}]},{"pos":[18623,18632],"content":"SystemAcl","needQuote":true,"nodes":[{"content":"SystemAcl","pos":[0,9]}]},{"pos":[20216,20238],"content":"SetFlags(ControlFlags)","needQuote":true,"nodes":[{"content":"SetFlags(ControlFlags)","pos":[0,22]}]},{"pos":[21689,21718],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[21918,21924],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22134,22159],"content":"GenericSecurityDescriptor","needQuote":true,"nodes":[{"content":"GenericSecurityDescriptor","pos":[0,25]}]},{"pos":[22511,22523],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[22910,22918],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[23325,23353],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[23751,23764],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[23859,23860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23908,23912],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[23971,23973]},{"content":",","pos":[24005,24006]},{"pos":[24060,24065],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24124,24125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24270,24283],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[24378,24379],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24427,24431],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24489,24491],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[24520,24521]},{"pos":[24575,24580],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24639,24640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25137,25171],"content":"GetSddlForm(AccessControlSections)","needQuote":true,"nodes":[{"content":"GetSddlForm(AccessControlSections)","pos":[0,34]}]},{"pos":[25460,25471],"content":"GetSddlForm","needQuote":true,"nodes":[{"content":"GetSddlForm","pos":[0,11]}]},{"pos":[25564,25565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25653,25674],"content":"AccessControlSections","needQuote":true,"nodes":[{"content":"AccessControlSections","pos":[0,21]}]},{"pos":[25751,25752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25920,25931],"content":"GetSddlForm","needQuote":true,"nodes":[{"content":"GetSddlForm","pos":[0,11]}]},{"pos":[26024,26025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26113,26134],"content":"AccessControlSections","needQuote":true,"nodes":[{"content":"AccessControlSections","pos":[0,21]}]},{"pos":[26211,26212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26625,26652],"content":"IsSddlConversionSupported()","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported()","pos":[0,27]}]},{"pos":[26865,26890],"content":"IsSddlConversionSupported","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported","pos":[0,25]}]},{"pos":[26997,26998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27025,27026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27155,27180],"content":"IsSddlConversionSupported","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported","pos":[0,25]}]},{"pos":[27287,27288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27315,27316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27581,27591],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27686,27694],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27763,27764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27791,27792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27862,27870],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27939,27940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27967,27968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28151,28165],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28284,28290],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28357,28358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28408,28414],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28474,28475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28558,28564],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28631,28632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28682,28688],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28748,28749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28963,28985],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29133,29139],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29206,29207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29257,29263],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29324,29325]},{"pos":[29380,29386],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29446,29447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29544,29550],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29617,29618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29668,29674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29735,29736]},{"pos":[29791,29797],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29857,29858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30103,30134],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30300,30315],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30391,30392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30442,30448],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30509,30510]},{"pos":[30565,30571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30631,30632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30738,30753],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30829,30830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30880,30886],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30947,30948]},{"pos":[31003,31009],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31069,31070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31300,31313],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31414,31425],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31497,31498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31525,31526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31599,31610],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31682,31683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31710,31711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31886,31895],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31988,31995],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32063,32064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32091,32092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32161,32168],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32236,32237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32264,32265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32440,32457],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32566,32581],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32657,32658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32685,32686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32763,32778],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32854,32855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32882,32883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33028,33034],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33128,33134],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[33254,33258],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[33317,33319]},{"pos":[33382,33386],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33444,33446],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33578,33583],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33777,33789],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[34048,34066],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[34331,34337],"content":"RawAcl","needQuote":true,"nodes":[{"content":"RawAcl","pos":[0,6]}]},{"pos":[34523,34548],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[34736,34742],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34991,35003],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[35387,35392],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[35755,35760],"content":"Owner","needQuote":true,"nodes":[{"content":"Owner","pos":[0,5]}]},{"pos":[36024,36028],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]}],"content":"items:\n- uid: System.Security.AccessControl.RawSecurityDescriptor\n  commentId: T:System.Security.AccessControl.RawSecurityDescriptor\n  id: RawSecurityDescriptor\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)\n  - System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)\n  - System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)\n  - System.Security.AccessControl.RawSecurityDescriptor.ControlFlags\n  - System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl\n  - System.Security.AccessControl.RawSecurityDescriptor.Group\n  - System.Security.AccessControl.RawSecurityDescriptor.Owner\n  - System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl\n  - System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)\n  - System.Security.AccessControl.RawSecurityDescriptor.SystemAcl\n  langs:\n  - csharp\n  - vb\n  name: RawSecurityDescriptor\n  fullName: System.Security.AccessControl.RawSecurityDescriptor\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RawSecurityDescriptor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 476\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</p>\\n\"\n  syntax:\n    content: 'public sealed class RawSecurityDescriptor : GenericSecurityDescriptor'\n    content.vb: >-\n      Public NotInheritable Class RawSecurityDescriptor\n          Inherits GenericSecurityDescriptor\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericSecurityDescriptor\n  inheritedMembers:\n  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  - System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: RawSecurityDescriptor\n- uid: System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)\n  id: '#ctor(System.Byte[],System.Int32)'\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: RawSecurityDescriptor(Byte[], Int32)\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 478\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified array of byte values.</p>\\n\"\n  syntax:\n    content: public RawSecurityDescriptor(byte[] binaryForm, int offset)\n    content.vb: Public Sub New(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The array of byte values from which to create the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset in the  <em>binaryForm</em> array at which to begin copying.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Byte(), System.Int32)\n  name.vb: RawSecurityDescriptor(Byte(), Int32)\n  nameWithType: RawSecurityDescriptor.RawSecurityDescriptor(Byte[], Int32)\n  nameWithType.vb: RawSecurityDescriptor.RawSecurityDescriptor(Byte(), Int32)\n- uid: System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)\n  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)\n  id: '#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)'\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: RawSecurityDescriptor(ControlFlags, SecurityIdentifier, SecurityIdentifier, RawAcl, RawAcl)\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.RawAcl, System.Security.AccessControl.RawAcl)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 479\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values.</p>\\n\"\n  syntax:\n    content: public RawSecurityDescriptor(ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, RawAcl systemAcl, RawAcl discretionaryAcl)\n    content.vb: Public Sub New(flags As ControlFlags, owner As SecurityIdentifier, group As SecurityIdentifier, systemAcl As RawAcl, discretionaryAcl As RawAcl)\n    parameters:\n    - id: flags\n      type: System.Security.AccessControl.ControlFlags\n      description: \"\\n<p>Flags that specify behavior of the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: owner\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The owner for the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: group\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The primary group for the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: systemAcl\n      type: System.Security.AccessControl.RawAcl\n      description: \"\\n<p>The System Access Control List (SACL) for the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: discretionaryAcl\n      type: System.Security.AccessControl.RawAcl\n      description: \"\\n<p>The Discretionary Access Control List (DACL) for the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RawSecurityDescriptor.RawSecurityDescriptor(ControlFlags, SecurityIdentifier, SecurityIdentifier, RawAcl, RawAcl)\n- uid: System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)\n  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: RawSecurityDescriptor(String)\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 480\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string.</p>\\n\"\n  syntax:\n    content: public RawSecurityDescriptor(string sddlForm)\n    content.vb: Public Sub New(sddlForm As String)\n    parameters:\n    - id: sddlForm\n      type: System.String\n      description: \"\\n<p>The SDDL string from which to create the new <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RawSecurityDescriptor.RawSecurityDescriptor(String)\n- uid: System.Security.AccessControl.RawSecurityDescriptor.ControlFlags\n  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.ControlFlags\n  id: ControlFlags\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ControlFlags\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.ControlFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ControlFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 481\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets values that specify behavior of the <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override ControlFlags ControlFlags { get; }\n    content.vb: Public Overrides ReadOnly Property ControlFlags As ControlFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.ControlFlags\n      description: \"\\n<p>One or more values of the <xref href=\\\"System.Security.AccessControl.ControlFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration combined with a logical OR operation.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RawSecurityDescriptor.ControlFlags\n- uid: System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl\n  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl\n  id: DiscretionaryAcl\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: DiscretionaryAcl\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DiscretionaryAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 482\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the Discretionary Access Control List (DACL) for this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The DACL contains access rules.</p>\\n\"\n  syntax:\n    content: public RawAcl DiscretionaryAcl { get; set; }\n    content.vb: Public Property DiscretionaryAcl As RawAcl\n    parameters: []\n    return:\n      type: System.Security.AccessControl.RawAcl\n      description: \"\\n<p>The DACL for this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: RawSecurityDescriptor.DiscretionaryAcl\n- uid: System.Security.AccessControl.RawSecurityDescriptor.Group\n  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.Group\n  id: Group\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Group\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.Group\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Group\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 483\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the primary group for this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override SecurityIdentifier Group { get; set; }\n    content.vb: Public Overrides Property Group As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The primary group for this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RawSecurityDescriptor.Group\n- uid: System.Security.AccessControl.RawSecurityDescriptor.Owner\n  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.Owner\n  id: Owner\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Owner\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.Owner\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Owner\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 484\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the owner of the object associated with this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override SecurityIdentifier Owner { get; set; }\n    content.vb: Public Overrides Property Owner As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The owner of the object associated with this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RawSecurityDescriptor.Owner\n- uid: System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl\n  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl\n  id: ResourceManagerControl\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ResourceManagerControl\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ResourceManagerControl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 485\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets a byte value that represents the resource manager control bits associated with this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public byte ResourceManagerControl { get; set; }\n    content.vb: Public Property ResourceManagerControl As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte value that represents the resource manager control bits associated with this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: RawSecurityDescriptor.ResourceManagerControl\n- uid: System.Security.AccessControl.RawSecurityDescriptor.SystemAcl\n  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.SystemAcl\n  id: SystemAcl\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SystemAcl\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.SystemAcl\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SystemAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 486\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the System Access Control List (SACL) for this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The SACL contains audit rules.</p>\\n\"\n  syntax:\n    content: public RawAcl SystemAcl { get; set; }\n    content.vb: Public Property SystemAcl As RawAcl\n    parameters: []\n    return:\n      type: System.Security.AccessControl.RawAcl\n      description: \"\\n<p>The SACL for this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: RawSecurityDescriptor.SystemAcl\n- uid: System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)\n  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)\n  id: SetFlags(System.Security.AccessControl.ControlFlags)\n  parent: System.Security.AccessControl.RawSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SetFlags(ControlFlags)\n  fullName: System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 487\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor.ControlFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of this <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the specified value.</p>\\n\"\n  syntax:\n    content: public void SetFlags(ControlFlags flags)\n    content.vb: Public Sub SetFlags(flags As ControlFlags)\n    parameters:\n    - id: flags\n      type: System.Security.AccessControl.ControlFlags\n      description: \"\\n<p>One or more values of the <xref href=\\\"System.Security.AccessControl.ControlFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration combined with a logical OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RawSecurityDescriptor.SetFlags(ControlFlags)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericSecurityDescriptor\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericSecurityDescriptor\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor\n  commentId: T:System.Security.AccessControl.GenericSecurityDescriptor\n  nameWithType: GenericSecurityDescriptor\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  nameWithType: GenericSecurityDescriptor.BinaryLength\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Revision\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  nameWithType: GenericSecurityDescriptor.Revision\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericSecurityDescriptor.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericSecurityDescriptor.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: GetSddlForm(AccessControlSections)\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n    name: GetSddlForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.AccessControlSections\n    name: AccessControlSections\n    fullName: System.Security.AccessControl.AccessControlSections\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n    name: GetSddlForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.AccessControlSections\n    name: AccessControlSections\n    fullName: System.Security.AccessControl.AccessControlSections\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  nameWithType: GenericSecurityDescriptor.GetSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: IsSddlConversionSupported()\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n    name: IsSddlConversionSupported\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n    name: IsSddlConversionSupported\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  nameWithType: GenericSecurityDescriptor.IsSddlConversionSupported()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.ControlFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ControlFlags\n  fullName: System.Security.AccessControl.ControlFlags\n  commentId: T:System.Security.AccessControl.ControlFlags\n  nameWithType: ControlFlags\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.AccessControl.RawAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RawAcl\n  fullName: System.Security.AccessControl.RawAcl\n  commentId: T:System.Security.AccessControl.RawAcl\n  nameWithType: RawAcl\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: ControlFlags\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  nameWithType: GenericSecurityDescriptor.ControlFlags\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Group\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Group\n  nameWithType: GenericSecurityDescriptor.Group\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Owner\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  nameWithType: GenericSecurityDescriptor.Owner\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n"}