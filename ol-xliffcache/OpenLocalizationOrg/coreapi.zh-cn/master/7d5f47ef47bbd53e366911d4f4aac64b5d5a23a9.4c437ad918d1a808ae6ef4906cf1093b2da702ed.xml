{"nodes":[{"pos":[574,578],"content":"HMAC","needQuote":true,"nodes":[{"content":"HMAC","pos":[0,4]}]},{"pos":[2573,2579],"content":"HMAC()","needQuote":true,"nodes":[{"content":"HMAC()","pos":[0,6]}]},{"pos":[3609,3617],"content":"HashName","needQuote":true,"nodes":[{"content":"HashName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The name of the hash algorithm.&lt;/p&gt;\\n","pos":[4397,4439],"source":"\\n<p>The name of the hash algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;The current hash algorithm cannot be changed.&lt;/p&gt;\\n","pos":[4604,4660],"source":"\\n<p>The current hash algorithm cannot be changed.</p>\\n"},{"pos":[4953,4956],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The key to use in the hash algorithm.&lt;/p&gt;\\n","pos":[5722,5770],"source":"\\n<p>The key to use in the hash algorithm.</p>\\n"},{"pos":[6552,6568],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[7556,7693],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[7694,7700],"source":" </p>\\n"},{"pos":[8242,8272],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The input data.","pos":[9321,9341],"source":"\\n<p>The input data."},{"content":"&lt;/p&gt;\\n","pos":[9342,9348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the byte array from which to begin using data.","pos":[9408,9475],"source":"\\n<p>The offset into the byte array from which to begin using data."},{"content":"&lt;/p&gt;\\n","pos":[9476,9482],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the array to use as data.","pos":[9542,9595],"source":"\\n<p>The number of bytes in the array to use as data."},{"content":"&lt;/p&gt;\\n","pos":[9596,9602],"source":" </p>\\n"},{"pos":[10381,10392],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The computed hash code in a byte array.&lt;/p&gt;\\n","pos":[11242,11292],"source":"\\n<p>The computed hash code in a byte array.</p>\\n"},{"pos":[11693,11705],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[12757,12785],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[12982,12988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13184,13197],"content":"HashAlgorithm","needQuote":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[13463,13481],"content":"KeyedHashAlgorithm","needQuote":true,"nodes":[{"content":"KeyedHashAlgorithm","pos":[0,18]}]},{"pos":[13711,13722],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[13956,13964],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[14292,14311],"content":"ComputeHash(Byte[])","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[14614,14625],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[14705,14706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14754,14758],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14817,14819]},{"pos":[14850,14851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14968,14979],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[15059,15060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15108,15112],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15170,15172],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[15200,15201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15589,15622],"content":"ComputeHash(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[], Int32, Int32)","pos":[0,33]}]},{"pos":[16021,16032],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[16112,16113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16161,16165],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[16224,16226]},{"content":",","pos":[16258,16259]},{"pos":[16313,16318],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[16378,16379]},{"pos":[16433,16438],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16497,16498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16641,16652],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[16732,16733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16781,16785],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16843,16845],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[16874,16875]},{"pos":[16929,16934],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[16994,16995]},{"pos":[17049,17054],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17113,17114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17533,17552],"content":"ComputeHash(Stream)","needQuote":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[17745,17756],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[17836,17837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17890,17896],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[17959,17960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18080,18091],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[18171,18172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18225,18231],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[18294,18295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18589,18598],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[18749,18756],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[18832,18833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18860,18861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18959,18966],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[19042,19043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19070,19071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19275,19285],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19380,19388],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19457,19458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19485,19486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19556,19564],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19633,19634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19661,19662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19845,19859],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19978,19984],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20051,20052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20102,20108],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20168,20169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20252,20258],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20325,20326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20376,20382],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20442,20443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20657,20679],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20827,20833],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20900,20901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20951,20957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21018,21019]},{"pos":[21074,21080],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21140,21141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21238,21244],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21311,21312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21362,21368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21429,21430]},{"pos":[21485,21491],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21551,21552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21797,21828],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21994,22009],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22085,22086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22136,22142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22203,22204]},{"pos":[22259,22265],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22325,22326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22432,22447],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22523,22524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22574,22580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22641,22642]},{"pos":[22697,22703],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22763,22764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22994,23007],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23108,23119],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23191,23192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23219,23220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23293,23304],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23376,23377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23404,23405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23580,23589],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23682,23689],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23757,23758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23785,23786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23855,23862],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23930,23931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23958,23959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24134,24151],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[24260,24275],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24351,24352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24379,24380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24457,24472],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24548,24549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24576,24577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24722,24728],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24859,24865],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25089,25092],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[25292,25298],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[25418,25422],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[25481,25483]},{"pos":[25546,25550],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25608,25610],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[25841,25857],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[26048,26055],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26136,26137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26188,26195],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26256,26257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26376,26383],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26464,26465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26516,26523],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26584,26585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26808,26815],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27077,27107],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[27494,27502],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[27579,27580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27628,27632],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27691,27693]},{"content":",","pos":[27725,27726]},{"pos":[27780,27785],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[27845,27846]},{"pos":[27900,27905],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27964,27965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28105,28113],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[28190,28191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28239,28243],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28301,28303],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[28332,28333]},{"pos":[28387,28392],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[28452,28453]},{"pos":[28507,28512],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28571,28572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28887,28892],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29109,29120],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[29275,29284],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[29362,29363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29390,29391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29491,29500],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[29578,29579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29606,29607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29876,29888],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[30045,30055],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[30134,30135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30162,30163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30264,30274],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[30353,30354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30381,30382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30598,30620],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.HMAC\n  commentId: T:System.Security.Cryptography.HMAC\n  id: HMAC\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.HMAC.#ctor\n  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.HashFinal\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.HMAC.Initialize\n  - System.Security.Cryptography.HMAC.Key\n  langs:\n  - csharp\n  - vb\n  name: HMAC\n  fullName: System.Security.Cryptography.HMAC\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HMAC\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the abstract class from which all implementations of Hash-based Message Authentication Code (HMAC) must derive.</p>\\n\"\n  syntax:\n    content: 'public abstract class HMAC : KeyedHashAlgorithm, IDisposable'\n    content.vb: >-\n      Public MustInherit Class HMAC\n          Inherits KeyedHashAlgorithm\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: HMAC\n- uid: System.Security.Cryptography.HMAC.#ctor\n  commentId: M:System.Security.Cryptography.HMAC.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: HMAC()\n  fullName: System.Security.Cryptography.HMAC.HMAC()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 91\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.HMAC\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected HMAC()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: HMAC.HMAC()\n- uid: System.Security.Cryptography.HMAC.HashName\n  commentId: P:System.Security.Cryptography.HMAC.HashName\n  id: HashName\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: HashName\n  fullName: System.Security.Cryptography.HMAC.HashName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashName\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 92\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the name of the hash algorithm to use for hashing.</p>\\n\"\n  syntax:\n    content: public string HashName { get; set; }\n    content.vb: Public Property HashName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the hash algorithm.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The current hash algorithm cannot be changed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HMAC.HashName\n- uid: System.Security.Cryptography.HMAC.Key\n  commentId: P:System.Security.Cryptography.HMAC.Key\n  id: Key\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.HMAC.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 93\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the key to use in the hash algorithm.</p>\\n\"\n  syntax:\n    content: public override byte[] Key { get; set; }\n    content.vb: Public Overrides Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The key to use in the hash algorithm.</p>\\n\"\n  overridden: System.Security.Cryptography.KeyedHashAlgorithm.Key\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An attempt is made to change the <xref href=\\\"System.Security.Cryptography.HMAC.Key\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property after hashing has begun. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HMAC.Key\n- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 94\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Security.Cryptography.HMAC\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class when a key change is legitimate and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  overridden: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HMAC.Dispose(Boolean)\n- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HMAC.HashCore(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashCore\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 95\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, routes data written to the object into the default <xref href=\\\"System.Security.Cryptography.HMAC\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hash algorithm for computing the hash value.</p>\\n\"\n  syntax:\n    content: protected override void HashCore(byte[] rgb, int ib, int cb)\n    content.vb: Protected Overrides Sub HashCore(rgb As Byte(), ib As Integer, cb As Integer)\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: \"\\n<p>The input data. </p>\\n\"\n    - id: ib\n      type: System.Int32\n      description: \"\\n<p>The offset into the byte array from which to begin using data. </p>\\n\"\n    - id: cb\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the array to use as data. </p>\\n\"\n  overridden: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  seealso:\n  - type: System.Security.Cryptography.HashAlgorithm\n    commentId: T:System.Security.Cryptography.HashAlgorithm\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.HMAC.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  nameWithType: HMAC.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HMAC.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HMAC.HashFinal\n  commentId: M:System.Security.Cryptography.HMAC.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HMAC.HashFinal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashFinal\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 96\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</p>\\n\"\n  syntax:\n    content: protected override byte[] HashFinal()\n    content.vb: Protected Overrides Function HashFinal As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The computed hash code in a byte array.</p>\\n\"\n  overridden: System.Security.Cryptography.HashAlgorithm.HashFinal\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HMAC.HashFinal()\n- uid: System.Security.Cryptography.HMAC.Initialize\n  commentId: M:System.Security.Cryptography.HMAC.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMAC\n  langs:\n  - csharp\n  - vb\n  name: Initialize()\n  fullName: System.Security.Cryptography.HMAC.Initialize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Initialize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 97\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes an instance of the default implementation of <xref href=\\\"System.Security.Cryptography.HMAC\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void Initialize()\n    content.vb: Public Overrides Sub Initialize\n  overridden: System.Security.Cryptography.HashAlgorithm.Initialize\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HMAC.Initialize()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  commentId: T:System.Security.Cryptography.HashAlgorithm\n  nameWithType: HashAlgorithm\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n  commentId: T:System.Security.Cryptography.KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize\n  nameWithType: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())\n  name.vb: ComputeHash(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte())\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)\n  name.vb: ComputeHash(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose\n  nameWithType: HashAlgorithm.Dispose()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Key\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key\n  commentId: P:System.Security.Cryptography.KeyedHashAlgorithm.Key\n  nameWithType: KeyedHashAlgorithm.Key\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HashAlgorithm.HashCore\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HashAlgorithm.HashCore\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.HashCore(Byte(), Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HashAlgorithm.HashFinal\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HashAlgorithm.HashFinal\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.HashFinal\n  nameWithType: HashAlgorithm.HashFinal()\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HashAlgorithm.Initialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HashAlgorithm.Initialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Initialize\n  nameWithType: HashAlgorithm.Initialize()\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}