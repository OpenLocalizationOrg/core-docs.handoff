{"nodes":[{"pos":[877,889],"content":"AssemblyName","needQuote":true,"nodes":[{"content":"AssemblyName","pos":[0,12]}]},{"pos":[3393,3407],"content":"AssemblyName()","needQuote":true,"nodes":[{"content":"AssemblyName()","pos":[0,14]}]},{"pos":[4367,4387],"content":"AssemblyName(String)","needQuote":true,"nodes":[{"content":"AssemblyName(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;assemblyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5558,5612],"source":"\\n<p>\\n<em>assemblyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5613,5619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;assemblyName&lt;/em&gt; is a zero length string.","pos":[5716,5769],"source":"\\n<p>\\n<em>assemblyName</em> is a zero length string."},{"content":"&lt;/p&gt;\\n","pos":[5770,5776],"source":" </p>\\n"},{"pos":[6533,6544],"content":"ContentType","needQuote":true,"nodes":[{"content":"ContentType","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A value that indicates what type of content the assembly contains.&lt;/p&gt;\\n","pos":[7360,7437],"source":"\\n<p>A value that indicates what type of content the assembly contains.</p>\\n"},{"pos":[7756,7767],"content":"CultureName","needQuote":true,"nodes":[{"content":"CultureName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The culture name.&lt;/p&gt;\\n","pos":[8447,8475],"source":"\\n<p>The culture name.</p>\\n"},{"pos":[8776,8781],"content":"Flags","needQuote":true,"nodes":[{"content":"Flags","pos":[0,5]}]},{"content":"\\n&lt;p&gt;A value that represents the attributes of the assembly.&lt;/p&gt;\\n","pos":[9460,9526],"source":"\\n<p>A value that represents the attributes of the assembly.</p>\\n"},{"pos":[9830,9838],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A string that is the full name of the assembly, also known as the display name.&lt;/p&gt;\\n","pos":[10577,10667],"source":"\\n<p>A string that is the full name of the assembly, also known as the display name.</p>\\n"},{"pos":[10967,10971],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The simple name of the assembly.&lt;/p&gt;\\n","pos":[11713,11756],"source":"\\n<p>The simple name of the assembly.</p>\\n"},{"pos":[12098,12119],"content":"ProcessorArchitecture","needQuote":true,"nodes":[{"content":"ProcessorArchitecture","pos":[0,21]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.&lt;/p&gt;\\n","pos":[12941,13072],"source":"\\n<p>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</p>\\n"},{"pos":[13657,13664],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An object that represents the major, minor, build, and revision numbers of the assembly.&lt;/p&gt;\\n","pos":[14340,14439],"source":"\\n<p>An object that represents the major, minor, build, and revision numbers of the assembly.</p>\\n"},{"pos":[14757,14771],"content":"GetPublicKey()","needQuote":true,"nodes":[{"content":"GetPublicKey()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A byte array that contains the public key of the assembly.&lt;/p&gt;\\n","pos":[15395,15464],"source":"\\n<p>A byte array that contains the public key of the assembly.</p>\\n"},{"pos":[16147,16166],"content":"GetPublicKeyToken()","needQuote":true,"nodes":[{"content":"GetPublicKeyToken()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A byte array that contains the public key token.&lt;/p&gt;\\n","pos":[16991,17050],"source":"\\n<p>A byte array that contains the public key token.</p>\\n"},{"pos":[17409,17429],"content":"SetPublicKey(Byte[])","needQuote":true,"nodes":[{"content":"SetPublicKey(Byte[])","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A byte array containing the public key of the assembly.","pos":[18119,18179],"source":"\\n<p>A byte array containing the public key of the assembly."},{"content":"&lt;/p&gt;\\n","pos":[18180,18186],"source":" </p>\\n"},{"pos":[18720,18745],"content":"SetPublicKeyToken(Byte[])","needQuote":true,"nodes":[{"content":"SetPublicKeyToken(Byte[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A byte array containing the public key token of the assembly.","pos":[19564,19630],"source":"\\n<p>A byte array containing the public key token of the assembly."},{"content":"&lt;/p&gt;\\n","pos":[19631,19637],"source":" </p>\\n"},{"pos":[20119,20129],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The full name of the assembly, or the class name if the full name cannot be determined.&lt;/p&gt;\\n","pos":[20790,20888],"source":"\\n<p>The full name of the assembly, or the class name if the full name cannot be determined.</p>\\n"},{"pos":[21117,21134],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[21298,21304],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21477,21491],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21610,21616],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21683,21684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21734,21740],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21800,21801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21884,21890],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21957,21958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22008,22014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22074,22075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22289,22311],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22459,22465],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22532,22533],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22583,22589],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22650,22651]},{"pos":[22706,22712],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22772,22773],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22870,22876],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22943,22944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22994,23000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23061,23062]},{"pos":[23117,23123],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23183,23184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23429,23460],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23626,23641],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23717,23718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23768,23774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23835,23836]},{"pos":[23891,23897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23957,23958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24064,24079],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24155,24156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24206,24212],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24273,24274]},{"pos":[24329,24335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24395,24396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24626,24639],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24740,24751],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24823,24824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24851,24852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24925,24936],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25008,25009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25036,25037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25212,25221],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25314,25321],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25389,25390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25417,25418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25487,25494],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25562,25563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25590,25591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25766,25783],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25892,25907],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25983,25984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26011,26012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26089,26104],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26180,26181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26208,26209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26354,26360],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26491,26497],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26677,26696],"content":"AssemblyContentType","needQuote":true,"nodes":[{"content":"AssemblyContentType","pos":[0,19]}]},{"pos":[26935,26952],"content":"AssemblyNameFlags","needQuote":true,"nodes":[{"content":"AssemblyNameFlags","pos":[0,17]}]},{"pos":[27189,27210],"content":"ProcessorArchitecture","needQuote":true,"nodes":[{"content":"ProcessorArchitecture","pos":[0,21]}]},{"pos":[27423,27430],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[27541,27547],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[27667,27671],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27730,27732]},{"pos":[27795,27799],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27857,27859],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[28007,28017],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28112,28120],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28189,28190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28217,28218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28288,28296],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28365,28366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28393,28394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28547,28568],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[28769,28786],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[28961,28978],"content":"FileLoadException","needQuote":true,"nodes":[{"content":"FileLoadException","pos":[0,17]}]},{"pos":[29165,29182],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]}],"content":"items:\n- uid: System.Reflection.AssemblyName\n  commentId: T:System.Reflection.AssemblyName\n  id: AssemblyName\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblyName.#ctor\n  - System.Reflection.AssemblyName.#ctor(System.String)\n  - System.Reflection.AssemblyName.ContentType\n  - System.Reflection.AssemblyName.CultureName\n  - System.Reflection.AssemblyName.Flags\n  - System.Reflection.AssemblyName.FullName\n  - System.Reflection.AssemblyName.GetPublicKey\n  - System.Reflection.AssemblyName.GetPublicKeyToken\n  - System.Reflection.AssemblyName.Name\n  - System.Reflection.AssemblyName.ProcessorArchitecture\n  - System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\n  - System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\n  - System.Reflection.AssemblyName.ToString\n  - System.Reflection.AssemblyName.Version\n  langs:\n  - csharp\n  - vb\n  name: AssemblyName\n  fullName: System.Reflection.AssemblyName\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyName\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Describes an assembly's unique identity in full.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_AssemblyName))]\n\n      [ComVisible(true)]\n\n      public sealed class AssemblyName : _AssemblyName, ICloneable, ISerializable, IDeserializationCallback\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_AssemblyName))>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class AssemblyName\n          Implements _AssemblyName, ICloneable, ISerializable, IDeserializationCallback\n  seealso:\n  - type: System.Version\n    commentId: T:System.Version\n  - type: System.Reflection.AssemblyName.GetPublicKey\n    commentId: M:System.Reflection.AssemblyName.GetPublicKey\n  - type: System.Reflection.AssemblyName.GetPublicKeyToken\n    commentId: M:System.Reflection.AssemblyName.GetPublicKeyToken\n  - type: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\n    commentId: M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\n  - type: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\n    commentId: M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\n  - type: System.Type.FullName\n    commentId: P:System.Type.FullName\n  - type: System.Type.GetType\n    commentId: M:System.Type.GetType\n  - type: System.Type.AssemblyQualifiedName\n    commentId: P:System.Type.AssemblyQualifiedName\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AssemblyName\n- uid: System.Reflection.AssemblyName.#ctor\n  commentId: M:System.Reflection.AssemblyName.#ctor\n  id: '#ctor'\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: AssemblyName()\n  fullName: System.Reflection.AssemblyName.AssemblyName()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 58\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.AssemblyName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public AssemblyName()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.AssemblyName()\n- uid: System.Reflection.AssemblyName.#ctor(System.String)\n  commentId: M:System.Reflection.AssemblyName.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: AssemblyName(String)\n  fullName: System.Reflection.AssemblyName.AssemblyName(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 366\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.AssemblyName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified display name.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public AssemblyName(string assemblyName)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(assemblyName As String)\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: \"\\n<p>The display name of the assembly, as returned by the <xref href=\\\"System.Reflection.AssemblyName.FullName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>assemblyName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>assemblyName</em> is a zero length string. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The referenced assembly could not be found, or could not be loaded.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.AssemblyName(String)\n- uid: System.Reflection.AssemblyName.ContentType\n  commentId: P:System.Reflection.AssemblyName.ContentType\n  id: ContentType\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: ContentType\n  fullName: System.Reflection.AssemblyName.ContentType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContentType\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 146\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets or sets a value that indicates what type of content the assembly contains.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public AssemblyContentType ContentType { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Property ContentType As AssemblyContentType\n    parameters: []\n    return:\n      type: System.Reflection.AssemblyContentType\n      description: \"\\n<p>A value that indicates what type of content the assembly contains.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.ContentType\n- uid: System.Reflection.AssemblyName.CultureName\n  commentId: P:System.Reflection.AssemblyName.CultureName\n  id: CultureName\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: CultureName\n  fullName: System.Reflection.AssemblyName.CultureName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CultureName\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 95\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets or sets the name of the culture associated with the assembly.</p>\\n\"\n  syntax:\n    content: public string CultureName { get; set; }\n    content.vb: Public Property CultureName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The culture name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.CultureName\n- uid: System.Reflection.AssemblyName.Flags\n  commentId: P:System.Reflection.AssemblyName.Flags\n  id: Flags\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: Flags\n  fullName: System.Reflection.AssemblyName.Flags\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Flags\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 254\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets or sets the attributes of the assembly.</p>\\n\"\n  syntax:\n    content: public AssemblyNameFlags Flags { get; set; }\n    content.vb: Public Property Flags As AssemblyNameFlags\n    parameters: []\n    return:\n      type: System.Reflection.AssemblyNameFlags\n      description: \"\\n<p>A value that represents the attributes of the assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.Flags\n- uid: System.Reflection.AssemblyName.FullName\n  commentId: P:System.Reflection.AssemblyName.FullName\n  id: FullName\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: FullName\n  fullName: System.Reflection.AssemblyName.FullName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FullName\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 281\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the full name of the assembly, also known as the display name.</p>\\n\"\n  syntax:\n    content: >-\n      public string FullName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property FullName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string that is the full name of the assembly, also known as the display name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblyName.FullName\n- uid: System.Reflection.AssemblyName.Name\n  commentId: P:System.Reflection.AssemblyName.Name\n  id: Name\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Reflection.AssemblyName.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 68\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</p>\\n\"\n  syntax:\n    content: public string Name { get; set; }\n    content.vb: Public Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The simple name of the assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.Name\n- uid: System.Reflection.AssemblyName.ProcessorArchitecture\n  commentId: P:System.Reflection.AssemblyName.ProcessorArchitecture\n  id: ProcessorArchitecture\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: ProcessorArchitecture\n  fullName: System.Reflection.AssemblyName.ProcessorArchitecture\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ProcessorArchitecture\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 129\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</p>\\n\"\n  syntax:\n    content: public ProcessorArchitecture ProcessorArchitecture { get; set; }\n    content.vb: Public Property ProcessorArchitecture As ProcessorArchitecture\n    parameters: []\n    return:\n      type: System.Reflection.ProcessorArchitecture\n      description: \"\\n<p>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</p>\\n\"\n  seealso:\n  - type: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n    commentId: M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.ProcessorArchitecture\n- uid: System.Reflection.AssemblyName.Version\n  commentId: P:System.Reflection.AssemblyName.Version\n  id: Version\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: Version\n  fullName: System.Reflection.AssemblyName.Version\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Version\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 74\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets or sets the major, minor, build, and revision numbers of the assembly.</p>\\n\"\n  syntax:\n    content: public Version Version { get; set; }\n    content.vb: Public Property Version As Version\n    parameters: []\n    return:\n      type: System.Version\n      description: \"\\n<p>An object that represents the major, minor, build, and revision numbers of the assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.Version\n- uid: System.Reflection.AssemblyName.GetPublicKey\n  commentId: M:System.Reflection.AssemblyName.GetPublicKey\n  id: GetPublicKey\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: GetPublicKey()\n  fullName: System.Reflection.AssemblyName.GetPublicKey()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPublicKey\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 217\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the public key of the assembly.</p>\\n\"\n  syntax:\n    content: public byte[] GetPublicKey()\n    content.vb: Public Function GetPublicKey As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains the public key of the assembly.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>A public key was provided (for example, by using the <xref href=\\\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method), but no public key token was provided. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.GetPublicKey()\n- uid: System.Reflection.AssemblyName.GetPublicKeyToken\n  commentId: M:System.Reflection.AssemblyName.GetPublicKeyToken\n  id: GetPublicKeyToken\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: GetPublicKeyToken()\n  fullName: System.Reflection.AssemblyName.GetPublicKeyToken()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPublicKeyToken\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 234\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public byte[] GetPublicKeyToken()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function GetPublicKeyToken As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains the public key token.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyName.GetPublicKeyToken()\n- uid: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\n  commentId: M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\n  id: SetPublicKey(System.Byte[])\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: SetPublicKey(Byte[])\n  fullName: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetPublicKey\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 222\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Sets the public key identifying the assembly.</p>\\n\"\n  syntax:\n    content: public void SetPublicKey(byte[] publicKey)\n    content.vb: Public Sub SetPublicKey(publicKey As Byte())\n    parameters:\n    - id: publicKey\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the public key of the assembly. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.AssemblyName.SetPublicKey(System.Byte())\n  name.vb: SetPublicKey(Byte())\n  nameWithType: AssemblyName.SetPublicKey(Byte[])\n  nameWithType.vb: AssemblyName.SetPublicKey(Byte())\n- uid: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\n  commentId: M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\n  id: SetPublicKeyToken(System.Byte[])\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: SetPublicKeyToken(Byte[])\n  fullName: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetPublicKeyToken\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 242\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</p>\\n\"\n  syntax:\n    content: public void SetPublicKeyToken(byte[] publicKeyToken)\n    content.vb: Public Sub SetPublicKeyToken(publicKeyToken As Byte())\n    parameters:\n    - id: publicKeyToken\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the public key token of the assembly. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte())\n  name.vb: SetPublicKeyToken(Byte())\n  nameWithType: AssemblyName.SetPublicKeyToken(Byte[])\n  nameWithType.vb: AssemblyName.SetPublicKeyToken(Byte())\n- uid: System.Reflection.AssemblyName.ToString\n  commentId: M:System.Reflection.AssemblyName.ToString\n  id: ToString\n  parent: System.Reflection.AssemblyName\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.AssemblyName.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/AssemblyName.cs\n    startLine: 290\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the full name of the assembly, also known as the display name.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The full name of the assembly, or the class name if the full name cannot be determined.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AssemblyName.ToString()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Reflection.AssemblyContentType\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyContentType\n  fullName: System.Reflection.AssemblyContentType\n  nameWithType: AssemblyContentType\n  commentId: T:System.Reflection.AssemblyContentType\n- uid: System.Reflection.AssemblyNameFlags\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyNameFlags\n  fullName: System.Reflection.AssemblyNameFlags\n  nameWithType: AssemblyNameFlags\n  commentId: T:System.Reflection.AssemblyNameFlags\n- uid: System.Reflection.ProcessorArchitecture\n  parent: System.Reflection\n  isExternal: false\n  name: ProcessorArchitecture\n  fullName: System.Reflection.ProcessorArchitecture\n  nameWithType: ProcessorArchitecture\n  commentId: T:System.Reflection.ProcessorArchitecture\n- uid: System.Version\n  parent: System\n  isExternal: false\n  name: Version\n  fullName: System.Version\n  nameWithType: Version\n  commentId: T:System.Version\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.IO.FileLoadException\n  isExternal: false\n  name: FileLoadException\n  fullName: System.IO.FileLoadException\n  nameWithType: FileLoadException\n  commentId: T:System.IO.FileLoadException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n"}