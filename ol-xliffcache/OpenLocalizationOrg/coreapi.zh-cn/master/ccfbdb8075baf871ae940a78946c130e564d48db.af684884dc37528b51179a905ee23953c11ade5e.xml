{"nodes":[{"pos":[2153,2168],"content":"ClaimsPrincipal","needQuote":true,"nodes":[{"content":"ClaimsPrincipal","pos":[0,15]}]},{"pos":[4078,4095],"content":"ClaimsPrincipal()","needQuote":true,"nodes":[{"content":"ClaimsPrincipal()","pos":[0,17]}]},{"pos":[5320,5364],"content":"ClaimsPrincipal(IEnumerable<ClaimsIdentity>)","needQuote":true,"nodes":[{"content":"ClaimsPrincipal(IEnumerable&lt;ClaimsIdentity&gt;)","pos":[0,44],"source":"ClaimsPrincipal(IEnumerable<ClaimsIdentity>)"}]},{"content":"\\n&lt;p&gt;The identities from which to initialize the new claims principal.&lt;/p&gt;\\n","pos":[6380,6456],"source":"\\n<p>The identities from which to initialize the new claims principal.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identities&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6575,6633],"source":"\\n<p>\\n<em>identities</em> is <strong>null</strong>.</p>\\n"},{"pos":[7346,7375],"content":"ClaimsPrincipal(BinaryReader)","needQuote":true,"nodes":[{"content":"ClaimsPrincipal(BinaryReader)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[8059,8070],"source":"\\n<p></p>\\n"},{"pos":[8513,8539],"content":"ClaimsPrincipal(IIdentity)","needQuote":true,"nodes":[{"content":"ClaimsPrincipal(IIdentity)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The identity from which to initialize the new claims principal.&lt;/p&gt;\\n","pos":[9416,9490],"source":"\\n<p>The identity from which to initialize the new claims principal.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9609,9665],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n"},{"pos":[10108,10135],"content":"ClaimsPrincipal(IPrincipal)","needQuote":true,"nodes":[{"content":"ClaimsPrincipal(IPrincipal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The principal from which to initialize the new claims principal.&lt;/p&gt;\\n","pos":[11020,11095],"source":"\\n<p>The principal from which to initialize the new claims principal.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;principal&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11214,11271],"source":"\\n<p>\\n<em>principal</em> is <strong>null</strong>.</p>\\n"},{"pos":[11602,11608],"content":"Claims","needQuote":true,"nodes":[{"content":"Claims","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The claims associated with this principal.&lt;/p&gt;\\n","pos":[12459,12512],"source":"\\n<p>The claims associated with this principal.</p>\\n"},{"pos":[12922,12945],"content":"ClaimsPrincipalSelector","needQuote":true,"nodes":[{"content":"ClaimsPrincipalSelector","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The delegate.","pos":[13987,14005],"source":"\\n<p>The delegate."},{"content":"The default is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14006,14049],"source":" The default is <strong>null</strong>.</p>\\n"},{"pos":[14667,14674],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The current claims principal.&lt;/p&gt;\\n","pos":[15396,15436],"source":"\\n<p>The current claims principal.</p>\\n"},{"pos":[16005,16028],"content":"CustomSerializationData","needQuote":true,"nodes":[{"content":"CustomSerializationData","pos":[0,23]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[16749,16760],"source":"\\n<p></p>\\n"},{"pos":[17154,17164],"content":"Identities","needQuote":true,"nodes":[{"content":"Identities","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The collection of claims identities.&lt;/p&gt;\\n","pos":[18035,18082],"source":"\\n<p>The collection of claims identities.</p>\\n"},{"pos":[18451,18459],"content":"Identity","needQuote":true,"nodes":[{"content":"Identity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The primary claims identity associated with this claims principal.&lt;/p&gt;\\n","pos":[19213,19290],"source":"\\n<p>The primary claims identity associated with this claims principal.</p>\\n"},{"pos":[19930,19953],"content":"PrimaryIdentitySelector","needQuote":true,"nodes":[{"content":"PrimaryIdentitySelector","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The delegate.","pos":[21131,21149],"source":"\\n<p>The delegate."},{"content":"The default is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21150,21193],"source":" The default is <strong>null</strong>.</p>\\n"},{"pos":[22068,22110],"content":"AddIdentities(IEnumerable<ClaimsIdentity>)","needQuote":true,"nodes":[{"content":"AddIdentities(IEnumerable&lt;ClaimsIdentity&gt;)","pos":[0,42],"source":"AddIdentities(IEnumerable<ClaimsIdentity>)"}]},{"content":"\\n&lt;p&gt;The claims identities to add.&lt;/p&gt;\\n","pos":[23115,23155],"source":"\\n<p>The claims identities to add.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identities&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23274,23332],"source":"\\n<p>\\n<em>identities</em> is <strong>null</strong>.</p>\\n"},{"pos":[24386,24413],"content":"AddIdentity(ClaimsIdentity)","needQuote":true,"nodes":[{"content":"AddIdentity(ClaimsIdentity)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The claims identity to add.&lt;/p&gt;\\n","pos":[25293,25331],"source":"\\n<p>The claims identity to add.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25450,25506],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n"},{"pos":[26122,26129],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[27400,27434],"content":"CreateClaimsIdentity(BinaryReader)","needQuote":true,"nodes":[{"content":"CreateClaimsIdentity(BinaryReader)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The binary reader.&lt;/p&gt;\\n","pos":[28249,28278],"source":"\\n<p>The binary reader.</p>\\n"},{"content":"\\n&lt;p&gt;The created claims identity.&lt;/p&gt;\\n","pos":[28362,28401],"source":"\\n<p>The created claims identity.</p>\\n"},{"pos":[28920,28945],"content":"FindAll(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindAll(Predicate&lt;Claim&gt;)","pos":[0,25],"source":"FindAll(Predicate<Claim>)"}]},{"content":"\\n&lt;p&gt;The function that performs the matching logic.&lt;/p&gt;\\n","pos":[29812,29869],"source":"\\n<p>The function that performs the matching logic.</p>\\n"},{"content":"\\n&lt;p&gt;The matching claims.&lt;/p&gt;\\n","pos":[29984,30015],"source":"\\n<p>The matching claims.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30134,30187],"source":"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[30809,30824],"content":"FindAll(String)","needQuote":true,"nodes":[{"content":"FindAll(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The claim type against which to match claims.&lt;/p&gt;\\n","pos":[31590,31646],"source":"\\n<p>The claim type against which to match claims.</p>\\n"},{"content":"\\n&lt;p&gt;The matching claims.&lt;/p&gt;\\n","pos":[31761,31792],"source":"\\n<p>The matching claims.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31911,31963],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[32463,32490],"content":"FindFirst(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindFirst(Predicate&lt;Claim&gt;)","pos":[0,27],"source":"FindFirst(Predicate<Claim>)"}]},{"content":"\\n&lt;p&gt;The function that performs the matching logic.&lt;/p&gt;\\n","pos":[33333,33390],"source":"\\n<p>The function that performs the matching logic.</p>\\n"},{"content":"\\n&lt;p&gt;The first matching claim or &lt;strong&gt;null&lt;/strong&gt; if no match is found.&lt;/p&gt;\\n","pos":[33465,33547],"source":"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33666,33719],"source":"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[34355,34372],"content":"FindFirst(String)","needQuote":true,"nodes":[{"content":"FindFirst(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The claim type to match.&lt;/p&gt;\\n","pos":[35110,35145],"source":"\\n<p>The claim type to match.</p>\\n"},{"content":"\\n&lt;p&gt;The first matching claim or &lt;strong&gt;null&lt;/strong&gt; if no match is found.&lt;/p&gt;\\n","pos":[35220,35302],"source":"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35421,35473],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[35972,35998],"content":"HasClaim(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"HasClaim(Predicate&lt;Claim&gt;)","pos":[0,26],"source":"HasClaim(Predicate<Claim>)"}]},{"content":"\\n&lt;p&gt;The function that performs the matching logic.&lt;/p&gt;\\n","pos":[36915,36972],"source":"\\n<p>The function that performs the matching logic.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a matching claim exists; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37033,37130],"source":"\\n<p>\\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37249,37302],"source":"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[37973,37997],"content":"HasClaim(String, String)","needQuote":true,"nodes":[{"content":"HasClaim(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The type of the claim to match.&lt;/p&gt;\\n","pos":[38865,38907],"source":"\\n<p>The type of the claim to match.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the claim to match.&lt;/p&gt;\\n","pos":[38971,39014],"source":"\\n<p>The value of the claim to match.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a matching claim exists; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39075,39172],"source":"\\n<p>\\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39291,39407],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[39814,39830],"content":"IsInRole(String)","needQuote":true,"nodes":[{"content":"IsInRole(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The role for which to check.&lt;/p&gt;\\n","pos":[40628,40667],"source":"\\n<p>The role for which to check.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if claims principal is in the specified role; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40728,40843],"source":"\\n<p>\\n<strong>true</strong> if claims principal is in the specified role; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[41345,41366],"content":"WriteTo(BinaryWriter)","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[42061,42072],"source":"\\n<p></p>\\n"},{"pos":[42542,42571],"content":"WriteTo(BinaryWriter, Byte[])","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter, Byte[])","pos":[0,29]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[43324,43335],"source":"\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[43402,43413],"source":"\\n<p></p>\\n"},{"pos":[43846,43868],"content":"System.Security.Claims","needQuote":true,"nodes":[{"content":"System.Security.Claims","pos":[0,22]}]},{"pos":[44047,44053],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44240,44250],"content":"IPrincipal","needQuote":true,"nodes":[{"content":"IPrincipal","pos":[0,10]}]},{"pos":[44460,44470],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[44565,44573],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[44642,44643],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44670,44671],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44741,44749],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[44818,44819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44846,44847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45030,45044],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[45163,45169],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45236,45237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45287,45293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45353,45354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45437,45443],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45510,45511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45561,45567],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45627,45628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45842,45864],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[46012,46018],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[46085,46086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46136,46142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46203,46204]},{"pos":[46259,46265],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46325,46326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46423,46429],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[46496,46497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46547,46553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46614,46615]},{"pos":[46670,46676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46736,46737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46982,47013],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[47179,47194],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47270,47271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47321,47327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47388,47389]},{"pos":[47444,47450],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47510,47511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47617,47632],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47708,47709],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47759,47765],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47826,47827]},{"pos":[47882,47888],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47948,47949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48179,48192],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[48293,48304],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[48376,48377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48404,48405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48478,48489],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[48561,48562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48589,48590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48765,48774],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[48867,48874],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[48942,48943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48970,48971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49040,49047],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[49115,49116],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49143,49144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49319,49336],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[49445,49460],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[49536,49537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49564,49565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49642,49657],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[49733,49734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49761,49762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49907,49913],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[50039,50064],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[50371,50398],"content":"IEnumerable<ClaimsIdentity>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;ClaimsIdentity&gt;","pos":[0,27],"source":"IEnumerable<ClaimsIdentity>"}]},{"pos":[50702,50713],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[50798,50799],"content":"<","needQuote":true,"nodes":[]},{"pos":[50873,50887],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[51043,51054],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[51140,51143]},{"pos":[51224,51238],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[51301,51302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51582,51596],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[51815,51826],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[51890,51891],"content":"<","needQuote":true,"nodes":[]},{"pos":[51918,51919],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[52039,52050],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[52115,52118]},{"pos":[52152,52153],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[52180,52181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52384,52410],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[52613,52625],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[52773,52782],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[52963,52972],"content":"IIdentity","needQuote":true,"nodes":[{"content":"IIdentity","pos":[0,9]}]},{"pos":[53274,53292],"content":"IEnumerable<Claim>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Claim&gt;","pos":[0,18],"source":"IEnumerable<Claim>"}]},{"pos":[53569,53580],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[53665,53666],"content":"<","needQuote":true,"nodes":[]},{"pos":[53731,53736],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[53883,53894],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[53980,53983]},{"pos":[54055,54060],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[54114,54115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54404,54425],"content":"Func<ClaimsPrincipal>","needQuote":true,"nodes":[{"content":"Func&lt;ClaimsPrincipal&gt;","pos":[0,21],"source":"Func<ClaimsPrincipal>"}]},{"pos":[54644,54648],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[54706,54707],"content":"<","needQuote":true,"nodes":[]},{"pos":[54782,54797],"content":"ClaimsPrincipal","needQuote":true,"nodes":[{"content":"ClaimsPrincipal","pos":[0,15]}]},{"pos":[54927,54931],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[54990,54993]},{"pos":[55075,55090],"content":"ClaimsPrincipal","needQuote":true,"nodes":[{"content":"ClaimsPrincipal","pos":[0,15]}]},{"pos":[55154,55155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55370,55383],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[55532,55536],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[55573,55574],"content":"<","needQuote":true,"nodes":[]},{"pos":[55601,55608],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[55707,55711],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[55749,55752]},{"pos":[55786,55793],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[55826,55827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56046,56061],"content":"ClaimsPrincipal","needQuote":true,"nodes":[{"content":"ClaimsPrincipal","pos":[0,15]}]},{"pos":[56228,56234],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[56354,56358],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[56417,56419]},{"pos":[56482,56486],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[56544,56546],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[56740,56748],"content":"Identity","needQuote":true,"nodes":[{"content":"Identity","pos":[0,8]}]},{"pos":[57093,57142],"content":"Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>","needQuote":true,"nodes":[{"content":"Func&lt;IEnumerable&lt;ClaimsIdentity&gt;, ClaimsIdentity&gt;","pos":[0,49],"source":"Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>"}]},{"pos":[57551,57555],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[57613,57614],"content":"<","needQuote":true,"nodes":[]},{"pos":[57691,57702],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[57787,57788],"content":"<","needQuote":true,"nodes":[]},{"pos":[57862,57876],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"content":",","pos":[57972,57973]},{"pos":[58052,58066],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[58195,58199],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[58258,58261]},{"pos":[58345,58356],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[58442,58445]},{"pos":[58526,58540],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[58603,58604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[58632,58633]},{"pos":[58712,58726],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[58789,58790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59141,59157],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[59315,59319],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[59356,59357],"content":"<","needQuote":true,"nodes":[]},{"pos":[59384,59385],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[59413,59414]},{"pos":[59446,59453],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[59552,59556],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[59594,59597]},{"pos":[59631,59632],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[59660,59661]},{"pos":[59693,59700],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[59733,59734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59958,59972],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[60219,60235],"content":"Predicate<Claim>","needQuote":true,"nodes":[{"content":"Predicate&lt;Claim&gt;","pos":[0,16],"source":"Predicate<Claim>"}]},{"pos":[60444,60453],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[60516,60517],"content":"<","needQuote":true,"nodes":[]},{"pos":[60582,60587],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[60712,60721],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[60785,60788]},{"pos":[60860,60865],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[60919,60920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61125,61137],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[61288,61297],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[61339,61340],"content":"<","needQuote":true,"nodes":[]},{"pos":[61367,61368],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[61466,61475],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[61518,61521]},{"pos":[61555,61556],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[61583,61584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61765,61771],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61947,61952],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[62127,62134],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[62358,62374],"content":"IsInRole(String)","needQuote":true,"nodes":[{"content":"IsInRole(String)","pos":[0,16]}]},{"pos":[62543,62551],"content":"IsInRole","needQuote":true,"nodes":[{"content":"IsInRole","pos":[0,8]}]},{"pos":[62643,62644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62694,62700],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[62760,62761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62869,62877],"content":"IsInRole","needQuote":true,"nodes":[{"content":"IsInRole","pos":[0,8]}]},{"pos":[62969,62970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63020,63026],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[63086,63087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63302,63314],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[63481,63502],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Claims.ClaimsPrincipal\n  commentId: T:System.Security.Claims.ClaimsPrincipal\n  id: ClaimsPrincipal\n  parent: System.Security.Claims\n  children:\n  - System.Security.Claims.ClaimsPrincipal.#ctor\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)\n  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)\n  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  - System.Security.Claims.ClaimsPrincipal.Claims\n  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  - System.Security.Claims.ClaimsPrincipal.Clone\n  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsPrincipal.Current\n  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsPrincipal.Identities\n  - System.Security.Claims.ClaimsPrincipal.Identity\n  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipal\n  fullName: System.Security.Claims.ClaimsPrincipal\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClaimsPrincipal\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 80\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>An <xref href=\\\"System.Security.Principal.IPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation that supports multiple claims-based identities.</p>\\n\"\n  syntax:\n    content: 'public class ClaimsPrincipal : IPrincipal'\n    content.vb: >-\n      Public Class ClaimsPrincipal\n          Implements IPrincipal\n  seealso:\n  - type: System.Security.Claims.Claim\n    commentId: T:System.Security.Claims.Claim\n  - type: System.Security.Claims.ClaimsIdentity\n    commentId: T:System.Security.Claims.ClaimsIdentity\n  - type: System.Security.Claims.ClaimsAuthenticationManager\n    commentId: T:System.Security.Claims.ClaimsAuthenticationManager\n  - type: System.Security.Claims.ClaimsAuthorizationManager\n    commentId: T:System.Security.Claims.ClaimsAuthorizationManager\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Principal.IPrincipal\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ClaimsPrincipal\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor\n  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor\n  id: '#ctor'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipal()\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ClaimsPrincipal()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal()\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 83\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified claims identities.</p>\\n\"\n  syntax:\n    content: public ClaimsPrincipal(IEnumerable<ClaimsIdentity> identities)\n    content.vb: Public Sub New(identities As IEnumerable(Of ClaimsIdentity))\n    parameters:\n    - id: identities\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n      description: \"\\n<p>The identities from which to initialize the new claims principal.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identities</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))\n  name.vb: ClaimsPrincipal(IEnumerable(Of ClaimsIdentity))\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)\n  nameWithType.vb: ClaimsPrincipal.ClaimsPrincipal(IEnumerable(Of ClaimsIdentity))\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)\n  id: '#ctor(System.IO.BinaryReader)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipal(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.IO.BinaryReader)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: public ClaimsPrincipal(BinaryReader reader)\n    content.vb: Public Sub New(reader As BinaryReader)\n    parameters:\n    - id: reader\n      type: System.IO.BinaryReader\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)\n  id: '#ctor(System.Security.Principal.IIdentity)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipal(IIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Security.Principal.IIdentity)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified identity.</p>\\n\"\n  syntax:\n    content: public ClaimsPrincipal(IIdentity identity)\n    content.vb: Public Sub New(identity As IIdentity)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IIdentity\n      description: \"\\n<p>The identity from which to initialize the new claims principal.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)\n- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)\n  id: '#ctor(System.Security.Principal.IPrincipal)'\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipal(IPrincipal)\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Security.Principal.IPrincipal)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified principal.</p>\\n\"\n  syntax:\n    content: public ClaimsPrincipal(IPrincipal principal)\n    content.vb: Public Sub New(principal As IPrincipal)\n    parameters:\n    - id: principal\n      type: System.Security.Principal.IPrincipal\n      description: \"\\n<p>The principal from which to initialize the new claims principal.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>principal</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)\n- uid: System.Security.Claims.ClaimsPrincipal.Claims\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Claims\n  id: Claims\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: Claims\n  fullName: System.Security.Claims.ClaimsPrincipal.Claims\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Claims\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Claim> Claims { get; }\n    content.vb: Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims associated with this principal.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsPrincipal.Claims\n- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  id: ClaimsPrincipalSelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: ClaimsPrincipalSelector\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClaimsPrincipalSelector\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets and sets the delegate used to select the claims principal returned by the <xref href=\\\"System.Security.Claims.ClaimsPrincipal.Current\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: >-\n      public static Func<ClaimsPrincipal> ClaimsPrincipalSelector\n\n      {\n          get;\n          [SecurityCritical]\n          set;\n      }\n    content.vb: Public Shared Property ClaimsPrincipalSelector As Func(Of ClaimsPrincipal)\n    parameters: []\n    return:\n      type: System.Func{System.Security.Claims.ClaimsPrincipal}\n      description: \"\\n<p>The delegate. The default is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsPrincipal.Current\n    commentId: P:System.Security.Claims.ClaimsPrincipal.Current\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector\n- uid: System.Security.Claims.ClaimsPrincipal.Current\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Current\n  id: Current\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Security.Claims.ClaimsPrincipal.Current\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Current\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the current claims principal.</p>\\n\"\n  syntax:\n    content: public static ClaimsPrincipal Current { get; }\n    content.vb: Public Shared ReadOnly Property Current As ClaimsPrincipal\n    parameters: []\n    return:\n      type: System.Security.Claims.ClaimsPrincipal\n      description: \"\\n<p>The current claims principal.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n    commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: ClaimsPrincipal.Current\n- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  commentId: P:System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  id: CustomSerializationData\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: CustomSerializationData\n  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CustomSerializationData\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 90\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: protected virtual byte[] CustomSerializationData { get; }\n    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  - get\n  modifiers.vb:\n  - Protected\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsPrincipal.CustomSerializationData\n- uid: System.Security.Claims.ClaimsPrincipal.Identities\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Identities\n  id: Identities\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: Identities\n  fullName: System.Security.Claims.ClaimsPrincipal.Identities\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Identities\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 91\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets a collection that contains all of the claims identities associated with this claims principal.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<ClaimsIdentity> Identities { get; }\n    content.vb: Public Overridable ReadOnly Property Identities As IEnumerable(Of ClaimsIdentity)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n      description: \"\\n<p>The collection of claims identities.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsPrincipal.Identities\n- uid: System.Security.Claims.ClaimsPrincipal.Identity\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Identity\n  id: Identity\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: Identity\n  fullName: System.Security.Claims.ClaimsPrincipal.Identity\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Identity\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 92\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the primary claims identity associated with this claims principal.</p>\\n\"\n  syntax:\n    content: public virtual IIdentity Identity { get; }\n    content.vb: Public Overridable ReadOnly Property Identity As IIdentity\n    parameters: []\n    return:\n      type: System.Security.Principal.IIdentity\n      description: \"\\n<p>The primary claims identity associated with this claims principal.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n    commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  implements:\n  - System.Security.Principal.IPrincipal.Identity\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsPrincipal.Identity\n- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  id: PrimaryIdentitySelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: PrimaryIdentitySelector\n  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrimaryIdentitySelector\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 93\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets and sets the delegate used to select the claims identity returned by the <xref href=\\\"System.Security.Claims.ClaimsPrincipal.Identity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: >-\n      public static Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity> PrimaryIdentitySelector\n\n      {\n          get;\n          [SecurityCritical]\n          set;\n      }\n    content.vb: Public Shared Property PrimaryIdentitySelector As Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)\n    parameters: []\n    return:\n      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}\n      description: \"\\n<p>The delegate. The default is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsPrincipal.Identity\n    commentId: P:System.Security.Claims.ClaimsPrincipal.Identity\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: AddIdentities(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddIdentities\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 94\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Adds the specified claims identities to this claims principal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual void AddIdentities(IEnumerable<ClaimsIdentity> identities)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Sub AddIdentities(identities As IEnumerable(Of ClaimsIdentity))\n    parameters:\n    - id: identities\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n      description: \"\\n<p>The claims identities to add.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identities</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))\n  name.vb: AddIdentities(IEnumerable(Of ClaimsIdentity))\n  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)\n  nameWithType.vb: ClaimsPrincipal.AddIdentities(IEnumerable(Of ClaimsIdentity))\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  id: AddIdentity(System.Security.Claims.ClaimsIdentity)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: AddIdentity(ClaimsIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddIdentity\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 96\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Adds the specified claims identity to this claims principal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual void AddIdentity(ClaimsIdentity identity)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Sub AddIdentity(identity As ClaimsIdentity)\n    parameters:\n    - id: identity\n      type: System.Security.Claims.ClaimsIdentity\n      description: \"\\n<p>The claims identity to add.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)\n- uid: System.Security.Claims.ClaimsPrincipal.Clone\n  commentId: M:System.Security.Claims.ClaimsPrincipal.Clone\n  id: Clone\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Security.Claims.ClaimsPrincipal.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 98\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Returns a copy of this instance.</p>\\n\"\n  syntax:\n    content: public virtual ClaimsPrincipal Clone()\n    content.vb: Public Overridable Function Clone As ClaimsPrincipal\n    return:\n      type: System.Security.Claims.ClaimsPrincipal\n      description: \"\\n<p>A new copy of the <xref href=\\\"System.Security.Claims.ClaimsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.Clone()\n- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  id: CreateClaimsIdentity(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: CreateClaimsIdentity(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateClaimsIdentity\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 99\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Creates a new claims identity.</p>\\n\"\n  syntax:\n    content: protected virtual ClaimsIdentity CreateClaimsIdentity(BinaryReader reader)\n    content.vb: Protected Overridable Function CreateClaimsIdentity(reader As BinaryReader) As ClaimsIdentity\n    parameters:\n    - id: reader\n      type: System.IO.BinaryReader\n      description: \"\\n<p>The binary reader.</p>\\n\"\n    return:\n      type: System.Security.Claims.ClaimsIdentity\n      description: \"\\n<p>The created claims identity.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  id: FindAll(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: FindAll(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindAll\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 100\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves all of the claims that are matched by the specified predicate.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Claim> FindAll(Predicate<Claim> match)\n    content.vb: Public Overridable Function FindAll(match As Predicate(Of Claim)) As IEnumerable(Of Claim)\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: \"\\n<p>The function that performs the matching logic.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The matching claims.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindAll(Predicate(Of Claim))\n  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)\n  nameWithType.vb: ClaimsPrincipal.FindAll(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  id: FindAll(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: FindAll(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindAll\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 101\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves all or the claims that have the specified claim type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Claim> FindAll(string type)\n    content.vb: Public Overridable Function FindAll(type As String) As IEnumerable(Of Claim)\n    parameters:\n    - id: type\n      type: System.String\n      description: \"\\n<p>The claim type against which to match claims.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The matching claims.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.FindAll(String)\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  id: FindFirst(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: FindFirst(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindFirst\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 102\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves the first claim that is matched by the specified predicate.</p>\\n\"\n  syntax:\n    content: public virtual Claim FindFirst(Predicate<Claim> match)\n    content.vb: Public Overridable Function FindFirst(match As Predicate(Of Claim)) As Claim\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: \"\\n<p>The function that performs the matching logic.</p>\\n\"\n    return:\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindFirst(Predicate(Of Claim))\n  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)\n  nameWithType.vb: ClaimsPrincipal.FindFirst(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  id: FindFirst(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: FindFirst(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindFirst\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 103\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves the first claim with the specified claim type.</p>\\n\"\n  syntax:\n    content: public virtual Claim FindFirst(string type)\n    content.vb: Public Overridable Function FindFirst(type As String) As Claim\n    parameters:\n    - id: type\n      type: System.String\n      description: \"\\n<p>The claim type to match.</p>\\n\"\n    return:\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.FindFirst(String)\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  id: HasClaim(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: HasClaim(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 104\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.</p>\\n\"\n  syntax:\n    content: public virtual bool HasClaim(Predicate<Claim> match)\n    content.vb: Public Overridable Function HasClaim(match As Predicate(Of Claim)) As Boolean\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: \"\\n<p>The function that performs the matching logic.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: HasClaim(Predicate(Of Claim))\n  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)\n  nameWithType.vb: ClaimsPrincipal.HasClaim(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  id: HasClaim(System.String,System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: HasClaim(String, String)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 105\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.</p>\\n\"\n  syntax:\n    content: public virtual bool HasClaim(string type, string value)\n    content.vb: Public Overridable Function HasClaim(type As String, value As String) As Boolean\n    parameters:\n    - id: type\n      type: System.String\n      description: \"\\n<p>The type of the claim to match.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the claim to match.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.HasClaim(String, String)\n- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  id: IsInRole(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: IsInRole(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInRole\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 106\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.</p>\\n\"\n  syntax:\n    content: public virtual bool IsInRole(string role)\n    content.vb: Public Overridable Function IsInRole(role As String) As Boolean\n    parameters:\n    - id: role\n      type: System.String\n      description: \"\\n<p>The role for which to check.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if claims principal is in the specified role; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Security.Principal.IPrincipal.IsInRole(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.IsInRole(String)\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  id: WriteTo(System.IO.BinaryWriter)\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(BinaryWriter)\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 107\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: public virtual void WriteTo(BinaryWriter writer)\n    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)\n    parameters:\n    - id: writer\n      type: System.IO.BinaryWriter\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  id: WriteTo(System.IO.BinaryWriter,System.Byte[])\n  parent: System.Security.Claims.ClaimsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(BinaryWriter, Byte[])\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 108\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)\n    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())\n    parameters:\n    - id: writer\n      type: System.IO.BinaryWriter\n      description: \"\\n<p></p>\\n\"\n    - id: userData\n      type: System.Byte[]\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte())\n  name.vb: WriteTo(BinaryWriter, Byte())\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter, Byte[])\n  nameWithType.vb: ClaimsPrincipal.WriteTo(BinaryWriter, Byte())\nreferences:\n- uid: System.Security.Claims\n  isExternal: false\n  name: System.Security.Claims\n  fullName: System.Security.Claims\n  commentId: N:System.Security.Claims\n  nameWithType: System.Security.Claims\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Principal.IPrincipal\n  parent: System.Security.Principal\n  isExternal: false\n  name: IPrincipal\n  fullName: System.Security.Principal.IPrincipal\n  commentId: T:System.Security.Principal.IPrincipal\n  nameWithType: IPrincipal\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<ClaimsIdentity>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity)\n  name.vb: IEnumerable(Of ClaimsIdentity)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}\n  nameWithType: IEnumerable<ClaimsIdentity>\n  nameWithType.vb: IEnumerable(Of ClaimsIdentity)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.IO.BinaryReader\n  parent: System.IO\n  isExternal: false\n  name: BinaryReader\n  fullName: System.IO.BinaryReader\n  commentId: T:System.IO.BinaryReader\n  nameWithType: BinaryReader\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: IIdentity\n  fullName: System.Security.Principal.IIdentity\n  commentId: T:System.Security.Principal.IIdentity\n  nameWithType: IIdentity\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Claim>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)\n  name.vb: IEnumerable(Of Claim)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  nameWithType: IEnumerable<Claim>\n  nameWithType.vb: IEnumerable(Of Claim)\n- uid: System.Func{System.Security.Claims.ClaimsPrincipal}\n  parent: System\n  definition: System.Func`1\n  name: Func<ClaimsPrincipal>\n  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>\n  fullname.vb: System.Func(Of System.Security.Claims.ClaimsPrincipal)\n  name.vb: Func(Of ClaimsPrincipal)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsPrincipal\n    name: ClaimsPrincipal\n    fullName: System.Security.Claims.ClaimsPrincipal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.ClaimsPrincipal\n    name: ClaimsPrincipal\n    fullName: System.Security.Claims.ClaimsPrincipal\n  - name: )\n    fullName: )\n  commentId: T:System.Func{System.Security.Claims.ClaimsPrincipal}\n  nameWithType: Func<ClaimsPrincipal>\n  nameWithType.vb: Func(Of ClaimsPrincipal)\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`1\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n- uid: System.Security.Claims.ClaimsPrincipal\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsPrincipal\n  fullName: System.Security.Claims.ClaimsPrincipal\n  commentId: T:System.Security.Claims.ClaimsPrincipal\n  nameWithType: ClaimsPrincipal\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Principal.IPrincipal.Identity\n  parent: System.Security.Principal.IPrincipal\n  isExternal: true\n  name: Identity\n  fullName: System.Security.Principal.IPrincipal.Identity\n  commentId: P:System.Security.Principal.IPrincipal.Identity\n  nameWithType: IPrincipal.Identity\n- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}\n  parent: System\n  definition: System.Func`2\n  name: Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>\n  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity>\n  fullname.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity), System.Security.Claims.ClaimsIdentity)\n  name.vb: Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: )\n    fullName: )\n  commentId: T:System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}\n  nameWithType: Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>\n  nameWithType.vb: Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`2\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n- uid: System.Security.Claims.ClaimsIdentity\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsIdentity\n  fullName: System.Security.Claims.ClaimsIdentity\n  commentId: T:System.Security.Claims.ClaimsIdentity\n  nameWithType: ClaimsIdentity\n- uid: System.Predicate{System.Security.Claims.Claim}\n  parent: System\n  definition: System.Predicate`1\n  name: Predicate<Claim>\n  fullName: System.Predicate<System.Security.Claims.Claim>\n  fullname.vb: System.Predicate(Of System.Security.Claims.Claim)\n  name.vb: Predicate(Of Claim)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: T:System.Predicate{System.Security.Claims.Claim}\n  nameWithType: Predicate<Claim>\n  nameWithType.vb: Predicate(Of Claim)\n- uid: System.Predicate`1\n  isExternal: false\n  name: Predicate<T>\n  fullName: System.Predicate<T>\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Predicate`1\n  nameWithType: Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Claims.Claim\n  parent: System.Security.Claims\n  isExternal: false\n  name: Claim\n  fullName: System.Security.Claims.Claim\n  commentId: T:System.Security.Claims.Claim\n  nameWithType: Claim\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Principal.IPrincipal.IsInRole(System.String)\n  parent: System.Security.Principal.IPrincipal\n  isExternal: true\n  name: IsInRole(String)\n  fullName: System.Security.Principal.IPrincipal.IsInRole(System.String)\n  spec.csharp:\n  - uid: System.Security.Principal.IPrincipal.IsInRole(System.String)\n    name: IsInRole\n    fullName: System.Security.Principal.IPrincipal.IsInRole\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IPrincipal.IsInRole(System.String)\n    name: IsInRole\n    fullName: System.Security.Principal.IPrincipal.IsInRole\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IPrincipal.IsInRole(System.String)\n  nameWithType: IPrincipal.IsInRole(String)\n- uid: System.IO.BinaryWriter\n  parent: System.IO\n  isExternal: false\n  name: BinaryWriter\n  fullName: System.IO.BinaryWriter\n  commentId: T:System.IO.BinaryWriter\n  nameWithType: BinaryWriter\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}