{"nodes":[{"pos":[583,598],"content":"MulticastOption","needQuote":true,"nodes":[{"content":"MulticastOption","pos":[0,15]}]},{"pos":[1942,1968],"content":"MulticastOption(IPAddress)","needQuote":true,"nodes":[{"content":"MulticastOption(IPAddress)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;group&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3021,3068],"source":"\\n<p>\\n<em>group</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3069,3075],"source":" </p>\\n"},{"pos":[3497,3530],"content":"MulticastOption(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"MulticastOption(IPAddress, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The index of the interface that is used to send and receive multicast packets.&lt;/p&gt;\\n","pos":[4626,4715],"source":"\\n<p>The index of the interface that is used to send and receive multicast packets.</p>\\n"},{"pos":[5168,5205],"content":"MulticastOption(IPAddress, IPAddress)","needQuote":true,"nodes":[{"content":"MulticastOption(IPAddress, IPAddress)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;group&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;mcint&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6541,6653],"source":"\\n<p>\\n<em>group</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>mcint</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6654,6660],"source":" </p>\\n"},{"pos":[6986,6991],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[8132,8146],"content":"InterfaceIndex","needQuote":true,"nodes":[{"content":"InterfaceIndex","pos":[0,14]}]},{"pos":[9376,9388],"content":"LocalAddress","needQuote":true,"nodes":[{"content":"LocalAddress","pos":[0,12]}]},{"pos":[10433,10451],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[10618,10624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10784,10794],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10889,10897],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10966,10967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10994,10995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11065,11073],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11142,11143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11170,11171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11354,11368],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11487,11493],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11560,11561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11611,11617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11677,11678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11761,11767],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11834,11835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11885,11891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11951,11952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12166,12188],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12336,12342],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12409,12410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12460,12466],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12527,12528]},{"pos":[12583,12589],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12649,12650],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12747,12753],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12820,12821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12871,12877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12938,12939]},{"pos":[12994,13000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13060,13061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13306,13337],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13503,13518],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13594,13595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13645,13651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13712,13713]},{"pos":[13768,13774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13834,13835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13941,13956],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14032,14033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14083,14089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14150,14151]},{"pos":[14206,14212],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14272,14273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14503,14516],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14617,14628],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14700,14701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14728,14729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14802,14813],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14885,14886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14913,14914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15089,15098],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15191,15198],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15266,15267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15294,15295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15364,15371],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15439,15440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15467,15468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15643,15660],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15769,15784],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15860,15861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15888,15889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15966,15981],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16057,16058],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16085,16086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16231,16237],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16379,16388],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[16530,16540],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[16682,16687],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16827,16848],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Net.Sockets.MulticastOption\n  commentId: T:System.Net.Sockets.MulticastOption\n  id: MulticastOption\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)\n  - System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)\n  - System.Net.Sockets.MulticastOption.Group\n  - System.Net.Sockets.MulticastOption.InterfaceIndex\n  - System.Net.Sockets.MulticastOption.LocalAddress\n  langs:\n  - csharp\n  - vb\n  name: MulticastOption\n  fullName: System.Net.Sockets.MulticastOption\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MulticastOption\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 77\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Contains <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values used to join and drop multicast groups.</p>\\n\"\n  syntax:\n    content: public class MulticastOption\n    content.vb: Public Class MulticastOption\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: MulticastOption\n- uid: System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)\n  id: '#ctor(System.Net.IPAddress)'\n  parent: System.Net.Sockets.MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: MulticastOption(IPAddress)\n  fullName: System.Net.Sockets.MulticastOption.MulticastOption(System.Net.IPAddress)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 79\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new version of the <xref href=\\\"System.Net.Sockets.MulticastOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified IP multicast group.</p>\\n\"\n  syntax:\n    content: public MulticastOption(IPAddress group)\n    content.vb: Public Sub New(group As IPAddress)\n    parameters:\n    - id: group\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the multicast group. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>group</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MulticastOption.MulticastOption(IPAddress)\n- uid: System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)\n  id: '#ctor(System.Net.IPAddress,System.Int32)'\n  parent: System.Net.Sockets.MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: MulticastOption(IPAddress, Int32)\n  fullName: System.Net.Sockets.MulticastOption.MulticastOption(System.Net.IPAddress, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 80\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.MulticastOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified IP multicast group address and interface index.</p>\\n\"\n  syntax:\n    content: public MulticastOption(IPAddress group, int interfaceIndex)\n    content.vb: Public Sub New(group As IPAddress, interfaceIndex As Integer)\n    parameters:\n    - id: group\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the multicast group.</p>\\n\"\n    - id: interfaceIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the interface that is used to send and receive multicast packets.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MulticastOption.MulticastOption(IPAddress, Int32)\n- uid: System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)\n  id: '#ctor(System.Net.IPAddress,System.Net.IPAddress)'\n  parent: System.Net.Sockets.MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: MulticastOption(IPAddress, IPAddress)\n  fullName: System.Net.Sockets.MulticastOption.MulticastOption(System.Net.IPAddress, System.Net.IPAddress)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 81\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.MulticastOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified IP multicast group address and local IP address associated with a network interface.</p>\\n\"\n  syntax:\n    content: public MulticastOption(IPAddress group, IPAddress mcint)\n    content.vb: Public Sub New(group As IPAddress, mcint As IPAddress)\n    parameters:\n    - id: group\n      type: System.Net.IPAddress\n      description: \"\\n<p>The group <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: mcint\n      type: System.Net.IPAddress\n      description: \"\\n<p>The local <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>group</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>mcint</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MulticastOption.MulticastOption(IPAddress, IPAddress)\n- uid: System.Net.Sockets.MulticastOption.Group\n  commentId: P:System.Net.Sockets.MulticastOption.Group\n  id: Group\n  parent: System.Net.Sockets.MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: Group\n  fullName: System.Net.Sockets.MulticastOption.Group\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Group\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 82\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the IP address of a multicast group.</p>\\n\"\n  syntax:\n    content: public IPAddress Group { get; set; }\n    content.vb: Public Property Group As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the Internet address of a multicast group.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: MulticastOption.Group\n- uid: System.Net.Sockets.MulticastOption.InterfaceIndex\n  commentId: P:System.Net.Sockets.MulticastOption.InterfaceIndex\n  id: InterfaceIndex\n  parent: System.Net.Sockets.MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: InterfaceIndex\n  fullName: System.Net.Sockets.MulticastOption.InterfaceIndex\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InterfaceIndex\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 83\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the index of the interface that is used to send and receive multicast packets. </p>\\n\"\n  syntax:\n    content: public int InterfaceIndex { get; set; }\n    content.vb: Public Property InterfaceIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the index of a <xref href=\\\"System.Net.NetworkInformation.NetworkInterface\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: MulticastOption.InterfaceIndex\n- uid: System.Net.Sockets.MulticastOption.LocalAddress\n  commentId: P:System.Net.Sockets.MulticastOption.LocalAddress\n  id: LocalAddress\n  parent: System.Net.Sockets.MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: LocalAddress\n  fullName: System.Net.Sockets.MulticastOption.LocalAddress\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalAddress\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 84\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the local address associated with a multicast group.</p>\\n\"\n  syntax:\n    content: public IPAddress LocalAddress { get; set; }\n    content.vb: Public Property LocalAddress As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the local address associated with a multicast group.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: MulticastOption.LocalAddress\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}