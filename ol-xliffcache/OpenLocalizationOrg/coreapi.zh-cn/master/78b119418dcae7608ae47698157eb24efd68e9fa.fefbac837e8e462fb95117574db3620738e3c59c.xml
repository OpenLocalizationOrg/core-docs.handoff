{"nodes":[{"pos":[733,737],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"pos":[2317,2337],"content":"Size(Double, Double)","needQuote":true,"nodes":[{"content":"Size(Double, Double)","pos":[0,20]}]},{"pos":[3292,3297],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[4206,4212],"content":"Height","needQuote":true,"nodes":[{"content":"Height","pos":[0,6]}]},{"pos":[5078,5085],"content":"IsEmpty","needQuote":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[5959,5964],"content":"Width","needQuote":true,"nodes":[{"content":"Width","pos":[0,5]}]},{"pos":[6867,6881],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8195,8207],"content":"Equals(Size)","needQuote":true,"nodes":[{"content":"Equals(Size)","pos":[0,12]}]},{"pos":[9160,9173],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10492,10512],"content":"Equality(Size, Size)","needQuote":true,"nodes":[{"content":"Equality(Size, Size)","pos":[0,20]}]},{"pos":[11775,11797],"content":"Inequality(Size, Size)","needQuote":true,"nodes":[{"content":"Inequality(Size, Size)","pos":[0,22]}]},{"pos":[12905,12915],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13991,14009],"content":"Windows.Foundation","needQuote":true,"nodes":[{"content":"Windows.Foundation","pos":[0,18]}]},{"pos":[14249,14271],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14465,14471],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14570,14571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14641,14647],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14733,14734]},{"pos":[14812,14818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14903,14904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15021,15027],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15126,15127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15197,15203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15289,15290]},{"pos":[15368,15374],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15459,15460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15688,15719],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15940,15955],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16072,16073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16143,16149],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16235,16236]},{"pos":[16314,16320],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16405,16406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16532,16547],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16664,16665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16735,16741],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16827,16828]},{"pos":[16906,16912],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16997,16998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17152,17161],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17287,17294],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17395,17396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17443,17444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17533,17540],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17641,17642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17689,17690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17822,17828],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17942,17948],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18086,18092],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[18269,18273],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"pos":[18428,18435],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18641,18655],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[18821,18827],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18911,18912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18982,18988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19073,19074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19180,19186],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19270,19271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19341,19347],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19432,19433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19571,19580],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[19771,19784],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19931,19942],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20036,20037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20084,20085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20181,20192],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20286,20287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20334,20335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20465,20470],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20647,20657],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20795,20803],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20891,20892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20939,20940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21033,21041],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21129,21130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21177,21178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21310,21316],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: Windows.Foundation.Size\n  commentId: T:Windows.Foundation.Size\n  id: Size\n  parent: Windows.Foundation\n  children:\n  - Windows.Foundation.Size.#ctor(System.Double,System.Double)\n  - Windows.Foundation.Size.Empty\n  - Windows.Foundation.Size.Equals(System.Object)\n  - Windows.Foundation.Size.Equals(Windows.Foundation.Size)\n  - Windows.Foundation.Size.GetHashCode\n  - Windows.Foundation.Size.Height\n  - Windows.Foundation.Size.IsEmpty\n  - Windows.Foundation.Size.op_Equality(Windows.Foundation.Size,Windows.Foundation.Size)\n  - Windows.Foundation.Size.op_Inequality(Windows.Foundation.Size,Windows.Foundation.Size)\n  - Windows.Foundation.Size.ToString\n  - Windows.Foundation.Size.Width\n  langs:\n  - csharp\n  - vb\n  name: Size\n  nameWithType: Size\n  fullName: Windows.Foundation.Size\n  type: Struct\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Size\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 184\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Size\n    content.vb: >-\n      <SecurityCritical>\n\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Size\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n- uid: Windows.Foundation.Size.#ctor(System.Double,System.Double)\n  commentId: M:Windows.Foundation.Size.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Size(Double, Double)\n  nameWithType: Size.Size(Double, Double)\n  fullName: Windows.Foundation.Size.Size(System.Double, System.Double)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 188\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public Size(double width, double height)\n    content.vb: Public Sub New(width As Double, height As Double)\n    parameters:\n    - id: width\n      type: System.Double\n    - id: height\n      type: System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: Windows.Foundation.Size.Empty\n  commentId: P:Windows.Foundation.Size.Empty\n  id: Empty\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  nameWithType: Size.Empty\n  fullName: Windows.Foundation.Size.Empty\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 189\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public static Size Empty { get; }\n    content.vb: Public Shared ReadOnly Property Empty As Size\n    parameters: []\n    return:\n      type: Windows.Foundation.Size\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n- uid: Windows.Foundation.Size.Height\n  commentId: P:Windows.Foundation.Size.Height\n  id: Height\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Height\n  nameWithType: Size.Height\n  fullName: Windows.Foundation.Size.Height\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Height\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 190\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public double Height { get; set; }\n    content.vb: Public Property Height As Double\n    parameters: []\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n- uid: Windows.Foundation.Size.IsEmpty\n  commentId: P:Windows.Foundation.Size.IsEmpty\n  id: IsEmpty\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: IsEmpty\n  nameWithType: Size.IsEmpty\n  fullName: Windows.Foundation.Size.IsEmpty\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEmpty\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 191\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public bool IsEmpty { get; }\n    content.vb: Public ReadOnly Property IsEmpty As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: Windows.Foundation.Size.Width\n  commentId: P:Windows.Foundation.Size.Width\n  id: Width\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Width\n  nameWithType: Size.Width\n  fullName: Windows.Foundation.Size.Width\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Width\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 192\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public double Width { get; set; }\n    content.vb: Public Property Width As Double\n    parameters: []\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n- uid: Windows.Foundation.Size.Equals(System.Object)\n  commentId: M:Windows.Foundation.Size.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  nameWithType: Size.Equals(Object)\n  fullName: Windows.Foundation.Size.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 193\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override bool Equals(object o)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n    return:\n      type: System.Boolean\n  overridden: System.ValueType.Equals(System.Object)\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: Windows.Foundation.Size.Equals(Windows.Foundation.Size)\n  commentId: M:Windows.Foundation.Size.Equals(Windows.Foundation.Size)\n  id: Equals(Windows.Foundation.Size)\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Equals(Size)\n  nameWithType: Size.Equals(Size)\n  fullName: Windows.Foundation.Size.Equals(Windows.Foundation.Size)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 195\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public bool Equals(Size value)\n    content.vb: Public Function Equals(value As Size) As Boolean\n    parameters:\n    - id: value\n      type: Windows.Foundation.Size\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: Windows.Foundation.Size.GetHashCode\n  commentId: M:Windows.Foundation.Size.GetHashCode\n  id: GetHashCode\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  nameWithType: Size.GetHashCode()\n  fullName: Windows.Foundation.Size.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 196\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n  overridden: System.ValueType.GetHashCode\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: Windows.Foundation.Size.op_Equality(Windows.Foundation.Size,Windows.Foundation.Size)\n  commentId: M:Windows.Foundation.Size.op_Equality(Windows.Foundation.Size,Windows.Foundation.Size)\n  id: op_Equality(Windows.Foundation.Size,Windows.Foundation.Size)\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Equality(Size, Size)\n  nameWithType: Size.Equality(Size, Size)\n  fullName: Windows.Foundation.Size.Equality(Windows.Foundation.Size, Windows.Foundation.Size)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 198\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public static bool operator ==(Size size1, Size size2)\n    content.vb: Public Shared Operator =(size1 As Size, size2 As Size) As Boolean\n    parameters:\n    - id: size1\n      type: Windows.Foundation.Size\n    - id: size2\n      type: Windows.Foundation.Size\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: Windows.Foundation.Size.op_Inequality(Windows.Foundation.Size,Windows.Foundation.Size)\n  commentId: M:Windows.Foundation.Size.op_Inequality(Windows.Foundation.Size,Windows.Foundation.Size)\n  id: op_Inequality(Windows.Foundation.Size,Windows.Foundation.Size)\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Size, Size)\n  nameWithType: Size.Inequality(Size, Size)\n  fullName: Windows.Foundation.Size.Inequality(Windows.Foundation.Size, Windows.Foundation.Size)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 199\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: public static bool operator !=(Size size1, Size size2)\n    content.vb: Public Shared Operator <>(size1 As Size, size2 As Size) As Boolean\n    parameters:\n    - id: size1\n      type: Windows.Foundation.Size\n    - id: size2\n      type: Windows.Foundation.Size\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: Windows.Foundation.Size.ToString\n  commentId: M:Windows.Foundation.Size.ToString\n  id: ToString\n  parent: Windows.Foundation.Size\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  nameWithType: Size.ToString()\n  fullName: Windows.Foundation.Size.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 200\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: Windows.Foundation\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n  overridden: System.ValueType.ToString\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\nreferences:\n- uid: Windows.Foundation\n  commentId: N:Windows.Foundation\n  isExternal: false\n  name: Windows.Foundation\n  nameWithType: Windows.Foundation\n  fullName: Windows.Foundation\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Double\n  commentId: T:System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Windows.Foundation.Size\n  commentId: T:Windows.Foundation.Size\n  parent: Windows.Foundation\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: Windows.Foundation.Size\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ValueType.Equals(System.Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: ValueType.Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType\n  commentId: T:System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.ValueType.GetHashCode\n  commentId: M:System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ValueType.GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Int32\n  commentId: T:System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ValueType.ToString\n  commentId: M:System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  nameWithType: ValueType.ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.String\n  commentId: T:System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n"}