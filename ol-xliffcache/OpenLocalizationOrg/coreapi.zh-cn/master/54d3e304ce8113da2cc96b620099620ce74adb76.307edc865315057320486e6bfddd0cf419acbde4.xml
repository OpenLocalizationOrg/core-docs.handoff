{"nodes":[{"pos":[912,926],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[2266,2282],"content":"AsnEncodedData()","needQuote":true,"nodes":[{"content":"AsnEncodedData()","pos":[0,16]}]},{"pos":[3429,3451],"content":"AsnEncodedData(Byte[])","needQuote":true,"nodes":[{"content":"AsnEncodedData(Byte[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.&lt;/p&gt;\\n","pos":[4355,4443],"source":"\\n<p>A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n"},{"pos":[5097,5127],"content":"AsnEncodedData(AsnEncodedData)","needQuote":true,"nodes":[{"content":"AsnEncodedData(AsnEncodedData)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;asnEncodedData&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6503,6565],"source":"\\n<p>\\n<em>asnEncodedData</em> is <strong>null</strong>.</p>\\n"},{"pos":[7056,7083],"content":"AsnEncodedData(Oid, Byte[])","needQuote":true,"nodes":[{"content":"AsnEncodedData(Oid, Byte[])","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.&lt;/p&gt;\\n","pos":[8344,8432],"source":"\\n<p>A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n"},{"pos":[9087,9117],"content":"AsnEncodedData(String, Byte[])","needQuote":true,"nodes":[{"content":"AsnEncodedData(String, Byte[])","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.&lt;/p&gt;\\n","pos":[10266,10354],"source":"\\n<p>A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n"},{"pos":[10904,10907],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[12305,12312],"content":"RawData","needQuote":true,"nodes":[{"content":"RawData","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A byte array that represents the Abstract Syntax Notation One (ASN.1)-encoded data.&lt;/p&gt;\\n","pos":[13120,13214],"source":"\\n<p>A byte array that represents the Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n"},{"content":"\\n&lt;p&gt;The value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13333,13379],"source":"\\n<p>The value is <strong>null</strong>.</p>\\n"},{"pos":[13861,13885],"content":"CopyFrom(AsnEncodedData)","needQuote":true,"nodes":[{"content":"CopyFrom(AsnEncodedData)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;asnEncodedData &lt;/em&gt;is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15148,15210],"source":"\\n<p>\\n<em>asnEncodedData </em>is <strong>null</strong>.</p>\\n"},{"pos":[15628,15643],"content":"Format(Boolean)","needQuote":true,"nodes":[{"content":"Format(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the return string should contain carriage returns; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16513,16636],"source":"\\n<p>\\n<strong>true</strong> if the return string should contain carriage returns; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A formatted string that represents the Abstract Syntax Notation One (ASN.1)-encoded data.&lt;/p&gt;\\n","pos":[16696,16796],"source":"\\n<p>A formatted string that represents the Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n"},{"pos":[17007,17035],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[17232,17238],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17398,17408],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[17503,17511],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17580,17581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17608,17609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17679,17687],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17756,17757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17784,17785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17968,17982],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[18101,18107],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18174,18175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18225,18231],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18291,18292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18375,18381],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18448,18449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18499,18505],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18565,18566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18780,18802],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18950,18956],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19023,19024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19074,19080],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19141,19142]},{"pos":[19197,19203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19263,19264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19361,19367],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19434,19435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19485,19491],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19552,19553]},{"pos":[19608,19614],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19674,19675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19920,19951],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20117,20132],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20208,20209],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20259,20265],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20326,20327]},{"pos":[20382,20388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20448,20449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20555,20570],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20646,20647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20697,20703],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20764,20765]},{"pos":[20820,20826],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20886,20887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21117,21130],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21231,21242],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21314,21315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21342,21343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21416,21427],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21499,21500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21527,21528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21703,21712],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[21805,21812],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21880,21881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21908,21909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21978,21985],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22053,22054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22081,22082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22257,22274],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[22383,22398],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22474,22475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22502,22503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22580,22595],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22671,22672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22699,22700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22845,22851],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[22945,22951],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[23071,23075],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[23134,23136]},{"pos":[23199,23203],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[23261,23263],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[23448,23462],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[23716,23719],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[23899,23905],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24051,24058],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24204,24225],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.AsnEncodedData\n  commentId: T:System.Security.Cryptography.AsnEncodedData\n  id: AsnEncodedData\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.AsnEncodedData.#ctor\n  - System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])\n  - System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)\n  - System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])\n  - System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])\n  - System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  - System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)\n  - System.Security.Cryptography.AsnEncodedData.Oid\n  - System.Security.Cryptography.AsnEncodedData.RawData\n  langs:\n  - csharp\n  - vb\n  name: AsnEncodedData\n  fullName: System.Security.Cryptography.AsnEncodedData\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsnEncodedData\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 10\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n\"\n  syntax:\n    content: public class AsnEncodedData\n    content.vb: Public Class AsnEncodedData\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: AsnEncodedData\n- uid: System.Security.Cryptography.AsnEncodedData.#ctor\n  commentId: M:System.Security.Cryptography.AsnEncodedData.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: AsnEncodedData()\n  fullName: System.Security.Cryptography.AsnEncodedData.AsnEncodedData()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 12\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected AsnEncodedData()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: AsnEncodedData.AsnEncodedData()\n- uid: System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: AsnEncodedData(Byte[])\n  fullName: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 13\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array.</p>\\n\"\n  syntax:\n    content: public AsnEncodedData(byte[] rawData)\n    content.vb: Public Sub New(rawData As Byte())\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.Byte())\n  name.vb: AsnEncodedData(Byte())\n  nameWithType: AsnEncodedData.AsnEncodedData(Byte[])\n  nameWithType.vb: AsnEncodedData.AsnEncodedData(Byte())\n- uid: System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)\n  commentId: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)\n  id: '#ctor(System.Security.Cryptography.AsnEncodedData)'\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: AsnEncodedData(AsnEncodedData)\n  fullName: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.Security.Cryptography.AsnEncodedData)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 14\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public AsnEncodedData(AsnEncodedData asnEncodedData)\n    content.vb: Public Sub New(asnEncodedData As AsnEncodedData)\n    parameters:\n    - id: asnEncodedData\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>asnEncodedData</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AsnEncodedData.AsnEncodedData(AsnEncodedData)\n- uid: System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])\n  commentId: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])\n  id: '#ctor(System.Security.Cryptography.Oid,System.Byte[])'\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: AsnEncodedData(Oid, Byte[])\n  fullName: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.Security.Cryptography.Oid, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 15\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and a byte array.</p>\\n\"\n  syntax:\n    content: public AsnEncodedData(Oid oid, byte[] rawData)\n    content.vb: Public Sub New(oid As Oid, rawData As Byte())\n    parameters:\n    - id: oid\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.Security.Cryptography.Oid, System.Byte())\n  name.vb: AsnEncodedData(Oid, Byte())\n  nameWithType: AsnEncodedData.AsnEncodedData(Oid, Byte[])\n  nameWithType.vb: AsnEncodedData.AsnEncodedData(Oid, Byte())\n- uid: System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])\n  commentId: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])\n  id: '#ctor(System.String,System.Byte[])'\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: AsnEncodedData(String, Byte[])\n  fullName: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.String, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 16\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array.</p>\\n\"\n  syntax:\n    content: public AsnEncodedData(string oid, byte[] rawData)\n    content.vb: Public Sub New(oid As String, rawData As Byte())\n    parameters:\n    - id: oid\n      type: System.String\n      description: \"\\n<p>A string that represents <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.AsnEncodedData.AsnEncodedData(System.String, System.Byte())\n  name.vb: AsnEncodedData(String, Byte())\n  nameWithType: AsnEncodedData.AsnEncodedData(String, Byte[])\n  nameWithType.vb: AsnEncodedData.AsnEncodedData(String, Byte())\n- uid: System.Security.Cryptography.AsnEncodedData.Oid\n  commentId: P:System.Security.Cryptography.AsnEncodedData.Oid\n  id: Oid\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: Oid\n  fullName: System.Security.Cryptography.AsnEncodedData.Oid\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Oid\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 17\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value for an <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Oid Oid { get; set; }\n    content.vb: Public Property Oid As Oid\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AsnEncodedData.Oid\n- uid: System.Security.Cryptography.AsnEncodedData.RawData\n  commentId: P:System.Security.Cryptography.AsnEncodedData.RawData\n  id: RawData\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: RawData\n  fullName: System.Security.Cryptography.AsnEncodedData.RawData\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RawData\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 18\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the Abstract Syntax Notation One (ASN.1)-encoded data represented in a byte array.</p>\\n\"\n  syntax:\n    content: public byte[] RawData { get; set; }\n    content.vb: Public Property RawData As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that represents the Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AsnEncodedData.RawData\n- uid: System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  commentId: M:System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  id: CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: CopyFrom(AsnEncodedData)\n  fullName: System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyFrom\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 19\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Copies information from an <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void CopyFrom(AsnEncodedData asnEncodedData)\n    content.vb: Public Overridable Sub CopyFrom(asnEncodedData As AsnEncodedData)\n    parameters:\n    - id: asnEncodedData\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to base the new object on.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>asnEncodedData </em>is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: AsnEncodedData.CopyFrom(AsnEncodedData)\n- uid: System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)\n  commentId: M:System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)\n  id: Format(System.Boolean)\n  parent: System.Security.Cryptography.AsnEncodedData\n  langs:\n  - csharp\n  - vb\n  name: Format(Boolean)\n  fullName: System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Format\n    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs\n    startLine: 20\n  assemblies:\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns a formatted version of the Abstract Syntax Notation One (ASN.1)-encoded data as a string.</p>\\n\"\n  syntax:\n    content: public virtual string Format(bool multiLine)\n    content.vb: Public Overridable Function Format(multiLine As Boolean) As String\n    parameters:\n    - id: multiLine\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the return string should contain carriage returns; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A formatted string that represents the Abstract Syntax Notation One (ASN.1)-encoded data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: AsnEncodedData.Format(Boolean)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.AsnEncodedData\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsnEncodedData\n  fullName: System.Security.Cryptography.AsnEncodedData\n  commentId: T:System.Security.Cryptography.AsnEncodedData\n  nameWithType: AsnEncodedData\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  fullName: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  nameWithType: Oid\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}