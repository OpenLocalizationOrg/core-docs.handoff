{"nodes":[{"pos":[2029,2049],"content":"SocketTaskExtensions","needQuote":true,"nodes":[{"content":"SocketTaskExtensions","pos":[0,20]}]},{"pos":[3330,3349],"content":"AcceptAsync(Socket)","needQuote":true,"nodes":[{"content":"AcceptAsync(Socket)","pos":[0,19]}]},{"pos":[4684,4711],"content":"AcceptAsync(Socket, Socket)","needQuote":true,"nodes":[{"content":"AcceptAsync(Socket, Socket)","pos":[0,27]}]},{"pos":[6172,6202],"content":"ConnectAsync(Socket, EndPoint)","needQuote":true,"nodes":[{"content":"ConnectAsync(Socket, EndPoint)","pos":[0,30]}]},{"pos":[7646,7684],"content":"ConnectAsync(Socket, IPAddress, Int32)","needQuote":true,"nodes":[{"content":"ConnectAsync(Socket, IPAddress, Int32)","pos":[0,38]}]},{"pos":[9224,9264],"content":"ConnectAsync(Socket, IPAddress[], Int32)","needQuote":true,"nodes":[{"content":"ConnectAsync(Socket, IPAddress[], Int32)","pos":[0,40]}]},{"pos":[11059,11094],"content":"ConnectAsync(Socket, String, Int32)","needQuote":true,"nodes":[{"content":"ConnectAsync(Socket, String, Int32)","pos":[0,35]}]},{"pos":[12686,12739],"content":"ReceiveAsync(Socket, ArraySegment<Byte>, SocketFlags)","needQuote":true,"nodes":[{"content":"ReceiveAsync(Socket, ArraySegment&lt;Byte&gt;, SocketFlags)","pos":[0,53],"source":"ReceiveAsync(Socket, ArraySegment<Byte>, SocketFlags)"}]},{"pos":[14951,15011],"content":"ReceiveAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)","needQuote":true,"nodes":[{"content":"ReceiveAsync(Socket, IList&lt;ArraySegment&lt;Byte&gt;&gt;, SocketFlags)","pos":[0,60],"source":"ReceiveAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)"}]},{"pos":[17345,17412],"content":"ReceiveFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)","needQuote":true,"nodes":[{"content":"ReceiveFromAsync(Socket, ArraySegment&lt;Byte&gt;, SocketFlags, EndPoint)","pos":[0,67],"source":"ReceiveFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)"}]},{"pos":[19895,19969],"content":"ReceiveMessageFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)","needQuote":true,"nodes":[{"content":"ReceiveMessageFromAsync(Socket, ArraySegment&lt;Byte&gt;, SocketFlags, EndPoint)","pos":[0,74],"source":"ReceiveMessageFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)"}]},{"pos":[22427,22477],"content":"SendAsync(Socket, ArraySegment<Byte>, SocketFlags)","needQuote":true,"nodes":[{"content":"SendAsync(Socket, ArraySegment&lt;Byte&gt;, SocketFlags)","pos":[0,50],"source":"SendAsync(Socket, ArraySegment<Byte>, SocketFlags)"}]},{"pos":[24656,24713],"content":"SendAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)","needQuote":true,"nodes":[{"content":"SendAsync(Socket, IList&lt;ArraySegment&lt;Byte&gt;&gt;, SocketFlags)","pos":[0,57],"source":"SendAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)"}]},{"pos":[27008,27070],"content":"SendToAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)","needQuote":true,"nodes":[{"content":"SendToAsync(Socket, ArraySegment&lt;Byte&gt;, SocketFlags, EndPoint)","pos":[0,62],"source":"SendToAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)"}]},{"pos":[28905,28923],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[29085,29091],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29260,29270],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[29399,29407],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[29510,29511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29558,29559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29649,29657],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[29760,29761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29808,29809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29991,30005],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30162,30168],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30267,30268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30338,30344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30429,30430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30533,30539],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30638,30639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30709,30715],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30800,30801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31011,31033],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[31227,31233],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31332,31333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31403,31409],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31495,31496]},{"pos":[31574,31580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31665,31666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31783,31789],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31888,31889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31959,31965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32051,32052]},{"pos":[32130,32136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32221,32222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32450,32481],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[32702,32717],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[32834,32835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32905,32911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32997,32998]},{"pos":[33076,33082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33167,33168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33294,33309],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33426,33427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33497,33503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33589,33590]},{"pos":[33668,33674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33759,33760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33922,33935],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34073,34084],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34193,34194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34241,34242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34335,34346],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34455,34456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34503,34504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34658,34667],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[34793,34800],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34901,34902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34949,34950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35039,35046],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35147,35148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35195,35196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35366,35383],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[35533,35548],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35665,35666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35713,35714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35811,35826],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35943,35944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35991,35992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36093,36099],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36273,36279],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[36558,36570],"content":"Task<Socket>","needQuote":true,"nodes":[{"content":"Task&lt;Socket&gt;","pos":[0,12],"source":"Task<Socket>"}]},{"pos":[36866,36870],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[36967,36968],"content":"<","needQuote":true,"nodes":[]},{"pos":[37050,37056],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[37236,37240],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[37338,37341]},{"pos":[37435,37441],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[37517,37518],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37665,37678],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[37941,37945],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[38021,38022],"content":"<","needQuote":true,"nodes":[]},{"pos":[38069,38076],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[38239,38243],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[38320,38323]},{"pos":[38382,38389],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[38448,38449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38582,38604],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[38790,38798],"content":"EndPoint","needQuote":true,"nodes":[{"content":"EndPoint","pos":[0,8]}]},{"pos":[38995,38999],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[39133,39143],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[39307,39316],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[39469,39474],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39560,39571],"content":"IPAddress[]","needQuote":true,"nodes":[{"content":"IPAddress[]","pos":[0,11]}]},{"pos":[39782,39791],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"content":"[]","pos":[39866,39868]},{"pos":[39963,39972],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[40046,40048],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[40182,40188],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[40387,40405],"content":"ArraySegment<Byte>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;Byte&gt;","pos":[0,18],"source":"ArraySegment<Byte>"}]},{"pos":[40667,40679],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[40776,40777],"content":"<","needQuote":true,"nodes":[]},{"pos":[40845,40849],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41026,41038],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[41136,41139]},{"pos":[41219,41223],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41304,41305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41483,41494],"content":"SocketFlags","needQuote":true,"nodes":[{"content":"SocketFlags","pos":[0,11]}]},{"pos":[41757,41768],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[42035,42039],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[42136,42137],"content":"<","needQuote":true,"nodes":[]},{"pos":[42206,42211],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42398,42402],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[42500,42503]},{"pos":[42584,42589],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42672,42673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42821,42836],"content":"ArraySegment<T>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;T&gt;","pos":[0,15],"source":"ArraySegment<T>"}]},{"pos":[43069,43081],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[43157,43158],"content":"<","needQuote":true,"nodes":[]},{"pos":[43205,43206],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[43349,43361],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[43438,43441]},{"pos":[43500,43501],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[43548,43549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43836,43861],"content":"IList<ArraySegment<Byte>>","needQuote":true,"nodes":[{"content":"IList&lt;ArraySegment&lt;Byte&gt;&gt;","pos":[0,25],"source":"IList<ArraySegment<Byte>>"}]},{"pos":[44234,44239],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[44342,44343],"content":"<","needQuote":true,"nodes":[]},{"pos":[44421,44433],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[44530,44531],"content":"<","needQuote":true,"nodes":[]},{"pos":[44599,44603],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[44847,44852],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[44956,44959]},{"pos":[45049,45061],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[45159,45162]},{"pos":[45242,45246],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[45327,45328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45375,45376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45533,45541],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[45792,45797],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[45879,45880],"content":"<","needQuote":true,"nodes":[]},{"pos":[45927,45928],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[46084,46089],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[46172,46175]},{"pos":[46234,46235],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[46282,46283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46424,46450],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[46784,46813],"content":"Task<SocketReceiveFromResult>","needQuote":true,"nodes":[{"content":"Task&lt;SocketReceiveFromResult&gt;","pos":[0,29],"source":"Task<SocketReceiveFromResult>"}]},{"pos":[47194,47198],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[47295,47296],"content":"<","needQuote":true,"nodes":[]},{"pos":[47395,47418],"content":"SocketReceiveFromResult","needQuote":true,"nodes":[{"content":"SocketReceiveFromResult","pos":[0,23]}]},{"pos":[47632,47636],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[47734,47737]},{"pos":[47848,47871],"content":"SocketReceiveFromResult","needQuote":true,"nodes":[{"content":"SocketReceiveFromResult","pos":[0,23]}]},{"pos":[47981,47982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48284,48320],"content":"Task<SocketReceiveMessageFromResult>","needQuote":true,"nodes":[{"content":"Task&lt;SocketReceiveMessageFromResult&gt;","pos":[0,36],"source":"Task<SocketReceiveMessageFromResult>"}]},{"pos":[48736,48740],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[48837,48838],"content":"<","needQuote":true,"nodes":[]},{"pos":[48944,48974],"content":"SocketReceiveMessageFromResult","needQuote":true,"nodes":[{"content":"SocketReceiveMessageFromResult","pos":[0,30]}]},{"pos":[49202,49206],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[49304,49307]},{"pos":[49425,49455],"content":"SocketReceiveMessageFromResult","needQuote":true,"nodes":[{"content":"SocketReceiveMessageFromResult","pos":[0,30]}]},{"pos":[49579,49580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Net.Sockets.SocketTaskExtensions\n  commentId: T:System.Net.Sockets.SocketTaskExtensions\n  id: SocketTaskExtensions\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)\n  - System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)\n  - System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)\n  - System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)\n  - System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)\n  - System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  - System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  - System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  - System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  - System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  - System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  - System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  langs:\n  - csharp\n  - vb\n  name: SocketTaskExtensions\n  nameWithType: SocketTaskExtensions\n  fullName: System.Net.Sockets.SocketTaskExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SocketTaskExtensions\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 391\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public class SocketTaskExtensions\n    content.vb: Public Class SocketTaskExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)\n  id: AcceptAsync(System.Net.Sockets.Socket)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: AcceptAsync(Socket)\n  nameWithType: SocketTaskExtensions.AcceptAsync(Socket)\n  fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AcceptAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 393\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<Socket> AcceptAsync(this Socket socket)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AcceptAsync(socket As Socket) As Task(Of Socket)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)\n  id: AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: AcceptAsync(Socket, Socket)\n  nameWithType: SocketTaskExtensions.AcceptAsync(Socket, Socket)\n  fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket, System.Net.Sockets.Socket)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AcceptAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 394\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<Socket> AcceptAsync(this Socket socket, Socket acceptSocket)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AcceptAsync(socket As Socket, acceptSocket As Socket) As Task(Of Socket)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: acceptSocket\n      type: System.Net.Sockets.Socket\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)\n  id: ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(Socket, EndPoint)\n  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, EndPoint)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.EndPoint)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 395\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task ConnectAsync(this Socket socket, EndPoint remoteEP)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ConnectAsync(socket As Socket, remoteEP As EndPoint) As Task\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: remoteEP\n      type: System.Net.EndPoint\n    return:\n      type: System.Threading.Tasks.Task\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)\n  id: ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(Socket, IPAddress, Int32)\n  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, IPAddress, Int32)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 396\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task ConnectAsync(this Socket socket, IPAddress address, int port)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ConnectAsync(socket As Socket, address As IPAddress, port As Integer) As Task\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: address\n      type: System.Net.IPAddress\n    - id: port\n      type: System.Int32\n    return:\n      type: System.Threading.Tasks.Task\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)\n  id: ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(Socket, IPAddress[], Int32)\n  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, IPAddress[], Int32)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 397\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task ConnectAsync(this Socket socket, IPAddress[] addresses, int port)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ConnectAsync(socket As Socket, addresses As IPAddress(), port As Integer) As Task\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: addresses\n      type: System.Net.IPAddress[]\n    - id: port\n      type: System.Int32\n    return:\n      type: System.Threading.Tasks.Task\n  nameWithType.vb: SocketTaskExtensions.ConnectAsync(Socket, IPAddress(), Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress(), System.Int32)\n  name.vb: ConnectAsync(Socket, IPAddress(), Int32)\n- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)\n  id: ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ConnectAsync(Socket, String, Int32)\n  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, String, Int32)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 398\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task ConnectAsync(this Socket socket, string host, int port)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ConnectAsync(socket As Socket, host As String, port As Integer) As Task\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: host\n      type: System.String\n    - id: port\n      type: System.Int32\n    return:\n      type: System.Threading.Tasks.Task\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  id: ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ReceiveAsync(Socket, ArraySegment<Byte>, SocketFlags)\n  nameWithType: SocketTaskExtensions.ReceiveAsync(Socket, ArraySegment<Byte>, SocketFlags)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 399\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<int> ReceiveAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ReceiveAsync(socket As Socket, buffer As ArraySegment(Of Byte), socketFlags As SocketFlags) As Task(Of Integer)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n  nameWithType.vb: SocketTaskExtensions.ReceiveAsync(Socket, ArraySegment(Of Byte), SocketFlags)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags)\n  name.vb: ReceiveAsync(Socket, ArraySegment(Of Byte), SocketFlags)\n- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  id: ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ReceiveAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)\n  nameWithType: SocketTaskExtensions.ReceiveAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 400\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<int> ReceiveAsync(this Socket socket, IList<ArraySegment<byte>> buffers, SocketFlags socketFlags)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ReceiveAsync(socket As Socket, buffers As IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags) As Task(Of Integer)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffers\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n  nameWithType.vb: SocketTaskExtensions.ReceiveAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)\n  name.vb: ReceiveAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)\n- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  id: ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ReceiveFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)\n  nameWithType: SocketTaskExtensions.ReceiveFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveFromAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 401\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<SocketReceiveFromResult> ReceiveFromAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ReceiveFromAsync(socket As Socket, buffer As ArraySegment(Of Byte), socketFlags As SocketFlags, remoteEndPoint As EndPoint) As Task(Of SocketReceiveFromResult)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    - id: remoteEndPoint\n      type: System.Net.EndPoint\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.SocketReceiveFromResult}\n  nameWithType.vb: SocketTaskExtensions.ReceiveFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)\n  name.vb: ReceiveFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)\n- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  id: ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: ReceiveMessageFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)\n  nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)\n  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveMessageFromAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 402\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ReceiveMessageFromAsync(socket As Socket, buffer As ArraySegment(Of Byte), socketFlags As SocketFlags, remoteEndPoint As EndPoint) As Task(Of SocketReceiveMessageFromResult)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    - id: remoteEndPoint\n      type: System.Net.EndPoint\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.SocketReceiveMessageFromResult}\n  nameWithType.vb: SocketTaskExtensions.ReceiveMessageFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)\n  name.vb: ReceiveMessageFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)\n- uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  id: SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(Socket, ArraySegment<Byte>, SocketFlags)\n  nameWithType: SocketTaskExtensions.SendAsync(Socket, ArraySegment<Byte>, SocketFlags)\n  fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 403\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<int> SendAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SendAsync(socket As Socket, buffer As ArraySegment(Of Byte), socketFlags As SocketFlags) As Task(Of Integer)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n  nameWithType.vb: SocketTaskExtensions.SendAsync(Socket, ArraySegment(Of Byte), SocketFlags)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags)\n  name.vb: SendAsync(Socket, ArraySegment(Of Byte), SocketFlags)\n- uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  id: SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)\n  nameWithType: SocketTaskExtensions.SendAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)\n  fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 404\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<int> SendAsync(this Socket socket, IList<ArraySegment<byte>> buffers, SocketFlags socketFlags)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SendAsync(socket As Socket, buffers As IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags) As Task(Of Integer)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffers\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n  nameWithType.vb: SocketTaskExtensions.SendAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)\n  name.vb: SendAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)\n- uid: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  id: SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)\n  isExtensionMethod: true\n  parent: System.Net.Sockets.SocketTaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: SendToAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)\n  nameWithType: SocketTaskExtensions.SendToAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)\n  fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendToAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 405\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  syntax:\n    content: public static Task<int> SendToAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SendToAsync(socket As Socket, buffer As ArraySegment(Of Byte), socketFlags As SocketFlags, remoteEP As EndPoint) As Task(Of Integer)\n    parameters:\n    - id: socket\n      type: System.Net.Sockets.Socket\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n    - id: socketFlags\n      type: System.Net.Sockets.SocketFlags\n    - id: remoteEP\n      type: System.Net.EndPoint\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n  nameWithType.vb: SocketTaskExtensions.SendToAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)\n  name.vb: SendToAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)\nreferences:\n- uid: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  nameWithType: System.Net.Sockets\n  fullName: System.Net.Sockets\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Net.Sockets.Socket\n  commentId: T:System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  nameWithType: Socket\n  fullName: System.Net.Sockets.Socket\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Socket>\n  nameWithType: Task<Socket>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>\n  nameWithType.vb: Task(Of Socket)\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.Socket)\n  name.vb: Task(Of Socket)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.Socket\n    name: Socket\n    nameWithType: Socket\n    fullName: System.Net.Sockets.Socket\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.Socket\n    name: Socket\n    nameWithType: Socket\n    fullName: System.Net.Sockets.Socket\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks.Task`1\n  commentId: T:System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n- uid: System.Net.EndPoint\n  commentId: T:System.Net.EndPoint\n  parent: System.Net\n  isExternal: false\n  name: EndPoint\n  nameWithType: EndPoint\n  fullName: System.Net.EndPoint\n- uid: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net\n  commentId: N:System.Net\n  isExternal: false\n  name: System.Net\n  nameWithType: System.Net\n  fullName: System.Net\n- uid: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Int32\n  commentId: T:System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.IPAddress[]\n  name: IPAddress[]\n  nameWithType: IPAddress[]\n  fullName: System.Net.IPAddress[]\n  nameWithType.vb: IPAddress()\n  fullname.vb: System.Net.IPAddress()\n  name.vb: IPAddress()\n  spec.csharp:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: System.Net.IPAddress\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: System.Net.IPAddress\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.String\n  commentId: T:System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ArraySegment{System.Byte}\n  commentId: T:System.ArraySegment{System.Byte}\n  parent: System\n  definition: System.ArraySegment`1\n  name: ArraySegment<Byte>\n  nameWithType: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  nameWithType.vb: ArraySegment(Of Byte)\n  fullname.vb: System.ArraySegment(Of System.Byte)\n  name.vb: ArraySegment(Of Byte)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Net.Sockets.SocketFlags\n  commentId: T:System.Net.Sockets.SocketFlags\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketFlags\n  nameWithType: SocketFlags\n  fullName: System.Net.Sockets.SocketFlags\n- uid: System.Threading.Tasks.Task{System.Int32}\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  nameWithType.vb: Task(Of Int32)\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ArraySegment`1\n  commentId: T:System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n  nameWithType.vb: ArraySegment(Of T)\n  fullname.vb: System.ArraySegment(Of T)\n  name.vb: ArraySegment(Of T)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n  commentId: T:System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<ArraySegment<Byte>>\n  nameWithType: IList<ArraySegment<Byte>>\n  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>\n  nameWithType.vb: IList(Of ArraySegment(Of Byte))\n  fullname.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))\n  name.vb: IList(Of ArraySegment(Of Byte))\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Collections.Generic.IList`1\n  commentId: T:System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  nameWithType.vb: IList(Of T)\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  fullName: System.Collections.Generic\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.SocketReceiveFromResult}\n  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.SocketReceiveFromResult}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<SocketReceiveFromResult>\n  nameWithType: Task<SocketReceiveFromResult>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.SocketReceiveFromResult>\n  nameWithType.vb: Task(Of SocketReceiveFromResult)\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.SocketReceiveFromResult)\n  name.vb: Task(Of SocketReceiveFromResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.SocketReceiveFromResult\n    name: SocketReceiveFromResult\n    nameWithType: SocketReceiveFromResult\n    fullName: System.Net.Sockets.SocketReceiveFromResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.SocketReceiveFromResult\n    name: SocketReceiveFromResult\n    nameWithType: SocketReceiveFromResult\n    fullName: System.Net.Sockets.SocketReceiveFromResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.SocketReceiveMessageFromResult}\n  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.SocketReceiveMessageFromResult}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<SocketReceiveMessageFromResult>\n  nameWithType: Task<SocketReceiveMessageFromResult>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.SocketReceiveMessageFromResult>\n  nameWithType.vb: Task(Of SocketReceiveMessageFromResult)\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.SocketReceiveMessageFromResult)\n  name.vb: Task(Of SocketReceiveMessageFromResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.SocketReceiveMessageFromResult\n    name: SocketReceiveMessageFromResult\n    nameWithType: SocketReceiveMessageFromResult\n    fullName: System.Net.Sockets.SocketReceiveMessageFromResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.SocketReceiveMessageFromResult\n    name: SocketReceiveMessageFromResult\n    nameWithType: SocketReceiveMessageFromResult\n    fullName: System.Net.Sockets.SocketReceiveMessageFromResult\n  - name: )\n    nameWithType: )\n    fullName: )\n"}