{"nodes":[{"pos":[1636,1642],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[3973,3981],"content":"Stream()","needQuote":true,"nodes":[{"content":"Stream()","pos":[0,8]}]},{"pos":[4763,4770],"content":"CanRead","needQuote":true,"nodes":[{"content":"CanRead","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the stream supports reading; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5440,5541],"source":"\\n<p>\\n<strong>true</strong> if the stream supports reading; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5831,5838],"content":"CanSeek","needQuote":true,"nodes":[{"content":"CanSeek","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the stream supports seeking; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6508,6609],"source":"\\n<p>\\n<strong>true</strong> if the stream supports seeking; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[6908,6918],"content":"CanTimeout","needQuote":true,"nodes":[{"content":"CanTimeout","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A value that determines whether the current stream can time out.&lt;/p&gt;\\n","pos":[7635,7710],"source":"\\n<p>A value that determines whether the current stream can time out.</p>\\n"},{"pos":[8187,8195],"content":"CanWrite","needQuote":true,"nodes":[{"content":"CanWrite","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the stream supports writing; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8869,8970],"source":"\\n<p>\\n<strong>true</strong> if the stream supports writing; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9258,9264],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;A long value representing the length of the stream in bytes.&lt;/p&gt;\\n","pos":[9896,9967],"source":"\\n<p>A long value representing the length of the stream in bytes.</p>\\n"},{"content":"\\n&lt;p&gt;A class derived from &lt;strong&gt;Stream&lt;/strong&gt; does not support seeking.","pos":[10086,10161],"source":"\\n<p>A class derived from <strong>Stream</strong> does not support seeking."},{"content":"&lt;/p&gt;\\n","pos":[10162,10168],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[10277,10330],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[10331,10337],"source":" </p>\\n"},{"pos":[10629,10637],"content":"Position","needQuote":true,"nodes":[{"content":"Position","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The current position within the stream.&lt;/p&gt;\\n","pos":[11286,11336],"source":"\\n<p>The current position within the stream.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[11441,11466],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[11467,11473],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support seeking.","pos":[11578,11619],"source":"\\n<p>The stream does not support seeking."},{"content":"&lt;/p&gt;\\n","pos":[11620,11626],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[11735,11788],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[11789,11795],"source":" </p>\\n"},{"pos":[12093,12104],"content":"ReadTimeout","needQuote":true,"nodes":[{"content":"ReadTimeout","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A value, in miliseconds, that determines how long the stream will attempt to read before timing out.&lt;/p&gt;\\n","pos":[12863,12974],"source":"\\n<p>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</p>\\n"},{"pos":[13625,13637],"content":"WriteTimeout","needQuote":true,"nodes":[{"content":"WriteTimeout","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A value, in miliseconds, that determines how long the stream will attempt to write before timing out.&lt;/p&gt;\\n","pos":[14402,14514],"source":"\\n<p>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</p>\\n"},{"pos":[15203,15217],"content":"CopyTo(Stream)","needQuote":true,"nodes":[{"content":"CopyTo(Stream)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The stream to which the contents of the current stream will be copied.&lt;/p&gt;\\n","pos":[15866,15947],"source":"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16066,16125],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The current stream does not support reading.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; does not support writing.&lt;/p&gt;\\n","pos":[16230,16355],"source":"\\n<p>The current stream does not support reading.</p>\\n<p>-or-</p>\\n<p>\\n<em>destination</em> does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[16759,16792],"source":"\\n<p>An I/O error occurred.</p>\\n"},{"pos":[17128,17149],"content":"CopyTo(Stream, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Stream, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The stream to which the contents of the current stream will be copied.&lt;/p&gt;\\n","pos":[17882,17963],"source":"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the buffer.","pos":[18031,18059],"source":"\\n<p>The size of the buffer."},{"content":"This value must be greater than zero.","pos":[18060,18097]},{"content":"The default size is 81920.&lt;/p&gt;\\n","pos":[18098,18130],"source":" The default size is 81920.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18249,18308],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bufferSize&lt;/em&gt; is negative or zero.&lt;/p&gt;\\n","pos":[18425,18478],"source":"\\n<p>\\n<em>bufferSize</em> is negative or zero.</p>\\n"},{"content":"\\n&lt;p&gt;The current stream does not support reading.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; does not support writing.&lt;/p&gt;\\n","pos":[18583,18708],"source":"\\n<p>The current stream does not support reading.</p>\\n<p>-or-</p>\\n<p>\\n<em>destination</em> does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[19112,19145],"source":"\\n<p>An I/O error occurred.</p>\\n"},{"pos":[19464,19483],"content":"CopyToAsync(Stream)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The stream to which the contents of the current stream will be copied.&lt;/p&gt;\\n","pos":[20351,20432],"source":"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous copy operation.&lt;/p&gt;\\n","pos":[20506,20572],"source":"\\n<p>A task that represents the asynchronous copy operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20691,20750],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Either the current stream or the destination stream is disposed.&lt;/p&gt;\\n","pos":[20859,20934],"source":"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The current stream does not support reading, or the destination stream does not support writing.&lt;/p&gt;\\n","pos":[21039,21146],"source":"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n"},{"pos":[21502,21528],"content":"CopyToAsync(Stream, Int32)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The stream to which the contents of the current stream will be copied.&lt;/p&gt;\\n","pos":[22480,22561],"source":"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The size, in bytes, of the buffer.","pos":[22629,22668],"source":"\\n<p>The size, in bytes, of the buffer."},{"content":"This value must be greater than zero.","pos":[22669,22706]},{"content":"The default size is 81920.&lt;/p&gt;\\n","pos":[22707,22739],"source":" The default size is 81920.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous copy operation.&lt;/p&gt;\\n","pos":[22813,22879],"source":"\\n<p>A task that represents the asynchronous copy operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22998,23057],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffersize&lt;/em&gt; is negative or zero.&lt;/p&gt;\\n","pos":[23174,23227],"source":"\\n<p>\\n<em>buffersize</em> is negative or zero.</p>\\n"},{"content":"\\n&lt;p&gt;Either the current stream or the destination stream is disposed.&lt;/p&gt;\\n","pos":[23336,23411],"source":"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The current stream does not support reading, or the destination stream does not support writing.&lt;/p&gt;\\n","pos":[23516,23623],"source":"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n"},{"pos":[24091,24136],"content":"CopyToAsync(Stream, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32, CancellationToken)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The stream to which the contents of the current stream will be copied.&lt;/p&gt;\\n","pos":[25244,25325],"source":"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The size, in bytes, of the buffer.","pos":[25393,25432],"source":"\\n<p>The size, in bytes, of the buffer."},{"content":"This value must be greater than zero.","pos":[25433,25470]},{"content":"The default size is 81920.&lt;/p&gt;\\n","pos":[25471,25503],"source":" The default size is 81920.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous copy operation.&lt;/p&gt;\\n","pos":[25854,25920],"source":"\\n<p>A task that represents the asynchronous copy operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26039,26098],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffersize&lt;/em&gt; is negative or zero.&lt;/p&gt;\\n","pos":[26215,26268],"source":"\\n<p>\\n<em>buffersize</em> is negative or zero.</p>\\n"},{"content":"\\n&lt;p&gt;Either the current stream or the destination stream is disposed.&lt;/p&gt;\\n","pos":[26377,26452],"source":"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The current stream does not support reading, or the destination stream does not support writing.&lt;/p&gt;\\n","pos":[26557,26664],"source":"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n"},{"pos":[26969,26978],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[27857,27873],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[28635,28778],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[29054,29061],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[29752,29777],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[29778,29784],"source":" </p>\\n"},{"pos":[30062,30074],"content":"FlushAsync()","needQuote":true,"nodes":[{"content":"FlushAsync()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous flush operation.&lt;/p&gt;\\n","pos":[30895,30962],"source":"\\n<p>A task that represents the asynchronous flush operation.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[31085,31125],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"pos":[31486,31515],"content":"FlushAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"FlushAsync(CancellationToken)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous flush operation.&lt;/p&gt;\\n","pos":[32791,32858],"source":"\\n<p>A task that represents the asynchronous flush operation.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[32981,33021],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"pos":[33424,33450],"content":"Read(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Byte[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[34289,34312],"source":"\\n<p>An array of bytes."},{"content":"When this method returns, the buffer contains the specified byte array with the values between &lt;em&gt;offset&lt;/em&gt; and (&lt;em&gt;offset&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the bytes read from the current source.","pos":[34313,34518],"source":" When this method returns, the buffer contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the bytes read from the current source."},{"content":"&lt;/p&gt;\\n","pos":[34519,34525],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin storing the data read from the current stream.","pos":[34893,35008],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin storing the data read from the current stream."},{"content":"&lt;/p&gt;\\n","pos":[35009,35015],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to be read from the current stream.","pos":[35078,35146],"source":"\\n<p>The maximum number of bytes to be read from the current stream."},{"content":"&lt;/p&gt;\\n","pos":[35147,35153],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The total number of bytes read into the buffer.","pos":[35212,35264],"source":"\\n<p>The total number of bytes read into the buffer."},{"content":"This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.&lt;/p&gt;\\n","pos":[35265,35425],"source":" This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.","pos":[35536,35620],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length."},{"content":"&lt;/p&gt;\\n","pos":[35621,35627],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35732,35780],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35781,35787],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[35904,35957],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[35958,35964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[36055,36080],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[36081,36087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading.","pos":[36192,36233],"source":"\\n<p>The stream does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[36234,36240],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[36349,36402],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[36403,36409],"source":" </p>\\n"},{"pos":[36997,37028],"content":"ReadAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The buffer to write the data into.&lt;/p&gt;\\n","pos":[38020,38065],"source":"\\n<p>The buffer to write the data into.</p>\\n"},{"content":"\\n&lt;p&gt;The byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing data from the stream.&lt;/p&gt;\\n","pos":[38129,38222],"source":"\\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to read.&lt;/p&gt;\\n","pos":[38285,38332],"source":"\\n<p>The maximum number of bytes to read.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[38420,38480],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[38481,38581],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[38582,38788]},{"content":"&lt;/p&gt;\\n","pos":[38789,38795],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38914,38968],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[39085,39144],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[39241,39331],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading.&lt;/p&gt;\\n","pos":[39436,39483],"source":"\\n<p>The stream does not support reading.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[39592,39632],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is currently in use by a previous read operation.","pos":[39745,39810],"source":"\\n<p>The stream is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[39811,39817],"source":" </p>\\n"},{"pos":[40500,40550],"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The buffer to write the data into.&lt;/p&gt;\\n","pos":[41708,41753],"source":"\\n<p>The buffer to write the data into.</p>\\n"},{"content":"\\n&lt;p&gt;The byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing data from the stream.&lt;/p&gt;\\n","pos":[41817,41910],"source":"\\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to read.&lt;/p&gt;\\n","pos":[41973,42020],"source":"\\n<p>The maximum number of bytes to read.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[42385,42445],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[42446,42546],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[42547,42753]},{"content":"&lt;/p&gt;\\n","pos":[42754,42760],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42879,42933],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[43050,43109],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[43206,43296],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading.&lt;/p&gt;\\n","pos":[43401,43448],"source":"\\n<p>The stream does not support reading.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[43557,43597],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is currently in use by a previous read operation.","pos":[43710,43775],"source":"\\n<p>The stream is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[43776,43782],"source":" </p>\\n"},{"pos":[44355,44365],"content":"ReadByte()","needQuote":true,"nodes":[{"content":"ReadByte()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The unsigned byte cast to an &lt;strong&gt;Int32&lt;/strong&gt;, or -1 if at the end of the stream.&lt;/p&gt;\\n","pos":[45024,45122],"source":"\\n<p>The unsigned byte cast to an <strong>Int32</strong>, or -1 if at the end of the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading.","pos":[45241,45282],"source":"\\n<p>The stream does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[45283,45289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[45398,45451],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[45452,45458],"source":" </p>\\n"},{"pos":[45824,45847],"content":"Seek(Int64, SeekOrigin)","needQuote":true,"nodes":[{"content":"Seek(Int64, SeekOrigin)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A byte offset relative to the &lt;em&gt;origin&lt;/em&gt; parameter.","pos":[46565,46626],"source":"\\n<p>A byte offset relative to the <em>origin</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[46627,46633],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new position within the current stream.&lt;/p&gt;\\n","pos":[46936,46990],"source":"\\n<p>The new position within the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[47095,47120],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[47121,47127],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support seeking, such as if the stream is constructed from a pipe or console output.","pos":[47232,47341],"source":"\\n<p>The stream does not support seeking, such as if the stream is constructed from a pipe or console output."},{"content":"&lt;/p&gt;\\n","pos":[47342,47348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[47457,47510],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[47511,47517],"source":" </p>\\n"},{"pos":[47850,47866],"content":"SetLength(Int64)","needQuote":true,"nodes":[{"content":"SetLength(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The desired length of the current stream in bytes.","pos":[48519,48574],"source":"\\n<p>The desired length of the current stream in bytes."},{"content":"&lt;/p&gt;\\n","pos":[48575,48581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[48686,48711],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[48712,48718],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.","pos":[48823,48949],"source":"\\n<p>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output."},{"content":"&lt;/p&gt;\\n","pos":[48950,48956],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[49065,49118],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[49119,49125],"source":" </p>\\n"},{"pos":[49520,49547],"content":"Write(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Byte[], Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[50376,50399],"source":"\\n<p>An array of bytes."},{"content":"This method copies &lt;em&gt;count&lt;/em&gt; bytes from &lt;em&gt;buffer&lt;/em&gt; to the current stream.","pos":[50400,50483],"source":" This method copies <em>count</em> bytes from <em>buffer</em> to the current stream."},{"content":"&lt;/p&gt;\\n","pos":[50484,50490],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin copying bytes to the current stream.","pos":[50554,50659],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream."},{"content":"&lt;/p&gt;\\n","pos":[50660,50666],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to be written to the current stream.","pos":[50729,50790],"source":"\\n<p>The number of bytes to be written to the current stream."},{"content":"&lt;/p&gt;\\n","pos":[50791,50797],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is greater than the buffer length.&lt;/p&gt;\\n","pos":[50908,50999],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is greater than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51104,51159],"source":"\\n<p>\\n<em>buffer</em>  is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[51276,51335],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occured, such as the specified file cannot be found.&lt;/p&gt;\\n","pos":[51426,51502],"source":"\\n<p>An I/O error occured, such as the specified file cannot be found.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing.&lt;/p&gt;\\n","pos":[51607,51654],"source":"\\n<p>The stream does not support writing.</p>\\n"},{"pos":[52534,52566],"content":"WriteAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The buffer to write data from.&lt;/p&gt;\\n","pos":[53556,53597],"source":"\\n<p>The buffer to write data from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; from which to begin copying bytes to the stream.&lt;/p&gt;\\n","pos":[53661,53766],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.&lt;/p&gt;\\n","pos":[53829,53877],"source":"\\n<p>The maximum number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[53951,54018],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54137,54191],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[54308,54367],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[54464,54554],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing.&lt;/p&gt;\\n","pos":[54659,54706],"source":"\\n<p>The stream does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[54815,54855],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is currently in use by a previous write operation.","pos":[54968,55034],"source":"\\n<p>The stream is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[55035,55041],"source":" </p>\\n"},{"pos":[55731,55782],"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The buffer to write data from.&lt;/p&gt;\\n","pos":[56938,56979],"source":"\\n<p>The buffer to write data from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; from which to begin copying bytes to the stream.&lt;/p&gt;\\n","pos":[57043,57148],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.&lt;/p&gt;\\n","pos":[57211,57259],"source":"\\n<p>The maximum number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[57610,57677],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57796,57850],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[57967,58026],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[58123,58213],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing.&lt;/p&gt;\\n","pos":[58318,58365],"source":"\\n<p>The stream does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[58474,58514],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is currently in use by a previous write operation.","pos":[58627,58693],"source":"\\n<p>The stream is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[58694,58700],"source":" </p>\\n"},{"pos":[59319,59334],"content":"WriteByte(Byte)","needQuote":true,"nodes":[{"content":"WriteByte(Byte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The byte to write to the stream.","pos":[60017,60054],"source":"\\n<p>The byte to write to the stream."},{"content":"&lt;/p&gt;\\n","pos":[60055,60061],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[60166,60191],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[60192,60198],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing, or the stream is already closed.","pos":[60303,60377],"source":"\\n<p>The stream does not support writing, or the stream is already closed."},{"content":"&lt;/p&gt;\\n","pos":[60378,60384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Methods were called after the stream was closed.","pos":[60493,60546],"source":"\\n<p>Methods were called after the stream was closed."},{"content":"&lt;/p&gt;\\n","pos":[60547,60553],"source":" </p>\\n"},{"pos":[60737,60746],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[60886,60892],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61042,61053],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[61228,61238],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[61333,61341],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[61410,61411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61438,61439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61509,61517],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[61586,61587],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61614,61615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61798,61812],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[61931,61937],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62004,62005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62055,62061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62121,62122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62205,62211],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62278,62279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62329,62335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62395,62396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62610,62632],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[62780,62786],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62853,62854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62904,62910],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62971,62972]},{"pos":[63027,63033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63093,63094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63191,63197],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63264,63265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63315,63321],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63382,63383]},{"pos":[63438,63444],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63504,63505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63750,63781],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[63947,63962],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[64038,64039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64089,64095],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64156,64157]},{"pos":[64212,64218],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64278,64279],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64385,64400],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[64476,64477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64527,64533],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64594,64595]},{"pos":[64650,64656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64716,64717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64947,64960],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[65061,65072],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[65144,65145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65172,65173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65246,65257],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[65329,65330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65357,65358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65533,65542],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[65635,65642],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65710,65711],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65738,65739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65808,65815],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65883,65884],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65911,65912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66087,66104],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[66213,66228],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[66304,66305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66332,66333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66410,66425],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[66501,66502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66529,66530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66675,66681],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[66818,66824],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[66976,66983],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[67130,67135],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[67276,67281],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67453,67457],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[67620,67642],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[67852,67869],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[68053,68069],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[68255,68264],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[68367,68374],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[68426,68427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68454,68455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68529,68536],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[68588,68589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68616,68617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68743,68749],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[68869,68873],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[68932,68934]},{"pos":[68997,69001],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[69059,69061],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[69262,69273],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[69478,69482],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[69556,69557],"content":"<","needQuote":true,"nodes":[]},{"pos":[69606,69611],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69752,69756],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[69831,69834]},{"pos":[69890,69895],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69954,69955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70156,70169],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[70366,70370],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[70423,70424],"content":"<","needQuote":true,"nodes":[]},{"pos":[70451,70458],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[70573,70577],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[70631,70634]},{"pos":[70668,70675],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[70708,70709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70913,70923],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[71084,71088],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[71242,71263],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[71453,71476],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[71683,71694],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[71879,71904],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[72104,72125],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[72319,72346],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[72565,72582],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.IO.Stream\n  commentId: T:System.IO.Stream\n  id: Stream\n  parent: System.IO\n  children:\n  - System.IO.Stream.#ctor\n  - System.IO.Stream.CanRead\n  - System.IO.Stream.CanSeek\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.CanWrite\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.Dispose(System.Boolean)\n  - System.IO.Stream.Flush\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.Stream.Length\n  - System.IO.Stream.Null\n  - System.IO.Stream.Position\n  - System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.ReadByte\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.Stream.SetLength(System.Int64)\n  - System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.WriteByte(System.Byte)\n  - System.IO.Stream.WriteTimeout\n  langs:\n  - csharp\n  - vb\n  name: Stream\n  fullName: System.IO.Stream\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stream\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 30\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Provides a generic view of a sequence of bytes. This is an abstract class.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class Stream : IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class Stream\n          Implements IDisposable\n  seealso:\n  - type: System.IO.FileStream\n    commentId: T:System.IO.FileStream\n  - type: System.IO.MemoryStream\n    commentId: T:System.IO.MemoryStream\n  - type: System.IO.BufferedStream\n    commentId: T:System.IO.BufferedStream\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Stream\n- uid: System.IO.Stream.Null\n  commentId: F:System.IO.Stream.Null\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  fullName: System.IO.Stream.Null\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 38\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>A <strong>Stream</strong> with no backing store.</p>\\n\"\n  syntax:\n    content: public static readonly Stream Null\n    content.vb: Public Shared ReadOnly Null As Stream\n    return:\n      type: System.IO.Stream\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Stream.Null\n- uid: System.IO.Stream.#ctor\n  commentId: M:System.IO.Stream.#ctor\n  id: '#ctor'\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Stream()\n  fullName: System.IO.Stream.Stream()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.IO/ref/System.IO.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.IO/ref/System.IO.cs\n    startLine: 155\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected Stream()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Stream.Stream()\n- uid: System.IO.Stream.CanRead\n  commentId: P:System.IO.Stream.CanRead\n  id: CanRead\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CanRead\n  fullName: System.IO.Stream.CanRead\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanRead\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 59\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</p>\\n\"\n  syntax:\n    content: public abstract bool CanRead { get; }\n    content.vb: Public MustOverride ReadOnly Property CanRead As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the stream supports reading; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Stream.CanRead\n- uid: System.IO.Stream.CanSeek\n  commentId: P:System.IO.Stream.CanSeek\n  id: CanSeek\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CanSeek\n  fullName: System.IO.Stream.CanSeek\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanSeek\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 65\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</p>\\n\"\n  syntax:\n    content: public abstract bool CanSeek { get; }\n    content.vb: Public MustOverride ReadOnly Property CanSeek As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the stream supports seeking; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Stream.CanSeek\n- uid: System.IO.Stream.CanTimeout\n  commentId: P:System.IO.Stream.CanTimeout\n  id: CanTimeout\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CanTimeout\n  fullName: System.IO.Stream.CanTimeout\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanTimeout\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 70\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value that determines whether the current stream can time out.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual bool CanTimeout { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property CanTimeout As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A value that determines whether the current stream can time out.</p>\\n\"\n  seealso:\n  - type: System.IO.Stream.ReadTimeout\n    commentId: P:System.IO.Stream.ReadTimeout\n  - type: System.IO.Stream.WriteTimeout\n    commentId: P:System.IO.Stream.WriteTimeout\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Stream.CanTimeout\n- uid: System.IO.Stream.CanWrite\n  commentId: P:System.IO.Stream.CanWrite\n  id: CanWrite\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CanWrite\n  fullName: System.IO.Stream.CanWrite\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanWrite\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 78\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</p>\\n\"\n  syntax:\n    content: public abstract bool CanWrite { get; }\n    content.vb: Public MustOverride ReadOnly Property CanWrite As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the stream supports writing; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Stream.CanWrite\n- uid: System.IO.Stream.Length\n  commentId: P:System.IO.Stream.Length\n  id: Length\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.IO.Stream.Length\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Length\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 83\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, gets the length in bytes of the stream.</p>\\n\"\n  syntax:\n    content: public abstract long Length { get; }\n    content.vb: Public MustOverride ReadOnly Property Length As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A long value representing the length of the stream in bytes.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>A class derived from <strong>Stream</strong> does not support seeking. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Stream.Length\n- uid: System.IO.Stream.Position\n  commentId: P:System.IO.Stream.Position\n  id: Position\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Position\n  fullName: System.IO.Stream.Position\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Position\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 87\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, gets or sets the position within the current stream.</p>\\n\"\n  syntax:\n    content: public abstract long Position { get; set; }\n    content.vb: Public MustOverride Property Position As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The current position within the stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support seeking. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Stream.Position\n- uid: System.IO.Stream.ReadTimeout\n  commentId: P:System.IO.Stream.ReadTimeout\n  id: ReadTimeout\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: ReadTimeout\n  fullName: System.IO.Stream.ReadTimeout\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadTimeout\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 92\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. </p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual int ReadTimeout { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Property ReadTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.IO.Stream.ReadTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method always throws an <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stream.ReadTimeout\n- uid: System.IO.Stream.WriteTimeout\n  commentId: P:System.IO.Stream.WriteTimeout\n  id: WriteTimeout\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: WriteTimeout\n  fullName: System.IO.Stream.WriteTimeout\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteTimeout\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 103\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. </p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual int WriteTimeout { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Property WriteTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.IO.Stream.WriteTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method always throws an <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stream.WriteTimeout\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)\n  id: CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Stream)\n  fullName: System.IO.Stream.CopyTo(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 155\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the bytes from the current stream and writes them to another stream.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Stream destination)\n    content.vb: Public Sub CopyTo(destination As Stream)\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream does not support reading.</p>\\n<p>-or-</p>\\n<p>\\n<em>destination</em> does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Either the current stream or <em>destination</em> were closed before the <xref href=\\\"System.IO.Stream.CopyTo(System.IO.Stream)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  id: CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Stream, Int32)\n  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 160\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Stream destination, int bufferSize)\n    content.vb: Public Sub CopyTo(destination As Stream, bufferSize As Integer)\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n\"\n    - id: bufferSize\n      type: System.Int32\n      description: \"\\n<p>The size of the buffer. This value must be greater than zero. The default size is 81920.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>bufferSize</em> is negative or zero.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream does not support reading.</p>\\n<p>-or-</p>\\n<p>\\n<em>destination</em> does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Either the current stream or <em>destination</em> were closed before the <xref href=\\\"System.IO.Stream.CopyTo(System.IO.Stream)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)\n  id: CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CopyToAsync(Stream)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyToAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 114\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads the bytes from the current stream and writes them to another stream.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task CopyToAsync(Stream destination)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function CopyToAsync(destination As Stream) As Task\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous copy operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  id: CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CopyToAsync(Stream, Int32)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyToAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 121\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task CopyToAsync(Stream destination, int bufferSize)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function CopyToAsync(destination As Stream, bufferSize As Integer) As Task\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n\"\n    - id: bufferSize\n      type: System.Int32\n      description: \"\\n<p>The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous copy operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>buffersize</em> is negative or zero.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyToAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 128\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function CopyToAsync(destination As Stream, bufferSize As Integer, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n\"\n    - id: bufferSize\n      type: System.Int32\n      description: \"\\n<p>The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests. The default value is <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous copy operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>buffersize</em> is negative or zero.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.Dispose\n  commentId: M:System.IO.Stream.Dispose\n  id: Dispose\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.Stream.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 190\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stream.Dispose()\n- uid: System.IO.Stream.Dispose(System.Boolean)\n  commentId: M:System.IO.Stream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.Stream.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 202\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Stream.Dispose(Boolean)\n- uid: System.IO.Stream.Flush\n  commentId: M:System.IO.Stream.Flush\n  id: Flush\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.IO.Stream.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Flush\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 209\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\\n\"\n  syntax:\n    content: public abstract void Flush()\n    content.vb: Public MustOverride Sub Flush\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Stream.Flush()\n- uid: System.IO.Stream.FlushAsync\n  commentId: M:System.IO.Stream.FlushAsync\n  id: FlushAsync\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: FlushAsync()\n  fullName: System.IO.Stream.FlushAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FlushAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 211\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task FlushAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function FlushAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous flush operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stream.FlushAsync()\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: FlushAsync(CancellationToken)\n  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FlushAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 218\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task FlushAsync(CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function FlushAsync(cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests. The default value is <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous flush operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stream.FlushAsync(CancellationToken)\n- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Read(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 684\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\\n\"\n  syntax:\n    content: public abstract int Read([In, Out] byte[] buffer, int offset, int count)\n    content.vb: Public MustOverride Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the bytes read from the current source. </p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin storing the data read from the current stream. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to be read from the current stream. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support reading. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)\n  name.vb: Read(Byte(), Int32, Int32)\n  nameWithType: Stream.Read(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.Read(Byte(), Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 335\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task<int> ReadAsync(byte[] buffer, int offset, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write the data into.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to read.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support reading.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The stream is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Byte(), Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 342\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write the data into.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to read.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests. The default value is <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support reading.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The stream is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.ReadByte\n  commentId: M:System.IO.Stream.ReadByte\n  id: ReadByte\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: ReadByte()\n  fullName: System.IO.Stream.ReadByte()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadByte\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 692\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p>\\n\"\n  syntax:\n    content: public virtual int ReadByte()\n    content.vb: Public Overridable Function ReadByte As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The unsigned byte cast to an <strong>Int32</strong>, or -1 if at the end of the stream.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support reading. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stream.ReadByte()\n- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Seek(Int64, SeekOrigin)\n  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Seek\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 680\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, sets the position within the current stream.</p>\\n\"\n  syntax:\n    content: public abstract long Seek(long offset, SeekOrigin origin)\n    content.vb: Public MustOverride Function Seek(offset As Long, origin As SeekOrigin) As Long\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>A byte offset relative to the <em>origin</em> parameter. </p>\\n\"\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: \"\\n<p>A value of type <xref href=\\\"System.IO.SeekOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> indicating the reference point used to obtain the new position. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The new position within the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Stream.Seek(Int64, SeekOrigin)\n- uid: System.IO.Stream.SetLength(System.Int64)\n  commentId: M:System.IO.Stream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: SetLength(Int64)\n  fullName: System.IO.Stream.SetLength(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetLength\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 682\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, sets the length of the current stream.</p>\\n\"\n  syntax:\n    content: public abstract void SetLength(long value)\n    content.vb: Public MustOverride Sub SetLength(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The desired length of the current stream in bytes. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Stream.SetLength(Int64)\n- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 704\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\\n\"\n  syntax:\n    content: public abstract void Write(byte[] buffer, int offset, int count)\n    content.vb: Public MustOverride Sub Write(buffer As Byte(), offset As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. This method copies <em>count</em> bytes from <em>buffer</em> to the current stream. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to be written to the current stream. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is greater than the buffer length.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em>  is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occured, such as the specified file cannot be found.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>\\n<xref href=\\\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was called after the stream was closed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)\n  name.vb: Write(Byte(), Int32, Int32)\n  nameWithType: Stream.Write(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.Write(Byte(), Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 636\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task WriteAsync(byte[] buffer, int offset, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write data from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The stream is currently in use by a previous write operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteAsync(Byte(), Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 645\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write data from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests. The default value is <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The stream is currently in use by a previous write operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  commentId: M:System.IO.Stream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.IO.Stream\n  langs:\n  - csharp\n  - vb\n  name: WriteByte(Byte)\n  fullName: System.IO.Stream.WriteByte(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Stream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteByte\n    path: src/mscorlib/src/System/IO/Stream.cs\n    startLine: 711\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</p>\\n\"\n  syntax:\n    content: public virtual void WriteByte(byte value)\n    content.vb: Public Overridable Sub WriteByte(value As Byte)\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The byte to write to the stream. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing, or the stream is already closed. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Methods were called after the stream was closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stream.WriteByte(Byte)\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  fullName: System.IO.SeekOrigin\n  nameWithType: SeekOrigin\n  commentId: T:System.IO.SeekOrigin\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}