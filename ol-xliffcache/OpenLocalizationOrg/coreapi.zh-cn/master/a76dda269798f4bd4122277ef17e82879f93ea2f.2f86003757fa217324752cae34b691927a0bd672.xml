{"nodes":[{"pos":[609,634],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"content":"\\n&lt;p&gt;The type of keys in the dictionary.&lt;/p&gt;\\n","pos":[1493,1539],"source":"\\n<p>The type of keys in the dictionary.</p>\\n"},{"content":"\\n&lt;p&gt;The type of values in the dictionary.&lt;/p&gt;\\n","pos":[1578,1626],"source":"\\n<p>The type of values in the dictionary.</p>\\n"},{"pos":[3511,3521],"content":"Item[TKey]","needQuote":true,"nodes":[{"content":"Item[TKey]","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The key of the element to get or set.&lt;/p&gt;\\n","pos":[4210,4258],"source":"\\n<p>The key of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element with the specified key.&lt;/p&gt;\\n","pos":[4315,4361],"source":"\\n<p>The element with the specified key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4480,4531],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The property is retrieved and &lt;em&gt;key&lt;/em&gt; is not found.&lt;/p&gt;\\n","pos":[4674,4741],"source":"\\n<p>The property is retrieved and <em>key</em> is not found.</p>\\n"},{"pos":[5878,5882],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[7635,7641],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[9430,9447],"content":"Add(TKey, TValue)","needQuote":true,"nodes":[{"content":"Add(TKey, TValue)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The object to use as the key of the element to add.&lt;/p&gt;\\n","pos":[10244,10306],"source":"\\n<p>The object to use as the key of the element to add.</p>\\n"},{"content":"\\n&lt;p&gt;The object to use as the value of the element to add.&lt;/p&gt;\\n","pos":[10367,10431],"source":"\\n<p>The object to use as the value of the element to add.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10550,10601],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[11825,11842],"content":"ContainsKey(TKey)","needQuote":true,"nodes":[{"content":"ContainsKey(TKey)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13187,13238],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[13684,13696],"content":"Remove(TKey)","needQuote":true,"nodes":[{"content":"Remove(TKey)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.&lt;/p&gt;\\n","pos":[14479,14523],"source":"\\n<p>The key of the element to remove.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15009,15060],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[15894,15923],"content":"TryGetValue(TKey, out TValue)","needQuote":true,"nodes":[{"content":"TryGetValue(TKey, out TValue)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The key whose value to get.&lt;/p&gt;\\n","pos":[16675,16713],"source":"\\n<p>The key whose value to get.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;em&gt;value&lt;/em&gt; parameter.","pos":[16774,16945],"source":"\\n<p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <em>value</em> parameter."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[16946,16991],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17415,17466],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[18119,18145],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[18556,18561],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[19332,19342],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[20186,20217],"content":"Add(KeyValuePair<TKey, TValue>)","needQuote":true,"nodes":[{"content":"Add(KeyValuePair&lt;TKey, TValue&gt;)","pos":[0,31],"source":"Add(KeyValuePair<TKey, TValue>)"}]},{"pos":[20689,20692],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[20815,20816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20894,20906],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[20971,20972],"content":"<","needQuote":true,"nodes":[]},{"pos":[20999,21003],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[21034,21035]},{"pos":[21067,21073],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[21137,21138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21234,21237],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[21366,21367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21445,21457],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[21523,21526]},{"pos":[21560,21564],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[21595,21596]},{"pos":[21628,21634],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[21666,21667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21694,21695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22340,22347],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[22666,22671],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[22796,22797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22824,22825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22919,22924],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[23055,23056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23083,23084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23700,23736],"content":"Contains(KeyValuePair<TKey, TValue>)","needQuote":true,"nodes":[{"content":"Contains(KeyValuePair&lt;TKey, TValue&gt;)","pos":[0,36],"source":"Contains(KeyValuePair<TKey, TValue>)"}]},{"pos":[24228,24236],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[24364,24365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24443,24455],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[24520,24521],"content":"<","needQuote":true,"nodes":[]},{"pos":[24548,24552],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[24583,24584]},{"pos":[24616,24622],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[24686,24687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24788,24796],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[24930,24931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25009,25021],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[25087,25090]},{"pos":[25124,25128],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[25159,25160]},{"pos":[25192,25198],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[25230,25231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25258,25259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26013,26056],"content":"CopyTo(KeyValuePair<TKey, TValue>[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(KeyValuePair&lt;TKey, TValue&gt;[], Int32)","pos":[0,43],"source":"CopyTo(KeyValuePair<TKey, TValue>[], Int32)"}]},{"pos":[26596,26602],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[26728,26729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26807,26819],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[26884,26885],"content":"<","needQuote":true,"nodes":[]},{"pos":[26912,26916],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[26947,26948]},{"pos":[26980,26986],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"content":"[]","pos":[27051,27053]},{"content":",","pos":[27085,27086]},{"pos":[27140,27145],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27204,27205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27319,27325],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[27457,27458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27536,27548],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[27614,27617]},{"pos":[27651,27655],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[27686,27687]},{"pos":[27719,27725],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[27757,27758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27785,27787],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[27816,27817]},{"pos":[27871,27876],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27935,27936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28687,28721],"content":"Remove(KeyValuePair<TKey, TValue>)","needQuote":true,"nodes":[{"content":"Remove(KeyValuePair&lt;TKey, TValue&gt;)","pos":[0,34],"source":"Remove(KeyValuePair<TKey, TValue>)"}]},{"pos":[29205,29211],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[29337,29338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29416,29428],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[29493,29494],"content":"<","needQuote":true,"nodes":[]},{"pos":[29521,29525],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[29556,29557]},{"pos":[29589,29595],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[29659,29660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29759,29765],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[29897,29898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29976,29988],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[30054,30057]},{"pos":[30091,30095],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[30126,30127]},{"pos":[30159,30165],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[30197,30198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30225,30226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30896,30911],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[31254,31267],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[31400,31401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31428,31429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31531,31544],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[31683,31684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31711,31712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32119,32134],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[32273,32286],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[32356,32357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32384,32385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32477,32490],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[32560,32561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32588,32589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32792,32797],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[33270,33309],"content":"ICollection<KeyValuePair<TKey, TValue>>","needQuote":true,"nodes":[{"content":"ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;","pos":[0,39],"source":"ICollection<KeyValuePair<TKey, TValue>>"}]},{"pos":[33663,33674],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[33738,33739],"content":"<","needQuote":true,"nodes":[]},{"pos":[33817,33829],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[33894,33895],"content":"<","needQuote":true,"nodes":[]},{"pos":[33922,33926],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[33957,33958]},{"pos":[33990,33996],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[34153,34164],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[34229,34232]},{"pos":[34317,34329],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[34395,34398]},{"pos":[34432,34436],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[34467,34468]},{"pos":[34500,34506],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[34538,34539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34566,34567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34894,34904],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[35282,35288],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[35500,35503],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[35574,35575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35602,35603],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35630,35631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35727,35730],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[35804,35805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35832,35833],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35860,35861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36106,36113],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[36325,36330],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[36403,36404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36431,36432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36526,36531],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[36607,36608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36635,36636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36888,36899],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[37126,37134],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[37210,37211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37238,37239],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37266,37267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37368,37376],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[37455,37456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37483,37484],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37511,37512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37791,37809],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[38107,38113],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[38187,38188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38215,38216],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[38244,38246]},{"content":",","pos":[38278,38279]},{"pos":[38333,38338],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38397,38398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38512,38518],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[38595,38596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38623,38624],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[38651,38653],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[38682,38683]},{"pos":[38737,38742],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38801,38802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39094,39103],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[39324,39330],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[39404,39405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39432,39433],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[39460,39461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39560,39566],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[39643,39644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39671,39672],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[39699,39700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39962,39977],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[40213,40226],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[40307,40308],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40335,40336],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40438,40451],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[40535,40536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40563,40564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40955,40994],"content":"IEnumerable<KeyValuePair<TKey, TValue>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;","pos":[0,39],"source":"IEnumerable<KeyValuePair<TKey, TValue>>"}]},{"pos":[41348,41359],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41423,41424],"content":"<","needQuote":true,"nodes":[]},{"pos":[41502,41514],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[41579,41580],"content":"<","needQuote":true,"nodes":[]},{"pos":[41607,41611],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[41642,41643]},{"pos":[41675,41681],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[41838,41849],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[41914,41917]},{"pos":[42002,42014],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[42080,42083]},{"pos":[42117,42121],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[42152,42153]},{"pos":[42185,42191],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[42223,42224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42251,42252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42587,42598],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[42792,42806],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[43025,43036],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[43100,43101],"content":"<","needQuote":true,"nodes":[]},{"pos":[43128,43129],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[43249,43260],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[43325,43328]},{"pos":[43362,43363],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[43390,43391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43608,43622],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[43841,43852],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[43916,43917],"content":"<","needQuote":true,"nodes":[]},{"pos":[43944,43945],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[44065,44076],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[44141,44144]},{"pos":[44178,44179],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[44206,44207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44402,44420],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[44564,44568],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[44676,44682],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[44789,44793],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[44874,44880],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[45077,45094],"content":"ICollection<TKey>","needQuote":true,"nodes":[{"content":"ICollection&lt;TKey&gt;","pos":[0,17],"source":"ICollection<TKey>"}]},{"pos":[45322,45333],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[45397,45398],"content":"<","needQuote":true,"nodes":[]},{"pos":[45425,45429],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[45552,45563],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[45628,45631]},{"pos":[45665,45669],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[45699,45700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46005,46024],"content":"ICollection<TValue>","needQuote":true,"nodes":[{"content":"ICollection&lt;TValue&gt;","pos":[0,19],"source":"ICollection<TValue>"}]},{"pos":[46258,46269],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[46333,46334],"content":"<","needQuote":true,"nodes":[]},{"pos":[46361,46367],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[46492,46503],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[46568,46571]},{"pos":[46605,46611],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[46643,46644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46864,46871],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[46995,47001],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[47130,47151],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[47358,47378],"content":"KeyNotFoundException","needQuote":true,"nodes":[{"content":"KeyNotFoundException","pos":[0,20]}]},{"pos":[47620,47641],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[47842,47859],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.Generic.IDictionary`2\n  commentId: T:System.Collections.Generic.IDictionary`2\n  id: IDictionary`2\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.IDictionary`2.Add(`0,`1)\n  - System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n  - System.Collections.Generic.IDictionary`2.Item(`0)\n  - System.Collections.Generic.IDictionary`2.Keys\n  - System.Collections.Generic.IDictionary`2.Remove(`0)\n  - System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)\n  - System.Collections.Generic.IDictionary`2.Values\n  langs:\n  - csharp\n  - vb\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  type: Interface\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IDictionary\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 23\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Represents a generic collection of key/value pairs.</p>\\n\"\n  syntax:\n    content: 'public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable'\n    content.vb: >-\n      Public Interface IDictionary(Of TKey, TValue)\n          Inherits ICollection(Of KeyValuePair(Of TKey, TValue))\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The type of keys in the dictionary.</p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The type of values in the dictionary.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1\n    commentId: T:System.Collections.Generic.ICollection`1\n  - type: System.Collections\n    commentId: N:System.Collections\n  inheritedMembers:\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)\n  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})\n  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n- uid: System.Collections.Generic.IDictionary`2.Item(`0)\n  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)\n  id: Item(`0)\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: Item[TKey]\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets or sets the element with the specified key.</p>\\n\"\n  syntax:\n    content: TValue this[TKey key] { get; set; }\n    content.vb: Property Item(key As TKey) As TValue\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key of the element to get or set.</p>\\n\"\n    return:\n      type: '{TValue}'\n      description: \"\\n<p>The element with the specified key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: \"\\n<p>The property is retrieved and <em>key</em> is not found.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IDictionary`2.Add(`0,`1)\n    commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)\n  - type: System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n    commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n  - type: System.Collections.Generic.ICollection`1.IsReadOnly\n    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)\n  name.vb: Item(TKey)\n  nameWithType: IDictionary<TKey, TValue>.Item[TKey]\n  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)\n- uid: System.Collections.Generic.IDictionary`2.Keys\n  commentId: P:System.Collections.Generic.IDictionary`2.Keys\n  id: Keys\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Keys\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the keys of the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ICollection<TKey> Keys { get; }\n    content.vb: ReadOnly Property Keys As ICollection(Of TKey)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the keys of the object that implements <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1\n    commentId: T:System.Collections.Generic.ICollection`1\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys\n  nameWithType: IDictionary<TKey, TValue>.Keys\n  nameWithType.vb: IDictionary(Of TKey, TValue).Keys\n- uid: System.Collections.Generic.IDictionary`2.Values\n  commentId: P:System.Collections.Generic.IDictionary`2.Values\n  id: Values\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Values\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the values in the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ICollection<TValue> Values { get; }\n    content.vb: ReadOnly Property Values As ICollection(Of TValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{{TValue}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the values in the object that implements <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1\n    commentId: T:System.Collections.Generic.ICollection`1\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values\n  nameWithType: IDictionary<TKey, TValue>.Values\n  nameWithType.vb: IDictionary(Of TKey, TValue).Values\n- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)\n  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)\n  id: Add(`0,`1)\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: Add(TKey, TValue)\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Adds an element with the provided key and value to the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void Add(TKey key, TValue value)\n    content.vb: Sub Add(key As TKey, value As TValue)\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The object to use as the key of the element to add.</p>\\n\"\n    - id: value\n      type: '{TValue}'\n      description: \"\\n<p>The object to use as the value of the element to add.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An element with the same key already exists in the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IDictionary`2.Item(`0)\n    commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)\n  - type: System.Collections.Generic.ICollection`1.IsReadOnly\n    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)\n  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)\n  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)\n- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n  id: ContainsKey(`0)\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: ContainsKey(TKey)\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContainsKey\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 45\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified key.</p>\\n\"\n  syntax:\n    content: bool ContainsKey(TKey key)\n    content.vb: Function ContainsKey(key As TKey) As Boolean\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)\n  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)\n  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)\n- uid: System.Collections.Generic.IDictionary`2.Remove(`0)\n  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: Remove(TKey)\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Removes the element with the specified key from the <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool Remove(TKey key)\n    content.vb: Function Remove(key As TKey) As Boolean\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key of the element to remove.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the element is successfully removed; otherwise, <strong>false</strong>.  This method also returns <strong>false</strong> if <em>key</em> was not found in the original <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1.IsReadOnly\n    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)\n  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)\n  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)\n- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)\n  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)\n  id: TryGetValue(`0,`1@)\n  parent: System.Collections.Generic.IDictionary`2\n  langs:\n  - csharp\n  - vb\n  name: TryGetValue(TKey, out TValue)\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryGetValue\n    path: src/mscorlib/src/System/Collections/Generic/IDictionary.cs\n    startLine: 55\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the value associated with the specified key.</p>\\n\"\n  syntax:\n    content: bool TryGetValue(TKey key, out TValue value)\n    content.vb: Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key whose value to get.</p>\\n\"\n    - id: value\n      type: '{TValue}'\n      description: \"\\n<p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <em>value</em> parameter. This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object that implements <xref href=\\\"System.Collections.Generic.IDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n    commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)\n  - type: System.Collections.Generic.IDictionary`2.Item(`0)\n    commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)\n  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)\n  name.vb: TryGetValue(TKey, ByRef TValue)\n  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)\n  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Count\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Count\n  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Count\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.IsReadOnly\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).IsReadOnly\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.IsReadOnly\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.Add(`0)\n  name: Add(KeyValuePair<TKey, TValue>)\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: Add(KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Add(KeyValuePair(Of TKey, TValue))\n  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.Clear\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Clear()\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Clear()\n  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.Contains(`0)\n  name: Contains(KeyValuePair<TKey, TValue>)\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: Contains(KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Contains(KeyValuePair(Of TKey, TValue))\n  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  name: CopyTo(KeyValuePair<TKey, TValue>[], Int32)\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)\n  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)\n  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})\n  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.ICollection`1.Remove(`0)\n  name: Remove(KeyValuePair<TKey, TValue>)\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: Remove(KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Remove(KeyValuePair(Of TKey, TValue))\n  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator\n  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.Generic.ICollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection`1.Count\n- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<KeyValuePair<TKey, TValue>>\n  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: ICollection(Of KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: ICollection<KeyValuePair<TKey, TValue>>\n  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue))\n  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  isExternal: false\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)\n- uid: System.Collections.Generic.ICollection`1.Clear\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection`1.Clear\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  isExternal: false\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  isExternal: true\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  isExternal: false\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)\n- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<KeyValuePair<TKey, TValue>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>\n  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))\n  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection`1\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: '{TKey}'\n  definition: TKey\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n  commentId: '!:TKey'\n- uid: '{TValue}'\n  definition: TValue\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n  commentId: '!:TValue'\n- uid: TKey\n  isExternal: false\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n- uid: TValue\n  isExternal: false\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n- uid: System.Collections.Generic.ICollection{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<TKey>\n  fullName: System.Collections.Generic.ICollection<TKey>\n  fullname.vb: System.Collections.Generic.ICollection(Of TKey)\n  name.vb: ICollection(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  nameWithType: ICollection<TKey>\n  nameWithType.vb: ICollection(Of TKey)\n  commentId: T:System.Collections.Generic.ICollection{`0}\n- uid: System.Collections.Generic.ICollection{{TValue}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<TValue>\n  fullName: System.Collections.Generic.ICollection<TValue>\n  fullname.vb: System.Collections.Generic.ICollection(Of TValue)\n  name.vb: ICollection(Of TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: ICollection<TValue>\n  nameWithType.vb: ICollection(Of TValue)\n  commentId: T:System.Collections.Generic.ICollection{`1}\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Collections.Generic.KeyNotFoundException\n  isExternal: false\n  name: KeyNotFoundException\n  fullName: System.Collections.Generic.KeyNotFoundException\n  nameWithType: KeyNotFoundException\n  commentId: T:System.Collections.Generic.KeyNotFoundException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}