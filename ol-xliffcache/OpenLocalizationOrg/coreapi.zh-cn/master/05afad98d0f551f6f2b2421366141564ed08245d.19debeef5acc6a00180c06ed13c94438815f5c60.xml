{"nodes":[{"pos":[2991,3001],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[4545,4546],"content":"W","needQuote":true,"nodes":[{"content":"W","pos":[0,1]}]},{"pos":[5360,5361],"content":"X","needQuote":true,"nodes":[{"content":"X","pos":[0,1]}]},{"pos":[6187,6188],"content":"Y","needQuote":true,"nodes":[{"content":"Y","pos":[0,1]}]},{"pos":[7014,7015],"content":"Z","needQuote":true,"nodes":[{"content":"Z","pos":[0,1]}]},{"pos":[7972,7999],"content":"Quaternion(Vector3, Single)","needQuote":true,"nodes":[{"content":"Quaternion(Vector3, Single)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The vector part of the quaternion.","pos":[8786,8825],"source":"\\n<p>The vector part of the quaternion."},{"content":"&lt;/p&gt;\\n","pos":[8826,8832],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The rotation part of the quaternion.","pos":[8901,8942],"source":"\\n<p>The rotation part of the quaternion."},{"content":"&lt;/p&gt;\\n","pos":[8943,8949],"source":" </p>\\n"},{"pos":[9409,9451],"content":"Quaternion(Single, Single, Single, Single)","needQuote":true,"nodes":[{"content":"Quaternion(Single, Single, Single, Single)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The value to assign to the X component of the quaternion.","pos":[10231,10293],"source":"\\n<p>The value to assign to the X component of the quaternion."},{"content":"&lt;/p&gt;\\n","pos":[10294,10300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to assign to the Y component of the quaternion.&lt;/p&gt;\\n","pos":[10360,10428],"source":"\\n<p>The value to assign to the Y component of the quaternion.</p>\\n"},{"content":"\\n&lt;p&gt;The value to assign to the Z component of the quaternion.&lt;/p&gt;\\n","pos":[10488,10556],"source":"\\n<p>The value to assign to the Z component of the quaternion.</p>\\n"},{"content":"\\n&lt;p&gt;The value to assign to the W component of the quaternion.&lt;/p&gt;\\n","pos":[10616,10684],"source":"\\n<p>The value to assign to the W component of the quaternion.</p>\\n"},{"pos":[10995,11003],"content":"Identity","needQuote":true,"nodes":[{"content":"Identity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A quaternion whose values are &lt;code&gt;(0, 0, 0, 1)&lt;/code&gt;.","pos":[11707,11768],"source":"\\n<p>A quaternion whose values are <code>(0, 0, 0, 1)</code>."},{"content":"&lt;/p&gt;\\n","pos":[11769,11775],"source":" </p>\\n"},{"pos":[12101,12111],"content":"IsIdentity","needQuote":true,"nodes":[{"content":"IsIdentity","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is the identity quaternion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[12826,12941],"source":"\\n<p>\\n<strong>true</strong> if the current instance is the identity quaternion; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12943,12949],"source":"  </p>\\n"},{"pos":[13509,13536],"content":"Add(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Add(Quaternion, Quaternion)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[14383,14409],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[14410,14416],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[14494,14521],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[14522,14528],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The quaternion that contains the summed values of &lt;em&gt;value1&lt;/em&gt; and &lt;em&gt;value2&lt;/em&gt;.","pos":[14601,14692],"source":"\\n<p>The quaternion that contains the summed values of <em>value1</em> and <em>value2</em>."},{"content":"&lt;/p&gt;\\n","pos":[14693,14699],"source":" </p>\\n"},{"pos":[15191,15226],"content":"Concatenate(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Concatenate(Quaternion, Quaternion)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first quaternion rotation in the series.","pos":[16045,16094],"source":"\\n<p>The first quaternion rotation in the series."},{"content":"&lt;/p&gt;\\n","pos":[16095,16101],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion rotation in the series.","pos":[16179,16229],"source":"\\n<p>The second quaternion rotation in the series."},{"content":"&lt;/p&gt;\\n","pos":[16230,16236],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new quaternion representing the concatenation of the &lt;em&gt;value1&lt;/em&gt; rotation followed by the &lt;em&gt;value2&lt;/em&gt; rotation.","pos":[16309,16435],"source":"\\n<p>A new quaternion representing the concatenation of the <em>value1</em> rotation followed by the <em>value2</em> rotation."},{"content":"&lt;/p&gt;\\n","pos":[16436,16442],"source":" </p>\\n"},{"pos":[16855,16876],"content":"Conjugate(Quaternion)","needQuote":true,"nodes":[{"content":"Conjugate(Quaternion)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The quaternion.","pos":[17634,17654],"source":"\\n<p>The quaternion."},{"content":"&lt;/p&gt;\\n","pos":[17655,17661],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new quaternion that is the conjugate of &lt;strong&gt;value&lt;/strong&gt;.","pos":[17734,17804],"source":"\\n<p>A new quaternion that is the conjugate of <strong>value</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17805,17811],"source":" </p>\\n"},{"pos":[18273,18309],"content":"CreateFromAxisAngle(Vector3, Single)","needQuote":true,"nodes":[{"content":"CreateFromAxisAngle(Vector3, Single)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The vector to rotate around.","pos":[19164,19197],"source":"\\n<p>The vector to rotate around."},{"content":"&lt;/p&gt;\\n","pos":[19198,19204],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The angle, in radians, to rotate around the vector.","pos":[19268,19324],"source":"\\n<p>The angle, in radians, to rotate around the vector."},{"content":"&lt;/p&gt;\\n","pos":[19325,19331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The newly created quaternion.","pos":[19404,19438],"source":"\\n<p>The newly created quaternion."},{"content":"&lt;/p&gt;\\n","pos":[19439,19445],"source":" </p>\\n"},{"pos":[19901,19936],"content":"CreateFromRotationMatrix(Matrix4x4)","needQuote":true,"nodes":[{"content":"CreateFromRotationMatrix(Matrix4x4)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The rotation matrix.","pos":[20761,20786],"source":"\\n<p>The rotation matrix."},{"content":"&lt;/p&gt;\\n","pos":[20787,20793],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The newly created quaternion.","pos":[20866,20900],"source":"\\n<p>The newly created quaternion."},{"content":"&lt;/p&gt;\\n","pos":[20901,20907],"source":" </p>\\n"},{"pos":[21404,21450],"content":"CreateFromYawPitchRoll(Single, Single, Single)","needQuote":true,"nodes":[{"content":"CreateFromYawPitchRoll(Single, Single, Single)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The yaw angle, in radians, around the Y axis.","pos":[22320,22370],"source":"\\n<p>The yaw angle, in radians, around the Y axis."},{"content":"&lt;/p&gt;\\n","pos":[22371,22377],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The pitch angle, in radians, around the X axis.","pos":[22441,22493],"source":"\\n<p>The pitch angle, in radians, around the X axis."},{"content":"&lt;/p&gt;\\n","pos":[22494,22500],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The roll angle, in radians, around the Z axis.","pos":[22563,22614],"source":"\\n<p>The roll angle, in radians, around the Z axis."},{"content":"&lt;/p&gt;\\n","pos":[22615,22621],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The resulting quaternion.","pos":[22694,22724],"source":"\\n<p>The resulting quaternion."},{"content":"&lt;/p&gt;\\n","pos":[22725,22731],"source":" </p>\\n"},{"pos":[23227,23257],"content":"Divide(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Divide(Quaternion, Quaternion)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The dividend.","pos":[24073,24091],"source":"\\n<p>The dividend."},{"content":"&lt;/p&gt;\\n","pos":[24092,24098],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The divisor.","pos":[24176,24193],"source":"\\n<p>The divisor."},{"content":"&lt;/p&gt;\\n","pos":[24194,24200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The quaternion that results from dividing &lt;em&gt;value1&lt;/em&gt; by &lt;em&gt;value2&lt;/em&gt;.","pos":[24273,24355],"source":"\\n<p>The quaternion that results from dividing <em>value1</em> by <em>value2</em>."},{"content":"&lt;/p&gt;\\n","pos":[24356,24362],"source":" </p>\\n"},{"pos":[24833,24860],"content":"Dot(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Dot(Quaternion, Quaternion)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[25680,25706],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[25707,25713],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[25796,25823],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[25824,25830],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The dot product.","pos":[25890,25911],"source":"\\n<p>The dot product."},{"content":"&lt;/p&gt;\\n","pos":[25912,25918],"source":" </p>\\n"},{"pos":[26314,26332],"content":"Equals(Quaternion)","needQuote":true,"nodes":[{"content":"Equals(Quaternion)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The other quaternion.","pos":[27093,27119],"source":"\\n<p>The other quaternion."},{"content":"&lt;/p&gt;\\n","pos":[27120,27126],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two quaternions are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27187,27290],"source":"\\n<p>\\n<strong>true</strong> if the two quaternions are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27715,27729],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[28469,28522],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[28523,28529],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance and &lt;em&gt;obj&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;.","pos":[28590,28722],"source":"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>."},{"content":"If &lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, the method returns &lt;strong&gt;false&lt;/strong&gt;.","pos":[28723,28807],"source":" If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28808,28814],"source":" </p>\\n"},{"pos":[29186,29199],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code.","pos":[29855,29874],"source":"\\n<p>The hash code."},{"content":"&lt;/p&gt;\\n","pos":[29875,29881],"source":" </p>\\n"},{"pos":[30314,30333],"content":"Inverse(Quaternion)","needQuote":true,"nodes":[{"content":"Inverse(Quaternion)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The quaternion.","pos":[31071,31091],"source":"\\n<p>The quaternion."},{"content":"&lt;/p&gt;\\n","pos":[31092,31098],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The inverted quaternion.","pos":[31171,31200],"source":"\\n<p>The inverted quaternion."},{"content":"&lt;/p&gt;\\n","pos":[31201,31207],"source":" </p>\\n"},{"pos":[31511,31519],"content":"Length()","needQuote":true,"nodes":[{"content":"Length()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The computed length of the quaternion.","pos":[32138,32181],"source":"\\n<p>The computed length of the quaternion."},{"content":"&lt;/p&gt;\\n","pos":[32182,32188],"source":" </p>\\n"},{"pos":[32480,32495],"content":"LengthSquared()","needQuote":true,"nodes":[{"content":"LengthSquared()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The length squared of the quaternion.","pos":[33150,33192],"source":"\\n<p>The length squared of the quaternion."},{"content":"&lt;/p&gt;\\n","pos":[33193,33199],"source":" </p>\\n"},{"pos":[33678,33714],"content":"Lerp(Quaternion, Quaternion, Single)","needQuote":true,"nodes":[{"content":"Lerp(Quaternion, Quaternion, Single)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[34675,34701],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[34702,34708],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[34791,34818],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[34819,34825],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The relative weight of &lt;em&gt;quaternion2&lt;/em&gt; in the interpolation.","pos":[34890,34960],"source":"\\n<p>The relative weight of <em>quaternion2</em> in the interpolation."},{"content":"&lt;/p&gt;\\n","pos":[34961,34967],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interpolated quaternion.","pos":[35040,35073],"source":"\\n<p>The interpolated quaternion."},{"content":"&lt;/p&gt;\\n","pos":[35074,35080],"source":" </p>\\n"},{"pos":[35572,35604],"content":"Multiply(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Multiply(Quaternion, Quaternion)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[36460,36486],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[36487,36493],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[36571,36598],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[36599,36605],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The product quaternion.","pos":[36678,36706],"source":"\\n<p>The product quaternion."},{"content":"&lt;/p&gt;\\n","pos":[36707,36713],"source":" </p>\\n"},{"pos":[37162,37190],"content":"Multiply(Quaternion, Single)","needQuote":true,"nodes":[{"content":"Multiply(Quaternion, Single)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The source quaternion.","pos":[38059,38086],"source":"\\n<p>The source quaternion."},{"content":"&lt;/p&gt;\\n","pos":[38087,38093],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[38158,38180],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[38181,38187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled quaternion.","pos":[38260,38287],"source":"\\n<p>The scaled quaternion."},{"content":"&lt;/p&gt;\\n","pos":[38288,38294],"source":" </p>\\n"},{"pos":[38691,38709],"content":"Negate(Quaternion)","needQuote":true,"nodes":[{"content":"Negate(Quaternion)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The quaternion to negate.","pos":[39461,39491],"source":"\\n<p>The quaternion to negate."},{"content":"&lt;/p&gt;\\n","pos":[39492,39498],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The negated quaternion.","pos":[39571,39599],"source":"\\n<p>The negated quaternion."},{"content":"&lt;/p&gt;\\n","pos":[39600,39606],"source":" </p>\\n"},{"pos":[40002,40023],"content":"Normalize(Quaternion)","needQuote":true,"nodes":[{"content":"Normalize(Quaternion)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The quaternion to normalize.","pos":[40872,40905],"source":"\\n<p>The quaternion to normalize."},{"content":"&lt;/p&gt;\\n","pos":[40906,40912],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The normalized quaternion.","pos":[40985,41016],"source":"\\n<p>The normalized quaternion."},{"content":"&lt;/p&gt;\\n","pos":[41017,41023],"source":" </p>\\n"},{"pos":[41509,41541],"content":"Addition(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Addition(Quaternion, Quaternion)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[42409,42435],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[42436,42442],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[42520,42547],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[42548,42554],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The quaternion that contains the summed values of &lt;em&gt;value1&lt;/em&gt; and &lt;em&gt;value2&lt;/em&gt;.","pos":[42627,42718],"source":"\\n<p>The quaternion that contains the summed values of <em>value1</em> and <em>value2</em>."},{"content":"&lt;/p&gt;\\n","pos":[42719,42725],"source":" </p>\\n"},{"pos":[43222,43254],"content":"Division(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Division(Quaternion, Quaternion)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The dividend.","pos":[44078,44096],"source":"\\n<p>The dividend."},{"content":"&lt;/p&gt;\\n","pos":[44097,44103],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The divisor.","pos":[44181,44198],"source":"\\n<p>The divisor."},{"content":"&lt;/p&gt;\\n","pos":[44199,44205],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The quaternion that results from dividing &lt;em&gt;value1&lt;/em&gt; by &lt;em&gt;value2&lt;/em&gt;.","pos":[44278,44360],"source":"\\n<p>The quaternion that results from dividing <em>value1</em> by <em>value2</em>."},{"content":"&lt;/p&gt;\\n","pos":[44361,44367],"source":" </p>\\n"},{"pos":[44864,44896],"content":"Equality(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Equality(Quaternion, Quaternion)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first quaternion to compare.","pos":[45731,45768],"source":"\\n<p>The first quaternion to compare."},{"content":"&lt;/p&gt;\\n","pos":[45769,45775],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion to compare.","pos":[45853,45891],"source":"\\n<p>The second quaternion to compare."},{"content":"&lt;/p&gt;\\n","pos":[45892,45898],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two quaternions are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45959,46062],"source":"\\n<p>\\n<strong>true</strong> if the two quaternions are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[46565,46599],"content":"Inequality(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Inequality(Quaternion, Quaternion)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first quaternion to compare.","pos":[47443,47480],"source":"\\n<p>The first quaternion to compare."},{"content":"&lt;/p&gt;\\n","pos":[47481,47487],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion to compare.","pos":[47565,47603],"source":"\\n<p>The second quaternion to compare."},{"content":"&lt;/p&gt;\\n","pos":[47604,47610],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; and &lt;em&gt;value2&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[47671,47788],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are not equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47789,47795],"source":" </p>\\n"},{"pos":[48294,48326],"content":"Multiply(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Multiply(Quaternion, Quaternion)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[49182,49208],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[49209,49215],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[49293,49320],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[49321,49327],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The product quaternion.","pos":[49400,49428],"source":"\\n<p>The product quaternion."},{"content":"&lt;/p&gt;\\n","pos":[49429,49435],"source":" </p>\\n"},{"pos":[49893,49921],"content":"Multiply(Quaternion, Single)","needQuote":true,"nodes":[{"content":"Multiply(Quaternion, Single)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The source quaternion.","pos":[50790,50817],"source":"\\n<p>The source quaternion."},{"content":"&lt;/p&gt;\\n","pos":[50818,50824],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[50889,50911],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[50912,50918],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled quaternion.","pos":[50991,51018],"source":"\\n<p>The scaled quaternion."},{"content":"&lt;/p&gt;\\n","pos":[51019,51025],"source":" </p>\\n"},{"pos":[51527,51562],"content":"Subtraction(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Subtraction(Quaternion, Quaternion)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[52445,52471],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[52472,52478],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[52556,52583],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[52584,52590],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The quaternion containing the values that result from subtracting each element in &lt;em&gt;value2&lt;/em&gt; from its corresponding element in &lt;em&gt;value1&lt;/em&gt;.","pos":[52663,52816],"source":"\\n<p>The quaternion containing the values that result from subtracting each element in <em>value2</em> from its corresponding element in <em>value1</em>."},{"content":"&lt;/p&gt;\\n","pos":[52817,52823],"source":" </p>\\n"},{"pos":[53257,53282],"content":"UnaryNegation(Quaternion)","needQuote":true,"nodes":[{"content":"UnaryNegation(Quaternion)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The quaternion to negate.","pos":[54052,54082],"source":"\\n<p>The quaternion to negate."},{"content":"&lt;/p&gt;\\n","pos":[54083,54089],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The negated quaternion.","pos":[54162,54190],"source":"\\n<p>The negated quaternion."},{"content":"&lt;/p&gt;\\n","pos":[54191,54197],"source":" </p>\\n"},{"pos":[54711,54748],"content":"Slerp(Quaternion, Quaternion, Single)","needQuote":true,"nodes":[{"content":"Slerp(Quaternion, Quaternion, Single)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[55661,55687],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[55688,55694],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[55777,55804],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[55805,55811],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The relative weight of the second quaternion in the interpolation.","pos":[55876,55947],"source":"\\n<p>The relative weight of the second quaternion in the interpolation."},{"content":"&lt;/p&gt;\\n","pos":[55948,55954],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interpolated quaternion.","pos":[56027,56060],"source":"\\n<p>The interpolated quaternion."},{"content":"&lt;/p&gt;\\n","pos":[56061,56067],"source":" </p>\\n"},{"pos":[56560,56592],"content":"Subtract(Quaternion, Quaternion)","needQuote":true,"nodes":[{"content":"Subtract(Quaternion, Quaternion)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first quaternion.","pos":[57469,57495],"source":"\\n<p>The first quaternion."},{"content":"&lt;/p&gt;\\n","pos":[57496,57502],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second quaternion.","pos":[57580,57607],"source":"\\n<p>The second quaternion."},{"content":"&lt;/p&gt;\\n","pos":[57608,57614],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The quaternion containing the values that result from subtracting each element in &lt;em&gt;value2&lt;/em&gt; from its corresponding element in &lt;em&gt;value1&lt;/em&gt;.","pos":[57687,57840],"source":"\\n<p>The quaternion containing the values that result from subtracting each element in <em>value2</em> from its corresponding element in <em>value1</em>."},{"content":"&lt;/p&gt;\\n","pos":[57841,57847],"source":" </p>\\n"},{"pos":[58170,58180],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of this quaternion.","pos":[58836,58886],"source":"\\n<p>The string representation of this quaternion."},{"content":"&lt;/p&gt;\\n","pos":[58887,58893],"source":" </p>\\n"},{"pos":[59121,59136],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[59340,59362],"content":"IEquatable<Quaternion>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Quaternion&gt;","pos":[0,22],"source":"IEquatable<Quaternion>"}]},{"pos":[59576,59586],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[59650,59651],"content":"<","needQuote":true,"nodes":[]},{"pos":[59714,59724],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[59848,59858],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[59923,59926]},{"pos":[59996,60006],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[60058,60059],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60329,60351],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[60499,60505],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60572,60573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60623,60629],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60690,60691]},{"pos":[60746,60752],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60812,60813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60910,60916],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60983,60984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61034,61040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61101,61102]},{"pos":[61157,61163],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61223,61224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61469,61500],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[61666,61681],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[61757,61758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61808,61814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61875,61876]},{"pos":[61931,61937],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61997,61998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62104,62119],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62195,62196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62246,62252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62313,62314]},{"pos":[62369,62375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62435,62436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62662,62671],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[62764,62771],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[62839,62840],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62867,62868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62937,62944],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[63012,63013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63040,63041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63183,63196],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[63351,63361],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[63404,63405],"content":"<","needQuote":true,"nodes":[]},{"pos":[63432,63433],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63532,63542],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[63586,63589]},{"pos":[63623,63624],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63651,63652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63812,63818],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[63949,63955],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64100,64106],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[64270,64277],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[64465,64475],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[64651,64658],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[64827,64836],"content":"Matrix4x4","needQuote":true,"nodes":[{"content":"Matrix4x4","pos":[0,9]}]},{"pos":[65139,65157],"content":"Equals(Quaternion)","needQuote":true,"nodes":[{"content":"Equals(Quaternion)","pos":[0,18]}]},{"pos":[65415,65421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65520,65521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65584,65594],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[65646,65647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65725,65731],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65833,65834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65897,65907],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[65959,65960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66261,66270],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[66428,66434],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66487,66488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66515,66516],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66543,66544],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66622,66628],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66684,66685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66712,66713],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66740,66741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66990,67004],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[67129,67135],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67184,67185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67235,67241],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67301,67302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67388,67394],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67443,67444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67494,67500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67560,67561],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67742,67751],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[67930,67943],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[68050,68061],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68115,68116],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68143,68144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68220,68231],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68285,68286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68313,68314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68480,68485],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68649,68659],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[68760,68768],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68819,68820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68847,68848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68921,68929],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68980,68981],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69008,69009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69170,69176],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Numerics.Quaternion\n  commentId: T:System.Numerics.Quaternion\n  id: Quaternion\n  parent: System.Numerics\n  children:\n  - System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\n  - System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  - System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  - System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Equals(System.Object)\n  - System.Numerics.Quaternion.GetHashCode\n  - System.Numerics.Quaternion.Identity\n  - System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.IsIdentity\n  - System.Numerics.Quaternion.Length\n  - System.Numerics.Quaternion.LengthSquared\n  - System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.ToString\n  - System.Numerics.Quaternion.W\n  - System.Numerics.Quaternion.X\n  - System.Numerics.Quaternion.Y\n  - System.Numerics.Quaternion.Z\n  langs:\n  - csharp\n  - vb\n  name: Quaternion\n  fullName: System.Numerics.Quaternion\n  type: Struct\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Quaternion\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 152\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Represents a vector that is used to encode three-dimensional physical rotations. </p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Quaternion : IEquatable<Quaternion>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Quaternion\n          Implements IEquatable(Of Quaternion)\n  implements:\n  - System.IEquatable{System.Numerics.Quaternion}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Quaternion\n- uid: System.Numerics.Quaternion.W\n  commentId: F:System.Numerics.Quaternion.W\n  id: W\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: W\n  fullName: System.Numerics.Quaternion.W\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: W\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 155\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p> The rotation component of the quaternion. </p>\\n\"\n  syntax:\n    content: public float W\n    content.vb: Public W As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.W\n- uid: System.Numerics.Quaternion.X\n  commentId: F:System.Numerics.Quaternion.X\n  id: X\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: X\n  fullName: System.Numerics.Quaternion.X\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 156\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The X value of the vector component of the quaternion. </p>\\n\"\n  syntax:\n    content: public float X\n    content.vb: Public X As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.X\n- uid: System.Numerics.Quaternion.Y\n  commentId: F:System.Numerics.Quaternion.Y\n  id: Y\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Y\n  fullName: System.Numerics.Quaternion.Y\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Y\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 157\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The Y value of the vector component of the quaternion. </p>\\n\"\n  syntax:\n    content: public float Y\n    content.vb: Public Y As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.Y\n- uid: System.Numerics.Quaternion.Z\n  commentId: F:System.Numerics.Quaternion.Z\n  id: Z\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Z\n  fullName: System.Numerics.Quaternion.Z\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Z\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 158\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The Z value of the vector component of the quaternion. </p>\\n\"\n  syntax:\n    content: public float Z\n    content.vb: Public Z As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.Z\n- uid: System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)\n  id: '#ctor(System.Numerics.Vector3,System.Single)'\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Quaternion(Vector3, Single)\n  fullName: System.Numerics.Quaternion.Quaternion(System.Numerics.Vector3, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 159\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a quaternion from the specified vector and rotation parts. </p>\\n\"\n  syntax:\n    content: public Quaternion(Vector3 vectorPart, float scalarPart)\n    content.vb: Public Sub New(vectorPart As Vector3, scalarPart As Single)\n    parameters:\n    - id: vectorPart\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector part of the quaternion. </p>\\n\"\n    - id: scalarPart\n      type: System.Single\n      description: \"\\n<p>The rotation part of the quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.Quaternion(Vector3, Single)\n- uid: System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\n  commentId: M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Quaternion(Single, Single, Single, Single)\n  fullName: System.Numerics.Quaternion.Quaternion(System.Single, System.Single, System.Single, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 160\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Constructs a quaternion from the specified components.</p>\\n\"\n  syntax:\n    content: public Quaternion(float x, float y, float z, float w)\n    content.vb: Public Sub New(x As Single, y As Single, z As Single, w As Single)\n    parameters:\n    - id: x\n      type: System.Single\n      description: \"\\n<p>The value to assign to the X component of the quaternion. </p>\\n\"\n    - id: y\n      type: System.Single\n      description: \"\\n<p>The value to assign to the Y component of the quaternion.</p>\\n\"\n    - id: z\n      type: System.Single\n      description: \"\\n<p>The value to assign to the Z component of the quaternion.</p>\\n\"\n    - id: w\n      type: System.Single\n      description: \"\\n<p>The value to assign to the W component of the quaternion.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.Quaternion(Single, Single, Single, Single)\n- uid: System.Numerics.Quaternion.Identity\n  commentId: P:System.Numerics.Quaternion.Identity\n  id: Identity\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Identity\n  fullName: System.Numerics.Quaternion.Identity\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Identity\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 161\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a quaternion that represents no rotation. </p>\\n\"\n  syntax:\n    content: public static Quaternion Identity { get; }\n    content.vb: Public Shared ReadOnly Property Identity As Quaternion\n    parameters: []\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>A quaternion whose values are <code>(0, 0, 0, 1)</code>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Quaternion.Identity\n- uid: System.Numerics.Quaternion.IsIdentity\n  commentId: P:System.Numerics.Quaternion.IsIdentity\n  id: IsIdentity\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: IsIdentity\n  fullName: System.Numerics.Quaternion.IsIdentity\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsIdentity\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 162\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a value that indicates whether the current instance is the identity quaternion. </p>\\n\"\n  syntax:\n    content: public bool IsIdentity { get; }\n    content.vb: Public ReadOnly Property IsIdentity As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is the identity quaternion; otherwise, <strong>false</strong>.  </p>\\n\"\n  seealso:\n  - type: System.Numerics.Quaternion.Identity\n    commentId: P:System.Numerics.Quaternion.Identity\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Quaternion.IsIdentity\n- uid: System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Add(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Add(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 163\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds each element in one quaternion with its corresponding element in a second quaternion.</p>\\n\"\n  syntax:\n    content: public static Quaternion Add(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Function Add(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion that contains the summed values of <em>value1</em> and <em>value2</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Add(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Concatenate(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concatenate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 164\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Concatenates two quaternions. </p>\\n\"\n  syntax:\n    content: public static Quaternion Concatenate(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Function Concatenate(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion rotation in the series. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion rotation in the series. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>A new quaternion representing the concatenation of the <em>value1</em> rotation followed by the <em>value2</em> rotation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Concatenate(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  id: Conjugate(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Conjugate(Quaternion)\n  fullName: System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Conjugate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 165\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the conjugate of a specified quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion Conjugate(Quaternion value)\n    content.vb: Public Shared Function Conjugate(value As Quaternion) As Quaternion\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>A new quaternion that is the conjugate of <strong>value</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Conjugate(Quaternion)\n- uid: System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  id: CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: CreateFromAxisAngle(Vector3, Single)\n  fullName: System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromAxisAngle\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 166\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a quaternion from a vector and an angle to rotate about the vector. </p>\\n\"\n  syntax:\n    content: public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle)\n    content.vb: Public Shared Function CreateFromAxisAngle(axis As Vector3, angle As Single) As Quaternion\n    parameters:\n    - id: axis\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The vector to rotate around. </p>\\n\"\n    - id: angle\n      type: System.Single\n      description: \"\\n<p>The angle, in radians, to rotate around the vector. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The newly created quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.CreateFromAxisAngle(Vector3, Single)\n- uid: System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  commentId: M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  id: CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: CreateFromRotationMatrix(Matrix4x4)\n  fullName: System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromRotationMatrix\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 167\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a quaternion from the specified rotation matrix. </p>\\n\"\n  syntax:\n    content: public static Quaternion CreateFromRotationMatrix(Matrix4x4 matrix)\n    content.vb: Public Shared Function CreateFromRotationMatrix(matrix As Matrix4x4) As Quaternion\n    parameters:\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: \"\\n<p>The rotation matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The newly created quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix4x4)\n- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  commentId: M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: CreateFromYawPitchRoll(Single, Single, Single)\n  fullName: System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single, System.Single, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromYawPitchRoll\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 168\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a new quaternion from the given yaw, pitch, and roll. </p>\\n\"\n  syntax:\n    content: public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll)\n    content.vb: Public Shared Function CreateFromYawPitchRoll(yaw As Single, pitch As Single, roll As Single) As Quaternion\n    parameters:\n    - id: yaw\n      type: System.Single\n      description: \"\\n<p>The yaw angle, in radians, around the Y axis. </p>\\n\"\n    - id: pitch\n      type: System.Single\n      description: \"\\n<p>The pitch angle, in radians, around the X axis. </p>\\n\"\n    - id: roll\n      type: System.Single\n      description: \"\\n<p>The roll angle, in radians, around the Z axis. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The resulting quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.CreateFromYawPitchRoll(Single, Single, Single)\n- uid: System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Divide(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Divide(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 169\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides one quaternion by a second quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion Divide(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Function Divide(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The dividend. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The divisor. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion that results from dividing <em>value1</em> by <em>value2</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Divide(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Dot(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Dot(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 170\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Calculates the dot product of two quaternions. </p>\\n\"\n  syntax:\n    content: public static float Dot(Quaternion quaternion1, Quaternion quaternion2)\n    content.vb: Public Shared Function Dot(quaternion1 As Quaternion, quaternion2 As Quaternion) As Single\n    parameters:\n    - id: quaternion1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: quaternion2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The dot product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Dot(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  id: Equals(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Equals(Quaternion)\n  fullName: System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 171\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and another quaternion are equal. </p>\\n\"\n  syntax:\n    content: public bool Equals(Quaternion other)\n    content.vb: Public Function Equals(other As Quaternion) As Boolean\n    parameters:\n    - id: other\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The other quaternion. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two quaternions are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Numerics.Quaternion}.Equals(System.Numerics.Quaternion)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.Equals(Quaternion)\n- uid: System.Numerics.Quaternion.Equals(System.Object)\n  commentId: M:System.Numerics.Quaternion.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Numerics.Quaternion.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 172\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and a specified object are equal. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>. If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Quaternion.Equals(Object)\n- uid: System.Numerics.Quaternion.GetHashCode\n  commentId: M:System.Numerics.Quaternion.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Numerics.Quaternion.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 173\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hash code for this instance. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code. </p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Quaternion.GetHashCode()\n- uid: System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  id: Inverse(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Inverse(Quaternion)\n  fullName: System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Inverse\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 174\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the inverse of a quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion Inverse(Quaternion value)\n    content.vb: Public Shared Function Inverse(value As Quaternion) As Quaternion\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The inverted quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Inverse(Quaternion)\n- uid: System.Numerics.Quaternion.Length\n  commentId: M:System.Numerics.Quaternion.Length\n  id: Length\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Length()\n  fullName: System.Numerics.Quaternion.Length()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 175\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Calculates the length of the quaternion. </p>\\n\"\n  syntax:\n    content: public float Length()\n    content.vb: Public Function Length As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The computed length of the quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.Length()\n- uid: System.Numerics.Quaternion.LengthSquared\n  commentId: M:System.Numerics.Quaternion.LengthSquared\n  id: LengthSquared\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: LengthSquared()\n  fullName: System.Numerics.Quaternion.LengthSquared()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LengthSquared\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 176\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Calculates the squared length of the quaternion. </p>\\n\"\n  syntax:\n    content: public float LengthSquared()\n    content.vb: Public Function LengthSquared As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The length squared of the quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Quaternion.LengthSquared()\n- uid: System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  commentId: M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  id: Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Lerp(Quaternion, Quaternion, Single)\n  fullName: System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion, System.Numerics.Quaternion, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lerp\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 177\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount)\n    content.vb: Public Shared Function Lerp(quaternion1 As Quaternion, quaternion2 As Quaternion, amount As Single) As Quaternion\n    parameters:\n    - id: quaternion1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: quaternion2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    - id: amount\n      type: System.Single\n      description: \"\\n<p>The relative weight of <em>quaternion2</em> in the interpolation. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The interpolated quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Lerp(Quaternion, Quaternion, Single)\n- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 178\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the quaternion that results from multiplying two quaternions together. </p>\\n\"\n  syntax:\n    content: public static Quaternion Multiply(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Function Multiply(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The product quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Multiply(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)\n  commentId: M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)\n  id: Multiply(System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Quaternion, Single)\n  fullName: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 179\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor. </p>\\n\"\n  syntax:\n    content: public static Quaternion Multiply(Quaternion value1, float value2)\n    content.vb: Public Shared Function Multiply(value1 As Quaternion, value2 As Single) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The source quaternion. </p>\\n\"\n    - id: value2\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The scaled quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Multiply(Quaternion, Single)\n- uid: System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  id: Negate(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Negate(Quaternion)\n  fullName: System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 180\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Reverses the sign of each component of the quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion Negate(Quaternion value)\n    content.vb: Public Shared Function Negate(value As Quaternion) As Quaternion\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion to negate. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The negated quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Negate(Quaternion)\n- uid: System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  id: Normalize(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Normalize(Quaternion)\n  fullName: System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Normalize\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 181\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides each component of a specified <xref href=\\\"System.Numerics.Quaternion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by its length. </p>\\n\"\n  syntax:\n    content: public static Quaternion Normalize(Quaternion value)\n    content.vb: Public Shared Function Normalize(value As Quaternion) As Quaternion\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion to normalize. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The normalized quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Normalize(Quaternion)\n- uid: System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Addition(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Addition(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 182\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds each element in one quaternion with its corresponding element in a second quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion operator +(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Operator +(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion that contains the summed values of <em>value1</em> and <em>value2</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Addition(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Division(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Division(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 183\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides one quaternion by a second quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion operator /(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Operator /(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The dividend. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The divisor. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion that results from dividing <em>value1</em> by <em>value2</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Division(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Equality(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Equality(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 184\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two quaternions are equal. </p>\\n\"\n  syntax:\n    content: public static bool operator ==(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Operator =(value1 As Quaternion, value2 As Quaternion) As Boolean\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion to compare. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two quaternions are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Equality(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Inequality(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 185\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two quaternions are not equal. </p>\\n\"\n  syntax:\n    content: public static bool operator !=(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Operator <>(value1 As Quaternion, value2 As Quaternion) As Boolean\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion to compare. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are not equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Inequality(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 186\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the quaternion that results from multiplying two quaternions together. </p>\\n\"\n  syntax:\n    content: public static Quaternion operator *(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Operator *(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The product quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Multiply(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)\n  commentId: M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)\n  id: op_Multiply(System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Quaternion, Single)\n  fullName: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 187\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor. </p>\\n\"\n  syntax:\n    content: public static Quaternion operator *(Quaternion value1, float value2)\n    content.vb: Public Shared Operator *(value1 As Quaternion, value2 As Single) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The source quaternion. </p>\\n\"\n    - id: value2\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The scaled quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Multiply(Quaternion, Single)\n- uid: System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Subtraction(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 188\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts each element in a second quaternion from its corresponding element in a first quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion operator -(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Operator -(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion containing the values that result from subtracting each element in <em>value2</em> from its corresponding element in <em>value1</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Subtraction(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)\n  id: op_UnaryNegation(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(Quaternion)\n  fullName: System.Numerics.Quaternion.UnaryNegation(System.Numerics.Quaternion)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 189\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Reverses the sign of each component of the quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion operator -(Quaternion value)\n    content.vb: Public Shared Operator -(value As Quaternion) As Quaternion\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion to negate. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The negated quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.UnaryNegation(Quaternion)\n- uid: System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  commentId: M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  id: Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Slerp(Quaternion, Quaternion, Single)\n  fullName: System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion, System.Numerics.Quaternion, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Slerp\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 190\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Interpolates between two quaternions, using spherical linear interpolation. </p>\\n\"\n  syntax:\n    content: public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount)\n    content.vb: Public Shared Function Slerp(quaternion1 As Quaternion, quaternion2 As Quaternion, amount As Single) As Quaternion\n    parameters:\n    - id: quaternion1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: quaternion2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    - id: amount\n      type: System.Single\n      description: \"\\n<p>The relative weight of the second quaternion in the interpolation. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The interpolated quaternion. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Slerp(Quaternion, Quaternion, Single)\n- uid: System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Quaternion, Quaternion)\n  fullName: System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 191\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts each element in a second quaternion from its corresponding element in a first quaternion. </p>\\n\"\n  syntax:\n    content: public static Quaternion Subtract(Quaternion value1, Quaternion value2)\n    content.vb: Public Shared Function Subtract(value1 As Quaternion, value2 As Quaternion) As Quaternion\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The first quaternion. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The second quaternion. </p>\\n\"\n    return:\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The quaternion containing the values that result from subtracting each element in <em>value2</em> from its corresponding element in <em>value1</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Quaternion.Subtract(Quaternion, Quaternion)\n- uid: System.Numerics.Quaternion.ToString\n  commentId: M:System.Numerics.Quaternion.ToString\n  id: ToString\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Numerics.Quaternion.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 192\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a string that represents this quaternion. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of this quaternion. </p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Quaternion.ToString()\nreferences:\n- uid: System.Numerics\n  isExternal: false\n  name: System.Numerics\n  fullName: System.Numerics\n  commentId: N:System.Numerics\n  nameWithType: System.Numerics\n- uid: System.IEquatable{System.Numerics.Quaternion}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Quaternion>\n  fullName: System.IEquatable<System.Numerics.Quaternion>\n  fullname.vb: System.IEquatable(Of System.Numerics.Quaternion)\n  name.vb: IEquatable(Of Quaternion)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.Quaternion\n    name: Quaternion\n    fullName: System.Numerics.Quaternion\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.Quaternion\n    name: Quaternion\n    fullName: System.Numerics.Quaternion\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Numerics.Quaternion}\n  nameWithType: IEquatable<Quaternion>\n  nameWithType.vb: IEquatable(Of Quaternion)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Numerics.Vector3\n  parent: System.Numerics\n  isExternal: false\n  name: Vector3\n  fullName: System.Numerics.Vector3\n  commentId: T:System.Numerics.Vector3\n  nameWithType: Vector3\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  fullName: System.Numerics.Quaternion\n  commentId: T:System.Numerics.Quaternion\n  nameWithType: Quaternion\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n  commentId: T:System.Numerics.Matrix4x4\n  nameWithType: Matrix4x4\n- uid: System.IEquatable{System.Numerics.Quaternion}.Equals(System.Numerics.Quaternion)\n  parent: System.IEquatable{System.Numerics.Quaternion}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Quaternion)\n  fullName: System.IEquatable<System.Numerics.Quaternion>.Equals(System.Numerics.Quaternion)\n  fullname.vb: System.IEquatable(Of System.Numerics.Quaternion).Equals(System.Numerics.Quaternion)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Numerics.Quaternion>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Quaternion\n    name: Quaternion\n    fullName: System.Numerics.Quaternion\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Numerics.Quaternion).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Quaternion\n    name: Quaternion\n    fullName: System.Numerics.Quaternion\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Numerics.Quaternion}.Equals(System.Numerics.Quaternion)\n  nameWithType: IEquatable<Quaternion>.Equals(Quaternion)\n  nameWithType.vb: IEquatable(Of Quaternion).Equals(Quaternion)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n"}