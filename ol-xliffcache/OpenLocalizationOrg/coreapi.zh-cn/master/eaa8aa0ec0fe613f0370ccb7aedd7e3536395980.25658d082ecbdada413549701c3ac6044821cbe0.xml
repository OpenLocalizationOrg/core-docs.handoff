{"nodes":[{"pos":[3616,3628],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[5632,5646],"content":"DbDataReader()","needQuote":true,"nodes":[{"content":"DbDataReader()","pos":[0,14]}]},{"pos":[6599,6604],"content":"Depth","needQuote":true,"nodes":[{"content":"Depth","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The depth of nesting for the current row.&lt;/p&gt;\\n","pos":[7306,7358],"source":"\\n<p>The depth of nesting for the current row.</p>\\n"},{"pos":[7754,7764],"content":"FieldCount","needQuote":true,"nodes":[{"content":"FieldCount","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The number of columns in the current row.&lt;/p&gt;\\n","pos":[8467,8519],"source":"\\n<p>The number of columns in the current row.</p>\\n"},{"content":"\\n&lt;p&gt;There is no current connection to an instance of SQL Server.","pos":[8638,8703],"source":"\\n<p>There is no current connection to an instance of SQL Server."},{"content":"&lt;/p&gt;\\n","pos":[8704,8710],"source":" </p>\\n"},{"pos":[9107,9114],"content":"HasRows","needQuote":true,"nodes":[{"content":"HasRows","pos":[0,7]}]},{"pos":[10459,10467],"content":"IsClosed","needQuote":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"pos":[12110,12121],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[12939,12980],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[13040,13085],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[13944,13956],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The name of the column.&lt;/p&gt;\\n","pos":[14769,14803],"source":"\\n<p>The name of the column.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[14863,14908],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;No column with the specified name was found.","pos":[15033,15082],"source":"\\n<p>No column with the specified name was found."},{"content":"&lt;/p&gt;\\n","pos":[15083,15089],"source":" </p>\\n"},{"pos":[15657,15672],"content":"RecordsAffected","needQuote":true,"nodes":[{"content":"RecordsAffected","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number of rows changed, inserted, or deleted.","pos":[16438,16492],"source":"\\n<p>The number of rows changed, inserted, or deleted."},{"content":"-1 for SELECT statements; 0 if no rows were affected or the statement failed.&lt;/p&gt;\\n","pos":[16493,16576],"source":" -1 for SELECT statements; 0 if no rows were affected or the statement failed.</p>\\n"},{"pos":[17013,17030],"content":"VisibleFieldCount","needQuote":true,"nodes":[{"content":"VisibleFieldCount","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The number of fields that are not hidden.&lt;/p&gt;\\n","pos":[17858,17910],"source":"\\n<p>The number of fields that are not hidden.</p>\\n"},{"pos":[18259,18268],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[19324,19340],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[20198,20336],"source":"\\n<p>\\n<strong>true</strong> to release managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[20720,20737],"content":"GetBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetBoolean(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[21477,21518],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[21579,21624],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[21741,21778],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[21779,21785],"source":" </p>\\n"},{"pos":[22224,22238],"content":"GetByte(Int32)","needQuote":true,"nodes":[{"content":"GetByte(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[22960,23001],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[23059,23104],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[23221,23258],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[23259,23265],"source":" </p>\\n"},{"pos":[23860,23904],"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[24965,25006],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The index within the row from which to begin the read operation.&lt;/p&gt;\\n","pos":[25074,25149],"source":"\\n<p>The index within the row from which to begin the read operation.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to copy the data.&lt;/p&gt;\\n","pos":[25214,25264],"source":"\\n<p>The buffer into which to copy the data.</p>\\n"},{"content":"\\n&lt;p&gt;The index with the buffer to which the data will be copied.&lt;/p&gt;\\n","pos":[25334,25404],"source":"\\n<p>The index with the buffer to which the data will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.&lt;/p&gt;\\n","pos":[25468,25520],"source":"\\n<p>The maximum number of characters to read.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes read.&lt;/p&gt;\\n","pos":[25579,25622],"source":"\\n<p>The actual number of bytes read.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[25739,25776],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[25777,25783],"source":" </p>\\n"},{"pos":[26560,26574],"content":"GetChar(Int32)","needQuote":true,"nodes":[{"content":"GetChar(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[27308,27349],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[27407,27452],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[27569,27606],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[27607,27613],"source":" </p>\\n"},{"pos":[28208,28252],"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[29319,29360],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The index within the row from which to begin the read operation.&lt;/p&gt;\\n","pos":[29428,29503],"source":"\\n<p>The index within the row from which to begin the read operation.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to copy the data.&lt;/p&gt;\\n","pos":[29568,29618],"source":"\\n<p>The buffer into which to copy the data.</p>\\n"},{"content":"\\n&lt;p&gt;The index with the buffer to which the data will be copied.&lt;/p&gt;\\n","pos":[29688,29758],"source":"\\n<p>The index with the buffer to which the data will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.&lt;/p&gt;\\n","pos":[29822,29874],"source":"\\n<p>The maximum number of characters to read.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters read.&lt;/p&gt;\\n","pos":[29933,29981],"source":"\\n<p>The actual number of characters read.</p>\\n"},{"pos":[30758,30772],"content":"GetData(Int32)","needQuote":true,"nodes":[{"content":"GetData(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[31582,31623],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[32176,32198],"content":"GetDataTypeName(Int32)","needQuote":true,"nodes":[{"content":"GetDataTypeName(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[32958,32999],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;A string representing the name of the data type.&lt;/p&gt;\\n","pos":[33059,33118],"source":"\\n<p>A string representing the name of the data type.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[33235,33272],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[33273,33279],"source":" </p>\\n"},{"pos":[33740,33758],"content":"GetDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetDateTime(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[34579,34620],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[34682,34727],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[34844,34881],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[34882,34888],"source":" </p>\\n"},{"pos":[35353,35375],"content":"GetDbDataReader(Int32)","needQuote":true,"nodes":[{"content":"GetDbDataReader(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[36306,36347],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[36927,36944],"content":"GetDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetDecimal(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[37762,37803],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[37864,37909],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[38026,38063],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[38064,38070],"source":" </p>\\n"},{"pos":[38515,38531],"content":"GetDouble(Int32)","needQuote":true,"nodes":[{"content":"GetDouble(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[39300,39341],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[39401,39446],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[39563,39600],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[39601,39607],"source":" </p>\\n"},{"pos":[40020,40035],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[41482,41501],"content":"GetFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetFieldType(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[42237,42278],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The data type of the specified column.&lt;/p&gt;\\n","pos":[42336,42385],"source":"\\n<p>The data type of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[42502,42539],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[42540,42546],"source":" </p>\\n"},{"pos":[43016,43039],"content":"GetFieldValue<T>(Int32)","needQuote":true,"nodes":[{"content":"GetFieldValue&lt;T&gt;(Int32)","pos":[0,23],"source":"GetFieldValue<T>(Int32)"}]},{"content":"\\n&lt;p&gt;The column to be retrieved.&lt;/p&gt;\\n","pos":[43804,43842],"source":"\\n<p>The column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;Synchronously gets the value of the specified column as a type.&lt;/p&gt;\\n","pos":[43896,43970],"source":"\\n<p>Synchronously gets the value of the specified column as a type.</p>\\n"},{"content":"\\n&lt;p&gt;The column to be retrieved.&lt;/p&gt;\\n","pos":[44022,44060],"source":"\\n<p>The column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[44959,45014],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; doesn’t match the type returned by SQL Server or cannot be cast.&lt;/p&gt;\\n","pos":[45117,45205],"source":"\\n<p>\\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\\n"},{"pos":[45801,45829],"content":"GetFieldValueAsync<T>(Int32)","needQuote":true,"nodes":[{"content":"GetFieldValueAsync&lt;T&gt;(Int32)","pos":[0,28],"source":"GetFieldValueAsync<T>(Int32)"}]},{"content":"\\n&lt;p&gt;The type of the value to be returned.&lt;/p&gt;\\n","pos":[46610,46658],"source":"\\n<p>The type of the value to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be returned.","pos":[46712,46754],"source":"\\n<p>The type of the value to be returned."},{"content":"See the remarks section for more information.&lt;/p&gt;\\n","pos":[46755,46806],"source":" See the remarks section for more information.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be returned.&lt;/p&gt;\\n","pos":[46885,46933],"source":"\\n<p>The type of the value to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[47824,47879],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; doesn’t match the type returned by the data source  or cannot be cast.&lt;/p&gt;\\n","pos":[47982,48076],"source":"\\n<p>\\n<em>T</em> doesn’t match the type returned by the data source  or cannot be cast.</p>\\n"},{"pos":[48769,48816],"content":"GetFieldValueAsync<T>(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"GetFieldValueAsync&lt;T&gt;(Int32, CancellationToken)","pos":[0,47],"source":"GetFieldValueAsync<T>(Int32, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The type of the value to be returned.&lt;/p&gt;\\n","pos":[49730,49778],"source":"\\n<p>The type of the value to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be returned.","pos":[50340,50382],"source":"\\n<p>The type of the value to be returned."},{"content":"See the remarks section for more information.&lt;/p&gt;\\n","pos":[50383,50434],"source":" See the remarks section for more information.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be returned.&lt;/p&gt;\\n","pos":[50513,50561],"source":"\\n<p>The type of the value to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[51452,51507],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; doesn’t match the type returned by the data source or cannot be cast.&lt;/p&gt;\\n","pos":[51610,51703],"source":"\\n<p>\\n<em>T</em> doesn’t match the type returned by the data source or cannot be cast.</p>\\n"},{"pos":[52373,52388],"content":"GetFloat(Int32)","needQuote":true,"nodes":[{"content":"GetFloat(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[53152,53193],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[53253,53298],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[53415,53452],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[53453,53459],"source":" </p>\\n"},{"pos":[53894,53908],"content":"GetGuid(Int32)","needQuote":true,"nodes":[{"content":"GetGuid(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[54660,54701],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[54759,54804],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[54921,54958],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[54959,54965],"source":" </p>\\n"},{"pos":[55401,55416],"content":"GetInt16(Int32)","needQuote":true,"nodes":[{"content":"GetInt16(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[56162,56203],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[56262,56307],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[56424,56461],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[56462,56468],"source":" </p>\\n"},{"pos":[56906,56921],"content":"GetInt32(Int32)","needQuote":true,"nodes":[{"content":"GetInt32(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[57667,57708],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[57767,57812],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[57929,57966],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[57967,57973],"source":" </p>\\n"},{"pos":[58411,58426],"content":"GetInt64(Int32)","needQuote":true,"nodes":[{"content":"GetInt64(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[59170,59211],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[59270,59315],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[59432,59469],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[59470,59476],"source":" </p>\\n"},{"pos":[59911,59925],"content":"GetName(Int32)","needQuote":true,"nodes":[{"content":"GetName(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[60667,60708],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the specified column.&lt;/p&gt;\\n","pos":[60768,60812],"source":"\\n<p>The name of the specified column.</p>\\n"},{"pos":[61257,61275],"content":"GetOrdinal(String)","needQuote":true,"nodes":[{"content":"GetOrdinal(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The name of the column.&lt;/p&gt;\\n","pos":[62010,62044],"source":"\\n<p>The name of the column.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[62103,62144],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The name specified is not a valid column name.&lt;/p&gt;\\n","pos":[62269,62326],"source":"\\n<p>The name specified is not a valid column name.</p>\\n"},{"pos":[62830,62865],"content":"GetProviderSpecificFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetProviderSpecificFieldType(Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[63686,63727],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[64371,64402],"content":"GetProviderSpecificValue(Int32)","needQuote":true,"nodes":[{"content":"GetProviderSpecificValue(Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[65277,65318],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[65378,65423],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[65870,65905],"content":"GetProviderSpecificValues(Object[])","needQuote":true,"nodes":[{"content":"GetProviderSpecificValues(Object[])","pos":[0,35]}]},{"pos":[67664,67680],"content":"GetStream(Int32)","needQuote":true,"nodes":[{"content":"GetStream(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The returned object.&lt;/p&gt;\\n","pos":[68632,68663],"source":"\\n<p>The returned object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[69554,69609],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type was not one of the types below:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;binary&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;image&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;varbinary&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;udt&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[69712,69886],"source":"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>binary</p>\\n</li><li>\\n<p>image</p>\\n</li><li>\\n<p>varbinary</p>\\n</li><li>\\n<p>udt</p>\\n</li></ul>\\n"},{"pos":[70261,70277],"content":"GetString(Int32)","needQuote":true,"nodes":[{"content":"GetString(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[71094,71135],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[71195,71240],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[71357,71394],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[71395,71401],"source":" </p>\\n"},{"pos":[71856,71876],"content":"GetTextReader(Int32)","needQuote":true,"nodes":[{"content":"GetTextReader(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The returned object.&lt;/p&gt;\\n","pos":[72864,72895],"source":"\\n<p>The returned object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[73786,73841],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type was not one of the types below:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;char&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;nchar&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;ntext&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;nvarchar&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;text&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;varchar&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[73944,74168],"source":"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>char</p>\\n</li><li>\\n<p>nchar</p>\\n</li><li>\\n<p>ntext</p>\\n</li><li>\\n<p>nvarchar</p>\\n</li><li>\\n<p>text</p>\\n</li><li>\\n<p>varchar</p>\\n</li></ul>\\n"},{"pos":[74544,74559],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[75372,75413],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[75473,75518],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[75968,75987],"content":"GetValues(Object[])","needQuote":true,"nodes":[{"content":"GetValues(Object[])","pos":[0,19]}]},{"pos":[77677,77692],"content":"IsDBNull(Int32)","needQuote":true,"nodes":[{"content":"IsDBNull(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[78459,78500],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[79198,79218],"content":"IsDBNullAsync(Int32)","needQuote":true,"nodes":[{"content":"IsDBNullAsync(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based column to be retrieved.&lt;/p&gt;\\n","pos":[80148,80197],"source":"\\n<p>The zero-based column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified column value is equivalent to &lt;strong&gt;DBNull&lt;/strong&gt; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80287,80426],"source":"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[81318,81373],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"pos":[81841,81880],"content":"IsDBNullAsync(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"IsDBNullAsync(Int32, CancellationToken)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The zero-based column to be retrieved.&lt;/p&gt;\\n","pos":[83013,83062],"source":"\\n<p>The zero-based column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified column value is equivalent to &lt;strong&gt;DBNull&lt;/strong&gt; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[83652,83791],"source":"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[84683,84738],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"pos":[85097,85109],"content":"NextResult()","needQuote":true,"nodes":[{"content":"NextResult()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there are more result sets; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[85824,85923],"source":"\\n<p>\\n<strong>true</strong> if there are more result sets; otherwise <strong>false</strong>.</p>\\n"},{"pos":[86325,86342],"content":"NextResultAsync()","needQuote":true,"nodes":[{"content":"NextResultAsync()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[87425,87483],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[87606,87668],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[88100,88134],"content":"NextResultAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"NextResultAsync(CancellationToken)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The cancellation instruction.&lt;/p&gt;\\n","pos":[89875,89915],"source":"\\n<p>The cancellation instruction.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[90005,90063],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[90186,90248],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[90584,90590],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there are more rows; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[91247,91339],"source":"\\n<p>\\n<strong>true</strong> if there are more rows; otherwise <strong>false</strong>.</p>\\n"},{"pos":[91711,91722],"content":"ReadAsync()","needQuote":true,"nodes":[{"content":"ReadAsync()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[92739,92797],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[92920,92982],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[93390,93418],"content":"ReadAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"ReadAsync(CancellationToken)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The cancellation instruction.&lt;/p&gt;\\n","pos":[95009,95049],"source":"\\n<p>The cancellation instruction.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[95139,95197],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[95320,95382],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[95849,95875],"content":"IDataRecord.GetData(Int32)","needQuote":true,"nodes":[{"content":"IDataRecord.GetData(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[96786,96827],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[97587,97606],"content":"IDataReader.Close()","needQuote":true,"nodes":[{"content":"IDataReader.Close()","pos":[0,19]}]},{"pos":[98667,98695],"content":"IDataReader.GetSchemaTable()","needQuote":true,"nodes":[{"content":"IDataReader.GetSchemaTable()","pos":[0,28]}]},{"pos":[99672,99690],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[99857,99863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100037,100048],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[100247,100258],"content":"IDataReader","needQuote":true,"nodes":[{"content":"IDataReader","pos":[0,11]}]},{"pos":[100443,100454],"content":"IDataRecord","needQuote":true,"nodes":[{"content":"IDataRecord","pos":[0,11]}]},{"pos":[100629,100640],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[100815,100825],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[100920,100928],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[100997,100998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101025,101026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101096,101104],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[101173,101174],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101201,101202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101385,101399],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[101518,101524],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101591,101592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101642,101648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101708,101709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101792,101798],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101865,101866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101916,101922],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101982,101983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102197,102219],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[102367,102373],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102440,102441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102491,102497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102558,102559]},{"pos":[102614,102620],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102680,102681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102778,102784],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102851,102852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102902,102908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102969,102970]},{"pos":[103025,103031],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103091,103092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103337,103368],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[103534,103549],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[103625,103626],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103676,103682],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103743,103744]},{"pos":[103799,103805],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103865,103866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103972,103987],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[104063,104064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104114,104120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[104181,104182]},{"pos":[104237,104243],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104303,104304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104534,104547],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[104648,104659],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[104731,104732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104759,104760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104833,104844],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[104916,104917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104944,104945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105120,105129],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[105222,105229],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[105297,105298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105325,105326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105395,105402],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[105470,105471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105498,105499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105674,105691],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[105800,105815],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[105891,105892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105919,105920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105997,106012],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[106088,106089],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106116,106117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106412,106425],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[106542,106553],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[106612,106613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106640,106641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106722,106733],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[106792,106793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106820,106821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107176,107188],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[107321,107331],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[107398,107399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107426,107427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107516,107526],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[107593,107594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107621,107622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108038,108055],"content":"GetColumnSchema()","needQuote":true,"nodes":[{"content":"GetColumnSchema()","pos":[0,17]}]},{"pos":[108220,108235],"content":"GetColumnSchema","needQuote":true,"nodes":[{"content":"GetColumnSchema","pos":[0,15]}]},{"pos":[108318,108319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108346,108347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108452,108467],"content":"GetColumnSchema","needQuote":true,"nodes":[{"content":"GetColumnSchema","pos":[0,15]}]},{"pos":[108550,108551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108578,108579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109027,109047],"content":"CanGetColumnSchema()","needQuote":true,"nodes":[{"content":"CanGetColumnSchema()","pos":[0,20]}]},{"pos":[109218,109236],"content":"CanGetColumnSchema","needQuote":true,"nodes":[{"content":"CanGetColumnSchema","pos":[0,18]}]},{"pos":[109322,109323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109350,109351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109459,109477],"content":"CanGetColumnSchema","needQuote":true,"nodes":[{"content":"CanGetColumnSchema","pos":[0,18]}]},{"pos":[109563,109564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109591,109592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109965,109980],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[110184,110197],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[110259,110260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110287,110288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110366,110382],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[110447,110448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110475,110476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110854,110871],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[111083,111098],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[111162,111163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111190,111191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111271,111289],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[111356,111357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111384,111385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111620,111626],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[111745,111763],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[111911,111922],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[112102,112126],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[112305,112316],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[112375,112376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112443,112454],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[112531,112532],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112645,112656],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[112715,112716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112783,112794],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[112871,112872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113100,113109],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[113315,113338],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[113533,113543],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[113610,113611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113678,113689],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[113766,113767],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113888,113898],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[113965,113966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114033,114044],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[114121,114122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114375,114393],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[114644,114673],"content":"GetColumnSchema(DbDataReader)","needQuote":true,"nodes":[{"content":"GetColumnSchema(DbDataReader)","pos":[0,29]}]},{"pos":[114902,114917],"content":"GetColumnSchema","needQuote":true,"nodes":[{"content":"GetColumnSchema","pos":[0,15]}]},{"pos":[115000,115001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115069,115081],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[115138,115139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115277,115292],"content":"GetColumnSchema","needQuote":true,"nodes":[{"content":"GetColumnSchema","pos":[0,15]}]},{"pos":[115375,115376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115444,115456],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[115513,115514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115812,115834],"content":"DbDataReaderExtensions","needQuote":true,"nodes":[{"content":"DbDataReaderExtensions","pos":[0,22]}]},{"pos":[116114,116146],"content":"CanGetColumnSchema(DbDataReader)","needQuote":true,"nodes":[{"content":"CanGetColumnSchema(DbDataReader)","pos":[0,32]}]},{"pos":[116381,116399],"content":"CanGetColumnSchema","needQuote":true,"nodes":[{"content":"CanGetColumnSchema","pos":[0,18]}]},{"pos":[116485,116486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116554,116566],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[116623,116624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116765,116783],"content":"CanGetColumnSchema","needQuote":true,"nodes":[{"content":"CanGetColumnSchema","pos":[0,18]}]},{"pos":[116869,116870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116938,116950],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[117007,117008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117303,117329],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[117636,117649],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[117711,117712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117779,117790],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[117867,117868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117978,117994],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[118059,118060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118127,118138],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[118215,118216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118505,118515],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[118715,118743],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[119058,119073],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[119137,119138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119205,119216],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[119293,119294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119406,119424],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[119491,119492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119559,119570],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[119647,119648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119910,119921],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[120100,120105],"content":"Depth","needQuote":true,"nodes":[{"content":"Depth","pos":[0,5]}]},{"pos":[120292,120297],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120477,120487],"content":"FieldCount","needQuote":true,"nodes":[{"content":"FieldCount","pos":[0,10]}]},{"pos":[120691,120698],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[120882,120890],"content":"IsClosed","needQuote":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"pos":[121132,121143],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[121357,121361],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[121416,121417]},{"pos":[121469,121474],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[121534,121535]},{"pos":[121628,121632],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[121686,121687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121736,121741],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[121800,121801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122071,122083],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[122301,122305],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[122360,122361]},{"pos":[122414,122420],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[122481,122482]},{"pos":[122576,122580],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[122634,122635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122685,122691],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[122751,122752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122979,122985],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[123173,123188],"content":"RecordsAffected","needQuote":true,"nodes":[{"content":"RecordsAffected","pos":[0,15]}]},{"pos":[123431,123440],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[123543,123550],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[123602,123603],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123630,123631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123705,123712],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[123764,123765],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123792,123793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124007,124024],"content":"GetBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetBoolean(Int32)","pos":[0,17]}]},{"pos":[124169,124179],"content":"GetBoolean","needQuote":true,"nodes":[{"content":"GetBoolean","pos":[0,10]}]},{"pos":[124239,124240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124289,124294],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124353,124354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124450,124460],"content":"GetBoolean","needQuote":true,"nodes":[{"content":"GetBoolean","pos":[0,10]}]},{"pos":[124520,124521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124570,124575],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124634,124635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124876,124890],"content":"GetByte(Int32)","needQuote":true,"nodes":[{"content":"GetByte(Int32)","pos":[0,14]}]},{"pos":[125029,125036],"content":"GetByte","needQuote":true,"nodes":[{"content":"GetByte","pos":[0,7]}]},{"pos":[125093,125094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125143,125148],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125207,125208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125301,125308],"content":"GetByte","needQuote":true,"nodes":[{"content":"GetByte","pos":[0,7]}]},{"pos":[125365,125366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125415,125420],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125479,125480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125665,125669],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[125910,125954],"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","pos":[0,44]}]},{"pos":[126380,126388],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[126446,126447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126496,126501],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126561,126562]},{"pos":[126616,126621],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[126681,126682]},{"pos":[126735,126739],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[126798,126800]},{"content":",","pos":[126832,126833]},{"pos":[126887,126892],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126952,126953]},{"pos":[127007,127012],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[127071,127072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127219,127227],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[127285,127286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127335,127340],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127400,127401]},{"pos":[127455,127460],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[127520,127521]},{"pos":[127574,127578],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[127636,127638],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[127667,127668]},{"pos":[127722,127727],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127787,127788]},{"pos":[127842,127847],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[127906,127907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128253,128258],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[128363,128369],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[128489,128493],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[128552,128554]},{"pos":[128617,128621],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[128679,128681],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[128862,128876],"content":"GetChar(Int32)","needQuote":true,"nodes":[{"content":"GetChar(Int32)","pos":[0,14]}]},{"pos":[129015,129022],"content":"GetChar","needQuote":true,"nodes":[{"content":"GetChar","pos":[0,7]}]},{"pos":[129079,129080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129129,129134],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129193,129194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129287,129294],"content":"GetChar","needQuote":true,"nodes":[{"content":"GetChar","pos":[0,7]}]},{"pos":[129351,129352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129401,129406],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129465,129466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129651,129655],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[129896,129940],"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","pos":[0,44]}]},{"pos":[130366,130374],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[130432,130433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130482,130487],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[130547,130548]},{"pos":[130602,130607],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[130667,130668]},{"pos":[130721,130725],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[130784,130786]},{"content":",","pos":[130818,130819]},{"pos":[130873,130878],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[130938,130939]},{"pos":[130993,130998],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131057,131058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131205,131213],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[131271,131272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131321,131326],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[131386,131387]},{"pos":[131441,131446],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[131506,131507]},{"pos":[131560,131564],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[131622,131624],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[131653,131654]},{"pos":[131708,131713],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[131773,131774]},{"pos":[131828,131833],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131892,131893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132203,132209],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[132329,132333],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[132392,132394]},{"pos":[132457,132461],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[132519,132521],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[132684,132696],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[132939,132961],"content":"GetDataTypeName(Int32)","needQuote":true,"nodes":[{"content":"GetDataTypeName(Int32)","pos":[0,22]}]},{"pos":[133116,133131],"content":"GetDataTypeName","needQuote":true,"nodes":[{"content":"GetDataTypeName","pos":[0,15]}]},{"pos":[133196,133197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133246,133251],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[133310,133311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133412,133427],"content":"GetDataTypeName","needQuote":true,"nodes":[{"content":"GetDataTypeName","pos":[0,15]}]},{"pos":[133492,133493],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133542,133547],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[133606,133607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133862,133880],"content":"GetDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetDateTime(Int32)","pos":[0,18]}]},{"pos":[134027,134038],"content":"GetDateTime","needQuote":true,"nodes":[{"content":"GetDateTime","pos":[0,11]}]},{"pos":[134099,134100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134149,134154],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[134213,134214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134311,134322],"content":"GetDateTime","needQuote":true,"nodes":[{"content":"GetDateTime","pos":[0,11]}]},{"pos":[134383,134384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134433,134438],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[134497,134498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134695,134703],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[134905,134922],"content":"GetDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetDecimal(Int32)","pos":[0,17]}]},{"pos":[135067,135077],"content":"GetDecimal","needQuote":true,"nodes":[{"content":"GetDecimal","pos":[0,10]}]},{"pos":[135137,135138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[135187,135192],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[135251,135252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135348,135358],"content":"GetDecimal","needQuote":true,"nodes":[{"content":"GetDecimal","pos":[0,10]}]},{"pos":[135418,135419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[135468,135473],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[135532,135533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135727,135734],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[135932,135948],"content":"GetDouble(Int32)","needQuote":true,"nodes":[{"content":"GetDouble(Int32)","pos":[0,16]}]},{"pos":[136091,136100],"content":"GetDouble","needQuote":true,"nodes":[{"content":"GetDouble","pos":[0,9]}]},{"pos":[136159,136160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136209,136214],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[136273,136274],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136369,136378],"content":"GetDouble","needQuote":true,"nodes":[{"content":"GetDouble","pos":[0,9]}]},{"pos":[136437,136438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136487,136492],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[136551,136552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136743,136749],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[136949,136964],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[137103,137116],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[137186,137187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137214,137215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137307,137320],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[137390,137391],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137418,137419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137635,137646],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[137883,137902],"content":"GetFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetFieldType(Int32)","pos":[0,19]}]},{"pos":[138051,138063],"content":"GetFieldType","needQuote":true,"nodes":[{"content":"GetFieldType","pos":[0,12]}]},{"pos":[138125,138126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138175,138180],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[138239,138240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138338,138350],"content":"GetFieldType","needQuote":true,"nodes":[{"content":"GetFieldType","pos":[0,12]}]},{"pos":[138412,138413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138462,138467],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[138526,138527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138722,138726],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[138836,138837],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[138926,138927],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[139085,139092],"content":"Task<T>","needQuote":true,"nodes":[{"content":"Task&lt;T&gt;","pos":[0,7],"source":"Task<T>"}]},{"pos":[139271,139275],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[139349,139350],"content":"<","needQuote":true,"nodes":[]},{"pos":[139377,139378],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[139487,139491],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[139566,139569]},{"pos":[139603,139604],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[139631,139632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139816,139829],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[140026,140030],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[140083,140084],"content":"<","needQuote":true,"nodes":[]},{"pos":[140111,140118],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[140233,140237],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[140291,140294]},{"pos":[140328,140335],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[140368,140369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140555,140577],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[140787,140804],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[140988,141004],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[141214,141229],"content":"GetFloat(Int32)","needQuote":true,"nodes":[{"content":"GetFloat(Int32)","pos":[0,15]}]},{"pos":[141370,141378],"content":"GetFloat","needQuote":true,"nodes":[{"content":"GetFloat","pos":[0,8]}]},{"pos":[141436,141437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141486,141491],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[141550,141551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141645,141653],"content":"GetFloat","needQuote":true,"nodes":[{"content":"GetFloat","pos":[0,8]}]},{"pos":[141711,141712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141761,141766],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[141825,141826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142015,142021],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[142214,142228],"content":"GetGuid(Int32)","needQuote":true,"nodes":[{"content":"GetGuid(Int32)","pos":[0,14]}]},{"pos":[142367,142374],"content":"GetGuid","needQuote":true,"nodes":[{"content":"GetGuid","pos":[0,7]}]},{"pos":[142431,142432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142481,142486],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[142545,142546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142639,142646],"content":"GetGuid","needQuote":true,"nodes":[{"content":"GetGuid","pos":[0,7]}]},{"pos":[142703,142704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142753,142758],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[142817,142818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143003,143007],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[143195,143210],"content":"GetInt16(Int32)","needQuote":true,"nodes":[{"content":"GetInt16(Int32)","pos":[0,15]}]},{"pos":[143351,143359],"content":"GetInt16","needQuote":true,"nodes":[{"content":"GetInt16","pos":[0,8]}]},{"pos":[143417,143418],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143467,143472],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[143531,143532],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143626,143634],"content":"GetInt16","needQuote":true,"nodes":[{"content":"GetInt16","pos":[0,8]}]},{"pos":[143692,143693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143742,143747],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[143806,143807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143995,144000],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[144191,144206],"content":"GetInt32(Int32)","needQuote":true,"nodes":[{"content":"GetInt32(Int32)","pos":[0,15]}]},{"pos":[144347,144355],"content":"GetInt32","needQuote":true,"nodes":[{"content":"GetInt32","pos":[0,8]}]},{"pos":[144413,144414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144463,144468],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[144527,144528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144622,144630],"content":"GetInt32","needQuote":true,"nodes":[{"content":"GetInt32","pos":[0,8]}]},{"pos":[144688,144689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144738,144743],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[144802,144803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145041,145056],"content":"GetInt64(Int32)","needQuote":true,"nodes":[{"content":"GetInt64(Int32)","pos":[0,15]}]},{"pos":[145197,145205],"content":"GetInt64","needQuote":true,"nodes":[{"content":"GetInt64","pos":[0,8]}]},{"pos":[145263,145264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145313,145318],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[145377,145378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145472,145480],"content":"GetInt64","needQuote":true,"nodes":[{"content":"GetInt64","pos":[0,8]}]},{"pos":[145538,145539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145588,145593],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[145652,145653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145890,145904],"content":"GetName(Int32)","needQuote":true,"nodes":[{"content":"GetName(Int32)","pos":[0,14]}]},{"pos":[146043,146050],"content":"GetName","needQuote":true,"nodes":[{"content":"GetName","pos":[0,7]}]},{"pos":[146107,146108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146157,146162],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[146221,146222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146315,146322],"content":"GetName","needQuote":true,"nodes":[{"content":"GetName","pos":[0,7]}]},{"pos":[146379,146380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146429,146434],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[146493,146494],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146733,146751],"content":"GetOrdinal(String)","needQuote":true,"nodes":[{"content":"GetOrdinal(String)","pos":[0,18]}]},{"pos":[146898,146908],"content":"GetOrdinal","needQuote":true,"nodes":[{"content":"GetOrdinal","pos":[0,10]}]},{"pos":[146968,146969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147019,147025],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[147085,147086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147183,147193],"content":"GetOrdinal","needQuote":true,"nodes":[{"content":"GetOrdinal","pos":[0,10]}]},{"pos":[147253,147254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147304,147310],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[147370,147371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147531,147539],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[147667,147673],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[147734,147736]},{"pos":[147801,147807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[147867,147869],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[148012,148018],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[148148,148157],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[148347,148363],"content":"GetString(Int32)","needQuote":true,"nodes":[{"content":"GetString(Int32)","pos":[0,16]}]},{"pos":[148506,148515],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[148574,148575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148624,148629],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[148688,148689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[148784,148793],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[148852,148853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148902,148907],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[148966,148967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149168,149178],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[149390,149405],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"pos":[149546,149554],"content":"GetValue","needQuote":true,"nodes":[{"content":"GetValue","pos":[0,8]}]},{"pos":[149612,149613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149662,149667],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[149726,149727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149821,149829],"content":"GetValue","needQuote":true,"nodes":[{"content":"GetValue","pos":[0,8]}]},{"pos":[149887,149888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149937,149942],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[150001,150002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150244,150263],"content":"GetValues(Object[])","needQuote":true,"nodes":[{"content":"GetValues(Object[])","pos":[0,19]}]},{"pos":[150509,150518],"content":"GetValues","needQuote":true,"nodes":[{"content":"GetValues","pos":[0,9]}]},{"pos":[150577,150578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150628,150634],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[150695,150697]},{"pos":[150728,150729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150827,150836],"content":"GetValues","needQuote":true,"nodes":[{"content":"GetValues","pos":[0,9]}]},{"pos":[150895,150896],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150946,150952],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[151012,151014],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[151042,151043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151340,151355],"content":"IsDBNull(Int32)","needQuote":true,"nodes":[{"content":"IsDBNull(Int32)","pos":[0,15]}]},{"pos":[151496,151504],"content":"IsDBNull","needQuote":true,"nodes":[{"content":"IsDBNull","pos":[0,8]}]},{"pos":[151562,151563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151612,151617],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[151676,151677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151771,151779],"content":"IsDBNull","needQuote":true,"nodes":[{"content":"IsDBNull","pos":[0,8]}]},{"pos":[151837,151838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151887,151892],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[151951,151952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[152211,152224],"content":"Task<Boolean>","needQuote":true,"nodes":[{"content":"Task&lt;Boolean&gt;","pos":[0,13],"source":"Task<Boolean>"}]},{"pos":[152435,152439],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[152513,152514],"content":"<","needQuote":true,"nodes":[]},{"pos":[152565,152572],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[152715,152719],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[152794,152797]},{"pos":[152855,152862],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[152923,152924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[153170,153182],"content":"NextResult()","needQuote":true,"nodes":[{"content":"NextResult()","pos":[0,12]}]},{"pos":[153301,153311],"content":"NextResult","needQuote":true,"nodes":[{"content":"NextResult","pos":[0,10]}]},{"pos":[153371,153372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[153399,153400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[153482,153492],"content":"NextResult","needQuote":true,"nodes":[{"content":"NextResult","pos":[0,10]}]},{"pos":[153552,153553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[153580,153581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[153787,153793],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"pos":[153900,153904],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[153958,153959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[153986,153987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[154063,154067],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[154121,154122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[154149,154150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[154360,154374],"content":"GetData(Int32)","needQuote":true,"nodes":[{"content":"GetData(Int32)","pos":[0,14]}]},{"pos":[154513,154520],"content":"GetData","needQuote":true,"nodes":[{"content":"GetData","pos":[0,7]}]},{"pos":[154577,154578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[154627,154632],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[154691,154692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[154785,154792],"content":"GetData","needQuote":true,"nodes":[{"content":"GetData","pos":[0,7]}]},{"pos":[154849,154850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[154899,154904],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[154963,154964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155184,155191],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[155300,155305],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[155360,155361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155388,155389],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155466,155471],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[155526,155527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155554,155555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155761,155777],"content":"GetSchemaTable()","needQuote":true,"nodes":[{"content":"GetSchemaTable()","pos":[0,16]}]},{"pos":[155904,155918],"content":"GetSchemaTable","needQuote":true,"nodes":[{"content":"GetSchemaTable","pos":[0,14]}]},{"pos":[155982,155983],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[156010,156011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156097,156111],"content":"GetSchemaTable","needQuote":true,"nodes":[{"content":"GetSchemaTable","pos":[0,14]}]},{"pos":[156175,156176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[156203,156204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156399,156408],"content":"DataTable","needQuote":true,"nodes":[{"content":"DataTable","pos":[0,9]}]},{"pos":[156587,156608],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[156817,156842],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[157045,157069],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[157265,157285],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[157472,157483],"content":"DbException","needQuote":true,"nodes":[{"content":"DbException","pos":[0,11]}]}],"content":"items:\n- uid: System.Data.Common.DbDataReader\n  commentId: T:System.Data.Common.DbDataReader\n  id: DbDataReader\n  parent: System.Data.Common\n  children:\n  - System.Data.Common.DbDataReader.#ctor\n  - System.Data.Common.DbDataReader.Depth\n  - System.Data.Common.DbDataReader.Dispose\n  - System.Data.Common.DbDataReader.Dispose(System.Boolean)\n  - System.Data.Common.DbDataReader.FieldCount\n  - System.Data.Common.DbDataReader.GetBoolean(System.Int32)\n  - System.Data.Common.DbDataReader.GetByte(System.Int32)\n  - System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  - System.Data.Common.DbDataReader.GetChar(System.Int32)\n  - System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  - System.Data.Common.DbDataReader.GetData(System.Int32)\n  - System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)\n  - System.Data.Common.DbDataReader.GetDateTime(System.Int32)\n  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)\n  - System.Data.Common.DbDataReader.GetDecimal(System.Int32)\n  - System.Data.Common.DbDataReader.GetDouble(System.Int32)\n  - System.Data.Common.DbDataReader.GetEnumerator\n  - System.Data.Common.DbDataReader.GetFieldType(System.Int32)\n  - System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)\n  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)\n  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  - System.Data.Common.DbDataReader.GetFloat(System.Int32)\n  - System.Data.Common.DbDataReader.GetGuid(System.Int32)\n  - System.Data.Common.DbDataReader.GetInt16(System.Int32)\n  - System.Data.Common.DbDataReader.GetInt32(System.Int32)\n  - System.Data.Common.DbDataReader.GetInt64(System.Int32)\n  - System.Data.Common.DbDataReader.GetName(System.Int32)\n  - System.Data.Common.DbDataReader.GetOrdinal(System.String)\n  - System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)\n  - System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)\n  - System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])\n  - System.Data.Common.DbDataReader.GetStream(System.Int32)\n  - System.Data.Common.DbDataReader.GetString(System.Int32)\n  - System.Data.Common.DbDataReader.GetTextReader(System.Int32)\n  - System.Data.Common.DbDataReader.GetValue(System.Int32)\n  - System.Data.Common.DbDataReader.GetValues(System.Object[])\n  - System.Data.Common.DbDataReader.HasRows\n  - System.Data.Common.DbDataReader.IsClosed\n  - System.Data.Common.DbDataReader.IsDBNull(System.Int32)\n  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)\n  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  - System.Data.Common.DbDataReader.Item(System.Int32)\n  - System.Data.Common.DbDataReader.Item(System.String)\n  - System.Data.Common.DbDataReader.NextResult\n  - System.Data.Common.DbDataReader.NextResultAsync\n  - System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbDataReader.Read\n  - System.Data.Common.DbDataReader.ReadAsync\n  - System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbDataReader.RecordsAffected\n  - System.Data.Common.DbDataReader.System#Data#IDataReader#Close\n  - System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable\n  - System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)\n  - System.Data.Common.DbDataReader.VisibleFieldCount\n  langs:\n  - csharp\n  - vb\n  name: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbDataReader\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 17\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Reads a forward-only stream of rows from a data source.</p>\\n\"\n  syntax:\n    content: 'public abstract class DbDataReader : IDataReader, IDataRecord, IDisposable, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class DbDataReader\n          Implements IDataReader, IDataRecord, IDisposable, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  - System.Data.IDataReader\n  - System.Data.IDataRecord\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DbDataReader\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n  - System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Data.Common.DbDataReader.#ctor\n  commentId: M:System.Data.Common.DbDataReader.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: DbDataReader()\n  fullName: System.Data.Common.DbDataReader.DbDataReader()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 22\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected DbDataReader()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DbDataReader.DbDataReader()\n- uid: System.Data.Common.DbDataReader.Depth\n  commentId: P:System.Data.Common.DbDataReader.Depth\n  id: Depth\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: Depth\n  fullName: System.Data.Common.DbDataReader.Depth\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Depth\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 26\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a value indicating the depth of nesting for the current row.</p>\\n\"\n  syntax:\n    content: public abstract int Depth { get; }\n    content.vb: Public MustOverride ReadOnly Property Depth As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The depth of nesting for the current row.</p>\\n\"\n  implements:\n  - System.Data.IDataReader.Depth\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbDataReader.Depth\n- uid: System.Data.Common.DbDataReader.FieldCount\n  commentId: P:System.Data.Common.DbDataReader.FieldCount\n  id: FieldCount\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: FieldCount\n  fullName: System.Data.Common.DbDataReader.FieldCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FieldCount\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 31\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the number of columns in the current row.</p>\\n\"\n  syntax:\n    content: public abstract int FieldCount { get; }\n    content.vb: Public MustOverride ReadOnly Property FieldCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of columns in the current row.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>There is no current connection to an instance of SQL Server. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.FieldCount\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbDataReader.FieldCount\n- uid: System.Data.Common.DbDataReader.HasRows\n  commentId: P:System.Data.Common.DbDataReader.HasRows\n  id: HasRows\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: HasRows\n  fullName: System.Data.Common.DbDataReader.HasRows\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasRows\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 36\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a value that indicates whether this <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains one or more rows.</p>\\n\"\n  syntax:\n    content: public abstract bool HasRows { get; }\n    content.vb: Public MustOverride ReadOnly Property HasRows As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains one or more rows; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbDataReader.HasRows\n- uid: System.Data.Common.DbDataReader.IsClosed\n  commentId: P:System.Data.Common.DbDataReader.IsClosed\n  id: IsClosed\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsClosed\n  fullName: System.Data.Common.DbDataReader.IsClosed\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsClosed\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 41\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed.</p>\\n\"\n  syntax:\n    content: public abstract bool IsClosed { get; }\n    content.vb: Public MustOverride ReadOnly Property IsClosed As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  implements:\n  - System.Data.IDataReader.IsClosed\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbDataReader.IsClosed\n- uid: System.Data.Common.DbDataReader.Item(System.Int32)\n  commentId: P:System.Data.Common.DbDataReader.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Data.Common.DbDataReader.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 59\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as an instance of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract object this[int ordinal] { get; }\n    content.vb: Public MustOverride ReadOnly Property Item(ordinal As Integer) As Object\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  fullName.vb: System.Data.Common.DbDataReader.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: DbDataReader.Item[Int32]\n  nameWithType.vb: DbDataReader.Item(Int32)\n- uid: System.Data.Common.DbDataReader.Item(System.String)\n  commentId: P:System.Data.Common.DbDataReader.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.Common.DbDataReader.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 64\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as an instance of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract object this[string name] { get; }\n    content.vb: Public MustOverride ReadOnly Property Item(name As String) As Object\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the column.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>No column with the specified name was found. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.Item(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  fullName.vb: System.Data.Common.DbDataReader.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: DbDataReader.Item[String]\n  nameWithType.vb: DbDataReader.Item(String)\n- uid: System.Data.Common.DbDataReader.RecordsAffected\n  commentId: P:System.Data.Common.DbDataReader.RecordsAffected\n  id: RecordsAffected\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: RecordsAffected\n  fullName: System.Data.Common.DbDataReader.RecordsAffected\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RecordsAffected\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 46\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. </p>\\n\"\n  syntax:\n    content: public abstract int RecordsAffected { get; }\n    content.vb: Public MustOverride ReadOnly Property RecordsAffected As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed.</p>\\n\"\n  implements:\n  - System.Data.IDataReader.RecordsAffected\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbDataReader.RecordsAffected\n- uid: System.Data.Common.DbDataReader.VisibleFieldCount\n  commentId: P:System.Data.Common.DbDataReader.VisibleFieldCount\n  id: VisibleFieldCount\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: VisibleFieldCount\n  fullName: System.Data.Common.DbDataReader.VisibleFieldCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisibleFieldCount\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 51\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the number of fields in the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that are not hidden.</p>\\n\"\n  syntax:\n    content: public virtual int VisibleFieldCount { get; }\n    content.vb: Public Overridable ReadOnly Property VisibleFieldCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of fields that are not hidden.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: DbDataReader.VisibleFieldCount\n- uid: System.Data.Common.DbDataReader.Dispose\n  commentId: M:System.Data.Common.DbDataReader.Dispose\n  id: Dispose\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Data.Common.DbDataReader.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 69\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbDataReader.Dispose()\n- uid: System.Data.Common.DbDataReader.Dispose(System.Boolean)\n  commentId: M:System.Data.Common.DbDataReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Data.Common.DbDataReader.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 74\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Releases the managed resources used by the <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the unmanaged resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbDataReader.Dispose(Boolean)\n- uid: System.Data.Common.DbDataReader.GetBoolean(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)\n  id: GetBoolean(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetBoolean(Int32)\n  fullName: System.Data.Common.DbDataReader.GetBoolean(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBoolean\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 92\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a Boolean.</p>\\n\"\n  syntax:\n    content: public abstract bool GetBoolean(int ordinal)\n    content.vb: Public MustOverride Function GetBoolean(ordinal As Integer) As Boolean\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetBoolean(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetBoolean(Int32)\n- uid: System.Data.Common.DbDataReader.GetByte(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetByte(System.Int32)\n  id: GetByte(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetByte(Int32)\n  fullName: System.Data.Common.DbDataReader.GetByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetByte\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 94\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a byte.</p>\\n\"\n  syntax:\n    content: public abstract byte GetByte(int ordinal)\n    content.vb: Public MustOverride Function GetByte(ordinal As Integer) As Byte\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetByte(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetByte(Int32)\n- uid: System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  fullName: System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBytes\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 96\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Reads a stream of bytes from the specified column, starting at location indicated by <em>dataOffset</em>, into the buffer, starting at the location indicated by <em>bufferOffset</em>.</p>\\n\"\n  syntax:\n    content: public abstract long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length)\n    content.vb: Public MustOverride Function GetBytes(ordinal As Integer, dataOffset As Long, buffer As Byte(), bufferOffset As Integer, length As Integer) As Long\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    - id: dataOffset\n      type: System.Int64\n      description: \"\\n<p>The index within the row from which to begin the read operation.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer into which to copy the data.</p>\\n\"\n    - id: bufferOffset\n      type: System.Int32\n      description: \"\\n<p>The index with the buffer to which the data will be copied.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The actual number of bytes read.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)\n  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  nameWithType: DbDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  nameWithType.vb: DbDataReader.GetBytes(Int32, Int64, Byte(), Int32, Int32)\n- uid: System.Data.Common.DbDataReader.GetChar(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetChar(System.Int32)\n  id: GetChar(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetChar(Int32)\n  fullName: System.Data.Common.DbDataReader.GetChar(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChar\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 98\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a single character.</p>\\n\"\n  syntax:\n    content: public abstract char GetChar(int ordinal)\n    content.vb: Public MustOverride Function GetChar(ordinal As Integer) As Char\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetChar(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetChar(Int32)\n- uid: System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Int32, Int64, Char[], Int32, Int32)\n  fullName: System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChars\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 100\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Reads a stream of characters from the specified column, starting at location indicated by <em>dataOffset</em>, into the buffer, starting at the location indicated by <em>bufferOffset</em>.</p>\\n\"\n  syntax:\n    content: public abstract long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length)\n    content.vb: Public MustOverride Function GetChars(ordinal As Integer, dataOffset As Long, buffer As Char(), bufferOffset As Integer, length As Integer) As Long\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    - id: dataOffset\n      type: System.Int64\n      description: \"\\n<p>The index within the row from which to begin the read operation.</p>\\n\"\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The buffer into which to copy the data.</p>\\n\"\n    - id: bufferOffset\n      type: System.Int32\n      description: \"\\n<p>The index with the buffer to which the data will be copied.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The actual number of characters read.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)\n  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)\n  nameWithType: DbDataReader.GetChars(Int32, Int64, Char[], Int32, Int32)\n  nameWithType.vb: DbDataReader.GetChars(Int32, Int64, Char(), Int32, Int32)\n- uid: System.Data.Common.DbDataReader.GetData(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetData(System.Int32)\n  id: GetData(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetData(Int32)\n  fullName: System.Data.Common.DbDataReader.GetData(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetData\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 102\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the requested column ordinal.</p>\\n\"\n  syntax:\n    content: public DbDataReader GetData(int ordinal)\n    content.vb: Public Function GetData(ordinal As Integer) As DbDataReader\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbDataReader.GetData(Int32)\n- uid: System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)\n  id: GetDataTypeName(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDataTypeName(Int32)\n  fullName: System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDataTypeName\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 81\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets name of the data type of the specified column.</p>\\n\"\n  syntax:\n    content: public abstract string GetDataTypeName(int ordinal)\n    content.vb: Public MustOverride Function GetDataTypeName(ordinal As Integer) As String\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representing the name of the data type.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetDataTypeName(Int32)\n- uid: System.Data.Common.DbDataReader.GetDateTime(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)\n  id: GetDateTime(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDateTime(Int32)\n  fullName: System.Data.Common.DbDataReader.GetDateTime(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDateTime\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 113\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract DateTime GetDateTime(int ordinal)\n    content.vb: Public MustOverride Function GetDateTime(ordinal As Integer) As Date\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDateTime(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetDateTime(Int32)\n- uid: System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)\n  id: GetDbDataReader(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDbDataReader(Int32)\n  fullName: System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDbDataReader\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 108\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the requested column ordinal that can be overridden with a provider-specific implementation.</p>\\n\"\n  syntax:\n    content: protected virtual DbDataReader GetDbDataReader(int ordinal)\n    content.vb: Protected Overridable Function GetDbDataReader(ordinal As Integer) As DbDataReader\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbDataReader.GetDbDataReader(Int32)\n- uid: System.Data.Common.DbDataReader.GetDecimal(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)\n  id: GetDecimal(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDecimal(Int32)\n  fullName: System.Data.Common.DbDataReader.GetDecimal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDecimal\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 115\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract decimal GetDecimal(int ordinal)\n    content.vb: Public MustOverride Function GetDecimal(ordinal As Integer) As Decimal\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDecimal(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetDecimal(Int32)\n- uid: System.Data.Common.DbDataReader.GetDouble(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetDouble(System.Int32)\n  id: GetDouble(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDouble(Int32)\n  fullName: System.Data.Common.DbDataReader.GetDouble(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDouble\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 117\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a double-precision floating point number.</p>\\n\"\n  syntax:\n    content: public abstract double GetDouble(int ordinal)\n    content.vb: Public MustOverride Function GetDouble(ordinal As Integer) As Double\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDouble(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetDouble(Int32)\n- uid: System.Data.Common.DbDataReader.GetEnumerator\n  commentId: M:System.Data.Common.DbDataReader.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Data.Common.DbDataReader.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 83\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to iterate through the rows in the data reader.</p>\\n\"\n  syntax:\n    content: public abstract IEnumerator GetEnumerator()\n    content.vb: Public MustOverride Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to iterate through the rows in the data reader.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetEnumerator()\n- uid: System.Data.Common.DbDataReader.GetFieldType(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)\n  id: GetFieldType(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldType(Int32)\n  fullName: System.Data.Common.DbDataReader.GetFieldType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldType\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 85\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the data type of the specified column.</p>\\n\"\n  syntax:\n    content: public abstract Type GetFieldType(int ordinal)\n    content.vb: Public MustOverride Function GetFieldType(ordinal As Integer) As Type\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The data type of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetFieldType(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetFieldType(Int32)\n- uid: System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)\n  id: GetFieldValue``1(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldValue<T>(Int32)\n  fullName: System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldValue\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 178\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Synchronously gets the value of the specified column as a type.</p>\\n\"\n  syntax:\n    content: public virtual T GetFieldValue<T>(int ordinal)\n    content.vb: Public Overridable Function GetFieldValue(Of T)(ordinal As Integer) As T\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The column to be retrieved.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>Synchronously gets the value of the specified column as a type.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The column to be retrieved.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Data.Common.DbDataReader.GetFieldValue(Of T)(System.Int32)\n  name.vb: GetFieldValue(Of T)(Int32)\n  nameWithType: DbDataReader.GetFieldValue<T>(Int32)\n  nameWithType.vb: DbDataReader.GetFieldValue(Of T)(Int32)\n- uid: System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)\n  id: GetFieldValueAsync``1(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldValueAsync<T>(Int32)\n  fullName: System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldValueAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 183\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Asynchronously gets the value of the specified column as a type.</p>\\n\"\n  syntax:\n    content: public Task<T> GetFieldValueAsync<T>(int ordinal)\n    content.vb: Public Function GetFieldValueAsync(Of T)(ordinal As Integer) As Task(Of T)\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The type of the value to be returned.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the value to be returned. See the remarks section for more information.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{T}}\n      description: \"\\n<p>The type of the value to be returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>T</em> doesn’t match the type returned by the data source  or cannot be cast.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.Common.DbDataReader.GetFieldValueAsync(Of T)(System.Int32)\n  name.vb: GetFieldValueAsync(Of T)(Int32)\n  nameWithType: DbDataReader.GetFieldValueAsync<T>(Int32)\n  nameWithType.vb: DbDataReader.GetFieldValueAsync(Of T)(Int32)\n- uid: System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  id: GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldValueAsync<T>(Int32, CancellationToken)\n  fullName: System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldValueAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 188\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Asynchronously gets the value of the specified column as a type.</p>\\n\"\n  syntax:\n    content: public virtual Task<T> GetFieldValueAsync<T>(int ordinal, CancellationToken cancellationToken)\n    content.vb: Public Overridable Function GetFieldValueAsync(Of T)(ordinal As Integer, cancellationToken As CancellationToken) As Task(Of T)\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The type of the value to be returned.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction, which propagates a notification that operations should be canceled. This does not guarantee the cancellation. A setting of <strong>CancellationToken.None</strong> makes this method equivalent to <xref href=\\\"System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The returned task must be marked as cancelled.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the value to be returned. See the remarks section for more information.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{T}}\n      description: \"\\n<p>The type of the value to be returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>T</em> doesn’t match the type returned by the data source or cannot be cast.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Data.Common.DbDataReader.GetFieldValueAsync(Of T)(System.Int32, System.Threading.CancellationToken)\n  name.vb: GetFieldValueAsync(Of T)(Int32, CancellationToken)\n  nameWithType: DbDataReader.GetFieldValueAsync<T>(Int32, CancellationToken)\n  nameWithType.vb: DbDataReader.GetFieldValueAsync(Of T)(Int32, CancellationToken)\n- uid: System.Data.Common.DbDataReader.GetFloat(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetFloat(System.Int32)\n  id: GetFloat(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFloat(Int32)\n  fullName: System.Data.Common.DbDataReader.GetFloat(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFloat\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 119\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a single-precision floating point number.</p>\\n\"\n  syntax:\n    content: public abstract float GetFloat(int ordinal)\n    content.vb: Public MustOverride Function GetFloat(ordinal As Integer) As Single\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetFloat(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetFloat(Int32)\n- uid: System.Data.Common.DbDataReader.GetGuid(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetGuid(System.Int32)\n  id: GetGuid(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetGuid(Int32)\n  fullName: System.Data.Common.DbDataReader.GetGuid(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGuid\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 121\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a globally-unique identifier (GUID).</p>\\n\"\n  syntax:\n    content: public abstract Guid GetGuid(int ordinal)\n    content.vb: Public MustOverride Function GetGuid(ordinal As Integer) As Guid\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetGuid(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetGuid(Int32)\n- uid: System.Data.Common.DbDataReader.GetInt16(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetInt16(System.Int32)\n  id: GetInt16(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetInt16(Int32)\n  fullName: System.Data.Common.DbDataReader.GetInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt16\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 123\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public abstract short GetInt16(int ordinal)\n    content.vb: Public MustOverride Function GetInt16(ordinal As Integer) As Short\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetInt16(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetInt16(Int32)\n- uid: System.Data.Common.DbDataReader.GetInt32(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetInt32(System.Int32)\n  id: GetInt32(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetInt32(Int32)\n  fullName: System.Data.Common.DbDataReader.GetInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt32\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 125\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public abstract int GetInt32(int ordinal)\n    content.vb: Public MustOverride Function GetInt32(ordinal As Integer) As Integer\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetInt32(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetInt32(Int32)\n- uid: System.Data.Common.DbDataReader.GetInt64(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetInt64(System.Int32)\n  id: GetInt64(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetInt64(Int32)\n  fullName: System.Data.Common.DbDataReader.GetInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt64\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 127\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public abstract long GetInt64(int ordinal)\n    content.vb: Public MustOverride Function GetInt64(ordinal As Integer) As Long\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetInt64(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetInt64(Int32)\n- uid: System.Data.Common.DbDataReader.GetName(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetName(System.Int32)\n  id: GetName(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetName(Int32)\n  fullName: System.Data.Common.DbDataReader.GetName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetName\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 87\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the name of the column, given the zero-based column ordinal.</p>\\n\"\n  syntax:\n    content: public abstract string GetName(int ordinal)\n    content.vb: Public MustOverride Function GetName(ordinal As Integer) As String\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetName(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetName(Int32)\n- uid: System.Data.Common.DbDataReader.GetOrdinal(System.String)\n  commentId: M:System.Data.Common.DbDataReader.GetOrdinal(System.String)\n  id: GetOrdinal(System.String)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetOrdinal(String)\n  fullName: System.Data.Common.DbDataReader.GetOrdinal(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOrdinal\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 89\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the column ordinal given the name of the column.</p>\\n\"\n  syntax:\n    content: public abstract int GetOrdinal(string name)\n    content.vb: Public MustOverride Function GetOrdinal(name As String) As Integer\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the column.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The name specified is not a valid column name.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetOrdinal(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetOrdinal(String)\n- uid: System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)\n  id: GetProviderSpecificFieldType(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetProviderSpecificFieldType(Int32)\n  fullName: System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProviderSpecificFieldType\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 129\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the provider-specific field type of the specified column.</p>\\n\"\n  syntax:\n    content: public virtual Type GetProviderSpecificFieldType(int ordinal)\n    content.vb: Public Overridable Function GetProviderSpecificFieldType(ordinal As Integer) As Type\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes the data type of the specified column.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.GetProviderSpecificFieldType(Int32)\n- uid: System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)\n  id: GetProviderSpecificValue(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetProviderSpecificValue(Int32)\n  fullName: System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProviderSpecificValue\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 134\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as an instance of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object GetProviderSpecificValue(int ordinal)\n    content.vb: Public Overridable Function GetProviderSpecificValue(ordinal As Integer) As Object\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.GetProviderSpecificValue(Int32)\n- uid: System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])\n  commentId: M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])\n  id: GetProviderSpecificValues(System.Object[])\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetProviderSpecificValues(Object[])\n  fullName: System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProviderSpecificValues\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 139\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets all provider-specific attribute columns in the collection for the current row.</p>\\n\"\n  syntax:\n    content: public virtual int GetProviderSpecificValues(object[] values)\n    content.vb: Public Overridable Function GetProviderSpecificValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into which to copy the attribute columns.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of instances of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object())\n  name.vb: GetProviderSpecificValues(Object())\n  nameWithType: DbDataReader.GetProviderSpecificValues(Object[])\n  nameWithType.vb: DbDataReader.GetProviderSpecificValues(Object())\n- uid: System.Data.Common.DbDataReader.GetStream(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetStream(System.Int32)\n  id: GetStream(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetStream(Int32)\n  fullName: System.Data.Common.DbDataReader.GetStream(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStream\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 146\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Retrieves data as a <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Stream GetStream(int ordinal)\n    content.vb: Public Overridable Function GetStream(ordinal As Integer) As Stream\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>Retrieves data as a <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.Stream\n      description: \"\\n<p>The returned object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>binary</p>\\n</li><li>\\n<p>image</p>\\n</li><li>\\n<p>varbinary</p>\\n</li><li>\\n<p>udt</p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.GetStream(Int32)\n- uid: System.Data.Common.DbDataReader.GetString(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetString(System.Int32)\n  id: GetString(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetString(Int32)\n  fullName: System.Data.Common.DbDataReader.GetString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetString\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 144\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as an instance of <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract string GetString(int ordinal)\n    content.vb: Public MustOverride Function GetString(ordinal As Integer) As String\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetString(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetString(Int32)\n- uid: System.Data.Common.DbDataReader.GetTextReader(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)\n  id: GetTextReader(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetTextReader(Int32)\n  fullName: System.Data.Common.DbDataReader.GetTextReader(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTextReader\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 164\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Retrieves data as a <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual TextReader GetTextReader(int ordinal)\n    content.vb: Public Overridable Function GetTextReader(ordinal As Integer) As TextReader\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>Retrieves data as a <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.TextReader\n      description: \"\\n<p>The returned object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>char</p>\\n</li><li>\\n<p>nchar</p>\\n</li><li>\\n<p>ntext</p>\\n</li><li>\\n<p>nvarchar</p>\\n</li><li>\\n<p>text</p>\\n</li><li>\\n<p>varchar</p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.GetTextReader(Int32)\n- uid: System.Data.Common.DbDataReader.GetValue(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.GetValue(System.Int32)\n  id: GetValue(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Int32)\n  fullName: System.Data.Common.DbDataReader.GetValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValue\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 176\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the value of the specified column as an instance of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract object GetValue(int ordinal)\n    content.vb: Public MustOverride Function GetValue(ordinal As Integer) As Object\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetValue(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.GetValue(Int32)\n- uid: System.Data.Common.DbDataReader.GetValues(System.Object[])\n  commentId: M:System.Data.Common.DbDataReader.GetValues(System.Object[])\n  id: GetValues(System.Object[])\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetValues(Object[])\n  fullName: System.Data.Common.DbDataReader.GetValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValues\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 207\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Populates an array of objects with the column values of the current row.</p>\\n\"\n  syntax:\n    content: public abstract int GetValues(object[] values)\n    content.vb: Public MustOverride Function GetValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into which to copy the attribute columns.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of instances of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the array.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetValues(System.Object[])\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Data.Common.DbDataReader.GetValues(System.Object())\n  name.vb: GetValues(Object())\n  nameWithType: DbDataReader.GetValues(Object[])\n  nameWithType.vb: DbDataReader.GetValues(Object())\n- uid: System.Data.Common.DbDataReader.IsDBNull(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)\n  id: IsDBNull(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsDBNull(Int32)\n  fullName: System.Data.Common.DbDataReader.IsDBNull(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNull\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 209\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a value that indicates whether the column contains nonexistent or missing values.</p>\\n\"\n  syntax:\n    content: public abstract bool IsDBNull(int ordinal)\n    content.vb: Public MustOverride Function IsDBNull(ordinal As Integer) As Boolean\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified column is equivalent to <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.IsDBNull(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.IsDBNull(Int32)\n- uid: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)\n  id: IsDBNullAsync(System.Int32)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsDBNullAsync(Int32)\n  fullName: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNullAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 211\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which gets a value that indicates whether the column contains non-existent or missing values.</p>\\n\"\n  syntax:\n    content: public Task<bool> IsDBNullAsync(int ordinal)\n    content.vb: Public Function IsDBNullAsync(ordinal As Integer) As Task(Of Boolean)\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column to be retrieved.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Trying to read a previously read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbDataReader.IsDBNullAsync(Int32)\n- uid: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsDBNullAsync(Int32, CancellationToken)\n  fullName: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNullAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 216\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which gets a value that indicates whether the column contains non-existent or missing values. Optionally, sends a notification that operations should be cancelled.</p>\\n\"\n  syntax:\n    content: public virtual Task<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken)\n    content.vb: Public Overridable Function IsDBNullAsync(ordinal As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column to be retrieved.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction, which propagates a notification that operations should be canceled. This does not guarantee the cancellation. A setting of <strong>CancellationToken.None</strong> makes this method equivalent to <xref href=\\\"System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The returned task must be marked as cancelled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Trying to read a previously read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.IsDBNullAsync(Int32, CancellationToken)\n- uid: System.Data.Common.DbDataReader.NextResult\n  commentId: M:System.Data.Common.DbDataReader.NextResult\n  id: NextResult\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: NextResult()\n  fullName: System.Data.Common.DbDataReader.NextResult()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextResult\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 235\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Advances the reader to the next result when reading the results of a batch of statements.</p>\\n\"\n  syntax:\n    content: public abstract bool NextResult()\n    content.vb: Public MustOverride Function NextResult As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there are more result sets; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDataReader.NextResult\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.NextResult()\n- uid: System.Data.Common.DbDataReader.NextResultAsync\n  commentId: M:System.Data.Common.DbDataReader.NextResultAsync\n  id: NextResultAsync\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: NextResultAsync()\n  fullName: System.Data.Common.DbDataReader.NextResultAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextResultAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 263\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbDataReader.NextResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which advances the reader to the next result when reading the results of a batch of statements.</p>\\n<p>Invokes <xref href=\\\"System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with CancellationToken.None.</p>\\n\"\n  syntax:\n    content: public Task<bool> NextResultAsync()\n    content.vb: Public Function NextResultAsync As Task(Of Boolean)\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbDataReader.NextResultAsync()\n- uid: System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)\n  id: NextResultAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: NextResultAsync(CancellationToken)\n  fullName: System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextResultAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 268\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>This is the asynchronous version of <xref href=\\\"System.Data.Common.DbDataReader.NextResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Providers should override with an appropriate implementation. The <em>cancellationToken</em> may optionally be ignored.</p>\\n<p>The default implementation invokes the synchronous <xref href=\\\"System.Data.Common.DbDataReader.NextResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled <em>cancellationToken</em>. Exceptions thrown by <xref href=\\\"System.Data.Common.DbDataReader.NextResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be communicated via the returned Task Exception property.</p>\\n<p>Other methods and properties of the DbDataReader object should not be invoked while the returned Task is not yet completed.</p>\\n\"\n  syntax:\n    content: public virtual Task<bool> NextResultAsync(CancellationToken cancellationToken)\n    content.vb: Public Overridable Function NextResultAsync(cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.NextResultAsync(CancellationToken)\n- uid: System.Data.Common.DbDataReader.Read\n  commentId: M:System.Data.Common.DbDataReader.Read\n  id: Read\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: Read()\n  fullName: System.Data.Common.DbDataReader.Read()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Read\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 237\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Advances the reader to the next record in a result set.</p>\\n\"\n  syntax:\n    content: public abstract bool Read()\n    content.vb: Public MustOverride Function Read As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there are more rows; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDataReader.Read\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataReader.Read()\n- uid: System.Data.Common.DbDataReader.ReadAsync\n  commentId: M:System.Data.Common.DbDataReader.ReadAsync\n  id: ReadAsync\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync()\n  fullName: System.Data.Common.DbDataReader.ReadAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 239\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which advances the reader to the next record in a result set. This method invokes <xref href=\\\"System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with CancellationToken.None.</p>\\n\"\n  syntax:\n    content: public Task<bool> ReadAsync()\n    content.vb: Public Function ReadAsync As Task(Of Boolean)\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbDataReader.ReadAsync()\n- uid: System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)\n  id: ReadAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(CancellationToken)\n  fullName: System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 244\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>This is the asynchronous version of <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  Providers should override with an appropriate implementation. The cancellationToken may optionally be ignored.</p>\\n<p>The default implementation invokes the synchronous <xref href=\\\"System.Data.Common.DbDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellationToken.  Exceptions thrown by Read will be communicated via the returned Task Exception property.</p>\\n<p>Do not invoke other methods and properties of the <strong>DbDataReader</strong> object until the returned Task is complete.</p>\\n\"\n  syntax:\n    content: public virtual Task<bool> ReadAsync(CancellationToken cancellationToken)\n    content.vb: Public Overridable Function ReadAsync(cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbDataReader.ReadAsync(CancellationToken)\n- uid: System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)\n  commentId: M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)\n  id: System#Data#IDataRecord#GetData(System.Int32)\n  isEii: true\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IDataRecord.GetData(Int32)\n  fullName: System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDataRecord.GetData\n    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs\n    startLine: 296\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.Data.IDataRecord.GetData(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IDataReader IDataRecord.GetData(int ordinal)\n    content.vb: Function System.Data.IDataRecord.GetData(ordinal As Integer) As IDataReader Implements IDataRecord.GetData\n    parameters:\n    - id: ordinal\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Data.IDataReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be used when the field points to more remote structured data.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetData(System.Int32)\n  name.vb: System.Data.IDataRecord.GetData(Int32)\n  nameWithType: DbDataReader.IDataRecord.GetData(Int32)\n  nameWithType.vb: DbDataReader.System.Data.IDataRecord.GetData(Int32)\n- uid: System.Data.Common.DbDataReader.System#Data#IDataReader#Close\n  commentId: M:System.Data.Common.DbDataReader.System#Data#IDataReader#Close\n  id: System#Data#IDataReader#Close\n  isEii: true\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IDataReader.Close()\n  fullName: System.Data.Common.DbDataReader.System.Data.IDataReader.Close()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/ref/System.Data.Common.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDataReader.Close\n    path: src/System.Data.Common/ref/System.Data.Common.cs\n    startLine: 363\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: void IDataReader.Close()\n    content.vb: Sub System.Data.IDataReader.Close Implements IDataReader.Close\n  implements:\n  - System.Data.IDataReader.Close\n  name.vb: System.Data.IDataReader.Close()\n  nameWithType: DbDataReader.IDataReader.Close()\n  nameWithType.vb: DbDataReader.System.Data.IDataReader.Close()\n- uid: System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable\n  commentId: M:System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable\n  id: System#Data#IDataReader#GetSchemaTable\n  isEii: true\n  parent: System.Data.Common.DbDataReader\n  langs:\n  - csharp\n  - vb\n  name: IDataReader.GetSchemaTable()\n  fullName: System.Data.Common.DbDataReader.System.Data.IDataReader.GetSchemaTable()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/ref/System.Data.Common.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDataReader.GetSchemaTable\n    path: src/System.Data.Common/ref/System.Data.Common.cs\n    startLine: 364\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: DataTable IDataReader.GetSchemaTable()\n    content.vb: Function System.Data.IDataReader.GetSchemaTable As DataTable Implements IDataReader.GetSchemaTable\n    return:\n      type: System.Data.DataTable\n  implements:\n  - System.Data.IDataReader.GetSchemaTable\n  name.vb: System.Data.IDataReader.GetSchemaTable()\n  nameWithType: DbDataReader.IDataReader.GetSchemaTable()\n  nameWithType.vb: DbDataReader.System.Data.IDataReader.GetSchemaTable()\nreferences:\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  fullName: System.Data.IDataReader\n  nameWithType: IDataReader\n  commentId: T:System.Data.IDataReader\n- uid: System.Data.IDataRecord\n  parent: System.Data\n  isExternal: false\n  name: IDataRecord\n  fullName: System.Data.IDataRecord\n  nameWithType: IDataRecord\n  commentId: T:System.Data.IDataRecord\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n  parent: System.Data.Common.DbDataReaderExtensions\n  definition: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n  name: GetColumnSchema()\n  fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema()\n  spec.csharp:\n  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n    name: GetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n    name: GetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: DbDataReaderExtensions.GetColumnSchema()\n  commentId: M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n- uid: System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n  parent: System.Data.Common.DbDataReaderExtensions\n  definition: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n  name: CanGetColumnSchema()\n  fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema()\n  spec.csharp:\n  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n    name: CanGetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n    name: CanGetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: DbDataReaderExtensions.CanGetColumnSchema()\n  commentId: M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n  isExternal: false\n  name: GetColumnSchema(DbDataReader)\n  fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n  spec.csharp:\n  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n    name: GetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n  - name: (\n    fullName: (\n  - uid: System.Data.Common.DbDataReader\n    name: DbDataReader\n    fullName: System.Data.Common.DbDataReader\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n    name: GetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema\n  - name: (\n    fullName: (\n  - uid: System.Data.Common.DbDataReader\n    name: DbDataReader\n    fullName: System.Data.Common.DbDataReader\n  - name: )\n    fullName: )\n  nameWithType: DbDataReaderExtensions.GetColumnSchema(DbDataReader)\n  commentId: M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)\n- uid: System.Data.Common.DbDataReaderExtensions\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReaderExtensions\n  fullName: System.Data.Common.DbDataReaderExtensions\n  nameWithType: DbDataReaderExtensions\n  commentId: T:System.Data.Common.DbDataReaderExtensions\n- uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n  isExternal: false\n  name: CanGetColumnSchema(DbDataReader)\n  fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n  spec.csharp:\n  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n    name: CanGetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n  - name: (\n    fullName: (\n  - uid: System.Data.Common.DbDataReader\n    name: DbDataReader\n    fullName: System.Data.Common.DbDataReader\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n    name: CanGetColumnSchema\n    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema\n  - name: (\n    fullName: (\n  - uid: System.Data.Common.DbDataReader\n    name: DbDataReader\n    fullName: System.Data.Common.DbDataReader\n  - name: )\n    fullName: )\n  nameWithType: DbDataReaderExtensions.CanGetColumnSchema(DbDataReader)\n  commentId: M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Data.IDataReader.Depth\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: Depth\n  fullName: System.Data.IDataReader.Depth\n  nameWithType: IDataReader.Depth\n  commentId: P:System.Data.IDataReader.Depth\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.IDataRecord.FieldCount\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: FieldCount\n  fullName: System.Data.IDataRecord.FieldCount\n  nameWithType: IDataRecord.FieldCount\n  commentId: P:System.Data.IDataRecord.FieldCount\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Data.IDataReader.IsClosed\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: IsClosed\n  fullName: System.Data.IDataReader.IsClosed\n  nameWithType: IDataReader.IsClosed\n  commentId: P:System.Data.IDataReader.IsClosed\n- uid: System.Data.IDataRecord.Item(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Data.IDataRecord.Item[System.Int32]\n  fullname.vb: System.Data.IDataRecord.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.Item(System.Int32)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Data.IDataRecord.Item(System.Int32)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.Item[Int32]\n  nameWithType.vb: IDataRecord.Item(Int32)\n  commentId: P:System.Data.IDataRecord.Item(System.Int32)\n- uid: System.Data.IDataRecord.Item(System.String)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: Item[String]\n  fullName: System.Data.IDataRecord.Item[System.String]\n  fullname.vb: System.Data.IDataRecord.Item(System.String)\n  name.vb: Item(String)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.Item(System.String)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Data.IDataRecord.Item(System.String)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.Item[String]\n  nameWithType.vb: IDataRecord.Item(String)\n  commentId: P:System.Data.IDataRecord.Item(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Data.IDataReader.RecordsAffected\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: RecordsAffected\n  fullName: System.Data.IDataReader.RecordsAffected\n  nameWithType: IDataReader.RecordsAffected\n  commentId: P:System.Data.IDataReader.RecordsAffected\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetBoolean(Int32)\n  fullName: System.Data.IDataRecord.GetBoolean(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n    name: GetBoolean\n    fullName: System.Data.IDataRecord.GetBoolean\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n    name: GetBoolean\n    fullName: System.Data.IDataRecord.GetBoolean\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetBoolean(Int32)\n  commentId: M:System.Data.IDataRecord.GetBoolean(System.Int32)\n- uid: System.Data.IDataRecord.GetByte(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetByte(Int32)\n  fullName: System.Data.IDataRecord.GetByte(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetByte(System.Int32)\n    name: GetByte\n    fullName: System.Data.IDataRecord.GetByte\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetByte(System.Int32)\n    name: GetByte\n    fullName: System.Data.IDataRecord.GetByte\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetByte(Int32)\n  commentId: M:System.Data.IDataRecord.GetByte(System.Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  fullName: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)\n  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Data.IDataRecord.GetBytes\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Data.IDataRecord.GetBytes\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  nameWithType.vb: IDataRecord.GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  commentId: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Data.IDataRecord.GetChar(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetChar(Int32)\n  fullName: System.Data.IDataRecord.GetChar(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetChar(System.Int32)\n    name: GetChar\n    fullName: System.Data.IDataRecord.GetChar\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetChar(System.Int32)\n    name: GetChar\n    fullName: System.Data.IDataRecord.GetChar\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetChar(Int32)\n  commentId: M:System.Data.IDataRecord.GetChar(System.Int32)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetChars(Int32, Int64, Char[], Int32, Int32)\n  fullName: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)\n  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Data.IDataRecord.GetChars\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Data.IDataRecord.GetChars\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetChars(Int32, Int64, Char[], Int32, Int32)\n  nameWithType.vb: IDataRecord.GetChars(Int32, Int64, Char(), Int32, Int32)\n  commentId: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Data.Common.DbDataReader\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n  nameWithType: DbDataReader\n  commentId: T:System.Data.Common.DbDataReader\n- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDataTypeName(Int32)\n  fullName: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n    name: GetDataTypeName\n    fullName: System.Data.IDataRecord.GetDataTypeName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n    name: GetDataTypeName\n    fullName: System.Data.IDataRecord.GetDataTypeName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDataTypeName(Int32)\n  commentId: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)\n- uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDateTime(Int32)\n  fullName: System.Data.IDataRecord.GetDateTime(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n    name: GetDateTime\n    fullName: System.Data.IDataRecord.GetDateTime\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n    name: GetDateTime\n    fullName: System.Data.IDataRecord.GetDateTime\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDateTime(Int32)\n  commentId: M:System.Data.IDataRecord.GetDateTime(System.Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDecimal(Int32)\n  fullName: System.Data.IDataRecord.GetDecimal(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n    name: GetDecimal\n    fullName: System.Data.IDataRecord.GetDecimal\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n    name: GetDecimal\n    fullName: System.Data.IDataRecord.GetDecimal\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDecimal(Int32)\n  commentId: M:System.Data.IDataRecord.GetDecimal(System.Int32)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Data.IDataRecord.GetDouble(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDouble(Int32)\n  fullName: System.Data.IDataRecord.GetDouble(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDouble(System.Int32)\n    name: GetDouble\n    fullName: System.Data.IDataRecord.GetDouble\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDouble(System.Int32)\n    name: GetDouble\n    fullName: System.Data.IDataRecord.GetDouble\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDouble(Int32)\n  commentId: M:System.Data.IDataRecord.GetDouble(System.Int32)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetFieldType(Int32)\n  fullName: System.Data.IDataRecord.GetFieldType(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n    name: GetFieldType\n    fullName: System.Data.IDataRecord.GetFieldType\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n    name: GetFieldType\n    fullName: System.Data.IDataRecord.GetFieldType\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetFieldType(Int32)\n  commentId: M:System.Data.IDataRecord.GetFieldType(System.Int32)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Threading.Tasks.Task{{T}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<T>\n  fullName: System.Threading.Tasks.Task<T>\n  fullname.vb: System.Threading.Tasks.Task(Of T)\n  name.vb: Task(Of T)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Task<T>\n  nameWithType.vb: Task(Of T)\n  commentId: T:System.Threading.Tasks.Task{``0}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Data.IDataRecord.GetFloat(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetFloat(Int32)\n  fullName: System.Data.IDataRecord.GetFloat(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetFloat(System.Int32)\n    name: GetFloat\n    fullName: System.Data.IDataRecord.GetFloat\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetFloat(System.Int32)\n    name: GetFloat\n    fullName: System.Data.IDataRecord.GetFloat\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetFloat(Int32)\n  commentId: M:System.Data.IDataRecord.GetFloat(System.Int32)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Data.IDataRecord.GetGuid(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetGuid(Int32)\n  fullName: System.Data.IDataRecord.GetGuid(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetGuid(System.Int32)\n    name: GetGuid\n    fullName: System.Data.IDataRecord.GetGuid\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetGuid(System.Int32)\n    name: GetGuid\n    fullName: System.Data.IDataRecord.GetGuid\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetGuid(Int32)\n  commentId: M:System.Data.IDataRecord.GetGuid(System.Int32)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Data.IDataRecord.GetInt16(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetInt16(Int32)\n  fullName: System.Data.IDataRecord.GetInt16(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetInt16(System.Int32)\n    name: GetInt16\n    fullName: System.Data.IDataRecord.GetInt16\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetInt16(System.Int32)\n    name: GetInt16\n    fullName: System.Data.IDataRecord.GetInt16\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetInt16(Int32)\n  commentId: M:System.Data.IDataRecord.GetInt16(System.Int32)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Data.IDataRecord.GetInt32(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetInt32(Int32)\n  fullName: System.Data.IDataRecord.GetInt32(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetInt32(System.Int32)\n    name: GetInt32\n    fullName: System.Data.IDataRecord.GetInt32\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetInt32(System.Int32)\n    name: GetInt32\n    fullName: System.Data.IDataRecord.GetInt32\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetInt32(Int32)\n  commentId: M:System.Data.IDataRecord.GetInt32(System.Int32)\n- uid: System.Data.IDataRecord.GetInt64(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetInt64(Int32)\n  fullName: System.Data.IDataRecord.GetInt64(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetInt64(System.Int32)\n    name: GetInt64\n    fullName: System.Data.IDataRecord.GetInt64\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetInt64(System.Int32)\n    name: GetInt64\n    fullName: System.Data.IDataRecord.GetInt64\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetInt64(Int32)\n  commentId: M:System.Data.IDataRecord.GetInt64(System.Int32)\n- uid: System.Data.IDataRecord.GetName(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetName(Int32)\n  fullName: System.Data.IDataRecord.GetName(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetName(System.Int32)\n    name: GetName\n    fullName: System.Data.IDataRecord.GetName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetName(System.Int32)\n    name: GetName\n    fullName: System.Data.IDataRecord.GetName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetName(Int32)\n  commentId: M:System.Data.IDataRecord.GetName(System.Int32)\n- uid: System.Data.IDataRecord.GetOrdinal(System.String)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetOrdinal(String)\n  fullName: System.Data.IDataRecord.GetOrdinal(System.String)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetOrdinal(System.String)\n    name: GetOrdinal\n    fullName: System.Data.IDataRecord.GetOrdinal\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetOrdinal(System.String)\n    name: GetOrdinal\n    fullName: System.Data.IDataRecord.GetOrdinal\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetOrdinal(String)\n  commentId: M:System.Data.IDataRecord.GetOrdinal(System.String)\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Data.IDataRecord.GetString(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetString(Int32)\n  fullName: System.Data.IDataRecord.GetString(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetString(System.Int32)\n    name: GetString\n    fullName: System.Data.IDataRecord.GetString\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetString(System.Int32)\n    name: GetString\n    fullName: System.Data.IDataRecord.GetString\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetString(Int32)\n  commentId: M:System.Data.IDataRecord.GetString(System.Int32)\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  fullName: System.IO.TextReader\n  nameWithType: TextReader\n  commentId: T:System.IO.TextReader\n- uid: System.Data.IDataRecord.GetValue(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetValue(Int32)\n  fullName: System.Data.IDataRecord.GetValue(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetValue(System.Int32)\n    name: GetValue\n    fullName: System.Data.IDataRecord.GetValue\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetValue(System.Int32)\n    name: GetValue\n    fullName: System.Data.IDataRecord.GetValue\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetValue(Int32)\n  commentId: M:System.Data.IDataRecord.GetValue(System.Int32)\n- uid: System.Data.IDataRecord.GetValues(System.Object[])\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetValues(Object[])\n  fullName: System.Data.IDataRecord.GetValues(System.Object[])\n  fullname.vb: System.Data.IDataRecord.GetValues(System.Object())\n  name.vb: GetValues(Object())\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetValues(System.Object[])\n    name: GetValues\n    fullName: System.Data.IDataRecord.GetValues\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetValues(System.Object[])\n    name: GetValues\n    fullName: System.Data.IDataRecord.GetValues\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetValues(Object[])\n  nameWithType.vb: IDataRecord.GetValues(Object())\n  commentId: M:System.Data.IDataRecord.GetValues(System.Object[])\n- uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: IsDBNull(Int32)\n  fullName: System.Data.IDataRecord.IsDBNull(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n    name: IsDBNull\n    fullName: System.Data.IDataRecord.IsDBNull\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n    name: IsDBNull\n    fullName: System.Data.IDataRecord.IsDBNull\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.IsDBNull(Int32)\n  commentId: M:System.Data.IDataRecord.IsDBNull(System.Int32)\n- uid: System.Threading.Tasks.Task{System.Boolean}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Boolean>\n  fullName: System.Threading.Tasks.Task<System.Boolean>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)\n  name.vb: Task(Of Boolean)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Boolean>\n  nameWithType.vb: Task(Of Boolean)\n  commentId: T:System.Threading.Tasks.Task{System.Boolean}\n- uid: System.Data.IDataReader.NextResult\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: NextResult()\n  fullName: System.Data.IDataReader.NextResult()\n  spec.csharp:\n  - uid: System.Data.IDataReader.NextResult\n    name: NextResult\n    fullName: System.Data.IDataReader.NextResult\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataReader.NextResult\n    name: NextResult\n    fullName: System.Data.IDataReader.NextResult\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDataReader.NextResult()\n  commentId: M:System.Data.IDataReader.NextResult\n- uid: System.Data.IDataReader.Read\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: Read()\n  fullName: System.Data.IDataReader.Read()\n  spec.csharp:\n  - uid: System.Data.IDataReader.Read\n    name: Read\n    fullName: System.Data.IDataReader.Read\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataReader.Read\n    name: Read\n    fullName: System.Data.IDataReader.Read\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDataReader.Read()\n  commentId: M:System.Data.IDataReader.Read\n- uid: System.Data.IDataRecord.GetData(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetData(Int32)\n  fullName: System.Data.IDataRecord.GetData(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetData(System.Int32)\n    name: GetData\n    fullName: System.Data.IDataRecord.GetData\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetData(System.Int32)\n    name: GetData\n    fullName: System.Data.IDataRecord.GetData\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetData(Int32)\n  commentId: M:System.Data.IDataRecord.GetData(System.Int32)\n- uid: System.Data.IDataReader.Close\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: Close()\n  fullName: System.Data.IDataReader.Close()\n  spec.csharp:\n  - uid: System.Data.IDataReader.Close\n    name: Close\n    fullName: System.Data.IDataReader.Close\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataReader.Close\n    name: Close\n    fullName: System.Data.IDataReader.Close\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDataReader.Close()\n  commentId: M:System.Data.IDataReader.Close\n- uid: System.Data.IDataReader.GetSchemaTable\n  parent: System.Data.IDataReader\n  isExternal: false\n  name: GetSchemaTable()\n  fullName: System.Data.IDataReader.GetSchemaTable()\n  spec.csharp:\n  - uid: System.Data.IDataReader.GetSchemaTable\n    name: GetSchemaTable\n    fullName: System.Data.IDataReader.GetSchemaTable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataReader.GetSchemaTable\n    name: GetSchemaTable\n    fullName: System.Data.IDataReader.GetSchemaTable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDataReader.GetSchemaTable()\n  commentId: M:System.Data.IDataReader.GetSchemaTable\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  fullName: System.Data.DataTable\n  nameWithType: DataTable\n  commentId: T:System.Data.DataTable\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.Data.Common.DbException\n  isExternal: false\n  name: DbException\n  fullName: System.Data.Common.DbException\n  nameWithType: DbException\n  commentId: T:System.Data.Common.DbException\n"}