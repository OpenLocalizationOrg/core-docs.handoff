{"nodes":[{"pos":[886,896],"content":"IdnMapping","needQuote":true,"nodes":[{"content":"IdnMapping","pos":[0,10]}]},{"pos":[2202,2214],"content":"IdnMapping()","needQuote":true,"nodes":[{"content":"IdnMapping()","pos":[0,12]}]},{"pos":[3174,3189],"content":"AllowUnassigned","needQuote":true,"nodes":[{"content":"AllowUnassigned","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if unassigned code points are used in operations; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4072,4191],"source":"\\n<p>\\n<strong>true</strong> if unassigned code points are used in operations; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4533,4550],"content":"UseStd3AsciiRules","needQuote":true,"nodes":[{"content":"UseStd3AsciiRules","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if standard naming conventions are used in operations; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5450,5574],"source":"\\n<p>\\n<strong>true</strong> if standard naming conventions are used in operations; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5930,5944],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare to the current object.&lt;/p&gt;\\n","pos":[6764,6819],"source":"\\n<p>The object to compare to the current object.</p>\\n"},{"pos":[7784,7800],"content":"GetAscii(String)","needQuote":true,"nodes":[{"content":"GetAscii(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to convert, which consists of one or more domain name labels delimited with label separators.&lt;/p&gt;\\n","pos":[8668,8783],"source":"\\n<p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\\n"},{"content":"\\n&lt;p&gt;The equivalent of the string specified by the &lt;em&gt;unicode&lt;/em&gt; parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.&lt;/p&gt;\\n","pos":[8843,9069],"source":"\\n<p>The equivalent of the string specified by the <em>unicode</em> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;unicode&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9188,9243],"source":"\\n<p>\\n<em>unicode</em> is <strong>null</strong>.</p>\\n"},{"pos":[10034,10057],"content":"GetAscii(String, Int32)","needQuote":true,"nodes":[{"content":"GetAscii(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to convert, which consists of one or more domain name labels delimited with label separators.&lt;/p&gt;\\n","pos":[11027,11142],"source":"\\n<p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\\n"},{"content":"\\n&lt;p&gt;A zero-based offset into &lt;em&gt;unicode&lt;/em&gt; that specifies the start of the substring to convert.","pos":[11205,11305],"source":"\\n<p>A zero-based offset into <em>unicode</em> that specifies the start of the substring to convert."},{"content":"The conversion operation continues to the end of the &lt;em&gt;unicode&lt;/em&gt; string.&lt;/p&gt;\\n","pos":[11306,11389],"source":" The conversion operation continues to the end of the <em>unicode</em> string.</p>\\n"},{"content":"\\n&lt;p&gt;The equivalent of the substring specified by the &lt;em&gt;unicode&lt;/em&gt; and &lt;em&gt;index&lt;/em&gt; parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.&lt;/p&gt;\\n","pos":[11449,11698],"source":"\\n<p>The equivalent of the substring specified by the <em>unicode</em> and <em>index</em> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;unicode&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11817,11872],"source":"\\n<p>\\n<em>unicode</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than the length of &lt;em&gt;unicode&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11989,12121],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>unicode</em>.</p>\\n"},{"pos":[12958,12988],"content":"GetAscii(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetAscii(String, Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The string to convert, which consists of one or more domain name labels delimited with label separators.&lt;/p&gt;\\n","pos":[14039,14154],"source":"\\n<p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\\n"},{"content":"\\n&lt;p&gt;A zero-based offset into &lt;em&gt;unicode&lt;/em&gt; that specifies the start of the substring.&lt;/p&gt;\\n","pos":[14217,14312],"source":"\\n<p>A zero-based offset into <em>unicode</em> that specifies the start of the substring.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to convert in the substring that starts at the position specified by  &lt;em&gt;index&lt;/em&gt; in the &lt;em&gt;unicode&lt;/em&gt; string.","pos":[14375,14521],"source":"\\n<p>The number of characters to convert in the substring that starts at the position specified by  <em>index</em> in the <em>unicode</em> string."},{"content":"&lt;/p&gt;\\n","pos":[14522,14528],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The equivalent of the substring specified by the &lt;em&gt;unicode&lt;/em&gt;, &lt;em&gt;index&lt;/em&gt;, and &lt;em&gt;count&lt;/em&gt; parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.&lt;/p&gt;\\n","pos":[14588,14854],"source":"\\n<p>The equivalent of the substring specified by the <em>unicode</em>, <em>index</em>, and <em>count</em> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;unicode&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14973,15028],"source":"\\n<p>\\n<em>unicode</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than the length of &lt;em&gt;unicode&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than the length of &lt;em&gt;unicode&lt;/em&gt; minus &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[15145,15402],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>unicode</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>unicode</em> minus <em>count</em>.</p>\\n"},{"pos":[16132,16145],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17583,17601],"content":"GetUnicode(String)","needQuote":true,"nodes":[{"content":"GetUnicode(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","pos":[18390,18544],"source":"\\n<p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard."},{"content":"&lt;/p&gt;\\n","pos":[18545,18551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Unicode equivalent of the IDNA substring specified by the &lt;em&gt;ascii&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[18611,18709],"source":"\\n<p>The Unicode equivalent of the IDNA substring specified by the <em>ascii</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ascii&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18828,18881],"source":"\\n<p>\\n<em>ascii</em> is <strong>null</strong>.</p>\\n"},{"pos":[19678,19703],"content":"GetUnicode(String, Int32)","needQuote":true,"nodes":[{"content":"GetUnicode(String, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","pos":[20538,20692],"source":"\\n<p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard."},{"content":"&lt;/p&gt;\\n","pos":[20693,20699],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A zero-based offset into &lt;em&gt;ascii&lt;/em&gt; that specifies the start of the substring to decode.","pos":[20762,20859],"source":"\\n<p>A zero-based offset into <em>ascii</em> that specifies the start of the substring to decode."},{"content":"The decoding operation continues to the end of the &lt;em&gt;ascii&lt;/em&gt; string.&lt;/p&gt;\\n","pos":[20860,20939],"source":" The decoding operation continues to the end of the <em>ascii</em> string.</p>\\n"},{"content":"\\n&lt;p&gt;The Unicode equivalent of the IDNA substring specified by the &lt;em&gt;ascii&lt;/em&gt; and &lt;em&gt;index&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[20999,21117],"source":"\\n<p>The Unicode equivalent of the IDNA substring specified by the <em>ascii</em> and <em>index</em> parameters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ascii&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21236,21289],"source":"\\n<p>\\n<em>ascii</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than the length of &lt;em&gt;ascii&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21406,21536],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>ascii</em>.</p>\\n"},{"pos":[22379,22411],"content":"GetUnicode(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetUnicode(String, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","pos":[23322,23476],"source":"\\n<p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard."},{"content":"&lt;/p&gt;\\n","pos":[23477,23483],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A zero-based offset into &lt;em&gt;ascii&lt;/em&gt; that specifies the start of the substring.","pos":[23546,23633],"source":"\\n<p>A zero-based offset into <em>ascii</em> that specifies the start of the substring."},{"content":"&lt;/p&gt;\\n","pos":[23634,23640],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to convert in the substring that starts at the position specified by &lt;em&gt;index&lt;/em&gt; in the &lt;em&gt;ascii&lt;/em&gt; string.","pos":[23703,23846],"source":"\\n<p>The number of characters to convert in the substring that starts at the position specified by <em>index</em> in the <em>ascii</em> string."},{"content":"&lt;/p&gt;\\n","pos":[23847,23853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Unicode equivalent of the IDNA substring specified by the &lt;em&gt;ascii&lt;/em&gt;, &lt;em&gt;index&lt;/em&gt;, and &lt;em&gt;count&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[23913,24048],"source":"\\n<p>The Unicode equivalent of the IDNA substring specified by the <em>ascii</em>, <em>index</em>, and <em>count</em> parameters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ascii&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24167,24220],"source":"\\n<p>\\n<em>ascii</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than the length of &lt;em&gt;ascii&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than the length of &lt;em&gt;ascii&lt;/em&gt; minus &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24337,24590],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>ascii</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>ascii</em> minus <em>count</em>.</p>\\n"},{"pos":[25183,25203],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[25376,25382],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25542,25552],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25647,25655],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25724,25725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25752,25753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25823,25831],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25900,25901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25928,25929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26126,26148],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[26296,26302],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26369,26370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26420,26426],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26487,26488]},{"pos":[26543,26549],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26609,26610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26707,26713],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26780,26781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26831,26837],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26898,26899]},{"pos":[26954,26960],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27020,27021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27266,27297],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[27463,27478],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27554,27555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27605,27611],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27672,27673]},{"pos":[27728,27734],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27794,27795],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27901,27916],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27992,27993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28043,28049],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28110,28111]},{"pos":[28166,28172],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28232,28233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28459,28468],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28561,28568],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28636,28637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28664,28665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28734,28741],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28809,28810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28837,28838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29013,29030],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[29139,29154],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29230,29231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29258,29259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29336,29351],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29427,29428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29455,29456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29601,29607],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29739,29746],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29922,29936],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30055,30061],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30128,30129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30179,30185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30245,30246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30329,30335],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30402,30403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30453,30459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30519,30520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30692,30698],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30842,30847],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31007,31020],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31121,31132],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31204,31205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31232,31233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31306,31317],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31389,31390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31417,31418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31577,31598],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[31799,31816],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[31998,32025],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Globalization.IdnMapping\n  commentId: T:System.Globalization.IdnMapping\n  id: IdnMapping\n  parent: System.Globalization\n  children:\n  - System.Globalization.IdnMapping.#ctor\n  - System.Globalization.IdnMapping.AllowUnassigned\n  - System.Globalization.IdnMapping.Equals(System.Object)\n  - System.Globalization.IdnMapping.GetAscii(System.String)\n  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\n  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\n  - System.Globalization.IdnMapping.GetHashCode\n  - System.Globalization.IdnMapping.GetUnicode(System.String)\n  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)\n  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\n  - System.Globalization.IdnMapping.UseStd3AsciiRules\n  langs:\n  - csharp\n  - vb\n  name: IdnMapping\n  fullName: System.Globalization.IdnMapping\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IdnMapping\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 71\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public sealed class IdnMapping\n    content.vb: Public NotInheritable Class IdnMapping\n  seealso:\n  - type: System.String.Normalize\n    commentId: Overload:System.String.Normalize\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: IdnMapping\n- uid: System.Globalization.IdnMapping.#ctor\n  commentId: M:System.Globalization.IdnMapping.#ctor\n  id: '#ctor'\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: IdnMapping()\n  fullName: System.Globalization.IdnMapping.IdnMapping()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 89\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public IdnMapping()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.IdnMapping()\n- uid: System.Globalization.IdnMapping.AllowUnassigned\n  commentId: P:System.Globalization.IdnMapping.AllowUnassigned\n  id: AllowUnassigned\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: AllowUnassigned\n  fullName: System.Globalization.IdnMapping.AllowUnassigned\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AllowUnassigned\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 93\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool AllowUnassigned { get; set; }\n    content.vb: Public Property AllowUnassigned As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if unassigned code points are used in operations; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.AllowUnassigned\n- uid: System.Globalization.IdnMapping.UseStd3AsciiRules\n  commentId: P:System.Globalization.IdnMapping.UseStd3AsciiRules\n  id: UseStd3AsciiRules\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: UseStd3AsciiRules\n  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UseStd3AsciiRules\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 106\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool UseStd3AsciiRules { get; set; }\n    content.vb: Public Property UseStd3AsciiRules As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if standard naming conventions are used in operations; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.UseStd3AsciiRules\n- uid: System.Globalization.IdnMapping.Equals(System.Object)\n  commentId: M:System.Globalization.IdnMapping.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Globalization.IdnMapping.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 331\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Indicates whether a specified object and the current <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object are equal.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object specified by the <em>obj</em> parameter is derived from <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and its <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IdnMapping.Equals(Object)\n- uid: System.Globalization.IdnMapping.GetAscii(System.String)\n  commentId: M:System.Globalization.IdnMapping.GetAscii(System.String)\n  id: GetAscii(System.String)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetAscii(String)\n  fullName: System.Globalization.IdnMapping.GetAscii(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAscii\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 120\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</p>\\n\"\n  syntax:\n    content: public string GetAscii(string unicode)\n    content.vb: Public Function GetAscii(unicode As String) As String\n    parameters:\n    - id: unicode\n      type: System.String\n      description: \"\\n<p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The equivalent of the string specified by the <em>unicode</em> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>unicode</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>unicode</em> is invalid based on the <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties, and the IDNA standard.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.GetAscii(String)\n- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\n  commentId: M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\n  id: GetAscii(System.String,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetAscii(String, Int32)\n  fullName: System.Globalization.IdnMapping.GetAscii(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAscii\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 125\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.  </p>\\n\"\n  syntax:\n    content: public string GetAscii(string unicode, int index)\n    content.vb: Public Function GetAscii(unicode As String, index As Integer) As String\n    parameters:\n    - id: unicode\n      type: System.String\n      description: \"\\n<p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A zero-based offset into <em>unicode</em> that specifies the start of the substring to convert. The conversion operation continues to the end of the <em>unicode</em> string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The equivalent of the substring specified by the <em>unicode</em> and <em>index</em> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>unicode</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>unicode</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>unicode</em> is invalid based on the <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties, and the IDNA standard.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.GetAscii(String, Int32)\n- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\n  id: GetAscii(System.String,System.Int32,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetAscii(String, Int32, Int32)\n  fullName: System.Globalization.IdnMapping.GetAscii(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAscii\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 132\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard. </p>\\n\"\n  syntax:\n    content: public string GetAscii(string unicode, int index, int count)\n    content.vb: Public Function GetAscii(unicode As String, index As Integer, count As Integer) As String\n    parameters:\n    - id: unicode\n      type: System.String\n      description: \"\\n<p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A zero-based offset into <em>unicode</em> that specifies the start of the substring.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to convert in the substring that starts at the position specified by  <em>index</em> in the <em>unicode</em> string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The equivalent of the substring specified by the <em>unicode</em>, <em>index</em>, and <em>count</em> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>unicode</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>unicode</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>unicode</em> minus <em>count</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>unicode</em> is invalid based on the <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties, and the IDNA standard.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.GetAscii(String, Int32, Int32)\n- uid: System.Globalization.IdnMapping.GetHashCode\n  commentId: M:System.Globalization.IdnMapping.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Globalization.IdnMapping.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 344\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a hash code for this <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>One of four 32-bit signed constants derived from the properties of an <xref href=\\\"System.Globalization.IdnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IdnMapping.GetHashCode()\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String)\n  commentId: M:System.Globalization.IdnMapping.GetUnicode(System.String)\n  id: GetUnicode(System.String)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetUnicode(String)\n  fullName: System.Globalization.IdnMapping.GetUnicode(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnicode\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 243\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters. </p>\\n\"\n  syntax:\n    content: public string GetUnicode(string ascii)\n    content.vb: Public Function GetUnicode(ascii As String) As String\n    parameters:\n    - id: ascii\n      type: System.String\n      description: \"\\n<p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The Unicode equivalent of the IDNA substring specified by the <em>ascii</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>ascii</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ascii</em> is invalid based on the <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties, and the IDNA standard.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.GetUnicode(String)\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)\n  commentId: M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)\n  id: GetUnicode(System.String,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetUnicode(String, Int32)\n  fullName: System.Globalization.IdnMapping.GetUnicode(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnicode\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 248\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters. </p>\\n\"\n  syntax:\n    content: public string GetUnicode(string ascii, int index)\n    content.vb: Public Function GetUnicode(ascii As String, index As Integer) As String\n    parameters:\n    - id: ascii\n      type: System.String\n      description: \"\\n<p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A zero-based offset into <em>ascii</em> that specifies the start of the substring to decode. The decoding operation continues to the end of the <em>ascii</em> string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The Unicode equivalent of the IDNA substring specified by the <em>ascii</em> and <em>index</em> parameters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>ascii</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>ascii</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ascii</em> is invalid based on the <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties, and the IDNA standard.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.GetUnicode(String, Int32)\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\n  id: GetUnicode(System.String,System.Int32,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  - vb\n  name: GetUnicode(String, Int32, Int32)\n  fullName: System.Globalization.IdnMapping.GetUnicode(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnicode\n    path: src/mscorlib/src/System/Globalization/IdnMapping.cs\n    startLine: 255\n  assemblies:\n  - System.Globalization.Extensions\n  namespace: System.Globalization\n  summary: \"\\n<p>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters. </p>\\n\"\n  syntax:\n    content: public string GetUnicode(string ascii, int index, int count)\n    content.vb: Public Function GetUnicode(ascii As String, index As Integer, count As Integer) As String\n    parameters:\n    - id: ascii\n      type: System.String\n      description: \"\\n<p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A zero-based offset into <em>ascii</em> that specifies the start of the substring. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to convert in the substring that starts at the position specified by <em>index</em> in the <em>ascii</em> string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The Unicode equivalent of the IDNA substring specified by the <em>ascii</em>, <em>index</em>, and <em>count</em> parameters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>ascii</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>ascii</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than the length of <em>ascii</em> minus <em>count</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ascii</em> is invalid based on the <xref href=\\\"System.Globalization.IdnMapping.AllowUnassigned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.IdnMapping.UseStd3AsciiRules\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties, and the IDNA standard.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IdnMapping.GetUnicode(String, Int32, Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}