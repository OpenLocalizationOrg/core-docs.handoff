{"nodes":[{"pos":[1119,1128],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[3732,3741],"content":"AddMethod","needQuote":true,"nodes":[{"content":"AddMethod","pos":[0,9]}]},{"pos":[5279,5289],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The read-only attributes for this event.&lt;/p&gt;\\n","pos":[5989,6040],"source":"\\n<p>The read-only attributes for this event.</p>\\n"},{"pos":[6396,6412],"content":"EventHandlerType","needQuote":true,"nodes":[{"content":"EventHandlerType","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A read-only &lt;strong&gt;Type&lt;/strong&gt; object representing the delegate event handler.&lt;/p&gt;\\n","pos":[7162,7254],"source":"\\n<p>A read-only <strong>Type</strong> object representing the delegate event handler.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[7383,7437],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[7438,7444],"source":" </p>\\n"},{"pos":[7977,7988],"content":"IsMulticast","needQuote":true,"nodes":[{"content":"IsMulticast","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the delegate is an instance of a multicast delegate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8673,8798],"source":"\\n<p>\\n<strong>true</strong> if the delegate is an instance of a multicast delegate; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[8927,8981],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[8982,8988],"source":" </p>\\n"},{"pos":[9540,9553],"content":"IsSpecialName","needQuote":true,"nodes":[{"content":"IsSpecialName","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this event has a special name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10268,10371],"source":"\\n<p>\\n<strong>true</strong> if this event has a special name; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10791,10802],"content":"RaiseMethod","needQuote":true,"nodes":[{"content":"RaiseMethod","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The method that is called when the event is raised.&lt;/p&gt;\\n","pos":[11540,11602],"source":"\\n<p>The method that is called when the event is raised.</p>\\n"},{"pos":[11945,11957],"content":"RemoveMethod","needQuote":true,"nodes":[{"content":"RemoveMethod","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;MethodInfo&lt;/strong&gt; object for removing a method of the event.&lt;/p&gt;\\n","pos":[12722,12807],"source":"\\n<p>The <strong>MethodInfo</strong> object for removing a method of the event.</p>\\n"},{"pos":[13253,13286],"content":"AddEventHandler(Object, Delegate)","needQuote":true,"nodes":[{"content":"AddEventHandler(Object, Delegate)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The event source.","pos":[14167,14189],"source":"\\n<p>The event source."},{"content":"&lt;/p&gt;\\n","pos":[14190,14196],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Encapsulates a method or methods to be invoked when the event is raised by the target.","pos":[14264,14355],"source":"\\n<p>Encapsulates a method or methods to be invoked when the event is raised by the target."},{"content":"&lt;/p&gt;\\n","pos":[14356,14362],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The event does not have a public &lt;strong&gt;add&lt;/strong&gt; accessor.&lt;/p&gt;\\n","pos":[14489,14563],"source":"\\n<p>The event does not have a public <strong>add</strong> accessor.</p>\\n"},{"content":"\\n&lt;p&gt;The handler that was passed in cannot be used.","pos":[14660,14711],"source":"\\n<p>The handler that was passed in cannot be used."},{"content":"&lt;/p&gt;\\n","pos":[14712,14718],"source":" </p>\\n"},{"pos":[16445,16459],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17171,17248],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; equals the type and value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17309,17438],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17824,17837],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[18467,18512],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[19001,19037],"content":"RemoveEventHandler(Object, Delegate)","needQuote":true,"nodes":[{"content":"RemoveEventHandler(Object, Delegate)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The event source.","pos":[19935,19957],"source":"\\n<p>The event source."},{"content":"&lt;/p&gt;\\n","pos":[19958,19964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate to be disassociated from the events raised by target.","pos":[20032,20103],"source":"\\n<p>The delegate to be disassociated from the events raised by target."},{"content":"&lt;/p&gt;\\n","pos":[20104,20110],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The event does not have a public &lt;strong&gt;remove&lt;/strong&gt; accessor.","pos":[20237,20308],"source":"\\n<p>The event does not have a public <strong>remove</strong> accessor."},{"content":"&lt;/p&gt;\\n","pos":[20309,20315],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The handler that was passed in cannot be used.","pos":[20412,20463],"source":"\\n<p>The handler that was passed in cannot be used."},{"content":"&lt;/p&gt;\\n","pos":[20464,20470],"source":" </p>\\n"},{"pos":[22173,22187],"content":"GetAddMethod()","needQuote":true,"nodes":[{"content":"GetAddMethod()","pos":[0,14]}]},{"pos":[23630,23651],"content":"GetAddMethod(Boolean)","needQuote":true,"nodes":[{"content":"GetAddMethod(Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if non-public methods can be returned; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[24631,24733],"source":"\\n<p>\\n<strong>true</strong> if non-public methods can be returned; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24734,24740],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","pos":[25125,25314],"source":"\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods."},{"content":"&lt;/p&gt;\\n","pos":[25315,25321],"source":" </p>\\n"},{"pos":[25889,25905],"content":"GetRaiseMethod()","needQuote":true,"nodes":[{"content":"GetRaiseMethod()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The method that is called when the event is raised.&lt;/p&gt;\\n","pos":[26574,26636],"source":"\\n<p>The method that is called when the event is raised.</p>\\n"},{"pos":[27217,27240],"content":"GetRaiseMethod(Boolean)","needQuote":true,"nodes":[{"content":"GetRaiseMethod(Boolean)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if non-public methods can be returned; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[28075,28177],"source":"\\n<p>\\n<strong>true</strong> if non-public methods can be returned; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28178,28184],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodInfo&lt;/strong&gt; object that was called when the event was raised.&lt;/p&gt;\\n","pos":[28259,28349],"source":"\\n<p>A <strong>MethodInfo</strong> object that was called when the event was raised.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","pos":[28468,28657],"source":"\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods."},{"content":"&lt;/p&gt;\\n","pos":[28658,28664],"source":" </p>\\n"},{"pos":[29237,29254],"content":"GetRemoveMethod()","needQuote":true,"nodes":[{"content":"GetRemoveMethod()","pos":[0,17]}]},{"pos":[30731,30755],"content":"GetRemoveMethod(Boolean)","needQuote":true,"nodes":[{"content":"GetRemoveMethod(Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if non-public methods can be returned; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[31619,31721],"source":"\\n<p>\\n<strong>true</strong> if non-public methods can be returned; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[31722,31728],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","pos":[32118,32307],"source":"\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods."},{"content":"&lt;/p&gt;\\n","pos":[32308,32314],"source":" </p>\\n"},{"pos":[32873,32883],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[34151,34168],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[34332,34338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34509,34519],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[34738,34762],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[35037,35053],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"pos":[35334,35347],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[35619,35632],"content":"MetadataToken","needQuote":true,"nodes":[{"content":"MetadataToken","pos":[0,13]}]},{"pos":[35897,35903],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[36145,36149],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[36458,36511],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[36857,36901],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[37018,37019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37070,37077],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37138,37139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37294,37356],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[37473,37474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37525,37532],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37593,37594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38110,38169],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[38546,38590],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[38707,38708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38756,38760],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[38819,38820]},{"pos":[38876,38883],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38944,38945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39112,39174],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[39291,39292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39340,39344],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[39403,39404]},{"pos":[39460,39467],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39528,39529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40059,40108],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[40455,40489],"content":"ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined","pos":[0,34]}]},{"pos":[40596,40597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40645,40649],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[40708,40709]},{"pos":[40765,40772],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40833,40834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40991,41043],"content":"System.Reflection.ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.IsDefined","pos":[0,52]}]},{"pos":[41150,41151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41199,41203],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[41262,41263]},{"pos":[41319,41326],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[41387,41388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41786,41796],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[41891,41899],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41968,41969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41996,41997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42067,42075],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[42144,42145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42172,42173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42370,42392],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[42540,42546],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42613,42614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42664,42670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42731,42732]},{"pos":[42787,42793],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42853,42854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42951,42957],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43024,43025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43075,43081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43142,43143]},{"pos":[43198,43204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43264,43265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43510,43541],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[43707,43722],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43798,43799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43849,43855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43916,43917]},{"pos":[43972,43978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44038,44039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44145,44160],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[44236,44237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44287,44293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44354,44355]},{"pos":[44410,44416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44476,44477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44703,44712],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[44805,44812],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44880,44881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44908,44909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44978,44985],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[45053,45054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45081,45082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45257,45274],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[45383,45398],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45474,45475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45502,45503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45580,45595],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45671,45672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45699,45700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45845,45851],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[46008,46018],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[46228,46243],"content":"EventAttributes","needQuote":true,"nodes":[{"content":"EventAttributes","pos":[0,15]}]},{"pos":[46435,46439],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[46579,46586],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[46736,46744],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[46953,46967],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[47116,47122],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[47183,47184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47234,47240],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47300,47301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47399,47405],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[47466,47467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47517,47523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47583,47584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47824,47837],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[47968,47979],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[48045,48046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48073,48074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48162,48173],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[48239,48240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48267,48268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48447,48452],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48642,48652],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[48891,48902],"content":"MemberTypes","needQuote":true,"nodes":[{"content":"MemberTypes","pos":[0,11]}]},{"pos":[49087,49104],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[49319,49344],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[49557,49574],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[49750,49771],"content":"MethodAccessException","needQuote":true,"nodes":[{"content":"MethodAccessException","pos":[0,21]}]},{"pos":[49964,49979],"content":"TargetException","needQuote":true,"nodes":[{"content":"TargetException","pos":[0,15]}]}],"content":"items:\n- uid: System.Reflection.EventInfo\n  commentId: T:System.Reflection.EventInfo\n  id: EventInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  - System.Reflection.EventInfo.AddMethod\n  - System.Reflection.EventInfo.Attributes\n  - System.Reflection.EventInfo.Equals(System.Object)\n  - System.Reflection.EventInfo.EventHandlerType\n  - System.Reflection.EventInfo.GetAddMethod\n  - System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  - System.Reflection.EventInfo.GetHashCode\n  - System.Reflection.EventInfo.GetRaiseMethod\n  - System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  - System.Reflection.EventInfo.GetRemoveMethod\n  - System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  - System.Reflection.EventInfo.IsMulticast\n  - System.Reflection.EventInfo.IsSpecialName\n  - System.Reflection.EventInfo.MemberType\n  - System.Reflection.EventInfo.RaiseMethod\n  - System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  - System.Reflection.EventInfo.RemoveMethod\n  langs:\n  - csharp\n  - vb\n  name: EventInfo\n  fullName: System.Reflection.EventInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventInfo\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Discovers the attributes of an event and provides access to event metadata.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_EventInfo))]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Name = \"FullTrust\")]\n\n      [ComVisible(true)]\n\n      public abstract class EventInfo : MemberInfo, ICustomAttributeProvider, _MemberInfo, _EventInfo\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_EventInfo))>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Name:=\"FullTrust\")>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class EventInfo\n          Inherits MemberInfo\n          Implements ICustomAttributeProvider, _MemberInfo, _EventInfo\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: EventInfo\n- uid: System.Reflection.EventInfo.AddMethod\n  commentId: P:System.Reflection.EventInfo.AddMethod\n  id: AddMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: AddMethod\n  fullName: System.Reflection.EventInfo.AddMethod\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 81\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method of the event, including non-public methods.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo AddMethod { get; }\n    content.vb: Public Overridable ReadOnly Property AddMethod As MethodInfo\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: EventInfo.AddMethod\n- uid: System.Reflection.EventInfo.Attributes\n  commentId: P:System.Reflection.EventInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Reflection.EventInfo.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Attributes\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 77\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the attributes for this event.</p>\\n\"\n  syntax:\n    content: public abstract EventAttributes Attributes { get; }\n    content.vb: Public MustOverride ReadOnly Property Attributes As EventAttributes\n    parameters: []\n    return:\n      type: System.Reflection.EventAttributes\n      description: \"\\n<p>The read-only attributes for this event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: EventInfo.Attributes\n- uid: System.Reflection.EventInfo.EventHandlerType\n  commentId: P:System.Reflection.EventInfo.EventHandlerType\n  id: EventHandlerType\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: EventHandlerType\n  fullName: System.Reflection.EventInfo.EventHandlerType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventHandlerType\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 156\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <strong>Type</strong> object of the underlying event-handler delegate associated with this event.</p>\\n\"\n  syntax:\n    content: public virtual Type EventHandlerType { get; }\n    content.vb: Public Overridable ReadOnly Property EventHandlerType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A read-only <strong>Type</strong> object representing the delegate event handler.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  - type: System.Delegate\n    commentId: T:System.Delegate\n  - type: System.EventHandler\n    commentId: T:System.EventHandler\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: EventInfo.EventHandlerType\n- uid: System.Reflection.EventInfo.IsMulticast\n  commentId: P:System.Reflection.EventInfo.IsMulticast\n  id: IsMulticast\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: IsMulticast\n  fullName: System.Reflection.EventInfo.IsMulticast\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsMulticast\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 184\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the event is multicast.</p>\\n\"\n  syntax:\n    content: public virtual bool IsMulticast { get; }\n    content.vb: Public Overridable ReadOnly Property IsMulticast As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the delegate is an instance of a multicast delegate; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.MulticastDelegate\n    commentId: T:System.MulticastDelegate\n  - type: System.Type\n    commentId: T:System.Type\n  - type: System.EventHandler\n    commentId: T:System.EventHandler\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: EventInfo.IsMulticast\n- uid: System.Reflection.EventInfo.IsSpecialName\n  commentId: P:System.Reflection.EventInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSpecialName\n  fullName: System.Reflection.EventInfo.IsSpecialName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSpecialName\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 176\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the <strong>EventInfo</strong> has a name with a special meaning.</p>\\n\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    content.vb: Public ReadOnly Property IsSpecialName As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this event has a special name; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.EventAttributes\n    commentId: T:System.Reflection.EventAttributes\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventInfo.IsSpecialName\n- uid: System.Reflection.EventInfo.RaiseMethod\n  commentId: P:System.Reflection.EventInfo.RaiseMethod\n  id: RaiseMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: RaiseMethod\n  fullName: System.Reflection.EventInfo.RaiseMethod\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RaiseMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 97\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the method that is called when the event is raised, including non-public methods.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo RaiseMethod { get; }\n    content.vb: Public Overridable ReadOnly Property RaiseMethod As MethodInfo\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The method that is called when the event is raised.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: EventInfo.RaiseMethod\n- uid: System.Reflection.EventInfo.RemoveMethod\n  commentId: P:System.Reflection.EventInfo.RemoveMethod\n  id: RemoveMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: RemoveMethod\n  fullName: System.Reflection.EventInfo.RemoveMethod\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 89\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <strong>MethodInfo</strong> object for removing a method of the event, including non-public methods.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo RemoveMethod { get; }\n    content.vb: Public Overridable ReadOnly Property RemoveMethod As MethodInfo\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <strong>MethodInfo</strong> object for removing a method of the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: EventInfo.RemoveMethod\n- uid: System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  commentId: M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  id: AddEventHandler(System.Object,System.Delegate)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: AddEventHandler(Object, Delegate)\n  fullName: System.Reflection.EventInfo.AddEventHandler(System.Object, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddEventHandler\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 113\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Adds an event handler to an event source.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public virtual void AddEventHandler(object target, Delegate handler)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Overridable Sub AddEventHandler(target As Object, handler As  Delegate)\n    parameters:\n    - id: target\n      type: System.Object\n      description: \"\\n<p>The event source. </p>\\n\"\n    - id: handler\n      type: System.Delegate\n      description: \"\\n<p>Encapsulates a method or methods to be invoked when the event is raised by the target. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The event does not have a public <strong>add</strong> accessor.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The handler that was passed in cannot be used. </p>\\n\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The caller does not have access permission to the member. </p>\\n\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The <em>target</em> parameter is <strong>null</strong> and the event is not static.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Reflection.EventInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not declared on the target. </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Delegate\n    commentId: T:System.Delegate\n  - type: System.EventHandler\n    commentId: T:System.EventHandler\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EventInfo.AddEventHandler(Object, Delegate)\n- uid: System.Reflection.EventInfo.Equals(System.Object)\n  commentId: M:System.Reflection.EventInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.EventInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 51\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EventInfo.Equals(Object)\n- uid: System.Reflection.EventInfo.GetHashCode\n  commentId: M:System.Reflection.EventInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.EventInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 56\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EventInfo.GetHashCode()\n- uid: System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  commentId: M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  id: RemoveEventHandler(System.Object,System.Delegate)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: RemoveEventHandler(Object, Delegate)\n  fullName: System.Reflection.EventInfo.RemoveEventHandler(System.Object, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveEventHandler\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 133\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Removes an event handler from an event source.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public virtual void RemoveEventHandler(object target, Delegate handler)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Overridable Sub RemoveEventHandler(target As Object, handler As  Delegate)\n    parameters:\n    - id: target\n      type: System.Object\n      description: \"\\n<p>The event source. </p>\\n\"\n    - id: handler\n      type: System.Delegate\n      description: \"\\n<p>The delegate to be disassociated from the events raised by target. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The event does not have a public <strong>remove</strong> accessor. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The handler that was passed in cannot be used. </p>\\n\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The <em>target</em> parameter is <strong>null</strong> and the event is not static.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Reflection.EventInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not declared on the target. </p>\\n\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The caller does not have access permission to the member. </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Delegate\n    commentId: T:System.Delegate\n  - type: System.EventHandler\n    commentId: T:System.EventHandler\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EventInfo.RemoveEventHandler(Object, Delegate)\n- uid: System.Reflection.EventInfo.GetAddMethod\n  commentId: M:System.Reflection.EventInfo.GetAddMethod\n  id: GetAddMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetAddMethod()\n  fullName: System.Reflection.EventInfo.GetAddMethod()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAddMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 107\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the method used to add an event handler delegate to the event source.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetAddMethod()\n    content.vb: Public Function GetAddMethod As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the method used to add an event handler delegate to the event source.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventInfo.GetAddMethod()\n- uid: System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  id: GetAddMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetAddMethod(Boolean)\n  fullName: System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAddMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 71\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, retrieves the <strong>MethodInfo</strong> object for the <xref href=\\\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method of the event, specifying whether to return non-public methods.</p>\\n\"\n  syntax:\n    content: public abstract MethodInfo GetAddMethod(bool nonPublic)\n    content.vb: Public MustOverride Function GetAddMethod(nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if non-public methods can be returned; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the method used to add an event handler delegate to the event source.</p>\\n\"\n  exceptions:\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EventInfo.GetAddMethod(Boolean)\n- uid: System.Reflection.EventInfo.GetRaiseMethod\n  commentId: M:System.Reflection.EventInfo.GetRaiseMethod\n  id: GetRaiseMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRaiseMethod()\n  fullName: System.Reflection.EventInfo.GetRaiseMethod()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRaiseMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 111\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the method that is called when the event is raised.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetRaiseMethod()\n    content.vb: Public Function GetRaiseMethod As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The method that is called when the event is raised.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventInfo.GetRaiseMethod()\n- uid: System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  id: GetRaiseMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRaiseMethod(Boolean)\n  fullName: System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRaiseMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 75\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</p>\\n\"\n  syntax:\n    content: public abstract MethodInfo GetRaiseMethod(bool nonPublic)\n    content.vb: Public MustOverride Function GetRaiseMethod(nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if non-public methods can be returned; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <strong>MethodInfo</strong> object that was called when the event was raised.</p>\\n\"\n  exceptions:\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EventInfo.GetRaiseMethod(Boolean)\n- uid: System.Reflection.EventInfo.GetRemoveMethod\n  commentId: M:System.Reflection.EventInfo.GetRemoveMethod\n  id: GetRemoveMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRemoveMethod()\n  fullName: System.Reflection.EventInfo.GetRemoveMethod()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRemoveMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 109\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the method used to remove an event handler delegate from the event source.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetRemoveMethod()\n    content.vb: Public Function GetRemoveMethod As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the method used to remove an event handler delegate from the event source.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventInfo.GetRemoveMethod()\n- uid: System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  id: GetRemoveMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRemoveMethod(Boolean)\n  fullName: System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRemoveMethod\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 73\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, retrieves the <strong>MethodInfo</strong> object for removing a method of the event, specifying whether to return non-public methods.</p>\\n\"\n  syntax:\n    content: public abstract MethodInfo GetRemoveMethod(bool nonPublic)\n    content.vb: Public MustOverride Function GetRemoveMethod(nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if non-public methods can be returned; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the method used to remove an event handler delegate from the event source.</p>\\n\"\n  exceptions:\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EventInfo.GetRemoveMethod(Boolean)\n- uid: System.Reflection.EventInfo.MemberType\n  commentId: P:System.Reflection.EventInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  - vb\n  name: MemberType\n  fullName: System.Reflection.EventInfo.MemberType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/EventInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemberType\n    path: src/mscorlib/src/System/Reflection/EventInfo.cs\n    startLine: 62\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is an event.</p>\\n\"\n  syntax:\n    content: public override MemberTypes MemberType { get; }\n    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes\n    parameters: []\n    return:\n      type: System.Reflection.MemberTypes\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is an event.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.MemberType\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: EventInfo.MemberType\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  fullName: System.Reflection.MemberInfo.CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  commentId: P:System.Reflection.MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  fullName: System.Reflection.MemberInfo.DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  commentId: P:System.Reflection.MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  fullName: System.Reflection.MemberInfo.MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  commentId: P:System.Reflection.MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.MemberInfo.Module\n  nameWithType: MemberInfo.Module\n  commentId: P:System.Reflection.MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  fullName: System.Reflection.MemberInfo.Name\n  nameWithType: MemberInfo.Name\n  commentId: P:System.Reflection.MemberInfo.Name\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Reflection.EventAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: EventAttributes\n  fullName: System.Reflection.EventAttributes\n  nameWithType: EventAttributes\n  commentId: T:System.Reflection.EventAttributes\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  fullName: System.Delegate\n  nameWithType: Delegate\n  commentId: T:System.Delegate\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Reflection.MemberInfo.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.Equals(Object)\n  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Reflection.MemberInfo.GetHashCode()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.GetHashCode()\n  commentId: M:System.Reflection.MemberInfo.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  fullName: System.Reflection.MemberInfo.MemberType\n  nameWithType: MemberInfo.MemberType\n  commentId: P:System.Reflection.MemberInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  fullName: System.Reflection.MemberTypes\n  nameWithType: MemberTypes\n  commentId: T:System.Reflection.MemberTypes\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.MethodAccessException\n  isExternal: false\n  name: MethodAccessException\n  fullName: System.MethodAccessException\n  nameWithType: MethodAccessException\n  commentId: T:System.MethodAccessException\n- uid: System.Reflection.TargetException\n  isExternal: false\n  name: TargetException\n  fullName: System.Reflection.TargetException\n  nameWithType: TargetException\n  commentId: T:System.Reflection.TargetException\n"}