{"nodes":[{"pos":[1951,1966],"content":"SignatureHelper","needQuote":true,"nodes":[{"content":"SignatureHelper","pos":[0,15]}]},{"pos":[3554,3571],"content":"AddArgument(Type)","needQuote":true,"nodes":[{"content":"AddArgument(Type)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The type of the argument.","pos":[4291,4321],"source":"\\n<p>The type of the argument."},{"content":"&lt;/p&gt;\\n","pos":[4322,4328],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature has already been finished.","pos":[4439,4484],"source":"\\n<p>The signature has already been finished."},{"content":"&lt;/p&gt;\\n","pos":[4485,4491],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;clsArgument&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4596,4655],"source":"\\n<p>\\n<em>clsArgument</em> is <strong>null</strong>.</p>\\n"},{"pos":[5075,5101],"content":"AddArgument(Type, Boolean)","needQuote":true,"nodes":[{"content":"AddArgument(Type, Boolean)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The argument type.&lt;/p&gt;\\n","pos":[6003,6032],"source":"\\n<p>The argument type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the argument is pinned; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6098,6194],"source":"\\n<p>\\n<strong>true</strong> if the argument is pinned; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;argument&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6313,6369],"source":"\\n<p>\\n<em>argument</em> is <strong>null</strong>.</p>\\n"},{"pos":[6987,7020],"content":"AddArgument(Type, Type[], Type[])","needQuote":true,"nodes":[{"content":"AddArgument(Type, Type[], Type[])","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The argument type.&lt;/p&gt;\\n","pos":[8010,8039],"source":"\\n<p>The argument type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;argument&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9086,9136],"source":"\\n<p>\\n<em>argument</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;requiredCustomModifiers&lt;/em&gt; or &lt;em&gt;optionalCustomModifiers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9137,9273],"source":" </p>\\n<p>-or-</p>\\n<p>An element of <em>requiredCustomModifiers</em> or <em>optionalCustomModifiers</em> is <strong>null</strong>.</p>\\n"},{"pos":[10622,10662],"content":"AddArguments(Type[], Type[][], Type[][])","needQuote":true,"nodes":[{"content":"AddArguments(Type[], Type[][], Type[][])","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The types of the arguments to be added.&lt;/p&gt;\\n","pos":[11608,11658],"source":"\\n<p>The types of the arguments to be added.</p>\\n"},{"content":"\\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13107,13170],"source":"\\n<p>An element of <em>arguments</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One of the specified custom modifiers is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13171,13256],"source":" </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is <strong>null</strong>."},{"content":"(However, &lt;strong&gt;null&lt;/strong&gt; can be specified for the array of custom modifiers for any argument.)&lt;/p&gt;\\n","pos":[13257,13364],"source":" (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\\n"},{"pos":[14597,14610],"content":"AddSentinel()","needQuote":true,"nodes":[{"content":"AddSentinel()","pos":[0,13]}]},{"pos":[15637,15651],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object with which this instance should be compared.","pos":[16389,16449],"source":"\\n<p>The object with which this instance should be compared."},{"content":"&lt;/p&gt;\\n","pos":[16450,16456],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the given object is a &lt;strong&gt;SignatureHelper&lt;/strong&gt; and represents the same signature; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16517,16679],"source":"\\n<p>\\n<strong>true</strong> if the given object is a <strong>SignatureHelper</strong> and represents the same signature; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17185,17210],"content":"GetFieldSigHelper(Module)","needQuote":true,"nodes":[{"content":"GetFieldSigHelper(Module)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The dynamic module that contains the field for which the &lt;strong&gt;SignatureHelper&lt;/strong&gt; is requested.","pos":[18015,18123],"source":"\\n<p>The dynamic module that contains the field for which the <strong>SignatureHelper</strong> is requested."},{"content":"&lt;/p&gt;\\n","pos":[18124,18130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;SignatureHelper&lt;/strong&gt; object for a field.&lt;/p&gt;\\n","pos":[18215,18282],"source":"\\n<p>The <strong>SignatureHelper</strong> object for a field.</p>\\n"},{"pos":[18648,18661],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;Returns the hash code based on the name.&lt;/p&gt;\\n","pos":[19358,19409],"source":"\\n<p>Returns the hash code based on the name.</p>\\n"},{"pos":[19835,19857],"content":"GetLocalVarSigHelper()","needQuote":true,"nodes":[{"content":"GetLocalVarSigHelper()","pos":[0,22]}]},{"pos":[21230,21258],"content":"GetLocalVarSigHelper(Module)","needQuote":true,"nodes":[{"content":"GetLocalVarSigHelper(Module)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The dynamic module that contains the local variable for which the &lt;strong&gt;SignatureHelper&lt;/strong&gt; is requested.","pos":[22084,22201],"source":"\\n<p>The dynamic module that contains the local variable for which the <strong>SignatureHelper</strong> is requested."},{"content":"&lt;/p&gt;\\n","pos":[22202,22208],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;SignatureHelper&lt;/strong&gt; object for a local variable.&lt;/p&gt;\\n","pos":[22293,22369],"source":"\\n<p>The <strong>SignatureHelper</strong> object for a local variable.</p>\\n"},{"pos":[22909,22953],"content":"GetMethodSigHelper(CallingConventions, Type)","needQuote":true,"nodes":[{"content":"GetMethodSigHelper(CallingConventions, Type)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The calling convention of the method.","pos":[23956,23998],"source":"\\n<p>The calling convention of the method."},{"content":"&lt;/p&gt;\\n","pos":[23999,24005],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The return type of the method, or &lt;strong&gt;null&lt;/strong&gt; for a void return type (&lt;strong&gt;Sub&lt;/strong&gt; procedure in Visual Basic).","pos":[24072,24205],"source":"\\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic)."},{"content":"&lt;/p&gt;\\n","pos":[24206,24212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;SignatureHelper&lt;/strong&gt; object for a method.&lt;/p&gt;\\n","pos":[24297,24365],"source":"\\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\\n"},{"pos":[24996,25048],"content":"GetMethodSigHelper(Module, CallingConventions, Type)","needQuote":true,"nodes":[{"content":"GetMethodSigHelper(Module, CallingConventions, Type)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The calling convention of the method.","pos":[26462,26504],"source":"\\n<p>The calling convention of the method."},{"content":"&lt;/p&gt;\\n","pos":[26505,26511],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The return type of the method, or &lt;strong&gt;null&lt;/strong&gt; for a void return type (&lt;strong&gt;Sub&lt;/strong&gt; procedure in Visual Basic).","pos":[26578,26711],"source":"\\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic)."},{"content":"&lt;/p&gt;\\n","pos":[26712,26718],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;SignatureHelper&lt;/strong&gt; object for a method.&lt;/p&gt;\\n","pos":[26803,26871],"source":"\\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mod&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26990,27041],"source":"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n"},{"pos":[27990,28030],"content":"GetMethodSigHelper(Module, Type, Type[])","needQuote":true,"nodes":[{"content":"GetMethodSigHelper(Module, Type, Type[])","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The return type of the method, or &lt;strong&gt;null&lt;/strong&gt; for a void return type (&lt;strong&gt;Sub&lt;/strong&gt; procedure in Visual Basic).","pos":[29391,29524],"source":"\\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic)."},{"content":"&lt;/p&gt;\\n","pos":[29525,29531],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The types of the arguments of the method, or &lt;strong&gt;null&lt;/strong&gt; if the method has no arguments.","pos":[29604,29707],"source":"\\n<p>The types of the arguments of the method, or <strong>null</strong> if the method has no arguments."},{"content":"&lt;/p&gt;\\n","pos":[29708,29714],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;SignatureHelper&lt;/strong&gt; object for a method.&lt;/p&gt;\\n","pos":[29799,29867],"source":"\\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mod&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;parameterTypes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29986,30122],"source":"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>.</p>\\n"},{"pos":[31611,31709],"content":"GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])","needQuote":true,"nodes":[{"content":"GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])","pos":[0,98]}]},{"content":"\\n&lt;p&gt;The calling convention of the property accessors.&lt;/p&gt;\\n","pos":[33810,33870],"source":"\\n<p>The calling convention of the property accessors.</p>\\n"},{"content":"\\n&lt;p&gt;The property type.&lt;/p&gt;\\n","pos":[33937,33966],"source":"\\n<p>The property type.</p>\\n"},{"content":"\\n&lt;p&gt;The types of the property's arguments, or &lt;strong&gt;null&lt;/strong&gt; if the property has no arguments.&lt;/p&gt;\\n","pos":[34999,35107],"source":"\\n<p>The types of the property's arguments, or <strong>null</strong> if the property has no arguments.</p>\\n"},{"content":"\\n&lt;p&gt;An array of arrays of types.","pos":[35204,35237],"source":"\\n<p>An array of arrays of types."},{"content":"Each array of types represents the required custom modifiers for the corresponding argument of the property.","pos":[35238,35346]},{"content":"If a particular argument has no required custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of types.","pos":[35347,35465],"source":" If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of arrays.&lt;/p&gt;\\n","pos":[35466,35626],"source":" If the property has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n"},{"content":"\\n&lt;p&gt;An array of arrays of types.","pos":[35723,35756],"source":"\\n<p>An array of arrays of types."},{"content":"Each array of types represents the optional custom modifiers for the corresponding argument of the property.","pos":[35757,35865]},{"content":"If a particular argument has no optional custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of types.","pos":[35866,35984],"source":" If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of arrays.&lt;/p&gt;\\n","pos":[35985,36145],"source":" If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mod&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;parameterTypes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36483,36613],"source":"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One of the specified custom modifiers is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36614,36699],"source":" </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is <strong>null</strong>."},{"content":"(However, &lt;strong&gt;null&lt;/strong&gt; can be specified for the array of custom modifiers for any argument.)&lt;/p&gt;\\n","pos":[36700,36807],"source":" (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\\n"},{"pos":[38857,38899],"content":"GetPropertySigHelper(Module, Type, Type[])","needQuote":true,"nodes":[{"content":"GetPropertySigHelper(Module, Type, Type[])","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The property type.&lt;/p&gt;\\n","pos":[40265,40294],"source":"\\n<p>The property type.</p>\\n"},{"content":"\\n&lt;p&gt;The argument types, or &lt;strong&gt;null&lt;/strong&gt; if the property has no arguments.&lt;/p&gt;\\n","pos":[40367,40456],"source":"\\n<p>The argument types, or <strong>null</strong> if the property has no arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mod&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;parameterTypes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40794,40930],"source":"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>.</p>\\n"},{"pos":[42166,42244],"content":"GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])","needQuote":true,"nodes":[{"content":"GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])","pos":[0,78]}]},{"content":"\\n&lt;p&gt;The property type.&lt;/p&gt;\\n","pos":[44094,44123],"source":"\\n<p>The property type.</p>\\n"},{"content":"\\n&lt;p&gt;The types of the property's arguments, or &lt;strong&gt;null&lt;/strong&gt; if the property has no arguments.&lt;/p&gt;\\n","pos":[45156,45264],"source":"\\n<p>The types of the property's arguments, or <strong>null</strong> if the property has no arguments.</p>\\n"},{"content":"\\n&lt;p&gt;An array of arrays of types.","pos":[45361,45394],"source":"\\n<p>An array of arrays of types."},{"content":"Each array of types represents the required custom modifiers for the corresponding argument of the property.","pos":[45395,45503]},{"content":"If a particular argument has no required custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of types.","pos":[45504,45622],"source":" If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of arrays.&lt;/p&gt;\\n","pos":[45623,45783],"source":" If the property has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n"},{"content":"\\n&lt;p&gt;An array of arrays of types.","pos":[45880,45913],"source":"\\n<p>An array of arrays of types."},{"content":"Each array of types represents the optional custom modifiers for the corresponding argument of the property.","pos":[45914,46022]},{"content":"If a particular argument has no optional custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of types.","pos":[46023,46141],"source":" If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;strong&gt;null&lt;/strong&gt; instead of an array of arrays.&lt;/p&gt;\\n","pos":[46142,46302],"source":" If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mod&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;parameterTypes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46640,46770],"source":"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One of the specified custom modifiers is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46771,46856],"source":" </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is <strong>null</strong>."},{"content":"(However, &lt;strong&gt;null&lt;/strong&gt; can be specified for the array of custom modifiers for any argument.)&lt;/p&gt;\\n","pos":[46857,46964],"source":" (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\\n"},{"pos":[48586,48600],"content":"GetSignature()","needQuote":true,"nodes":[{"content":"GetSignature()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;Returns a byte array made up of the full signature.&lt;/p&gt;\\n","pos":[49342,49404],"source":"\\n<p>Returns a byte array made up of the full signature.</p>\\n"},{"pos":[49728,49738],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;Returns a string representing the arguments of this signature.&lt;/p&gt;\\n","pos":[50430,50503],"source":"\\n<p>Returns a string representing the arguments of this signature.</p>\\n"},{"pos":[50740,50762],"content":"System.Reflection.Emit","needQuote":true,"nodes":[{"content":"System.Reflection.Emit","pos":[0,22]}]},{"pos":[50941,50947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51134,51156],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[51304,51310],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51377,51378],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51428,51434],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51495,51496]},{"pos":[51551,51557],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51617,51618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51715,51721],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51788,51789],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51839,51845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51906,51907]},{"pos":[51962,51968],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52028,52029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52274,52305],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[52471,52486],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[52562,52563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52613,52619],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52680,52681]},{"pos":[52736,52742],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52802,52803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52909,52924],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[53000,53001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53051,53057],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53118,53119]},{"pos":[53174,53180],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53240,53241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53467,53476],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[53569,53576],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53644,53645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53672,53673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53742,53749],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53817,53818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53845,53846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54021,54038],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[54147,54162],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[54238,54239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54266,54267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54344,54359],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[54435,54436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54463,54464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54609,54615],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[54744,54748],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[54888,54895],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55006,55012],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[55132,55136],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[55174,55176]},{"pos":[55239,55243],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[55280,55282],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[55380,55388],"content":"Type[][]","needQuote":true,"nodes":[{"content":"Type[][]","pos":[0,8]}]},{"pos":[55514,55518],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[55577,55579]},{"content":"[]","pos":[55611,55613]},{"pos":[55676,55680],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[55738,55740],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[55768,55770],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[55935,55949],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[56068,56074],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56141,56142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56192,56198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56258,56259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56342,56348],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56415,56416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56466,56472],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56532,56533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56727,56733],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[56941,56956],"content":"SignatureHelper","needQuote":true,"nodes":[{"content":"SignatureHelper","pos":[0,15]}]},{"pos":[57147,57164],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[57346,57359],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[57460,57471],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[57543,57544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57571,57572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57645,57656],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[57728,57729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57756,57757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57917,57922],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58098,58116],"content":"CallingConventions","needQuote":true,"nodes":[{"content":"CallingConventions","pos":[0,18]}]},{"pos":[58282,58288],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[58408,58412],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[58471,58473]},{"pos":[58536,58540],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[58598,58600],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58748,58758],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[58853,58861],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[58930,58931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58958,58959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59029,59037],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[59106,59107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59134,59135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59290,59296],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[59452,59469],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[59645,59666],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Reflection.Emit.SignatureHelper\n  commentId: T:System.Reflection.Emit.SignatureHelper\n  id: SignatureHelper\n  parent: System.Reflection.Emit\n  children:\n  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  - System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.SignatureHelper.AddSentinel\n  - System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  - System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  - System.Reflection.Emit.SignatureHelper.GetHashCode\n  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.SignatureHelper.GetSignature\n  - System.Reflection.Emit.SignatureHelper.ToString\n  langs:\n  - csharp\n  - vb\n  name: SignatureHelper\n  fullName: System.Reflection.Emit.SignatureHelper\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SignatureHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Provides methods for building signatures.</p>\\n\"\n  syntax:\n    content: >-\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_SignatureHelper))]\n\n      [ComVisible(true)]\n\n      public sealed class SignatureHelper : _SignatureHelper\n    content.vb: >-\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_SignatureHelper))>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class SignatureHelper\n          Implements _SignatureHelper\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: SignatureHelper\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  id: AddArgument(System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: AddArgument(Type)\n  fullName: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddArgument\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 819\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds an argument to the signature.</p>\\n\"\n  syntax:\n    content: public void AddArgument(Type clsArgument)\n    content.vb: Public Sub AddArgument(clsArgument As Type)\n    parameters:\n    - id: clsArgument\n      type: System.Type\n      description: \"\\n<p>The type of the argument. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The signature has already been finished. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>clsArgument</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SignatureHelper.AddArgument(Type)\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  id: AddArgument(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: AddArgument(Type, Boolean)\n  fullName: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddArgument\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 824\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds an argument of the specified type to the signature, specifying whether the argument is pinned.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void AddArgument(Type argument, bool pinned)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub AddArgument(argument As Type, pinned As Boolean)\n    parameters:\n    - id: argument\n      type: System.Type\n      description: \"\\n<p>The argument type.</p>\\n\"\n    - id: pinned\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the argument is pinned; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>argument</em> is <strong>null</strong>.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SignatureHelper.AddArgument(Type, Boolean)\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  id: AddArgument(System.Type,System.Type[],System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: AddArgument(Type, Type[], Type[])\n  fullName: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type, System.Type[], System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddArgument\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 853\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds an argument to the signature, with the specified custom modifiers.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub AddArgument(argument As Type, requiredCustomModifiers As Type(), optionalCustomModifiers As Type())\n    parameters:\n    - id: argument\n      type: System.Type\n      description: \"\\n<p>The argument type.</p>\\n\"\n    - id: requiredCustomModifiers\n      type: System.Type[]\n      description: \"\\n<p>An array of types representing the required custom modifiers for the argument, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the argument has no required custom modifiers, specify <strong>null</strong>.</p>\\n\"\n    - id: optionalCustomModifiers\n      type: System.Type[]\n      description: \"\\n<p>An array of types representing the optional custom modifiers for the argument, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the argument has no optional custom modifiers, specify <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>argument</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>An element of <em>requiredCustomModifiers</em> or <em>optionalCustomModifiers</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The signature has already been finished. </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an array type.</p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>true</strong> for the custom modifier.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type, System.Type(), System.Type())\n  name.vb: AddArgument(Type, Type(), Type())\n  nameWithType: SignatureHelper.AddArgument(Type, Type[], Type[])\n  nameWithType.vb: SignatureHelper.AddArgument(Type, Type(), Type())\n- uid: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  id: AddArguments(System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: AddArguments(Type[], Type[][], Type[][])\n  fullName: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[], System.Type[][], System.Type[][])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddArguments\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 834\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds a set of arguments to the signature, with the specified custom modifiers.</p>\\n\"\n  syntax:\n    content: public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n    content.vb: Public Sub AddArguments(arguments As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()())\n    parameters:\n    - id: arguments\n      type: System.Type[]\n      description: \"\\n<p>The types of the arguments to be added.</p>\\n\"\n    - id: requiredCustomModifiers\n      type: System.Type[][]\n      description: \"\\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n\"\n    - id: optionalCustomModifiers\n      type: System.Type[][]\n      description: \"\\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>An element of <em>arguments</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is <strong>null</strong>. (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The signature has already been finished. </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an array type.</p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>true</strong> for the custom modifier. </p>\\n<p>-or-</p>\\n<p>The size of <em>requiredCustomModifiers</em> or <em>optionalCustomModifiers</em> does not equal the size of <em>arguments</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type(), System.Type()(), System.Type()())\n  name.vb: AddArguments(Type(), Type()(), Type()())\n  nameWithType: SignatureHelper.AddArguments(Type[], Type[][], Type[][])\n  nameWithType.vb: SignatureHelper.AddArguments(Type(), Type()(), Type()())\n- uid: System.Reflection.Emit.SignatureHelper.AddSentinel\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddSentinel\n  id: AddSentinel\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: AddSentinel()\n  fullName: System.Reflection.Emit.SignatureHelper.AddSentinel()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddSentinel\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 871\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.</p>\\n\"\n  syntax:\n    content: public void AddSentinel()\n    content.vb: Public Sub AddSentinel\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SignatureHelper.AddSentinel()\n- uid: System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 876\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Checks if this instance is equal to the given object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object with which this instance should be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the given object is a <strong>SignatureHelper</strong> and represents the same signature; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SignatureHelper.Equals(Object)\n- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  id: GetFieldSigHelper(System.Reflection.Module)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetFieldSigHelper(Module)\n  fullName: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFieldSigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 153\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a field.</p>\\n\"\n  syntax:\n    content: public static SignatureHelper GetFieldSigHelper(Module mod)\n    content.vb: Public Shared Function GetFieldSigHelper(mod As  Module) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The dynamic module that contains the field for which the <strong>SignatureHelper</strong> is requested. </p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>The <strong>SignatureHelper</strong> object for a field.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SignatureHelper.GetFieldSigHelper(Module)\n- uid: System.Reflection.Emit.SignatureHelper.GetHashCode\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.Emit.SignatureHelper.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 898\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Creates and returns a hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns the hash code based on the name.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SignatureHelper.GetHashCode()\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  id: GetLocalVarSigHelper\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetLocalVarSigHelper()\n  fullName: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLocalVarSigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 133\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a local variable.</p>\\n\"\n  syntax:\n    content: public static SignatureHelper GetLocalVarSigHelper()\n    content.vb: Public Shared Function GetLocalVarSigHelper As SignatureHelper\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for a local variable.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SignatureHelper.GetLocalVarSigHelper()\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  id: GetLocalVarSigHelper(System.Reflection.Module)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetLocalVarSigHelper(Module)\n  fullName: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLocalVarSigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 148\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a local variable.</p>\\n\"\n  syntax:\n    content: public static SignatureHelper GetLocalVarSigHelper(Module mod)\n    content.vb: Public Shared Function GetLocalVarSigHelper(mod As  Module) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The dynamic module that contains the local variable for which the <strong>SignatureHelper</strong> is requested. </p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>The <strong>SignatureHelper</strong> object for a local variable.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SignatureHelper.GetLocalVarSigHelper(Module)\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  id: GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetMethodSigHelper(CallingConventions, Type)\n  fullName: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodSigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 138\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a method given the method's calling convention and return type.</p>\\n\"\n  syntax:\n    content: public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType)\n    content.vb: Public Shared Function GetMethodSigHelper(callingConvention As CallingConventions, returnType As Type) As SignatureHelper\n    parameters:\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: \"\\n<p>The calling convention of the method. </p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic). </p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  id: GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetMethodSigHelper(Module, CallingConventions, Type)\n  fullName: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodSigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 39\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a method given the method's module, calling convention, and return type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetMethodSigHelper(mod As  Module, callingConvention As CallingConventions, returnType As Type) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the method for which the <strong>SignatureHelper</strong> is requested. </p>\\n\"\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: \"\\n<p>The calling convention of the method. </p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic). </p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mod</em> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  id: GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetMethodSigHelper(Module, Type, Type[])\n  fullName: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module, System.Type, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodSigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetMethodSigHelper(mod As  Module, returnType As Type, parameterTypes As Type()) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the method for which the <strong>SignatureHelper</strong> is requested. </p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic). </p>\\n\"\n    - id: parameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The types of the arguments of the method, or <strong>null</strong> if the method has no arguments. </p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mod</em> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module, System.Type, System.Type())\n  name.vb: GetMethodSigHelper(Module, Type, Type())\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])\n  nameWithType.vb: SignatureHelper.GetMethodSigHelper(Module, Type, Type())\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPropertySigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 170\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static SignatureHelper GetPropertySigHelper(Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetPropertySigHelper(mod As  Module, callingConvention As CallingConventions, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the property for which the <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is requested.</p>\\n\"\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: \"\\n<p>The calling convention of the property accessors.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The property type.</p>\\n\"\n    - id: requiredReturnTypeCustomModifiers\n      type: System.Type[]\n      description: \"\\n<p>An array of types representing the required custom modifiers for the return type, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the return type has no required custom modifiers, specify <strong>null</strong>.</p>\\n\"\n    - id: optionalReturnTypeCustomModifiers\n      type: System.Type[]\n      description: \"\\n<p>An array of types representing the optional custom modifiers for the return type, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the return type has no optional custom modifiers, specify <strong>null</strong>.</p>\\n\"\n    - id: parameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The types of the property's arguments, or <strong>null</strong> if the property has no arguments.</p>\\n\"\n    - id: requiredParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: \"\\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n\"\n    - id: optionalParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: \"\\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a property.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is <strong>null</strong>. (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The signature has already been finished. </p>\\n<p>-or-</p>\\n<p>\\n<em>mod</em> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an array type.</p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>true</strong> for the custom modifier.</p>\\n<p>-or-</p>\\n<p>The size of <em>requiredParameterTypeCustomModifiers</em> or <em>optionalParameterTypeCustomModifiers</em> does not equal the size of <em>parameterTypes</em>.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())\n  name.vb: GetPropertySigHelper(Module, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType.vb: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetPropertySigHelper(Module, Type, Type[])\n  fullName: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPropertySigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 158\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.</p>\\n\"\n  syntax:\n    content: public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)\n    content.vb: Public Shared Function GetPropertySigHelper(mod As  Module, returnType As Type, parameterTypes As Type()) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the property for which the <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is requested.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The property type.</p>\\n\"\n    - id: parameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The argument types, or <strong>null</strong> if the property has no arguments.</p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a property.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mod</em> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type())\n  name.vb: GetPropertySigHelper(Module, Type, Type())\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])\n  nameWithType.vb: SignatureHelper.GetPropertySigHelper(Module, Type, Type())\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPropertySigHelper\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 163\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.</p>\\n\"\n  syntax:\n    content: public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)\n    content.vb: Public Shared Function GetPropertySigHelper(mod As  Module, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As SignatureHelper\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the property for which the <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is requested.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The property type.</p>\\n\"\n    - id: requiredReturnTypeCustomModifiers\n      type: System.Type[]\n      description: \"\\n<p>An array of types representing the required custom modifiers for the return type, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the return type has no required custom modifiers, specify <strong>null</strong>.</p>\\n\"\n    - id: optionalReturnTypeCustomModifiers\n      type: System.Type[]\n      description: \"\\n<p>An array of types representing the optional custom modifiers for the return type, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsBoxed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the return type has no optional custom modifiers, specify <strong>null</strong>.</p>\\n\"\n    - id: parameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The types of the property's arguments, or <strong>null</strong> if the property has no arguments.</p>\\n\"\n    - id: requiredParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: \"\\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n\"\n    - id: optionalParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: \"\\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\\n\"\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.Emit.SignatureHelper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a property.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mod</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is <strong>null</strong>. (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The signature has already been finished. </p>\\n<p>-or-</p>\\n<p>\\n<em>mod</em> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an array type.</p>\\n<p>-or-</p>\\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>true</strong> for the custom modifier.</p>\\n<p>-or-</p>\\n<p>The size of <em>requiredParameterTypeCustomModifiers</em> or <em>optionalParameterTypeCustomModifiers</em> does not equal the size of <em>parameterTypes</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())\n  name.vb: GetPropertySigHelper(Module, Type, Type(), Type(), Type(), Type()(), Type()())\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType.vb: SignatureHelper.GetPropertySigHelper(Module, Type, Type(), Type(), Type(), Type()(), Type()())\n- uid: System.Reflection.Emit.SignatureHelper.GetSignature\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetSignature\n  id: GetSignature\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: GetSignature()\n  fullName: System.Reflection.Emit.SignatureHelper.GetSignature()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSignature\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 914\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.</p>\\n\"\n  syntax:\n    content: public byte[] GetSignature()\n    content.vb: Public Function GetSignature As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>Returns a byte array made up of the full signature.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SignatureHelper.GetSignature()\n- uid: System.Reflection.Emit.SignatureHelper.ToString\n  commentId: M:System.Reflection.Emit.SignatureHelper.ToString\n  id: ToString\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.Emit.SignatureHelper.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs\n    startLine: 944\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns a string representing the signature arguments.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns a string representing the arguments of this signature.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SignatureHelper.ToString()\nreferences:\n- uid: System.Reflection.Emit\n  isExternal: false\n  name: System.Reflection.Emit\n  fullName: System.Reflection.Emit\n  nameWithType: System.Reflection.Emit\n  commentId: N:System.Reflection.Emit\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Type[][]\n  name: Type[][]\n  fullName: System.Type[][]\n  fullname.vb: System.Type()()\n  name.vb: Type()()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ()\n    fullName: ()\n  nameWithType: Type[][]\n  nameWithType.vb: Type()()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.Module\n  nameWithType: Module\n  commentId: T:System.Reflection.Module\n- uid: System.Reflection.Emit.SignatureHelper\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: SignatureHelper\n  fullName: System.Reflection.Emit.SignatureHelper\n  nameWithType: SignatureHelper\n  commentId: T:System.Reflection.Emit.SignatureHelper\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  fullName: System.Reflection.CallingConventions\n  nameWithType: CallingConventions\n  commentId: T:System.Reflection.CallingConventions\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}