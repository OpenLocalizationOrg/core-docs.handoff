{"nodes":[{"pos":[447,465],"content":"AssemblyExtensions","needQuote":true,"nodes":[{"content":"AssemblyExtensions","pos":[0,18]}]},{"pos":[1812,1838],"content":"GetExportedTypes(Assembly)","needQuote":true,"nodes":[{"content":"GetExportedTypes(Assembly)","pos":[0,26]}]},{"pos":[3132,3152],"content":"GetModules(Assembly)","needQuote":true,"nodes":[{"content":"GetModules(Assembly)","pos":[0,20]}]},{"pos":[4406,4424],"content":"GetTypes(Assembly)","needQuote":true,"nodes":[{"content":"GetTypes(Assembly)","pos":[0,18]}]},{"pos":[5449,5466],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[5626,5632],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5801,5811],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[5940,5948],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6051,6052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6099,6100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6190,6198],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6301,6302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6349,6350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6532,6546],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6703,6709],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6808,6809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6879,6885],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6970,6971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7074,7080],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7179,7180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7250,7256],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7341,7342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7552,7574],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7768,7774],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7873,7874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7944,7950],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8036,8037]},{"pos":[8115,8121],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8206,8207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8324,8330],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8429,8430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8500,8506],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8592,8593]},{"pos":[8671,8677],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8762,8763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8991,9022],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9243,9258],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9375,9376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9446,9452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9538,9539]},{"pos":[9617,9623],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9708,9709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9835,9850],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9967,9968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10038,10044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10130,10131]},{"pos":[10209,10215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10300,10301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10463,10476],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10614,10625],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10734,10735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10782,10783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10876,10887],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10996,10997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11044,11045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11199,11208],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11334,11341],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11442,11443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11490,11491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11580,11587],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11688,11689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11736,11737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11907,11924],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12074,12089],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12206,12207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12254,12255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12352,12367],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12484,12485],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12532,12533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12634,12640],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12815,12823],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[12917,12923],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[13092,13096],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[13157,13159]},{"pos":[13245,13249],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[13309,13311],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[13392,13400],"content":"Module[]","needQuote":true,"nodes":[{"content":"Module[]","pos":[0,8]}]},{"pos":[13614,13620],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"content":"[]","pos":[13717,13719]},{"pos":[13818,13824],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[13920,13922],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Reflection.AssemblyExtensions\n  commentId: T:System.Reflection.AssemblyExtensions\n  id: AssemblyExtensions\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)\n  - System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)\n  - System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)\n  langs:\n  - csharp\n  - vb\n  name: AssemblyExtensions\n  nameWithType: AssemblyExtensions\n  fullName: System.Reflection.AssemblyExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AssemblyExtensions\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 11\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public class AssemblyExtensions\n    content.vb: Public Class AssemblyExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)\n  commentId: M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)\n  id: GetExportedTypes(System.Reflection.Assembly)\n  isExtensionMethod: true\n  parent: System.Reflection.AssemblyExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetExportedTypes(Assembly)\n  nameWithType: AssemblyExtensions.GetExportedTypes(Assembly)\n  fullName: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetExportedTypes\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 13\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Type[] GetExportedTypes(this Assembly assembly)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetExportedTypes(assembly As Assembly) As Type()\n    parameters:\n    - id: assembly\n      type: System.Reflection.Assembly\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)\n  commentId: M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)\n  id: GetModules(System.Reflection.Assembly)\n  isExtensionMethod: true\n  parent: System.Reflection.AssemblyExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetModules(Assembly)\n  nameWithType: AssemblyExtensions.GetModules(Assembly)\n  fullName: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetModules\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 14\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Module[] GetModules(this Assembly assembly)\n    content.vb: \"<ExtensionAttribute>\\nPublic Shared Function GetModules(assembly As Assembly) As \"\n    parameters:\n    - id: assembly\n      type: System.Reflection.Assembly\n    return:\n      type: System.Reflection.Module[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)\n  commentId: M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)\n  id: GetTypes(System.Reflection.Assembly)\n  isExtensionMethod: true\n  parent: System.Reflection.AssemblyExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetTypes(Assembly)\n  nameWithType: AssemblyExtensions.GetTypes(Assembly)\n  fullName: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTypes\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Type[] GetTypes(this Assembly assembly)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetTypes(assembly As Assembly) As Type()\n    parameters:\n    - id: assembly\n      type: System.Reflection.Assembly\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.Reflection\n  commentId: N:System.Reflection\n  isExternal: false\n  name: System.Reflection\n  nameWithType: System.Reflection\n  fullName: System.Reflection\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Reflection.Assembly\n  commentId: T:System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Type[]\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  nameWithType.vb: Type()\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.Module[]\n  name: Module[]\n  nameWithType: Module[]\n  fullName: System.Reflection.Module[]\n  nameWithType.vb: Module()\n  fullname.vb: System.Reflection.Module()\n  name.vb: Module()\n  spec.csharp:\n  - uid: System.Reflection.Module\n    name: Module\n    nameWithType: Module\n    fullName: System.Reflection.Module\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.Module\n    name: Module\n    nameWithType: Module\n    fullName: System.Reflection.Module\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n"}