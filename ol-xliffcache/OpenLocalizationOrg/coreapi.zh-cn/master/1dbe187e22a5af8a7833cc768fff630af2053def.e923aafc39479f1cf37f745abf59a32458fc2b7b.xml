{"nodes":[{"pos":[2281,2311],"content":"WindowsRuntimeSystemExtensions","needQuote":true,"nodes":[{"content":"WindowsRuntimeSystemExtensions","pos":[0,30]}]},{"pos":[4109,4128],"content":"AsAsyncAction(Task)","needQuote":true,"nodes":[{"content":"AsAsyncAction(Task)","pos":[0,19]}]},{"pos":[5456,5496],"content":"AsAsyncOperation<TResult>(Task<TResult>)","needQuote":true,"nodes":[{"content":"AsAsyncOperation&lt;TResult&gt;(Task&lt;TResult&gt;)","pos":[0,40],"source":"AsAsyncOperation<TResult>(Task<TResult>)"}]},{"pos":[7243,7263],"content":"AsTask(IAsyncAction)","needQuote":true,"nodes":[{"content":"AsTask(IAsyncAction)","pos":[0,20]}]},{"pos":[8631,8670],"content":"AsTask(IAsyncAction, CancellationToken)","needQuote":true,"nodes":[{"content":"AsTask(IAsyncAction, CancellationToken)","pos":[0,39]}]},{"pos":[10200,10254],"content":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TProgress&gt;(IAsyncActionWithProgress&lt;TProgress&gt;)","pos":[0,54],"source":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>)"}]},{"pos":[12166,12242],"content":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, IProgress<TProgress>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TProgress&gt;(IAsyncActionWithProgress&lt;TProgress&gt;, IProgress&lt;TProgress&gt;)","pos":[0,76],"source":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, IProgress<TProgress>)"}]},{"pos":[14455,14528],"content":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken)","needQuote":true,"nodes":[{"content":"AsTask&lt;TProgress&gt;(IAsyncActionWithProgress&lt;TProgress&gt;, CancellationToken)","pos":[0,73],"source":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken)"}]},{"pos":[16826,16921],"content":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken, IProgress<TProgress>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TProgress&gt;(IAsyncActionWithProgress&lt;TProgress&gt;, CancellationToken, IProgress&lt;TProgress&gt;)","pos":[0,95],"source":"AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken, IProgress<TProgress>)"}]},{"pos":[19283,19324],"content":"AsTask<TResult>(IAsyncOperation<TResult>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TResult&gt;(IAsyncOperation&lt;TResult&gt;)","pos":[0,41],"source":"AsTask<TResult>(IAsyncOperation<TResult>)"}]},{"pos":[21176,21236],"content":"AsTask<TResult>(IAsyncOperation<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"AsTask&lt;TResult&gt;(IAsyncOperation&lt;TResult&gt;, CancellationToken)","pos":[0,60],"source":"AsTask<TResult>(IAsyncOperation<TResult>, CancellationToken)"}]},{"pos":[23312,23387],"content":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TResult, TProgress&gt;(IAsyncOperationWithProgress&lt;TResult, TProgress&gt;)","pos":[0,75],"source":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)"}]},{"pos":[25530,25627],"content":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, IProgress<TProgress>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TResult, TProgress&gt;(IAsyncOperationWithProgress&lt;TResult, TProgress&gt;, IProgress&lt;TProgress&gt;)","pos":[0,97],"source":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, IProgress<TProgress>)"}]},{"pos":[28071,28165],"content":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken)","needQuote":true,"nodes":[{"content":"AsTask&lt;TResult, TProgress&gt;(IAsyncOperationWithProgress&lt;TResult, TProgress&gt;, CancellationToken)","pos":[0,94],"source":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken)"}]},{"pos":[30694,30810],"content":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken, IProgress<TProgress>)","needQuote":true,"nodes":[{"content":"AsTask&lt;TResult, TProgress&gt;(IAsyncOperationWithProgress&lt;TResult, TProgress&gt;, CancellationToken, IProgress&lt;TProgress&gt;)","pos":[0,116],"source":"AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken, IProgress<TProgress>)"}]},{"pos":[33361,33385],"content":"GetAwaiter(IAsyncAction)","needQuote":true,"nodes":[{"content":"GetAwaiter(IAsyncAction)","pos":[0,24]}]},{"pos":[34770,34828],"content":"GetAwaiter<TProgress>(IAsyncActionWithProgress<TProgress>)","needQuote":true,"nodes":[{"content":"GetAwaiter&lt;TProgress&gt;(IAsyncActionWithProgress&lt;TProgress&gt;)","pos":[0,58],"source":"GetAwaiter<TProgress>(IAsyncActionWithProgress<TProgress>)"}]},{"pos":[36721,36766],"content":"GetAwaiter<TResult>(IAsyncOperation<TResult>)","needQuote":true,"nodes":[{"content":"GetAwaiter&lt;TResult&gt;(IAsyncOperation&lt;TResult&gt;)","pos":[0,45],"source":"GetAwaiter<TResult>(IAsyncOperation<TResult>)"}]},{"pos":[38635,38714],"content":"GetAwaiter<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)","needQuote":true,"nodes":[{"content":"GetAwaiter&lt;TResult, TProgress&gt;(IAsyncOperationWithProgress&lt;TResult, TProgress&gt;)","pos":[0,79],"source":"GetAwaiter<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)"}]},{"pos":[40515,40521],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[40659,40665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40834,40844],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[40973,40981],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41084,41085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41132,41133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41223,41231],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41334,41335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41382,41383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41565,41579],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[41736,41742],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41841,41842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41912,41918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42003,42004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42107,42113],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42212,42213],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42283,42289],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42374,42375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42585,42607],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[42801,42807],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42906,42907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42977,42983],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43069,43070]},{"pos":[43148,43154],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43239,43240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43357,43363],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43462,43463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43533,43539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43625,43626]},{"pos":[43704,43710],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43795,43796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44024,44055],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[44276,44291],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[44408,44409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44479,44485],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44571,44572]},{"pos":[44650,44656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44741,44742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44868,44883],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[45000,45001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45071,45077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45163,45164]},{"pos":[45242,45248],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45333,45334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45496,45509],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[45647,45658],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45767,45768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45815,45816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45909,45920],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[46029,46030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46077,46078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46232,46241],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[46367,46374],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[46475,46476],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46523,46524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46613,46620],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[46721,46722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46769,46770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46940,46957],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[47107,47122],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[47239,47240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47287,47288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47385,47400],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[47517,47518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47565,47566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47742,47746],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[47874,47886],"content":"IAsyncAction","needQuote":true,"nodes":[{"content":"IAsyncAction","pos":[0,12]}]},{"pos":[48056,48078],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[48331,48344],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[48607,48611],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[48687,48688],"content":"<","needQuote":true,"nodes":[]},{"pos":[48735,48742],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[48905,48909],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[48986,48989]},{"pos":[49048,49055],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[49114,49115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49321,49345],"content":"IAsyncOperation<TResult>","needQuote":true,"nodes":[{"content":"IAsyncOperation&lt;TResult&gt;","pos":[0,24],"source":"IAsyncOperation<TResult>"}]},{"pos":[49662,49677],"content":"IAsyncOperation","needQuote":true,"nodes":[{"content":"IAsyncOperation","pos":[0,15]}]},{"pos":[49792,49793],"content":"<","needQuote":true,"nodes":[]},{"pos":[49840,49847],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[50017,50032],"content":"IAsyncOperation","needQuote":true,"nodes":[{"content":"IAsyncOperation","pos":[0,15]}]},{"content":"(Of","pos":[50148,50151]},{"pos":[50210,50217],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[50276,50277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50424,50437],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[50700,50704],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[50780,50781],"content":"<","needQuote":true,"nodes":[]},{"pos":[50828,50835],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[50998,51002],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[51079,51082]},{"pos":[51141,51148],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[51207,51208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51316,51333],"content":"IAsyncOperation<>","needQuote":true,"nodes":[{"content":"IAsyncOperation&lt;&gt;","pos":[0,17],"source":"IAsyncOperation<>"}]},{"pos":[51615,51630],"content":"IAsyncOperation","needQuote":true,"nodes":[{"content":"IAsyncOperation","pos":[0,15]}]},{"pos":[51745,51746],"content":"<","needQuote":true,"nodes":[]},{"pos":[51949,51964],"content":"IAsyncOperation","needQuote":true,"nodes":[{"content":"IAsyncOperation","pos":[0,15]}]},{"content":"(Of","pos":[52080,52083]},{"pos":[52187,52188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52372,52389],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[52555,52571],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[52832,52867],"content":"IAsyncActionWithProgress<TProgress>","needQuote":true,"nodes":[{"content":"IAsyncActionWithProgress&lt;TProgress&gt;","pos":[0,35],"source":"IAsyncActionWithProgress<TProgress>"}]},{"pos":[53248,53272],"content":"IAsyncActionWithProgress","needQuote":true,"nodes":[{"content":"IAsyncActionWithProgress","pos":[0,24]}]},{"pos":[53405,53406],"content":"<","needQuote":true,"nodes":[]},{"pos":[53453,53462],"content":"TProgress","needQuote":true,"nodes":[{"content":"TProgress","pos":[0,9]}]},{"pos":[53645,53669],"content":"IAsyncActionWithProgress","needQuote":true,"nodes":[{"content":"IAsyncActionWithProgress","pos":[0,24]}]},{"content":"(Of","pos":[53803,53806]},{"pos":[53865,53874],"content":"TProgress","needQuote":true,"nodes":[{"content":"TProgress","pos":[0,9]}]},{"pos":[53937,53938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54055,54081],"content":"IAsyncActionWithProgress<>","needQuote":true,"nodes":[{"content":"IAsyncActionWithProgress&lt;&gt;","pos":[0,26],"source":"IAsyncActionWithProgress<>"}]},{"pos":[54417,54441],"content":"IAsyncActionWithProgress","needQuote":true,"nodes":[{"content":"IAsyncActionWithProgress","pos":[0,24]}]},{"pos":[54574,54575],"content":"<","needQuote":true,"nodes":[]},{"pos":[54787,54811],"content":"IAsyncActionWithProgress","needQuote":true,"nodes":[{"content":"IAsyncActionWithProgress","pos":[0,24]}]},{"content":"(Of","pos":[54945,54948]},{"pos":[55052,55053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55222,55242],"content":"IProgress<TProgress>","needQuote":true,"nodes":[{"content":"IProgress&lt;TProgress&gt;","pos":[0,20],"source":"IProgress<TProgress>"}]},{"pos":[55497,55506],"content":"IProgress","needQuote":true,"nodes":[{"content":"IProgress","pos":[0,9]}]},{"pos":[55597,55598],"content":"<","needQuote":true,"nodes":[]},{"pos":[55645,55654],"content":"TProgress","needQuote":true,"nodes":[{"content":"TProgress","pos":[0,9]}]},{"pos":[55810,55819],"content":"IProgress","needQuote":true,"nodes":[{"content":"IProgress","pos":[0,9]}]},{"content":"(Of","pos":[55911,55914]},{"pos":[55973,55982],"content":"TProgress","needQuote":true,"nodes":[{"content":"TProgress","pos":[0,9]}]},{"pos":[56045,56046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56171,56183],"content":"IProgress<T>","needQuote":true,"nodes":[{"content":"IProgress&lt;T&gt;","pos":[0,12],"source":"IProgress<T>"}]},{"pos":[56398,56407],"content":"IProgress","needQuote":true,"nodes":[{"content":"IProgress","pos":[0,9]}]},{"pos":[56477,56478],"content":"<","needQuote":true,"nodes":[]},{"pos":[56525,56526],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[56666,56675],"content":"IProgress","needQuote":true,"nodes":[{"content":"IProgress","pos":[0,9]}]},{"content":"(Of","pos":[56746,56749]},{"pos":[56808,56809],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[56856,56857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57115,57162],"content":"IAsyncOperationWithProgress<TResult, TProgress>","needQuote":true,"nodes":[{"content":"IAsyncOperationWithProgress&lt;TResult, TProgress&gt;","pos":[0,47],"source":"IAsyncOperationWithProgress<TResult, TProgress>"}]},{"pos":[57606,57633],"content":"IAsyncOperationWithProgress","needQuote":true,"nodes":[{"content":"IAsyncOperationWithProgress","pos":[0,27]}]},{"pos":[57772,57773],"content":"<","needQuote":true,"nodes":[]},{"pos":[57820,57827],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[57887,57888]},{"pos":[57943,57952],"content":"TProgress","needQuote":true,"nodes":[{"content":"TProgress","pos":[0,9]}]},{"pos":[58138,58165],"content":"IAsyncOperationWithProgress","needQuote":true,"nodes":[{"content":"IAsyncOperationWithProgress","pos":[0,27]}]},{"content":"(Of","pos":[58305,58308]},{"pos":[58367,58374],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":",","pos":[58434,58435]},{"pos":[58490,58499],"content":"TProgress","needQuote":true,"nodes":[{"content":"TProgress","pos":[0,9]}]},{"pos":[58562,58563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58683,58714],"content":"IAsyncOperationWithProgress<, >","needQuote":true,"nodes":[{"content":"IAsyncOperationWithProgress&lt;, &gt;","pos":[0,31],"source":"IAsyncOperationWithProgress<, >"}]},{"pos":[59078,59105],"content":"IAsyncOperationWithProgress","needQuote":true,"nodes":[{"content":"IAsyncOperationWithProgress","pos":[0,27]}]},{"pos":[59244,59245],"content":"<","needQuote":true,"nodes":[]},{"content":",","pos":[59338,59339]},{"pos":[59562,59589],"content":"IAsyncOperationWithProgress","needQuote":true,"nodes":[{"content":"IAsyncOperationWithProgress","pos":[0,27]}]},{"content":"(Of","pos":[59729,59732]},{"content":",","pos":[59837,59838]},{"pos":[59938,59939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60156,60167],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"pos":[60366,60397],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[60725,60745],"content":"TaskAwaiter<TResult>","needQuote":true,"nodes":[{"content":"TaskAwaiter&lt;TResult&gt;","pos":[0,20],"source":"TaskAwaiter<TResult>"}]},{"pos":[61077,61088],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"pos":[61187,61188],"content":"<","needQuote":true,"nodes":[]},{"pos":[61235,61242],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[61421,61432],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"content":"(Of","pos":[61532,61535]},{"pos":[61594,61601],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[61660,61661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61840,61860],"content":"TaskAwaiter<TResult>","needQuote":true,"nodes":[{"content":"TaskAwaiter&lt;TResult&gt;","pos":[0,20],"source":"TaskAwaiter<TResult>"}]},{"pos":[62192,62203],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"pos":[62302,62303],"content":"<","needQuote":true,"nodes":[]},{"pos":[62350,62357],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[62536,62547],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"content":"(Of","pos":[62647,62650]},{"pos":[62709,62716],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[62775,62776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.WindowsRuntimeSystemExtensions\n  commentId: T:System.WindowsRuntimeSystemExtensions\n  id: WindowsRuntimeSystemExtensions\n  parent: System\n  children:\n  - System.WindowsRuntimeSystemExtensions.AsAsyncAction(System.Threading.Tasks.Task)\n  - System.WindowsRuntimeSystemExtensions.AsAsyncOperation``1(System.Threading.Tasks.Task{``0})\n  - System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction)\n  - System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction,System.Threading.CancellationToken)\n  - System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  - System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.IProgress{``0})\n  - System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken)\n  - System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken,System.IProgress{``0})\n  - System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0})\n  - System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)\n  - System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  - System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.IProgress{``1})\n  - System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken)\n  - System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken,System.IProgress{``1})\n  - System.WindowsRuntimeSystemExtensions.GetAwaiter(Windows.Foundation.IAsyncAction)\n  - System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  - System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncOperation{``0})\n  - System.WindowsRuntimeSystemExtensions.GetAwaiter``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  langs:\n  - csharp\n  - vb\n  name: WindowsRuntimeSystemExtensions\n  nameWithType: WindowsRuntimeSystemExtensions\n  fullName: System.WindowsRuntimeSystemExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WindowsRuntimeSystemExtensions\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 10\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [SecurityCritical]\n\n      public class WindowsRuntimeSystemExtensions\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <SecurityCritical>\n\n      Public Class WindowsRuntimeSystemExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.WindowsRuntimeSystemExtensions.AsAsyncAction(System.Threading.Tasks.Task)\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsAsyncAction(System.Threading.Tasks.Task)\n  id: AsAsyncAction(System.Threading.Tasks.Task)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsAsyncAction(Task)\n  nameWithType: WindowsRuntimeSystemExtensions.AsAsyncAction(Task)\n  fullName: System.WindowsRuntimeSystemExtensions.AsAsyncAction(System.Threading.Tasks.Task)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsAsyncAction\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 14\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static IAsyncAction AsAsyncAction(this Task source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsAsyncAction(source As Task) As IAsyncAction\n    parameters:\n    - id: source\n      type: System.Threading.Tasks.Task\n    return:\n      type: Windows.Foundation.IAsyncAction\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.WindowsRuntimeSystemExtensions.AsAsyncOperation``1(System.Threading.Tasks.Task{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsAsyncOperation``1(System.Threading.Tasks.Task{``0})\n  id: AsAsyncOperation``1(System.Threading.Tasks.Task{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsAsyncOperation<TResult>(Task<TResult>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsAsyncOperation<TResult>(Task<TResult>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsAsyncOperation<TResult>(System.Threading.Tasks.Task<TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsAsyncOperation\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 15\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static IAsyncOperation<TResult> AsAsyncOperation<TResult>(this Task<TResult> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsAsyncOperation(Of TResult)(source As Task(Of TResult)) As IAsyncOperation(Of TResult)\n    parameters:\n    - id: source\n      type: System.Threading.Tasks.Task{{TResult}}\n    typeParameters:\n    - id: TResult\n    return:\n      type: Windows.Foundation.IAsyncOperation{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsAsyncOperation(Of TResult)(Task(Of TResult))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsAsyncOperation(Of TResult)(System.Threading.Tasks.Task(Of TResult))\n  name.vb: AsAsyncOperation(Of TResult)(Task(Of TResult))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction)\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction)\n  id: AsTask(Windows.Foundation.IAsyncAction)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask(IAsyncAction)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask(IAsyncAction)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 16\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task AsTask(this IAsyncAction source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(source As IAsyncAction) As Task\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncAction\n    return:\n      type: System.Threading.Tasks.Task\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction,System.Threading.CancellationToken)\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction,System.Threading.CancellationToken)\n  id: AsTask(Windows.Foundation.IAsyncAction,System.Threading.CancellationToken)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask(IAsyncAction, CancellationToken)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask(IAsyncAction, CancellationToken)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 17\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task AsTask(this IAsyncAction source, CancellationToken cancellationToken)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(source As IAsyncAction, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncAction\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n    return:\n      type: System.Threading.Tasks.Task\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  id: AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TProgress>(IAsyncActionWithProgress<TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TProgress>(IAsyncActionWithProgress<TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TProgress>(Windows.Foundation.IAsyncActionWithProgress<TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 18\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task AsTask<TProgress>(this IAsyncActionWithProgress<TProgress> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TProgress)(source As IAsyncActionWithProgress(Of TProgress)) As Task\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncActionWithProgress{{TProgress}}\n    typeParameters:\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(Windows.Foundation.IAsyncActionWithProgress(Of TProgress))\n  name.vb: AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.IProgress{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.IProgress{``0})\n  id: AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.IProgress{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, IProgress<TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, IProgress<TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TProgress>(Windows.Foundation.IAsyncActionWithProgress<TProgress>, System.IProgress<TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task AsTask<TProgress>(this IAsyncActionWithProgress<TProgress> source, IProgress<TProgress> progress)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TProgress)(source As IAsyncActionWithProgress(Of TProgress), progress As IProgress(Of TProgress)) As Task\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncActionWithProgress{{TProgress}}\n    - id: progress\n      type: System.IProgress{{TProgress}}\n    typeParameters:\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress), IProgress(Of TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(Windows.Foundation.IAsyncActionWithProgress(Of TProgress), System.IProgress(Of TProgress))\n  name.vb: AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress), IProgress(Of TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken)\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken)\n  id: AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TProgress>(Windows.Foundation.IAsyncActionWithProgress<TProgress>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 20\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task AsTask<TProgress>(this IAsyncActionWithProgress<TProgress> source, CancellationToken cancellationToken)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TProgress)(source As IAsyncActionWithProgress(Of TProgress), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncActionWithProgress{{TProgress}}\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n    typeParameters:\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress), CancellationToken)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(Windows.Foundation.IAsyncActionWithProgress(Of TProgress), System.Threading.CancellationToken)\n  name.vb: AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress), CancellationToken)\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken,System.IProgress{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken,System.IProgress{``0})\n  id: AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken,System.IProgress{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken, IProgress<TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TProgress>(IAsyncActionWithProgress<TProgress>, CancellationToken, IProgress<TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TProgress>(Windows.Foundation.IAsyncActionWithProgress<TProgress>, System.Threading.CancellationToken, System.IProgress<TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 21\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task AsTask<TProgress>(this IAsyncActionWithProgress<TProgress> source, CancellationToken cancellationToken, IProgress<TProgress> progress)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TProgress)(source As IAsyncActionWithProgress(Of TProgress), cancellationToken As CancellationToken, progress As IProgress(Of TProgress)) As Task\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncActionWithProgress{{TProgress}}\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n    - id: progress\n      type: System.IProgress{{TProgress}}\n    typeParameters:\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress), CancellationToken, IProgress(Of TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TProgress)(Windows.Foundation.IAsyncActionWithProgress(Of TProgress), System.Threading.CancellationToken, System.IProgress(Of TProgress))\n  name.vb: AsTask(Of TProgress)(IAsyncActionWithProgress(Of TProgress), CancellationToken, IProgress(Of TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0})\n  id: AsTask``1(Windows.Foundation.IAsyncOperation{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TResult>(IAsyncOperation<TResult>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TResult>(IAsyncOperation<TResult>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TResult>(Windows.Foundation.IAsyncOperation<TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 22\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task<TResult> AsTask<TResult>(this IAsyncOperation<TResult> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TResult)(source As IAsyncOperation(Of TResult)) As Task(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperation{{TResult}}\n    typeParameters:\n    - id: TResult\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TResult)(IAsyncOperation(Of TResult))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TResult)(Windows.Foundation.IAsyncOperation(Of TResult))\n  name.vb: AsTask(Of TResult)(IAsyncOperation(Of TResult))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)\n  id: AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TResult>(IAsyncOperation<TResult>, CancellationToken)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TResult>(IAsyncOperation<TResult>, CancellationToken)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TResult>(Windows.Foundation.IAsyncOperation<TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 23\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task<TResult> AsTask<TResult>(this IAsyncOperation<TResult> source, CancellationToken cancellationToken)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TResult)(source As IAsyncOperation(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperation{{TResult}}\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n    typeParameters:\n    - id: TResult\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TResult)(IAsyncOperation(Of TResult), CancellationToken)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TResult)(Windows.Foundation.IAsyncOperation(Of TResult), System.Threading.CancellationToken)\n  name.vb: AsTask(Of TResult)(IAsyncOperation(Of TResult), CancellationToken)\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  id: AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(Windows.Foundation.IAsyncOperationWithProgress<TResult, TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task<TResult> AsTask<TResult, TProgress>(this IAsyncOperationWithProgress<TResult, TProgress> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TResult, TProgress)(source As IAsyncOperationWithProgress(Of TResult, TProgress)) As Task(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperationWithProgress{{TResult},{TProgress}}\n    typeParameters:\n    - id: TResult\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(Windows.Foundation.IAsyncOperationWithProgress(Of TResult, TProgress))\n  name.vb: AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.IProgress{``1})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.IProgress{``1})\n  id: AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.IProgress{``1})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, IProgress<TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, IProgress<TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(Windows.Foundation.IAsyncOperationWithProgress<TResult, TProgress>, System.IProgress<TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 25\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task<TResult> AsTask<TResult, TProgress>(this IAsyncOperationWithProgress<TResult, TProgress> source, IProgress<TProgress> progress)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TResult, TProgress)(source As IAsyncOperationWithProgress(Of TResult, TProgress), progress As IProgress(Of TProgress)) As Task(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperationWithProgress{{TResult},{TProgress}}\n    - id: progress\n      type: System.IProgress{{TProgress}}\n    typeParameters:\n    - id: TResult\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress), IProgress(Of TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(Windows.Foundation.IAsyncOperationWithProgress(Of TResult, TProgress), System.IProgress(Of TProgress))\n  name.vb: AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress), IProgress(Of TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken)\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken)\n  id: AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(Windows.Foundation.IAsyncOperationWithProgress<TResult, TProgress>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 26\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task<TResult> AsTask<TResult, TProgress>(this IAsyncOperationWithProgress<TResult, TProgress> source, CancellationToken cancellationToken)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TResult, TProgress)(source As IAsyncOperationWithProgress(Of TResult, TProgress), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperationWithProgress{{TResult},{TProgress}}\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n    typeParameters:\n    - id: TResult\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress), CancellationToken)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(Windows.Foundation.IAsyncOperationWithProgress(Of TResult, TProgress), System.Threading.CancellationToken)\n  name.vb: AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress), CancellationToken)\n- uid: System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken,System.IProgress{``1})\n  commentId: M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken,System.IProgress{``1})\n  id: AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken,System.IProgress{``1})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken, IProgress<TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>, CancellationToken, IProgress<TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.AsTask<TResult, TProgress>(Windows.Foundation.IAsyncOperationWithProgress<TResult, TProgress>, System.Threading.CancellationToken, System.IProgress<TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsTask\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 27\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static Task<TResult> AsTask<TResult, TProgress>(this IAsyncOperationWithProgress<TResult, TProgress> source, CancellationToken cancellationToken, IProgress<TProgress> progress)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsTask(Of TResult, TProgress)(source As IAsyncOperationWithProgress(Of TResult, TProgress), cancellationToken As CancellationToken, progress As IProgress(Of TProgress)) As Task(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperationWithProgress{{TResult},{TProgress}}\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n    - id: progress\n      type: System.IProgress{{TProgress}}\n    typeParameters:\n    - id: TResult\n    - id: TProgress\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress), CancellationToken, IProgress(Of TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.AsTask(Of TResult, TProgress)(Windows.Foundation.IAsyncOperationWithProgress(Of TResult, TProgress), System.Threading.CancellationToken, System.IProgress(Of TProgress))\n  name.vb: AsTask(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress), CancellationToken, IProgress(Of TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.GetAwaiter(Windows.Foundation.IAsyncAction)\n  commentId: M:System.WindowsRuntimeSystemExtensions.GetAwaiter(Windows.Foundation.IAsyncAction)\n  id: GetAwaiter(Windows.Foundation.IAsyncAction)\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAwaiter(IAsyncAction)\n  nameWithType: WindowsRuntimeSystemExtensions.GetAwaiter(IAsyncAction)\n  fullName: System.WindowsRuntimeSystemExtensions.GetAwaiter(Windows.Foundation.IAsyncAction)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAwaiter\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static TaskAwaiter GetAwaiter(this IAsyncAction source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAwaiter(source As IAsyncAction) As TaskAwaiter\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncAction\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  id: GetAwaiter``1(Windows.Foundation.IAsyncActionWithProgress{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAwaiter<TProgress>(IAsyncActionWithProgress<TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.GetAwaiter<TProgress>(IAsyncActionWithProgress<TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.GetAwaiter<TProgress>(Windows.Foundation.IAsyncActionWithProgress<TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAwaiter\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 30\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static TaskAwaiter GetAwaiter<TProgress>(this IAsyncActionWithProgress<TProgress> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAwaiter(Of TProgress)(source As IAsyncActionWithProgress(Of TProgress)) As TaskAwaiter\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncActionWithProgress{{TProgress}}\n    typeParameters:\n    - id: TProgress\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter\n  nameWithType.vb: WindowsRuntimeSystemExtensions.GetAwaiter(Of TProgress)(IAsyncActionWithProgress(Of TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.GetAwaiter(Of TProgress)(Windows.Foundation.IAsyncActionWithProgress(Of TProgress))\n  name.vb: GetAwaiter(Of TProgress)(IAsyncActionWithProgress(Of TProgress))\n- uid: System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncOperation{``0})\n  commentId: M:System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncOperation{``0})\n  id: GetAwaiter``1(Windows.Foundation.IAsyncOperation{``0})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAwaiter<TResult>(IAsyncOperation<TResult>)\n  nameWithType: WindowsRuntimeSystemExtensions.GetAwaiter<TResult>(IAsyncOperation<TResult>)\n  fullName: System.WindowsRuntimeSystemExtensions.GetAwaiter<TResult>(Windows.Foundation.IAsyncOperation<TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAwaiter\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static TaskAwaiter<TResult> GetAwaiter<TResult>(this IAsyncOperation<TResult> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAwaiter(Of TResult)(source As IAsyncOperation(Of TResult)) As TaskAwaiter(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperation{{TResult}}\n    typeParameters:\n    - id: TResult\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.GetAwaiter(Of TResult)(IAsyncOperation(Of TResult))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.GetAwaiter(Of TResult)(Windows.Foundation.IAsyncOperation(Of TResult))\n  name.vb: GetAwaiter(Of TResult)(IAsyncOperation(Of TResult))\n- uid: System.WindowsRuntimeSystemExtensions.GetAwaiter``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  commentId: M:System.WindowsRuntimeSystemExtensions.GetAwaiter``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  id: GetAwaiter``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})\n  isExtensionMethod: true\n  parent: System.WindowsRuntimeSystemExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAwaiter<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)\n  nameWithType: WindowsRuntimeSystemExtensions.GetAwaiter<TResult, TProgress>(IAsyncOperationWithProgress<TResult, TProgress>)\n  fullName: System.WindowsRuntimeSystemExtensions.GetAwaiter<TResult, TProgress>(Windows.Foundation.IAsyncOperationWithProgress<TResult, TProgress>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAwaiter\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System\n  syntax:\n    content: public static TaskAwaiter<TResult> GetAwaiter<TResult, TProgress>(this IAsyncOperationWithProgress<TResult, TProgress> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAwaiter(Of TResult, TProgress)(source As IAsyncOperationWithProgress(Of TResult, TProgress)) As TaskAwaiter(Of TResult)\n    parameters:\n    - id: source\n      type: Windows.Foundation.IAsyncOperationWithProgress{{TResult},{TProgress}}\n    typeParameters:\n    - id: TResult\n    - id: TProgress\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter{{TResult}}\n  nameWithType.vb: WindowsRuntimeSystemExtensions.GetAwaiter(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.WindowsRuntimeSystemExtensions.GetAwaiter(Of TResult, TProgress)(Windows.Foundation.IAsyncOperationWithProgress(Of TResult, TProgress))\n  name.vb: GetAwaiter(Of TResult, TProgress)(IAsyncOperationWithProgress(Of TResult, TProgress))\nreferences:\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: Windows.Foundation.IAsyncAction\n  isExternal: true\n  name: IAsyncAction\n  nameWithType: IAsyncAction\n  fullName: Windows.Foundation.IAsyncAction\n- uid: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n- uid: System.Threading.Tasks.Task{{TResult}}\n  commentId: T:System.Threading.Tasks.Task{`0}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: Windows.Foundation.IAsyncOperation{{TResult}}\n  commentId: '!:Windows.Foundation.IAsyncOperation{``0}'\n  definition: Windows.Foundation.IAsyncOperation`1\n  name: IAsyncOperation<TResult>\n  nameWithType: IAsyncOperation<TResult>\n  fullName: Windows.Foundation.IAsyncOperation<TResult>\n  nameWithType.vb: IAsyncOperation(Of TResult)\n  fullname.vb: Windows.Foundation.IAsyncOperation(Of TResult)\n  name.vb: IAsyncOperation(Of TResult)\n  spec.csharp:\n  - uid: Windows.Foundation.IAsyncOperation`1\n    name: IAsyncOperation\n    nameWithType: IAsyncOperation\n    fullName: Windows.Foundation.IAsyncOperation\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: Windows.Foundation.IAsyncOperation`1\n    name: IAsyncOperation\n    nameWithType: IAsyncOperation\n    fullName: Windows.Foundation.IAsyncOperation\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks.Task`1\n  commentId: T:System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: Windows.Foundation.IAsyncOperation`1\n  isExternal: true\n  name: IAsyncOperation<>\n  nameWithType: IAsyncOperation<>\n  fullName: Windows.Foundation.IAsyncOperation<>\n  nameWithType.vb: IAsyncOperation(Of )\n  fullname.vb: Windows.Foundation.IAsyncOperation(Of )\n  name.vb: IAsyncOperation(Of )\n  spec.csharp:\n  - uid: Windows.Foundation.IAsyncOperation`1\n    name: IAsyncOperation\n    nameWithType: IAsyncOperation\n    fullName: Windows.Foundation.IAsyncOperation\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: \n    nameWithType: \n    fullName: \n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: Windows.Foundation.IAsyncOperation`1\n    name: IAsyncOperation\n    nameWithType: IAsyncOperation\n    fullName: Windows.Foundation.IAsyncOperation\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: \n    nameWithType: \n    fullName: \n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading\n  commentId: N:System.Threading\n  isExternal: false\n  name: System.Threading\n  nameWithType: System.Threading\n  fullName: System.Threading\n- uid: Windows.Foundation.IAsyncActionWithProgress{{TProgress}}\n  commentId: '!:Windows.Foundation.IAsyncActionWithProgress{``0}'\n  definition: Windows.Foundation.IAsyncActionWithProgress`1\n  name: IAsyncActionWithProgress<TProgress>\n  nameWithType: IAsyncActionWithProgress<TProgress>\n  fullName: Windows.Foundation.IAsyncActionWithProgress<TProgress>\n  nameWithType.vb: IAsyncActionWithProgress(Of TProgress)\n  fullname.vb: Windows.Foundation.IAsyncActionWithProgress(Of TProgress)\n  name.vb: IAsyncActionWithProgress(Of TProgress)\n  spec.csharp:\n  - uid: Windows.Foundation.IAsyncActionWithProgress`1\n    name: IAsyncActionWithProgress\n    nameWithType: IAsyncActionWithProgress\n    fullName: Windows.Foundation.IAsyncActionWithProgress\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TProgress\n    nameWithType: TProgress\n    fullName: TProgress\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: Windows.Foundation.IAsyncActionWithProgress`1\n    name: IAsyncActionWithProgress\n    nameWithType: IAsyncActionWithProgress\n    fullName: Windows.Foundation.IAsyncActionWithProgress\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TProgress\n    nameWithType: TProgress\n    fullName: TProgress\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: Windows.Foundation.IAsyncActionWithProgress`1\n  isExternal: true\n  name: IAsyncActionWithProgress<>\n  nameWithType: IAsyncActionWithProgress<>\n  fullName: Windows.Foundation.IAsyncActionWithProgress<>\n  nameWithType.vb: IAsyncActionWithProgress(Of )\n  fullname.vb: Windows.Foundation.IAsyncActionWithProgress(Of )\n  name.vb: IAsyncActionWithProgress(Of )\n  spec.csharp:\n  - uid: Windows.Foundation.IAsyncActionWithProgress`1\n    name: IAsyncActionWithProgress\n    nameWithType: IAsyncActionWithProgress\n    fullName: Windows.Foundation.IAsyncActionWithProgress\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: \n    nameWithType: \n    fullName: \n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: Windows.Foundation.IAsyncActionWithProgress`1\n    name: IAsyncActionWithProgress\n    nameWithType: IAsyncActionWithProgress\n    fullName: Windows.Foundation.IAsyncActionWithProgress\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: \n    nameWithType: \n    fullName: \n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IProgress{{TProgress}}\n  commentId: T:System.IProgress{``0}\n  parent: System\n  definition: System.IProgress`1\n  name: IProgress<TProgress>\n  nameWithType: IProgress<TProgress>\n  fullName: System.IProgress<TProgress>\n  nameWithType.vb: IProgress(Of TProgress)\n  fullname.vb: System.IProgress(Of TProgress)\n  name.vb: IProgress(Of TProgress)\n  spec.csharp:\n  - uid: System.IProgress`1\n    name: IProgress\n    nameWithType: IProgress\n    fullName: System.IProgress\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TProgress\n    nameWithType: TProgress\n    fullName: TProgress\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IProgress`1\n    name: IProgress\n    nameWithType: IProgress\n    fullName: System.IProgress\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TProgress\n    nameWithType: TProgress\n    fullName: TProgress\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IProgress`1\n  commentId: T:System.IProgress`1\n  isExternal: false\n  name: IProgress<T>\n  nameWithType: IProgress<T>\n  fullName: System.IProgress<T>\n  nameWithType.vb: IProgress(Of T)\n  fullname.vb: System.IProgress(Of T)\n  name.vb: IProgress(Of T)\n  spec.csharp:\n  - uid: System.IProgress`1\n    name: IProgress\n    nameWithType: IProgress\n    fullName: System.IProgress\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IProgress`1\n    name: IProgress\n    nameWithType: IProgress\n    fullName: System.IProgress\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: Windows.Foundation.IAsyncOperationWithProgress{{TResult},{TProgress}}\n  commentId: '!:Windows.Foundation.IAsyncOperationWithProgress{``0,``1}'\n  definition: Windows.Foundation.IAsyncOperationWithProgress`2\n  name: IAsyncOperationWithProgress<TResult, TProgress>\n  nameWithType: IAsyncOperationWithProgress<TResult, TProgress>\n  fullName: Windows.Foundation.IAsyncOperationWithProgress<TResult, TProgress>\n  nameWithType.vb: IAsyncOperationWithProgress(Of TResult, TProgress)\n  fullname.vb: Windows.Foundation.IAsyncOperationWithProgress(Of TResult, TProgress)\n  name.vb: IAsyncOperationWithProgress(Of TResult, TProgress)\n  spec.csharp:\n  - uid: Windows.Foundation.IAsyncOperationWithProgress`2\n    name: IAsyncOperationWithProgress\n    nameWithType: IAsyncOperationWithProgress\n    fullName: Windows.Foundation.IAsyncOperationWithProgress\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - name: TProgress\n    nameWithType: TProgress\n    fullName: TProgress\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: Windows.Foundation.IAsyncOperationWithProgress`2\n    name: IAsyncOperationWithProgress\n    nameWithType: IAsyncOperationWithProgress\n    fullName: Windows.Foundation.IAsyncOperationWithProgress\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - name: TProgress\n    nameWithType: TProgress\n    fullName: TProgress\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: Windows.Foundation.IAsyncOperationWithProgress`2\n  isExternal: true\n  name: IAsyncOperationWithProgress<, >\n  nameWithType: IAsyncOperationWithProgress<, >\n  fullName: Windows.Foundation.IAsyncOperationWithProgress<, >\n  nameWithType.vb: IAsyncOperationWithProgress(Of , )\n  fullname.vb: Windows.Foundation.IAsyncOperationWithProgress(Of , )\n  name.vb: IAsyncOperationWithProgress(Of , )\n  spec.csharp:\n  - uid: Windows.Foundation.IAsyncOperationWithProgress`2\n    name: IAsyncOperationWithProgress\n    nameWithType: IAsyncOperationWithProgress\n    fullName: Windows.Foundation.IAsyncOperationWithProgress\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: \n    nameWithType: \n    fullName: \n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - name: \n    nameWithType: \n    fullName: \n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: Windows.Foundation.IAsyncOperationWithProgress`2\n    name: IAsyncOperationWithProgress\n    nameWithType: IAsyncOperationWithProgress\n    fullName: Windows.Foundation.IAsyncOperationWithProgress\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: \n    nameWithType: \n    fullName: \n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - name: \n    nameWithType: \n    fullName: \n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Runtime.CompilerServices.TaskAwaiter\n  commentId: T:System.Runtime.CompilerServices.TaskAwaiter\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: TaskAwaiter\n  nameWithType: TaskAwaiter\n  fullName: System.Runtime.CompilerServices.TaskAwaiter\n- uid: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n- uid: System.Runtime.CompilerServices.TaskAwaiter{{TResult}}\n  commentId: T:System.Runtime.CompilerServices.TaskAwaiter{`0}\n  parent: System.Runtime.CompilerServices\n  definition: System.Runtime.CompilerServices.TaskAwaiter`1\n  name: TaskAwaiter<TResult>\n  nameWithType: TaskAwaiter<TResult>\n  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>\n  nameWithType.vb: TaskAwaiter(Of TResult)\n  fullname.vb: System.Runtime.CompilerServices.TaskAwaiter(Of TResult)\n  name.vb: TaskAwaiter(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    nameWithType: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    nameWithType: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Runtime.CompilerServices.TaskAwaiter`1\n  commentId: T:System.Runtime.CompilerServices.TaskAwaiter`1\n  isExternal: false\n  name: TaskAwaiter<TResult>\n  nameWithType: TaskAwaiter<TResult>\n  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>\n  nameWithType.vb: TaskAwaiter(Of TResult)\n  fullname.vb: System.Runtime.CompilerServices.TaskAwaiter(Of TResult)\n  name.vb: TaskAwaiter(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    nameWithType: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.TaskAwaiter`1\n    name: TaskAwaiter\n    nameWithType: TaskAwaiter\n    fullName: System.Runtime.CompilerServices.TaskAwaiter\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n"}