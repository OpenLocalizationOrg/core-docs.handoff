{"nodes":[{"pos":[5915,5922],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[8325,8333],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[10091,10099],"content":"MinusOne","needQuote":true,"nodes":[{"content":"MinusOne","pos":[0,8]}]},{"pos":[11664,11672],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[13420,13423],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"pos":[14947,14951],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[16529,16544],"content":"Decimal(Double)","needQuote":true,"nodes":[{"content":"Decimal(Double)","pos":[0,15]}]},{"pos":[18331,18345],"content":"Decimal(Int32)","needQuote":true,"nodes":[{"content":"Decimal(Int32)","pos":[0,14]}]},{"pos":[19596,19639],"content":"Decimal(Int32, Int32, Int32, Boolean, Byte)","needQuote":true,"nodes":[{"content":"Decimal(Int32, Int32, Int32, Boolean, Byte)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The low 32 bits of a 96-bit integer.","pos":[20508,20549],"source":"\\n<p>The low 32 bits of a 96-bit integer."},{"content":"&lt;/p&gt;\\n","pos":[20550,20556],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The middle 32 bits of a 96-bit integer.","pos":[20617,20661],"source":"\\n<p>The middle 32 bits of a 96-bit integer."},{"content":"&lt;/p&gt;\\n","pos":[20662,20668],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The high 32 bits of a 96-bit integer.","pos":[20728,20770],"source":"\\n<p>The high 32 bits of a 96-bit integer."},{"content":"&lt;/p&gt;\\n","pos":[20771,20777],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate a negative number; &lt;strong&gt;false&lt;/strong&gt; to indicate a positive number.","pos":[20847,20960],"source":"\\n<p>\\n<strong>true</strong> to indicate a negative number; <strong>false</strong> to indicate a positive number."},{"content":"&lt;/p&gt;\\n","pos":[20961,20967],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A power of 10 ranging from 0 to 28.","pos":[21029,21069],"source":"\\n<p>A power of 10 ranging from 0 to 28."},{"content":"&lt;/p&gt;\\n","pos":[21070,21076],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;scale&lt;/em&gt; is greater than 28.","pos":[21207,21248],"source":"\\n<p>\\n<em>scale</em> is greater than 28."},{"content":"&lt;/p&gt;\\n","pos":[21249,21255],"source":" </p>\\n"},{"pos":[21569,21585],"content":"Decimal(Int32[])","needQuote":true,"nodes":[{"content":"Decimal(Int32[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An array of 32-bit signed integers containing a representation of a decimal value.","pos":[22312,22399],"source":"\\n<p>An array of 32-bit signed integers containing a representation of a decimal value."},{"content":"&lt;/p&gt;\\n","pos":[22400,22406],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bits&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22525,22571],"source":"\\n<p>\\n<em>bits</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22572,22578],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the &lt;em&gt;bits&lt;/em&gt; is not 4.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The representation of the decimal value in &lt;em&gt;bits&lt;/em&gt; is not valid.","pos":[22675,22814],"source":"\\n<p>The length of the <em>bits</em> is not 4.</p>\\n<p>-or- </p>\\n<p>The representation of the decimal value in <em>bits</em> is not valid."},{"content":"&lt;/p&gt;\\n","pos":[22815,22821],"source":" </p>\\n"},{"pos":[23344,23358],"content":"Decimal(Int64)","needQuote":true,"nodes":[{"content":"Decimal(Int64)","pos":[0,14]}]},{"pos":[24451,24466],"content":"Decimal(Single)","needQuote":true,"nodes":[{"content":"Decimal(Single)","pos":[0,15]}]},{"pos":[26255,26270],"content":"Decimal(UInt32)","needQuote":true,"nodes":[{"content":"Decimal(UInt32)","pos":[0,15]}]},{"pos":[27623,27638],"content":"Decimal(UInt64)","needQuote":true,"nodes":[{"content":"Decimal(UInt64)","pos":[0,15]}]},{"pos":[29029,29050],"content":"Add(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Add(Decimal, Decimal)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first value to add.","pos":[29835,29863],"source":"\\n<p>The first value to add."},{"content":"&lt;/p&gt;\\n","pos":[29864,29870],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to add.","pos":[29932,29961],"source":"\\n<p>The second value to add."},{"content":"&lt;/p&gt;\\n","pos":[29962,29968],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30029,30079],"source":"\\n<p>The sum of <em>d1</em> and <em>d2</em>.</p>\\n"},{"pos":[31174,31190],"content":"Ceiling(Decimal)","needQuote":true,"nodes":[{"content":"Ceiling(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A decimal number.","pos":[31864,31886],"source":"\\n<p>A decimal number."},{"content":"&lt;/p&gt;\\n","pos":[31887,31893],"source":" </p>\\n"},{"pos":[32756,32781],"content":"Compare(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Compare(Decimal, Decimal)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[33732,33764],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[33765,33771],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[33833,33866],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[33867,33873],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed number indicating the relative values of &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;d1&lt;/em&gt; is less than &lt;em&gt;d2&lt;/em&gt;.","pos":[33932,34161],"source":"\\n<p>A signed number indicating the relative values of <em>d1</em> and <em>d2</em>.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>d1</em> is less than <em>d2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt; are equal.","pos":[34162,34256],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>d1</em> and <em>d2</em> are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;d1&lt;/em&gt; is greater than &lt;em&gt;d2&lt;/em&gt;.","pos":[34257,34366],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>d1</em> is greater than <em>d2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[34367,34401],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[34948,34966],"content":"CompareTo(Decimal)","needQuote":true,"nodes":[{"content":"CompareTo(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[35792,35844],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;A signed number indicating the relative values of this instance and &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than &lt;em&gt;value&lt;/em&gt;.","pos":[35903,36140],"source":"\\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is equal to &lt;em&gt;value&lt;/em&gt;.","pos":[36141,36236],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than &lt;em&gt;value&lt;/em&gt;.","pos":[36237,36349],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[36350,36384],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[37045,37069],"content":"Divide(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Divide(Decimal, Decimal)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The dividend.","pos":[37869,37887],"source":"\\n<p>The dividend."},{"content":"&lt;/p&gt;\\n","pos":[37888,37894],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The divisor.","pos":[37956,37973],"source":"\\n<p>The divisor."},{"content":"&lt;/p&gt;\\n","pos":[37974,37980],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of dividing &lt;em&gt;d1&lt;/em&gt; by &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38041,38102],"source":"\\n<p>The result of dividing <em>d1</em> by <em>d2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d2&lt;/em&gt; is zero.","pos":[38221,38248],"source":"\\n<p>\\n<em>d2</em> is zero."},{"content":"&lt;/p&gt;\\n","pos":[38249,38255],"source":" </p>\\n"},{"pos":[39332,39347],"content":"Equals(Decimal)","needQuote":true,"nodes":[{"content":"Equals(Decimal)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An object to compare to this instance.&lt;/p&gt;\\n","pos":[40164,40213],"source":"\\n<p>An object to compare to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is equal to this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40274,40388],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[41151,41175],"content":"Equals(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Equals(Decimal, Decimal)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[42030,42062],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[42063,42069],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[42131,42164],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[42165,42171],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42232,42343],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[42911,42925],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.","pos":[43758,43804],"source":"\\n<p>The object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[43805,43811],"source":" </p>\\n"},{"pos":[44683,44697],"content":"Floor(Decimal)","needQuote":true,"nodes":[{"content":"Floor(Decimal)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to round.","pos":[45492,45516],"source":"\\n<p>The value to round."},{"content":"&lt;/p&gt;\\n","pos":[45517,45523],"source":" </p>\\n"},{"pos":[46773,46789],"content":"GetBits(Decimal)","needQuote":true,"nodes":[{"content":"GetBits(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[47526,47552],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[47553,47559],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer array with four elements that contain the binary representation of &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[47620,47733],"source":"\\n<p>A 32-bit signed integer array with four elements that contain the binary representation of <em>d</em>.</p>\\n"},{"pos":[48120,48133],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[48733,48778],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[49184,49210],"content":"Multiply(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Multiply(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The multiplicand.","pos":[50021,50043],"source":"\\n<p>The multiplicand."},{"content":"&lt;/p&gt;\\n","pos":[50044,50050],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The multiplier.","pos":[50112,50132],"source":"\\n<p>The multiplier."},{"content":"&lt;/p&gt;\\n","pos":[50133,50139],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of multiplying &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[50200,50265],"source":"\\n<p>The result of multiplying <em>d1</em> and <em>d2</em>.</p>\\n"},{"pos":[51330,51345],"content":"Negate(Decimal)","needQuote":true,"nodes":[{"content":"Negate(Decimal)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to negate.","pos":[52062,52087],"source":"\\n<p>The value to negate."},{"content":"&lt;/p&gt;\\n","pos":[52088,52094],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number with the value of &lt;em&gt;d&lt;/em&gt;, but the opposite sign.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;Zero, if &lt;em&gt;d&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[52155,52286],"source":"\\n<p>A decimal number with the value of <em>d</em>, but the opposite sign.</p>\\n<p>-or- </p>\\n<p>Zero, if <em>d</em> is zero.</p>\\n"},{"pos":[52655,52681],"content":"Addition(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Addition(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to add.","pos":[53487,53515],"source":"\\n<p>The first value to add."},{"content":"&lt;/p&gt;\\n","pos":[53516,53522],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to add.","pos":[53584,53613],"source":"\\n<p>The second value to add."},{"content":"&lt;/p&gt;\\n","pos":[53614,53620],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of adding &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[53681,53741],"source":"\\n<p>The result of adding <em>d1</em> and <em>d2</em>.</p>\\n"},{"pos":[54554,54572],"content":"Decrement(Decimal)","needQuote":true,"nodes":[{"content":"Decrement(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The value to decrement.","pos":[55244,55272],"source":"\\n<p>The value to decrement."},{"content":"&lt;/p&gt;\\n","pos":[55273,55279],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of &lt;em&gt;d&lt;/em&gt; decremented by 1.&lt;/p&gt;\\n","pos":[55340,55392],"source":"\\n<p>The value of <em>d</em> decremented by 1.</p>\\n"},{"pos":[56249,56275],"content":"Division(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Division(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The dividend.","pos":[57084,57102],"source":"\\n<p>The dividend."},{"content":"&lt;/p&gt;\\n","pos":[57103,57109],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The divisor.","pos":[57171,57188],"source":"\\n<p>The divisor."},{"content":"&lt;/p&gt;\\n","pos":[57189,57195],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of dividing &lt;em&gt;d1&lt;/em&gt; by &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[57256,57317],"source":"\\n<p>The result of dividing <em>d1</em> by <em>d2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d2&lt;/em&gt; is zero.","pos":[57436,57463],"source":"\\n<p>\\n<em>d2</em> is zero."},{"content":"&lt;/p&gt;\\n","pos":[57464,57470],"source":" </p>\\n"},{"pos":[58317,58343],"content":"Equality(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Equality(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[59181,59213],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[59214,59220],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[59282,59315],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[59316,59322],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59383,59494],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[60124,60149],"content":"Explicit(Decimal to Byte)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Byte)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[60913,60939],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[60940,60946],"source":" </p>\\n"},{"pos":[62072,62097],"content":"Explicit(Decimal to Char)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Char)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[62855,62881],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[62882,62888],"source":" </p>\\n"},{"pos":[64014,64041],"content":"Explicit(Decimal to Double)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Double)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[64826,64852],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[64853,64859],"source":" </p>\\n"},{"pos":[65686,65712],"content":"Explicit(Decimal to Int16)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Int16)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[66477,66503],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[66504,66510],"source":" </p>\\n"},{"pos":[67646,67672],"content":"Explicit(Decimal to Int32)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[68437,68463],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[68464,68470],"source":" </p>\\n"},{"pos":[69606,69632],"content":"Explicit(Decimal to Int64)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Int64)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[70395,70421],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[70422,70428],"source":" </p>\\n"},{"pos":[71564,71590],"content":"Explicit(Decimal to SByte)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to SByte)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[72431,72457],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[72458,72464],"source":" </p>\\n"},{"pos":[73778,73805],"content":"Explicit(Decimal to Single)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Single)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[74589,74615],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[74616,74622],"source":" </p>\\n"},{"pos":[75452,75479],"content":"Explicit(Decimal to UInt16)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to UInt16)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[76325,76351],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[76352,76358],"source":" </p>\\n"},{"pos":[77683,77710],"content":"Explicit(Decimal to UInt32)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to UInt32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[78556,78582],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[78583,78589],"source":" </p>\\n"},{"pos":[79830,79857],"content":"Explicit(Decimal to UInt64)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to UInt64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert.","pos":[80701,80727],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[80728,80734],"source":" </p>\\n"},{"pos":[81975,82002],"content":"Explicit(Double to Decimal)","needQuote":true,"nodes":[{"content":"Explicit(Double to Decimal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[82786,82845],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[82846,82852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted double-precision floating point number.&lt;/p&gt;\\n","pos":[82913,82977],"source":"\\n<p>The converted double-precision floating point number.</p>\\n"},{"pos":[84235,84262],"content":"Explicit(Single to Decimal)","needQuote":true,"nodes":[{"content":"Explicit(Single to Decimal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[85045,85104],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[85105,85111],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted single-precision floating point number.&lt;/p&gt;\\n","pos":[85172,85236],"source":"\\n<p>The converted single-precision floating point number.</p>\\n"},{"pos":[86506,86535],"content":"GreaterThan(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"GreaterThan(Decimal, Decimal)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[87472,87504],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[87505,87511],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[87573,87606],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[87607,87613],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is greater than &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[87674,87787],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> is greater than <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[88346,88382],"content":"GreaterThanOrEqual(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Decimal, Decimal)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[89349,89381],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[89382,89388],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[89450,89483],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[89484,89490],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is greater than or equal to &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[89551,89676],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> is greater than or equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[90203,90228],"content":"Implicit(Byte to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(Byte to Decimal)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[90987,91030],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[91031,91037],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 8-bit unsigned integer.&lt;/p&gt;\\n","pos":[91098,91146],"source":"\\n<p>The converted 8-bit unsigned integer.</p>\\n"},{"pos":[91738,91763],"content":"Implicit(Char to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(Char to Decimal)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[92517,92555],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[92556,92562],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted Unicode character.&lt;/p&gt;\\n","pos":[92623,92666],"source":"\\n<p>The converted Unicode character.</p>\\n"},{"pos":[93261,93287],"content":"Implicit(Int16 to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(Int16 to Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The16-bit signed integer to convert.","pos":[94048,94089],"source":"\\n<p>The16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[94090,94096],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 16-bit signed integer.&lt;/p&gt;\\n","pos":[94157,94204],"source":"\\n<p>The converted 16-bit signed integer.</p>\\n"},{"pos":[94805,94831],"content":"Implicit(Int32 to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(Int32 to Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[95593,95635],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[95636,95642],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 32-bit signed integer.&lt;/p&gt;\\n","pos":[95703,95750],"source":"\\n<p>The converted 32-bit signed integer.</p>\\n"},{"pos":[96351,96377],"content":"Implicit(Int64 to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(Int64 to Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[97137,97179],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[97180,97186],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 64-bit signed integer.&lt;/p&gt;\\n","pos":[97247,97294],"source":"\\n<p>The converted 64-bit signed integer.</p>\\n"},{"pos":[97895,97921],"content":"Implicit(SByte to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(SByte to Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[98758,98799],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[98800,98806],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 8-bit signed integer.&lt;/p&gt;\\n","pos":[98867,98913],"source":"\\n<p>The converted 8-bit signed integer.</p>\\n"},{"pos":[99692,99719],"content":"Implicit(UInt16 to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(UInt16 to Decimal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[100562,100606],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[100607,100613],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 16-bit unsigned integer.&lt;/p&gt;\\n","pos":[100674,100723],"source":"\\n<p>The converted 16-bit unsigned integer.</p>\\n"},{"pos":[101508,101535],"content":"Implicit(UInt32 to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(UInt32 to Decimal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[102379,102423],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[102424,102430],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 32-bit unsigned integer.&lt;/p&gt;\\n","pos":[102491,102540],"source":"\\n<p>The converted 32-bit unsigned integer.</p>\\n"},{"pos":[103325,103352],"content":"Implicit(UInt64 to Decimal)","needQuote":true,"nodes":[{"content":"Implicit(UInt64 to Decimal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[104194,104238],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[104239,104245],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The converted 64-bit unsigned integer.&lt;/p&gt;\\n","pos":[104306,104355],"source":"\\n<p>The converted 64-bit unsigned integer.</p>\\n"},{"pos":[105101,105119],"content":"Increment(Decimal)","needQuote":true,"nodes":[{"content":"Increment(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The value to increment.","pos":[105789,105817],"source":"\\n<p>The value to increment."},{"content":"&lt;/p&gt;\\n","pos":[105818,105824],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of &lt;em&gt;d&lt;/em&gt; incremented by 1.&lt;/p&gt;\\n","pos":[105885,105937],"source":"\\n<p>The value of <em>d</em> incremented by 1.</p>\\n"},{"pos":[106790,106818],"content":"Inequality(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Inequality(Decimal, Decimal)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[107674,107706],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[107707,107713],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[107775,107808],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[107809,107815],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107876,107991],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[108628,108654],"content":"LessThan(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"LessThan(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[109584,109616],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[109617,109623],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[109685,109718],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[109719,109725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is less than &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[109786,109896],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> is less than <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[110443,110476],"content":"LessThanOrEqual(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Decimal, Decimal)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The first value to compare.","pos":[111434,111466],"source":"\\n<p>The first value to compare."},{"content":"&lt;/p&gt;\\n","pos":[111467,111473],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.","pos":[111535,111568],"source":"\\n<p>The second value to compare."},{"content":"&lt;/p&gt;\\n","pos":[111569,111575],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is less than or equal to &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[111636,111758],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> is less than or equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[112288,112313],"content":"Modulus(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Modulus(Decimal, Decimal)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The dividend.","pos":[113082,113100],"source":"\\n<p>The dividend."},{"content":"&lt;/p&gt;\\n","pos":[113101,113107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The divisor.","pos":[113169,113186],"source":"\\n<p>The divisor."},{"content":"&lt;/p&gt;\\n","pos":[113187,113193],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The remainder resulting from dividing &lt;em&gt;d1&lt;/em&gt; by &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[113254,113330],"source":"\\n<p>The remainder resulting from dividing <em>d1</em> by <em>d2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d2&lt;/em&gt; is &lt;strong&gt;zero&lt;/strong&gt;.","pos":[113449,113493],"source":"\\n<p>\\n<em>d2</em> is <strong>zero</strong>."},{"content":"&lt;/p&gt;\\n","pos":[113494,113500],"source":" </p>\\n"},{"pos":[114352,114378],"content":"Multiply(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Multiply(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to multiply.","pos":[115190,115223],"source":"\\n<p>The first value to multiply."},{"content":"&lt;/p&gt;\\n","pos":[115224,115230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second value to multiply.","pos":[115292,115326],"source":"\\n<p>The second value to multiply."},{"content":"&lt;/p&gt;\\n","pos":[115327,115333],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of multiplying &lt;em&gt;d1&lt;/em&gt; by &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[115394,115458],"source":"\\n<p>The result of multiplying <em>d1</em> by <em>d2</em>.</p>\\n"},{"pos":[116332,116361],"content":"Subtraction(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Subtraction(Decimal, Decimal)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The minuend.","pos":[117178,117195],"source":"\\n<p>The minuend."},{"content":"&lt;/p&gt;\\n","pos":[117196,117202],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The subtrahend.","pos":[117264,117284],"source":"\\n<p>The subtrahend."},{"content":"&lt;/p&gt;\\n","pos":[117285,117291],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of subtracting &lt;em&gt;d2&lt;/em&gt; from &lt;em&gt;d1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[117352,117418],"source":"\\n<p>The result of subtracting <em>d2</em> from <em>d1</em>.</p>\\n"},{"pos":[118256,118278],"content":"UnaryNegation(Decimal)","needQuote":true,"nodes":[{"content":"UnaryNegation(Decimal)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The value to negate.","pos":[118987,119012],"source":"\\n<p>The value to negate."},{"content":"&lt;/p&gt;\\n","pos":[119013,119019],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of &lt;em&gt;d&lt;/em&gt; multiplied by negative one (-1).&lt;/p&gt;\\n","pos":[119080,119148],"source":"\\n<p>The result of <em>d</em> multiplied by negative one (-1).</p>\\n"},{"pos":[119596,119614],"content":"UnaryPlus(Decimal)","needQuote":true,"nodes":[{"content":"UnaryPlus(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The operand to return.&lt;/p&gt;\\n","pos":[120344,120377],"source":"\\n<p>The operand to return.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the operand, &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[120438,120486],"source":"\\n<p>The value of the operand, <em>d</em>.</p>\\n"},{"pos":[120792,120805],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The string representation of the number to convert.&lt;/p&gt;\\n","pos":[121509,121571],"source":"\\n<p>The string representation of the number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The equivalent to the number contained in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121632,121696],"source":"\\n<p>The equivalent to the number contained in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[121815,121858],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[121859,121865],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[121958,122005],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[122006,122012],"source":" </p>\\n"},{"pos":[122974,123001],"content":"Parse(String, NumberStyles)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The string representation of the number to convert.","pos":[123804,123860],"source":"\\n<p>The string representation of the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[123861,123867],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[124645,124694],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[125186,125233],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[125234,125240],"source":" </p>\\n"},{"pos":[126283,126327],"content":"Parse(String, NumberStyles, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles, IFormatProvider)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The string representation of the number to convert.","pos":[127242,127298],"source":"\\n<p>The string representation of the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[127299,127305],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not in the correct format.","pos":[128348,128395],"source":"\\n<p>\\n<em>s</em> is not in the correct format."},{"content":"&lt;/p&gt;\\n","pos":[128396,128402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[128843,128892],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n"},{"pos":[129915,129945],"content":"Parse(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The string representation of the number to convert.","pos":[130784,130840],"source":"\\n<p>The string representation of the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[130841,130847],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[131449,131492],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[131493,131499],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not of the correct format &lt;/p&gt;\\n","pos":[131592,131645],"source":"\\n<p>\\n<em>s</em> is not of the correct format </p>\\n"},{"pos":[132580,132607],"content":"Remainder(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Remainder(Decimal, Decimal)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The dividend.","pos":[133361,133379],"source":"\\n<p>The dividend."},{"content":"&lt;/p&gt;\\n","pos":[133380,133386],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The divisor.","pos":[133448,133465],"source":"\\n<p>The divisor."},{"content":"&lt;/p&gt;\\n","pos":[133466,133472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The remainder after dividing &lt;em&gt;d1&lt;/em&gt; by &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[133533,133600],"source":"\\n<p>The remainder after dividing <em>d1</em> by <em>d2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d2&lt;/em&gt; is zero.","pos":[133719,133746],"source":"\\n<p>\\n<em>d2</em> is zero."},{"content":"&lt;/p&gt;\\n","pos":[133747,133753],"source":" </p>\\n"},{"pos":[134448,134474],"content":"Subtract(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Subtract(Decimal, Decimal)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The minuend.","pos":[135296,135313],"source":"\\n<p>The minuend."},{"content":"&lt;/p&gt;\\n","pos":[135314,135320],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The subtrahend.","pos":[135382,135402],"source":"\\n<p>The subtrahend."},{"content":"&lt;/p&gt;\\n","pos":[135403,135409],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of subtracting &lt;em&gt;d2&lt;/em&gt; from &lt;em&gt;d1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[135470,135536],"source":"\\n<p>The result of subtracting <em>d2</em> from <em>d1</em>.</p>\\n"},{"pos":[136678,136707],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[137828,137854],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[138944,138983],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.","pos":[139849,139880],"source":"\\n<p>This parameter is ignored."},{"content":"&lt;/p&gt;\\n","pos":[139881,139887],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of the current instance is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[139948,140067],"source":"\\n<p>\\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[140622,140658],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[141503,141540],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[142616,142652],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[143510,143547],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;None.","pos":[143605,143615],"source":"\\n<p>None."},{"content":"This conversion is not supported.","pos":[143616,143649]},{"content":"&lt;/p&gt;\\n","pos":[143650,143656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[143773,143791],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[143792,143798],"source":" </p>\\n"},{"pos":[144353,144393],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[145275,145312],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;None.","pos":[145374,145384],"source":"\\n<p>None."},{"content":"This conversion is not supported.","pos":[145385,145418]},{"content":"&lt;/p&gt;\\n","pos":[145419,145425],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[145542,145566],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[146134,146173],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[147042,147079],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the current instance, unchanged.&lt;/p&gt;\\n","pos":[147140,147196],"source":"\\n<p>The value of the current instance, unchanged.</p>\\n"},{"pos":[147757,147795],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[148656,148693],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[149442,149479],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[150332,150369],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[151455,151492],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The parameter is ignored.&lt;/p&gt;\\n","pos":[152345,152381],"source":"\\n<p>The parameter is ignored.</p>\\n"},{"pos":[153467,153504],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[154355,154392],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[155479,155516],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[156369,156406],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[157496,157534],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[158394,158431],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[159213,159255],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The value of the current instance, converted to a &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n","pos":[160612,160687],"source":"\\n<p>The value of the current instance, converted to a <em>type</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[160806,160852],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[160853,160859],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The requested type conversion is not supported.","pos":[160962,161014],"source":"\\n<p>The requested type conversion is not supported."},{"content":"&lt;/p&gt;\\n","pos":[161015,161021],"source":" </p>\\n"},{"pos":[161600,161638],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[162499,162536],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[163633,163671],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[164531,164568],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[165665,165703],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[166561,166598],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[167591,167606],"content":"ToByte(Decimal)","needQuote":true,"nodes":[{"content":"ToByte(Decimal)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[168336,168371],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[168372,168378],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[168436,168502],"source":"\\n<p>An 8-bit unsigned integer equivalent to <em>value</em>.</p>\\n"},{"pos":[169210,169227],"content":"ToDouble(Decimal)","needQuote":true,"nodes":[{"content":"ToDouble(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[169998,170033],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[170034,170040],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number equivalent to &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[170100,170177],"source":"\\n<p>A double-precision floating-point number equivalent to <em>d</em>.</p>\\n"},{"pos":[170557,170573],"content":"ToInt16(Decimal)","needQuote":true,"nodes":[{"content":"ToInt16(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[171308,171343],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[171344,171350],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[171409,171473],"source":"\\n<p>A 16-bit signed integer equivalent to <em>value</em>.</p>\\n"},{"pos":[172183,172199],"content":"ToInt32(Decimal)","needQuote":true,"nodes":[{"content":"ToInt32(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[173000,173035],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[173036,173042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer equivalent to the value of &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[173101,173174],"source":"\\n<p>A 32-bit signed integer equivalent to the value of <em>d</em>.</p>\\n"},{"pos":[173880,173896],"content":"ToInt64(Decimal)","needQuote":true,"nodes":[{"content":"ToInt64(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[174695,174730],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[174731,174737],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer equivalent to the value of &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[174796,174869],"source":"\\n<p>A 64-bit signed integer equivalent to the value of <em>d</em>.</p>\\n"},{"pos":[175575,175591],"content":"ToSByte(Decimal)","needQuote":true,"nodes":[{"content":"ToSByte(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[176401,176436],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[176437,176443],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176502,176566],"source":"\\n<p>An 8-bit signed integer equivalent to <em>value</em>.</p>\\n"},{"pos":[177454,177471],"content":"ToSingle(Decimal)","needQuote":true,"nodes":[{"content":"ToSingle(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[178241,178276],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[178277,178283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number equivalent to the value of &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[178343,178433],"source":"\\n<p>A single-precision floating-point number equivalent to the value of <em>d</em>.</p>\\n"},{"pos":[178768,178778],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string that represents the value of this instance.&lt;/p&gt;\\n","pos":[179469,179532],"source":"\\n<p>A string that represents the value of this instance.</p>\\n"},{"pos":[180021,180046],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[180881,180950],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[180951,180957],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[181017,181118],"source":"\\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\\n"},{"pos":[181599,181615],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string (see Remarks).&lt;/p&gt;\\n","pos":[182380,182448],"source":"\\n<p>A standard or custom numeric format string (see Remarks).</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt;.&lt;/p&gt;\\n","pos":[182508,182607],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[182714,182748],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[182749,182755],"source":" </p>\\n"},{"pos":[183225,183258],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A numeric format string (see Remarks).&lt;/p&gt;\\n","pos":[184141,184190],"source":"\\n<p>A numeric format string (see Remarks).</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[184266,184335],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[184336,184342],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[184402,184523],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[184630,184664],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[184665,184671],"source":" </p>\\n"},{"pos":[185177,185194],"content":"ToUInt16(Decimal)","needQuote":true,"nodes":[{"content":"ToUInt16(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[186013,186048],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[186049,186055],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer equivalent to the value of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[186115,186194],"source":"\\n<p>A 16-bit unsigned integer equivalent to the value of <em>value</em>.</p>\\n"},{"pos":[187087,187104],"content":"ToUInt32(Decimal)","needQuote":true,"nodes":[{"content":"ToUInt32(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[187971,188006],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[188007,188013],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer equivalent to the value of &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[188073,188148],"source":"\\n<p>A 32-bit unsigned integer equivalent to the value of <em>d</em>.</p>\\n"},{"pos":[188953,188970],"content":"ToUInt64(Decimal)","needQuote":true,"nodes":[{"content":"ToUInt64(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[189835,189870],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[189871,189877],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer equivalent to the value of &lt;em&gt;d&lt;/em&gt;.&lt;/p&gt;\\n","pos":[189937,190012],"source":"\\n<p>A 64-bit unsigned integer equivalent to the value of <em>d</em>.</p>\\n"},{"pos":[190817,190834],"content":"Truncate(Decimal)","needQuote":true,"nodes":[{"content":"Truncate(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to truncate.","pos":[191649,191685],"source":"\\n<p>The decimal number to truncate."},{"content":"&lt;/p&gt;\\n","pos":[191686,191692],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of &lt;em&gt;d&lt;/em&gt; rounded toward zero, to the nearest whole number.&lt;/p&gt;\\n","pos":[191753,191838],"source":"\\n<p>The result of <em>d</em> rounded toward zero, to the nearest whole number.</p>\\n"},{"pos":[192439,192468],"content":"TryParse(String, out Decimal)","needQuote":true,"nodes":[{"content":"TryParse(String, out Decimal)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The string representation of the number to convert.&lt;/p&gt;\\n","pos":[193315,193377],"source":"\\n<p>The string representation of the number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[194289,194400],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[195308,195368],"content":"TryParse(String, NumberStyles, IFormatProvider, out Decimal)","needQuote":true,"nodes":[{"content":"TryParse(String, NumberStyles, IFormatProvider, out Decimal)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The string representation of the number to convert.&lt;/p&gt;\\n","pos":[196426,196488],"source":"\\n<p>The string representation of the number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific parsing information about &lt;em&gt;s&lt;/em&gt;.","pos":[196885,196968],"source":"\\n<p>An object that supplies culture-specific parsing information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[196969,196975],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[197902,198013],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[199131,199137],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[199273,199284],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[199480,199500],"content":"IComparable<Decimal>","needQuote":true,"nodes":[{"content":"IComparable&lt;Decimal&gt;","pos":[0,20],"source":"IComparable<Decimal>"}]},{"pos":[199691,199702],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[199746,199747],"content":"<","needQuote":true,"nodes":[]},{"pos":[199798,199805],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[199939,199950],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[199995,199998]},{"pos":[200056,200063],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[200124,200125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[200344,200356],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[200553,200572],"content":"IEquatable<Decimal>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Decimal&gt;","pos":[0,19],"source":"IEquatable<Decimal>"}]},{"pos":[200759,200769],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[200812,200813],"content":"<","needQuote":true,"nodes":[]},{"pos":[200864,200871],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[201004,201014],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[201058,201061]},{"pos":[201119,201126],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[201187,201188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[201404,201416],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[201621,201643],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[201791,201797],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[201864,201865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[201915,201921],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[201982,201983]},{"pos":[202038,202044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[202104,202105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202202,202208],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[202275,202276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[202326,202332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[202393,202394]},{"pos":[202449,202455],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[202515,202516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202761,202792],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[202958,202973],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[203049,203050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[203100,203106],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[203167,203168]},{"pos":[203223,203229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[203289,203290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[203396,203411],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[203487,203488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[203538,203544],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[203605,203606]},{"pos":[203661,203667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[203727,203728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[203954,203963],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[204056,204063],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[204131,204132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[204159,204160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[204229,204236],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[204304,204305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[204332,204333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[204476,204490],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[204649,204660],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[204704,204705],"content":"<","needQuote":true,"nodes":[]},{"pos":[204732,204733],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[204833,204844],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[204889,204892]},{"pos":[204926,204927],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[204954,204955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[205131,205144],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[205299,205309],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[205352,205353],"content":"<","needQuote":true,"nodes":[]},{"pos":[205380,205381],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[205480,205490],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[205534,205537]},{"pos":[205571,205572],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[205599,205600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[205784,205790],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[205936,205943],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[206091,206097],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[206241,206246],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[206389,206396],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[206542,206546],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[206649,206656],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[206780,206785],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[206845,206847]},{"pos":[206911,206916],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[206975,206977],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[207111,207116],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[207258,207264],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[207409,207415],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[207560,207566],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[207815,207833],"content":"CompareTo(Decimal)","needQuote":true,"nodes":[{"content":"CompareTo(Decimal)","pos":[0,18]}]},{"pos":[208055,208064],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[208134,208135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[208186,208193],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[208254,208255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[208337,208346],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[208419,208420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[208471,208478],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[208539,208540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[208821,208833],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[209003,209012],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[209069,209070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[209097,209098],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[209125,209126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[209208,209217],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[209277,209278],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[209305,209306],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[209333,209334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[209656,209671],"content":"Equals(Decimal)","needQuote":true,"nodes":[{"content":"Equals(Decimal)","pos":[0,15]}]},{"pos":[209881,209887],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[209953,209954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[210005,210012],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[210073,210074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[210152,210158],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[210227,210228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[210279,210286],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[210347,210348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[210613,210622],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[210780,210786],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[210839,210840],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[210867,210868],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[210895,210896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[210974,210980],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[211036,211037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[211064,211065],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[211092,211093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[211342,211356],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[211481,211487],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[211536,211537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[211587,211593],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[211653,211654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[211740,211746],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[211795,211796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[211846,211852],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[211912,211913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212094,212103],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[212282,212295],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[212402,212413],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[212467,212468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[212495,212496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212572,212583],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[212637,212638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[212665,212666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212831,212835],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[212973,212978],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[213119,213124],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[213266,213272],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[213417,213423],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[213602,213614],"content":"NumberStyles","needQuote":true,"nodes":[{"content":"NumberStyles","pos":[0,12]}]},{"pos":[213795,213815],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[213997,214012],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[214225,214242],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[214377,214386],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[214440,214441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[214491,214497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[214557,214558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[214649,214658],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[214712,214713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[214763,214769],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[214829,214830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215049,215062],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[215175,215186],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[215243,215244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215271,215272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215351,215362],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[215419,215420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215447,215448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215623,215631],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[215835,215861],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[216016,216025],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[216080,216081],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216140,216155],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[216203,216204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216305,216314],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[216369,216370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216429,216444],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[216492,216493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216751,216774],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[216923,216929],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[216981,216982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217041,217056],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[217104,217105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[217203,217209],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[217261,217262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217321,217336],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[217384,217385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[217637,217660],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[217809,217815],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[217867,217868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217927,217942],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[217990,217991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[218089,218095],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[218147,218148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[218207,218222],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[218270,218271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[218527,218554],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[218711,218721],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[218777,218778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[218837,218852],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[218900,218901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[219003,219013],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[219069,219070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[219129,219144],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[219192,219193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[219405,219413],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[219617,219643],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[219798,219807],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[219862,219863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[219922,219937],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[219985,219986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220087,220096],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[220151,220152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[220211,220226],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[220274,220275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220535,220560],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[220713,220721],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[220775,220776],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[220835,220850],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[220898,220899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220999,221007],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[221061,221062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[221121,221136],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[221184,221185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[221442,221466],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[221617,221624],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[221677,221678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[221737,221752],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[221800,221801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[221900,221907],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[221960,221961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[222020,222035],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[222083,222084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222339,222363],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[222514,222521],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[222574,222575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[222634,222649],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[222697,222698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222797,222804],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[222857,222858],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[222917,222932],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[222980,222981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[223236,223260],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[223411,223418],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[223471,223472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[223531,223546],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[223594,223595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[223694,223701],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[223754,223755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[223814,223829],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[223877,223878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[224133,224157],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[224308,224315],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[224368,224369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[224428,224443],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[224491,224492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[224591,224598],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[224651,224652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[224711,224726],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[224774,224775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[225031,225056],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[225209,225217],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[225271,225272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[225331,225346],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[225394,225395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[225495,225503],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[225557,225558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[225617,225632],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[225680,225681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[225949,225978],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[226152,226158],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[226210,226211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[226259,226263],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[226301,226302]},{"pos":[226366,226381],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[226429,226430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[226540,226546],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[226598,226599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[226647,226651],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[226689,226690]},{"pos":[226754,226769],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[226817,226818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[227036,227040],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[227231,227256],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[227409,227417],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[227471,227472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[227531,227546],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[227594,227595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[227695,227703],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[227757,227758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[227817,227832],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[227880,227881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[228139,228164],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[228317,228325],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[228379,228380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[228439,228454],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[228502,228503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[228603,228611],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[228665,228666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[228725,228740],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[228788,228789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229047,229072],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[229225,229233],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[229287,229288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229347,229362],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[229410,229411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229511,229519],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[229573,229574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229633,229648],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[229696,229697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229925,229935],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[230036,230044],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[230095,230096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230123,230124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230197,230205],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[230256,230257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230284,230285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230498,230523],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[230676,230684],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[230738,230739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230798,230813],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[230861,230862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230962,230970],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[231024,231025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[231084,231099],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[231147,231148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[231419,231452],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[231634,231642],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[231696,231697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[231747,231753],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[231814,231815]},{"pos":[231879,231894],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[231942,231943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[232057,232065],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[232119,232120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[232170,232176],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[232237,232238]},{"pos":[232302,232317],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[232365,232366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[232588,232605],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[232787,232814],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[233020,233041],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[233242,233259],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[233435,233456],"content":"DivideByZeroException","needQuote":true,"nodes":[{"content":"DivideByZeroException","pos":[0,21]}]},{"pos":[233655,233670],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[233839,233859],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Decimal\n  commentId: T:System.Decimal\n  id: Decimal\n  parent: System\n  children:\n  - System.Decimal.#ctor(System.Double)\n  - System.Decimal.#ctor(System.Int32)\n  - System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)\n  - System.Decimal.#ctor(System.Int32[])\n  - System.Decimal.#ctor(System.Int64)\n  - System.Decimal.#ctor(System.Single)\n  - System.Decimal.#ctor(System.UInt32)\n  - System.Decimal.#ctor(System.UInt64)\n  - System.Decimal.Add(System.Decimal,System.Decimal)\n  - System.Decimal.Ceiling(System.Decimal)\n  - System.Decimal.Compare(System.Decimal,System.Decimal)\n  - System.Decimal.CompareTo(System.Decimal)\n  - System.Decimal.Divide(System.Decimal,System.Decimal)\n  - System.Decimal.Equals(System.Decimal)\n  - System.Decimal.Equals(System.Decimal,System.Decimal)\n  - System.Decimal.Equals(System.Object)\n  - System.Decimal.Floor(System.Decimal)\n  - System.Decimal.GetBits(System.Decimal)\n  - System.Decimal.GetHashCode\n  - System.Decimal.MaxValue\n  - System.Decimal.MinusOne\n  - System.Decimal.MinValue\n  - System.Decimal.Multiply(System.Decimal,System.Decimal)\n  - System.Decimal.Negate(System.Decimal)\n  - System.Decimal.One\n  - System.Decimal.op_Addition(System.Decimal,System.Decimal)\n  - System.Decimal.op_Decrement(System.Decimal)\n  - System.Decimal.op_Division(System.Decimal,System.Decimal)\n  - System.Decimal.op_Equality(System.Decimal,System.Decimal)\n  - System.Decimal.op_Explicit(System.Decimal)~System.Byte\n  - System.Decimal.op_Explicit(System.Decimal)~System.Char\n  - System.Decimal.op_Explicit(System.Decimal)~System.Double\n  - System.Decimal.op_Explicit(System.Decimal)~System.Int16\n  - System.Decimal.op_Explicit(System.Decimal)~System.Int32\n  - System.Decimal.op_Explicit(System.Decimal)~System.Int64\n  - System.Decimal.op_Explicit(System.Decimal)~System.SByte\n  - System.Decimal.op_Explicit(System.Decimal)~System.Single\n  - System.Decimal.op_Explicit(System.Decimal)~System.UInt16\n  - System.Decimal.op_Explicit(System.Decimal)~System.UInt32\n  - System.Decimal.op_Explicit(System.Decimal)~System.UInt64\n  - System.Decimal.op_Explicit(System.Double)~System.Decimal\n  - System.Decimal.op_Explicit(System.Single)~System.Decimal\n  - System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)\n  - System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)\n  - System.Decimal.op_Implicit(System.Byte)~System.Decimal\n  - System.Decimal.op_Implicit(System.Char)~System.Decimal\n  - System.Decimal.op_Implicit(System.Int16)~System.Decimal\n  - System.Decimal.op_Implicit(System.Int32)~System.Decimal\n  - System.Decimal.op_Implicit(System.Int64)~System.Decimal\n  - System.Decimal.op_Implicit(System.SByte)~System.Decimal\n  - System.Decimal.op_Implicit(System.UInt16)~System.Decimal\n  - System.Decimal.op_Implicit(System.UInt32)~System.Decimal\n  - System.Decimal.op_Implicit(System.UInt64)~System.Decimal\n  - System.Decimal.op_Increment(System.Decimal)\n  - System.Decimal.op_Inequality(System.Decimal,System.Decimal)\n  - System.Decimal.op_LessThan(System.Decimal,System.Decimal)\n  - System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)\n  - System.Decimal.op_Modulus(System.Decimal,System.Decimal)\n  - System.Decimal.op_Multiply(System.Decimal,System.Decimal)\n  - System.Decimal.op_Subtraction(System.Decimal,System.Decimal)\n  - System.Decimal.op_UnaryNegation(System.Decimal)\n  - System.Decimal.op_UnaryPlus(System.Decimal)\n  - System.Decimal.Parse(System.String)\n  - System.Decimal.Parse(System.String,System.Globalization.NumberStyles)\n  - System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  - System.Decimal.Parse(System.String,System.IFormatProvider)\n  - System.Decimal.Remainder(System.Decimal,System.Decimal)\n  - System.Decimal.Subtract(System.Decimal,System.Decimal)\n  - System.Decimal.System#IComparable#CompareTo(System.Object)\n  - System.Decimal.System#IConvertible#GetTypeCode\n  - System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.Decimal.ToByte(System.Decimal)\n  - System.Decimal.ToDouble(System.Decimal)\n  - System.Decimal.ToInt16(System.Decimal)\n  - System.Decimal.ToInt32(System.Decimal)\n  - System.Decimal.ToInt64(System.Decimal)\n  - System.Decimal.ToSByte(System.Decimal)\n  - System.Decimal.ToSingle(System.Decimal)\n  - System.Decimal.ToString\n  - System.Decimal.ToString(System.IFormatProvider)\n  - System.Decimal.ToString(System.String)\n  - System.Decimal.ToString(System.String,System.IFormatProvider)\n  - System.Decimal.ToUInt16(System.Decimal)\n  - System.Decimal.ToUInt32(System.Decimal)\n  - System.Decimal.ToUInt64(System.Decimal)\n  - System.Decimal.Truncate(System.Decimal)\n  - System.Decimal.TryParse(System.String,System.Decimal@)\n  - System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\n  - System.Decimal.Zero\n  langs:\n  - csharp\n  - vb\n  name: Decimal\n  fullName: System.Decimal\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Decimal\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 57\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a decimal number.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      [Serializable]\n\n      [ComVisible(true)]\n\n      [NonVersionable]\n\n      public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<decimal>, IEquatable<decimal>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      <Serializable>\n\n      <ComVisible(True)>\n\n      <NonVersionable>\n\n      Public Structure Decimal\n          Implements IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable(Of Decimal), IEquatable(Of Decimal)\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  - type: System.Int16\n    commentId: T:System.Int16\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Int64\n    commentId: T:System.Int64\n  - type: System.Byte\n    commentId: T:System.Byte\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Char\n    commentId: T:System.Char\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Decimal}\n  - System.IConvertible\n  - System.IEquatable{System.Decimal}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Decimal\n- uid: System.Decimal.MaxValue\n  commentId: F:System.Decimal.MaxValue\n  id: MaxValue\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Decimal.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxValue\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 110\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the largest possible value of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant and read-only.</p>\\n\"\n  syntax:\n    content: public const decimal MaxValue = 79228162514264337593543950335M\n    content.vb: Public Const MaxValue As Decimal = 79228162514264337593543950335D\n    return:\n      type: System.Decimal\n  seealso:\n  - type: System.Decimal.Zero\n    commentId: F:System.Decimal.Zero\n  - type: System.Decimal.One\n    commentId: F:System.Decimal.One\n  - type: System.Decimal.MinusOne\n    commentId: F:System.Decimal.MinusOne\n  - type: System.Decimal.MinValue\n    commentId: F:System.Decimal.MinValue\n  attributes:\n  - type: System.Runtime.CompilerServices.DecimalConstantAttribute\n    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)\n    arguments:\n    - type: System.Byte\n      value: 0\n    - type: System.Byte\n      value: 0\n    - type: System.UInt32\n      value: \"4294967295\"\n    - type: System.UInt32\n      value: \"4294967295\"\n    - type: System.UInt32\n      value: \"4294967295\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Decimal.MaxValue\n- uid: System.Decimal.MinusOne\n  commentId: F:System.Decimal.MinusOne\n  id: MinusOne\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: MinusOne\n  fullName: System.Decimal.MinusOne\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinusOne\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 106\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the number negative one (-1).</p>\\n\"\n  syntax:\n    content: public const decimal MinusOne = -1M\n    content.vb: Public Const MinusOne As Decimal = -1D\n    return:\n      type: System.Decimal\n  seealso:\n  - type: System.Decimal.Zero\n    commentId: F:System.Decimal.Zero\n  - type: System.Decimal.One\n    commentId: F:System.Decimal.One\n  - type: System.Decimal.MaxValue\n    commentId: F:System.Decimal.MaxValue\n  - type: System.Decimal.MinValue\n    commentId: F:System.Decimal.MinValue\n  attributes:\n  - type: System.Runtime.CompilerServices.DecimalConstantAttribute\n    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)\n    arguments:\n    - type: System.Byte\n      value: 0\n    - type: System.Byte\n      value: 128\n    - type: System.UInt32\n      value: \"0\"\n    - type: System.UInt32\n      value: \"0\"\n    - type: System.UInt32\n      value: \"1\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Decimal.MinusOne\n- uid: System.Decimal.MinValue\n  commentId: F:System.Decimal.MinValue\n  id: MinValue\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Decimal.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinValue\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 114\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest possible value of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant and read-only.</p>\\n\"\n  syntax:\n    content: public const decimal MinValue = -79228162514264337593543950335M\n    content.vb: Public Const MinValue As Decimal = -79228162514264337593543950335D\n    return:\n      type: System.Decimal\n  seealso:\n  - type: System.Decimal.Zero\n    commentId: F:System.Decimal.Zero\n  - type: System.Decimal.One\n    commentId: F:System.Decimal.One\n  - type: System.Decimal.MinusOne\n    commentId: F:System.Decimal.MinusOne\n  - type: System.Decimal.MaxValue\n    commentId: F:System.Decimal.MaxValue\n  attributes:\n  - type: System.Runtime.CompilerServices.DecimalConstantAttribute\n    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)\n    arguments:\n    - type: System.Byte\n      value: 0\n    - type: System.Byte\n      value: 128\n    - type: System.UInt32\n      value: \"4294967295\"\n    - type: System.UInt32\n      value: \"4294967295\"\n    - type: System.UInt32\n      value: \"4294967295\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Decimal.MinValue\n- uid: System.Decimal.One\n  commentId: F:System.Decimal.One\n  id: One\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: One\n  fullName: System.Decimal.One\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: One\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the number one (1).</p>\\n\"\n  syntax:\n    content: public const decimal One = 1M\n    content.vb: Public Const One As Decimal = 1D\n    return:\n      type: System.Decimal\n  seealso:\n  - type: System.Decimal.Zero\n    commentId: F:System.Decimal.Zero\n  - type: System.Decimal.MinusOne\n    commentId: F:System.Decimal.MinusOne\n  - type: System.Decimal.MaxValue\n    commentId: F:System.Decimal.MaxValue\n  - type: System.Decimal.MinValue\n    commentId: F:System.Decimal.MinValue\n  attributes:\n  - type: System.Runtime.CompilerServices.DecimalConstantAttribute\n    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)\n    arguments:\n    - type: System.Byte\n      value: 0\n    - type: System.Byte\n      value: 0\n    - type: System.UInt32\n      value: \"0\"\n    - type: System.UInt32\n      value: \"0\"\n    - type: System.UInt32\n      value: \"1\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Decimal.One\n- uid: System.Decimal.Zero\n  commentId: F:System.Decimal.Zero\n  id: Zero\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Decimal.Zero\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Zero\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 100\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the number zero (0).</p>\\n\"\n  syntax:\n    content: public const decimal Zero = 0M\n    content.vb: Public Const Zero As Decimal = 0D\n    return:\n      type: System.Decimal\n  seealso:\n  - type: System.Decimal.One\n    commentId: F:System.Decimal.One\n  - type: System.Decimal.MinusOne\n    commentId: F:System.Decimal.MinusOne\n  - type: System.Decimal.MaxValue\n    commentId: F:System.Decimal.MaxValue\n  - type: System.Decimal.MinValue\n    commentId: F:System.Decimal.MinValue\n  attributes:\n  - type: System.Runtime.CompilerServices.DecimalConstantAttribute\n    ctor: System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)\n    arguments:\n    - type: System.Byte\n      value: 0\n    - type: System.Byte\n      value: 0\n    - type: System.UInt32\n      value: \"0\"\n    - type: System.UInt32\n      value: \"0\"\n    - type: System.UInt32\n      value: \"0\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Decimal.Zero\n- uid: System.Decimal.#ctor(System.Double)\n  commentId: M:System.Decimal.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(Double)\n  fullName: System.Decimal.Decimal(System.Double)\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of the specified double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public Decimal(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to represent as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(Double)\n- uid: System.Decimal.#ctor(System.Int32)\n  commentId: M:System.Decimal.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(Int32)\n  fullName: System.Decimal.Decimal(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 152\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of the specified 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public Decimal(int value)\n    content.vb: Public Sub New(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to represent as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(Int32)\n- uid: System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)\n  commentId: M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(Int32, Int32, Int32, Boolean, Byte)\n  fullName: System.Decimal.Decimal(System.Int32, System.Int32, System.Int32, System.Boolean, System.Byte)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 283\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from parameters specifying the instance's constituent parts.</p>\\n\"\n  syntax:\n    content: public Decimal(int lo, int mid, int hi, bool isNegative, byte scale)\n    content.vb: Public Sub New(lo As Integer, mid As Integer, hi As Integer, isNegative As Boolean, scale As Byte)\n    parameters:\n    - id: lo\n      type: System.Int32\n      description: \"\\n<p>The low 32 bits of a 96-bit integer. </p>\\n\"\n    - id: mid\n      type: System.Int32\n      description: \"\\n<p>The middle 32 bits of a 96-bit integer. </p>\\n\"\n    - id: hi\n      type: System.Int32\n      description: \"\\n<p>The high 32 bits of a 96-bit integer. </p>\\n\"\n    - id: isNegative\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate a negative number; <strong>false</strong> to indicate a positive number. </p>\\n\"\n    - id: scale\n      type: System.Byte\n      description: \"\\n<p>A power of 10 ranging from 0 to 28. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>scale</em> is greater than 28. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(Int32, Int32, Int32, Boolean, Byte)\n- uid: System.Decimal.#ctor(System.Int32[])\n  commentId: M:System.Decimal.#ctor(System.Int32[])\n  id: '#ctor(System.Int32[])'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(Int32[])\n  fullName: System.Decimal.Decimal(System.Int32[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 256\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a decimal value represented in binary and contained in a specified array.</p>\\n\"\n  syntax:\n    content: public Decimal(int[] bits)\n    content.vb: Public Sub New(bits As Integer())\n    parameters:\n    - id: bits\n      type: System.Int32[]\n      description: \"\\n<p>An array of 32-bit signed integers containing a representation of a decimal value. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bits</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of the <em>bits</em> is not 4.</p>\\n<p>-or- </p>\\n<p>The representation of the decimal value in <em>bits</em> is not valid. </p>\\n\"\n  seealso:\n  - type: System.Decimal.GetBits(System.Decimal)\n    commentId: M:System.Decimal.GetBits(System.Decimal)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Decimal.Decimal(System.Int32())\n  name.vb: Decimal(Int32())\n  nameWithType: Decimal.Decimal(Int32[])\n  nameWithType.vb: Decimal.Decimal(Int32())\n- uid: System.Decimal.#ctor(System.Int64)\n  commentId: M:System.Decimal.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(Int64)\n  fullName: System.Decimal.Decimal(System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 180\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of the specified 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public Decimal(long value)\n    content.vb: Public Sub New(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to represent as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(Int64)\n- uid: System.Decimal.#ctor(System.Single)\n  commentId: M:System.Decimal.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(Single)\n  fullName: System.Decimal.Decimal(System.Single)\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of the specified single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public Decimal(float value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to represent as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(Single)\n- uid: System.Decimal.#ctor(System.UInt32)\n  commentId: M:System.Decimal.#ctor(System.UInt32)\n  id: '#ctor(System.UInt32)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(UInt32)\n  fullName: System.Decimal.Decimal(System.UInt32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 170\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of the specified 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public Decimal(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(value As UInteger)\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to represent as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(UInt32)\n- uid: System.Decimal.#ctor(System.UInt64)\n  commentId: M:System.Decimal.#ctor(System.UInt64)\n  id: '#ctor(System.UInt64)'\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decimal(UInt64)\n  fullName: System.Decimal.Decimal(System.UInt64)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 198\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of the specified 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public Decimal(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(value As ULong)\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to represent as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Decimal(UInt64)\n- uid: System.Decimal.Add(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)\n  id: Add(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Add(Decimal, Decimal)\n  fullName: System.Decimal.Add(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 339\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal Add(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Add(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to add. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to add. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of <em>d1</em> and <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of <em>d1</em> and <em>d2</em> is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)\n  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)\n  - type: System.Decimal.Divide(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Add(Decimal, Decimal)\n- uid: System.Decimal.Ceiling(System.Decimal)\n  commentId: M:System.Decimal.Ceiling(System.Decimal)\n  id: Ceiling(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Ceiling(Decimal)\n  fullName: System.Decimal.Ceiling(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ceiling\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 360\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the smallest integral value that is greater than or equal to the specified decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal Ceiling(decimal d)\n    content.vb: Public Shared Function Ceiling(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The smallest integral value that is greater than or equal to the <em>d</em> parameter. Note that this method returns a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead of an integral type.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Decimal)\n    commentId: M:System.Math.Ceiling(System.Decimal)\n  - type: System.Decimal.Floor(System.Decimal)\n    commentId: M:System.Decimal.Floor(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Ceiling(Decimal)\n- uid: System.Decimal.Compare(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  id: Compare(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Compare(Decimal, Decimal)\n  fullName: System.Decimal.Compare(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 367\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int Compare(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Compare(d1 As Decimal, d2 As Decimal) As Integer\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of <em>d1</em> and <em>d2</em>.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>d1</em> is less than <em>d2</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>d1</em> and <em>d2</em> are equal. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>d1</em> is greater than <em>d2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Decimal.CompareTo(System.Object)\n    commentId: M:System.Decimal.CompareTo(System.Object)\n  - type: System.Decimal.Equals(System.Object)\n    commentId: M:System.Decimal.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Compare(Decimal, Decimal)\n- uid: System.Decimal.CompareTo(System.Decimal)\n  commentId: M:System.Decimal.CompareTo(System.Decimal)\n  id: CompareTo(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Decimal)\n  fullName: System.Decimal.CompareTo(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 396\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance to a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and returns a comparison of their relative values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int CompareTo(decimal value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function CompareTo(value As Decimal) As Integer\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  - type: System.Decimal.Equals(System.Object)\n    commentId: M:System.Decimal.Equals(System.Object)\n  implements:\n  - System.IComparable{System.Decimal}.CompareTo(System.Decimal)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.CompareTo(Decimal)\n- uid: System.Decimal.Divide(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)\n  id: Divide(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Divide(Decimal, Decimal)\n  fullName: System.Decimal.Divide(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Divide\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 404\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Divides two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal Divide(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Divide(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The dividend. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The divisor. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of dividing <em>d1</em> by <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>d2</em> is zero. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value (that is, the quotient) is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Add(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)\n  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)\n  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Divide(Decimal, Decimal)\n- uid: System.Decimal.Equals(System.Decimal)\n  commentId: M:System.Decimal.Equals(System.Decimal)\n  id: Equals(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Equals(Decimal)\n  fullName: System.Decimal.Equals(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 436\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance and a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represent the same value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public bool Equals(decimal value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Equals(value As Decimal) As Boolean\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>An object to compare to this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Equals(System.Object)\n    commentId: M:System.Decimal.Equals(System.Object)\n  - type: System.Decimal.CompareTo(System.Decimal)\n    commentId: M:System.Decimal.CompareTo(System.Decimal)\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  implements:\n  - System.IEquatable{System.Decimal}.Equals(System.Decimal)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.Equals(Decimal)\n- uid: System.Decimal.Equals(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Equals(System.Decimal,System.Decimal)\n  id: Equals(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Equals(Decimal, Decimal)\n  fullName: System.Decimal.Equals(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 451\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether two specified instances of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represent the same value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool Equals(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Equals(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  - type: System.Decimal.CompareTo(System.Object)\n    commentId: M:System.Decimal.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Equals(Decimal, Decimal)\n- uid: System.Decimal.Equals(System.Object)\n  commentId: M:System.Decimal.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Decimal.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 427\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance and a specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represent the same type and value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override bool Equals(object value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  - type: System.Decimal.CompareTo(System.Object)\n    commentId: M:System.Decimal.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Decimal.Equals(Object)\n- uid: System.Decimal.Floor(System.Decimal)\n  commentId: M:System.Decimal.Floor(System.Decimal)\n  id: Floor(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Floor(Decimal)\n  fullName: System.Decimal.Floor(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Floor\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 459\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Rounds a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number to the closest integer toward negative infinity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal Floor(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Floor(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The value to round. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>If <em>d</em> has a fractional part, the next whole <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number toward negative infinity that is less than <em>d</em>.</p>\\n<p>-or- </p>\\n<p>If <em>d</em> doesn't have a fractional part, <em>d</em> is returned unchanged. Note that the method returns an integral value of type <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Round(System.Decimal,System.Int32)\n    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)\n  - type: System.Decimal.Truncate(System.Decimal)\n    commentId: M:System.Decimal.Truncate(System.Decimal)\n  - type: System.Decimal.Ceiling(System.Decimal)\n    commentId: M:System.Decimal.Ceiling(System.Decimal)\n  - type: System.Math.Floor(System.Decimal)\n    commentId: M:System.Math.Floor(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Floor(Decimal)\n- uid: System.Decimal.GetBits(System.Decimal)\n  commentId: M:System.Decimal.GetBits(System.Decimal)\n  id: GetBits(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: GetBits(Decimal)\n  fullName: System.Decimal.GetBits(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBits\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 544\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a specified instance of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to its equivalent binary representation.</p>\\n\"\n  syntax:\n    content: public static int[] GetBits(decimal d)\n    content.vb: Public Shared Function GetBits(d As Decimal) As Integer()\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>A 32-bit signed integer array with four elements that contain the binary representation of <em>d</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.#ctor(System.Double)\n    commentId: M:System.Decimal.#ctor(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.GetBits(Decimal)\n- uid: System.Decimal.GetHashCode\n  commentId: M:System.Decimal.GetHashCode\n  id: GetHashCode\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Decimal.GetHashCode()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Decimal.GetHashCode()\n- uid: System.Decimal.Multiply(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)\n  id: Multiply(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Decimal, Decimal)\n  fullName: System.Decimal.Multiply(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Multiply\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 713\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Multiplies two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal Multiply(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Multiply(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The multiplicand. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The multiplier. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of multiplying <em>d1</em> and <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Add(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)\n  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)\n  - type: System.Decimal.Divide(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Multiply(Decimal, Decimal)\n- uid: System.Decimal.Negate(System.Decimal)\n  commentId: M:System.Decimal.Negate(System.Decimal)\n  id: Negate(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Negate(Decimal)\n  fullName: System.Decimal.Negate(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Negate\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 734\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the result of multiplying the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value by negative one.</p>\\n\"\n  syntax:\n    content: public static decimal Negate(decimal d)\n    content.vb: Public Shared Function Negate(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The value to negate. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number with the value of <em>d</em>, but the opposite sign.</p>\\n<p>-or- </p>\\n<p>Zero, if <em>d</em> is zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Negate(Decimal)\n- uid: System.Decimal.op_Addition(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Addition(System.Decimal,System.Decimal)\n  id: op_Addition(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Addition(Decimal, Decimal)\n  fullName: System.Decimal.Addition(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Addition\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1103\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal operator +(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator +(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to add. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to add. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of adding <em>d1</em> and <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Add(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Addition(Decimal, Decimal)\n- uid: System.Decimal.op_Decrement(System.Decimal)\n  commentId: M:System.Decimal.op_Decrement(System.Decimal)\n  id: op_Decrement(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Decrement(Decimal)\n  fullName: System.Decimal.Decrement(System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Decrement\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1099\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Decrements the <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by one.</p>\\n\"\n  syntax:\n    content: public static decimal operator --(decimal d)\n    content.vb: VB cannot support this operator.\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The value to decrement. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of <em>d</em> decremented by 1.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Decrement(Decimal)\n- uid: System.Decimal.op_Division(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Division(System.Decimal,System.Decimal)\n  id: op_Division(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Division(Decimal, Decimal)\n  fullName: System.Decimal.Division(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Division\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1121\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Divides two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal operator /(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator /(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The dividend. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The divisor. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of dividing <em>d1</em> by <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>d2</em> is zero. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Divide(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Division(Decimal, Decimal)\n- uid: System.Decimal.op_Equality(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Equality(System.Decimal,System.Decimal)\n  id: op_Equality(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Equality(Decimal, Decimal)\n  fullName: System.Decimal.Equality(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1131\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool operator ==(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator =(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Equals(System.Object)\n    commentId: M:System.Decimal.Equals(System.Object)\n  - type: System.Decimal.op_Inequality(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Equality(Decimal, Decimal)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Byte\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Byte\n  id: op_Explicit(System.Decimal)~System.Byte\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Byte)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Byte)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1032\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static explicit operator byte (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Byte\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Byte)\n  name.vb: Narrowing(Decimal to Byte)\n  nameWithType: Decimal.Explicit(Decimal to Byte)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Byte)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Char\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Char\n  id: op_Explicit(System.Decimal)~System.Char\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Char)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Char)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1041\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a Unicode character.</p>\\n\"\n  syntax:\n    content: public static explicit operator char (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Char\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Char)\n  name.vb: Narrowing(Decimal to Char)\n  nameWithType: Decimal.Explicit(Decimal to Char)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Char)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Double\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Double\n  id: op_Explicit(System.Decimal)~System.Double\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Double)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1083\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static explicit operator double (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Double\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Double)\n  name.vb: Narrowing(Decimal to Double)\n  nameWithType: Decimal.Explicit(Decimal to Double)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Double)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Int16\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Int16\n  id: op_Explicit(System.Decimal)~System.Int16\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Int16)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Int16)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1052\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static explicit operator short (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Short\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int16\n    commentId: T:System.Int16\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Int16)\n  name.vb: Narrowing(Decimal to Int16)\n  nameWithType: Decimal.Explicit(Decimal to Int16)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Int16)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Int32\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Int32\n  id: op_Explicit(System.Decimal)~System.Int32\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Int32)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1061\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static explicit operator int (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Integer\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Int32)\n  name.vb: Narrowing(Decimal to Int32)\n  nameWithType: Decimal.Explicit(Decimal to Int32)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Int32)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Int64\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Int64\n  id: op_Explicit(System.Decimal)~System.Int64\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Int64)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1070\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static explicit operator long (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Long\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Int64)\n  name.vb: Narrowing(Decimal to Int64)\n  nameWithType: Decimal.Explicit(Decimal to Int64)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Int64)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.SByte\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.SByte\n  id: op_Explicit(System.Decimal)~System.SByte\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to SByte)\n  fullName: System.Decimal.Explicit(System.Decimal to System.SByte)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1036\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator sbyte (decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Decimal) As SByte\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.SByte)\n  name.vb: Narrowing(Decimal to SByte)\n  nameWithType: Decimal.Explicit(Decimal to SByte)\n  nameWithType.vb: Decimal.Narrowing(Decimal to SByte)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.Single\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.Single\n  id: op_Explicit(System.Decimal)~System.Single\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Single)\n  fullName: System.Decimal.Explicit(System.Decimal to System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1079\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static explicit operator float (decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Single\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.Single)\n  name.vb: Narrowing(Decimal to Single)\n  nameWithType: Decimal.Explicit(Decimal to Single)\n  nameWithType.vb: Decimal.Narrowing(Decimal to Single)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.UInt16\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16\n  id: op_Explicit(System.Decimal)~System.UInt16\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to UInt16)\n  fullName: System.Decimal.Explicit(System.Decimal to System.UInt16)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1056\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator ushort (decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Decimal) As UShort\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.UInt16)\n  name.vb: Narrowing(Decimal to UInt16)\n  nameWithType: Decimal.Explicit(Decimal to UInt16)\n  nameWithType.vb: Decimal.Narrowing(Decimal to UInt16)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.UInt32\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32\n  id: op_Explicit(System.Decimal)~System.UInt32\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to UInt32)\n  fullName: System.Decimal.Explicit(System.Decimal to System.UInt32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1065\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator uint (decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Decimal) As UInteger\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is negative or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.UInt32)\n  name.vb: Narrowing(Decimal to UInt32)\n  nameWithType: Decimal.Explicit(Decimal to UInt32)\n  nameWithType.vb: Decimal.Narrowing(Decimal to UInt32)\n- uid: System.Decimal.op_Explicit(System.Decimal)~System.UInt64\n  commentId: M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64\n  id: op_Explicit(System.Decimal)~System.UInt64\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to UInt64)\n  fullName: System.Decimal.Explicit(System.Decimal to System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1074\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator ulong (decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Decimal) As ULong\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that represents the converted <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is negative or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Decimal to System.UInt64)\n  name.vb: Narrowing(Decimal to UInt64)\n  nameWithType: Decimal.Explicit(Decimal to UInt64)\n  nameWithType.vb: Decimal.Narrowing(Decimal to UInt64)\n- uid: System.Decimal.op_Explicit(System.Double)~System.Decimal\n  commentId: M:System.Decimal.op_Explicit(System.Double)~System.Decimal\n  id: op_Explicit(System.Double)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Double to Decimal)\n  fullName: System.Decimal.Explicit(System.Double to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1028\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a double-precision floating-point number to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator decimal (double value)\n    content.vb: Public Shared Narrowing Operator CType(value As Double) As Decimal\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted double-precision floating point number.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Double to System.Decimal)\n  name.vb: Narrowing(Double to Decimal)\n  nameWithType: Decimal.Explicit(Double to Decimal)\n  nameWithType.vb: Decimal.Narrowing(Double to Decimal)\n- uid: System.Decimal.op_Explicit(System.Single)~System.Decimal\n  commentId: M:System.Decimal.op_Explicit(System.Single)~System.Decimal\n  id: op_Explicit(System.Single)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Single to Decimal)\n  fullName: System.Decimal.Explicit(System.Single to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1024\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an explicit conversion of a single-precision floating-point number to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator decimal (float value)\n    content.vb: Public Shared Narrowing Operator CType(value As Single) As Decimal\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted single-precision floating point number.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Narrowing(System.Single to System.Decimal)\n  name.vb: Narrowing(Single to Decimal)\n  nameWithType: Decimal.Explicit(Single to Decimal)\n  nameWithType.vb: Decimal.Narrowing(Single to Decimal)\n- uid: System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)\n  id: op_GreaterThan(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Decimal, Decimal)\n  fullName: System.Decimal.GreaterThan(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThan\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1151\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than another specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool operator>(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator>(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> is greater than <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.GreaterThan(Decimal, Decimal)\n- uid: System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)\n  id: op_GreaterThanOrEqual(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Decimal, Decimal)\n  fullName: System.Decimal.GreaterThanOrEqual(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThanOrEqual\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1156\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than or equal to another specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool operator >=(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator >=(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> is greater than or equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.GreaterThanOrEqual(Decimal, Decimal)\n- uid: System.Decimal.op_Implicit(System.Byte)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.Byte)~System.Decimal\n  id: op_Implicit(System.Byte)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Byte to Decimal)\n  fullName: System.Decimal.Implicit(System.Byte to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 983\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of an 8-bit unsigned integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator decimal (byte value)\n    content.vb: Public Shared Widening Operator CType(value As Byte) As Decimal\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 8-bit unsigned integer.</p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.Byte to System.Decimal)\n  name.vb: Widening(Byte to Decimal)\n  nameWithType: Decimal.Implicit(Byte to Decimal)\n  nameWithType.vb: Decimal.Widening(Byte to Decimal)\n- uid: System.Decimal.op_Implicit(System.Char)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.Char)~System.Decimal\n  id: op_Implicit(System.Char)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Char to Decimal)\n  fullName: System.Decimal.Implicit(System.Char to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1001\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a Unicode character to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator decimal (char value)\n    content.vb: Public Shared Widening Operator CType(value As Char) As Decimal\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted Unicode character.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.Char to System.Decimal)\n  name.vb: Widening(Char to Decimal)\n  nameWithType: Decimal.Implicit(Char to Decimal)\n  nameWithType.vb: Decimal.Widening(Char to Decimal)\n- uid: System.Decimal.op_Implicit(System.Int16)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.Int16)~System.Decimal\n  id: op_Implicit(System.Int16)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int16 to Decimal)\n  fullName: System.Decimal.Implicit(System.Int16 to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 992\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a 16-bit signed integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator decimal (short value)\n    content.vb: Public Shared Widening Operator CType(value As Short) As Decimal\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 16-bit signed integer.</p>\\n\"\n  seealso:\n  - type: System.Int16\n    commentId: T:System.Int16\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.Int16 to System.Decimal)\n  name.vb: Widening(Int16 to Decimal)\n  nameWithType: Decimal.Implicit(Int16 to Decimal)\n  nameWithType.vb: Decimal.Widening(Int16 to Decimal)\n- uid: System.Decimal.op_Implicit(System.Int32)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.Int32)~System.Decimal\n  id: op_Implicit(System.Int32)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int32 to Decimal)\n  fullName: System.Decimal.Implicit(System.Int32 to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1005\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a 32-bit signed integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator decimal (int value)\n    content.vb: Public Shared Widening Operator CType(value As Integer) As Decimal\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 32-bit signed integer.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.Int32 to System.Decimal)\n  name.vb: Widening(Int32 to Decimal)\n  nameWithType: Decimal.Implicit(Int32 to Decimal)\n  nameWithType.vb: Decimal.Widening(Int32 to Decimal)\n- uid: System.Decimal.op_Implicit(System.Int64)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.Int64)~System.Decimal\n  id: op_Implicit(System.Int64)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int64 to Decimal)\n  fullName: System.Decimal.Implicit(System.Int64 to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1014\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a 64-bit signed integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator decimal (long value)\n    content.vb: Public Shared Widening Operator CType(value As Long) As Decimal\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 64-bit signed integer.</p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.Int64 to System.Decimal)\n  name.vb: Widening(Int64 to Decimal)\n  nameWithType: Decimal.Implicit(Int64 to Decimal)\n  nameWithType.vb: Decimal.Widening(Int64 to Decimal)\n- uid: System.Decimal.op_Implicit(System.SByte)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.SByte)~System.Decimal\n  id: op_Implicit(System.SByte)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SByte to Decimal)\n  fullName: System.Decimal.Implicit(System.SByte to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 987\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of an 8-bit signed integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator decimal (sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As SByte) As Decimal\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 8-bit signed integer.</p>\\n\"\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.SByte to System.Decimal)\n  name.vb: Widening(SByte to Decimal)\n  nameWithType: Decimal.Implicit(SByte to Decimal)\n  nameWithType.vb: Decimal.Widening(SByte to Decimal)\n- uid: System.Decimal.op_Implicit(System.UInt16)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal\n  id: op_Implicit(System.UInt16)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt16 to Decimal)\n  fullName: System.Decimal.Implicit(System.UInt16 to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 996\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a 16-bit unsigned integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator decimal (ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As UShort) As Decimal\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 16-bit unsigned integer.</p>\\n\"\n  seealso:\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.UInt16 to System.Decimal)\n  name.vb: Widening(UInt16 to Decimal)\n  nameWithType: Decimal.Implicit(UInt16 to Decimal)\n  nameWithType.vb: Decimal.Widening(UInt16 to Decimal)\n- uid: System.Decimal.op_Implicit(System.UInt32)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal\n  id: op_Implicit(System.UInt32)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt32 to Decimal)\n  fullName: System.Decimal.Implicit(System.UInt32 to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1009\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a 32-bit unsigned integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator decimal (uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As UInteger) As Decimal\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 32-bit unsigned integer.</p>\\n\"\n  seealso:\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.UInt32 to System.Decimal)\n  name.vb: Widening(UInt32 to Decimal)\n  nameWithType: Decimal.Implicit(UInt32 to Decimal)\n  nameWithType.vb: Decimal.Widening(UInt32 to Decimal)\n- uid: System.Decimal.op_Implicit(System.UInt64)~System.Decimal\n  commentId: M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal\n  id: op_Implicit(System.UInt64)~System.Decimal\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt64 to Decimal)\n  fullName: System.Decimal.Implicit(System.UInt64 to System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Implicit\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1018\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Defines an implicit conversion of a 64-bit unsigned integer to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator decimal (ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As ULong) As Decimal\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted 64-bit unsigned integer.</p>\\n\"\n  seealso:\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.Widening(System.UInt64 to System.Decimal)\n  name.vb: Widening(UInt64 to Decimal)\n  nameWithType: Decimal.Implicit(UInt64 to Decimal)\n  nameWithType.vb: Decimal.Widening(UInt64 to Decimal)\n- uid: System.Decimal.op_Increment(System.Decimal)\n  commentId: M:System.Decimal.op_Increment(System.Decimal)\n  id: op_Increment(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Increment(Decimal)\n  fullName: System.Decimal.Increment(System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Increment\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1095\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Increments the <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by 1.</p>\\n\"\n  syntax:\n    content: public static decimal operator ++(decimal d)\n    content.vb: VB cannot support this operator.\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The value to increment. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of <em>d</em> incremented by 1.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Add(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Increment(Decimal)\n- uid: System.Decimal.op_Inequality(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)\n  id: op_Inequality(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Decimal, Decimal)\n  fullName: System.Decimal.Inequality(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1136\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have different values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool operator !=(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator <>(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Equals(System.Object)\n    commentId: M:System.Decimal.Equals(System.Object)\n  - type: System.Decimal.op_Equality(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.op_Equality(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Inequality(Decimal, Decimal)\n- uid: System.Decimal.op_LessThan(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)\n  id: op_LessThan(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Decimal, Decimal)\n  fullName: System.Decimal.LessThan(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThan\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1141\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than another specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool operator <(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator <(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> is less than <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.LessThan(Decimal, Decimal)\n- uid: System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)\n  id: op_LessThanOrEqual(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Decimal, Decimal)\n  fullName: System.Decimal.LessThanOrEqual(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThanOrEqual\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1146\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether a specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than or equal to another specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool operator <=(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator <=(d1 As Decimal, d2 As Decimal) As Boolean\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to compare. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> is less than or equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Compare(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Compare(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.LessThanOrEqual(Decimal, Decimal)\n- uid: System.Decimal.op_Modulus(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)\n  id: op_Modulus(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Modulus(Decimal, Decimal)\n  fullName: System.Decimal.Modulus(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Modulus\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1127\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the remainder resulting from dividing two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal operator %(decimal d1, decimal d2)\n    content.vb: Public Shared Operator Mod(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The dividend. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The divisor. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The remainder resulting from dividing <em>d1</em> by <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>d2</em> is <strong>zero</strong>. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Remainder(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Remainder(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Modulus(Decimal, Decimal)\n- uid: System.Decimal.op_Multiply(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)\n  id: op_Multiply(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Decimal, Decimal)\n  fullName: System.Decimal.Multiply(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Multiply\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1115\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Multiplies two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal operator *(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator *(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The first value to multiply. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The second value to multiply. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of multiplying <em>d1</em> by <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Multiply(Decimal, Decimal)\n- uid: System.Decimal.op_Subtraction(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)\n  id: op_Subtraction(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Decimal, Decimal)\n  fullName: System.Decimal.Subtraction(System.Decimal, System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1109\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts two specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal operator -(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Operator -(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The minuend. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The subtrahend. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of subtracting <em>d2</em> from <em>d1</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Subtract(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Subtraction(Decimal, Decimal)\n- uid: System.Decimal.op_UnaryNegation(System.Decimal)\n  commentId: M:System.Decimal.op_UnaryNegation(System.Decimal)\n  id: op_UnaryNegation(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(Decimal)\n  fullName: System.Decimal.UnaryNegation(System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_UnaryNegation\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1091\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Negates the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand.</p>\\n\"\n  syntax:\n    content: public static decimal operator -(decimal d)\n    content.vb: Public Shared Operator -(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The value to negate. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of <em>d</em> multiplied by negative one (-1).</p>\\n\"\n  seealso:\n  - type: System.Decimal.Negate(System.Decimal)\n    commentId: M:System.Decimal.Negate(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.UnaryNegation(Decimal)\n- uid: System.Decimal.op_UnaryPlus(System.Decimal)\n  commentId: M:System.Decimal.op_UnaryPlus(System.Decimal)\n  id: op_UnaryPlus(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: UnaryPlus(Decimal)\n  fullName: System.Decimal.UnaryPlus(System.Decimal)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_UnaryPlus\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1087\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the value of the <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand (the sign of the operand is unchanged).</p>\\n\"\n  syntax:\n    content: public static decimal operator +(decimal d)\n    content.vb: Public Shared Operator +(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The operand to return.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the operand, <em>d</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.UnaryPlus(Decimal)\n- uid: System.Decimal.Parse(System.String)\n  commentId: M:System.Decimal.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Decimal.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 507\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static decimal Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As Decimal\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string representation of the number to convert.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The equivalent to the number contained in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.TryParse(System.String,System.Decimal@)\n    commentId: M:System.Decimal.TryParse(System.String,System.Decimal@)\n  - type: System.Decimal.ToString\n    commentId: M:System.Decimal.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Parse(String)\n- uid: System.Decimal.Parse(System.String,System.Globalization.NumberStyles)\n  commentId: M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)\n  id: Parse(System.String,System.Globalization.NumberStyles)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles)\n  fullName: System.Decimal.Parse(System.String, System.Globalization.NumberStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 511\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style to its <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static decimal Parse(string s, NumberStyles style)\n    content.vb: Public Shared Function Parse(s As String, style As NumberStyles) As Decimal\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string representation of the number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that indicates the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Number\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number equivalent to the number contained in <em>s</em> as specified by <em>style</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> is the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  seealso:\n  - type: System.Decimal.TryParse(System.String,System.Decimal@)\n    commentId: M:System.Decimal.TryParse(System.String,System.Decimal@)\n  - type: System.Decimal.ToString\n    commentId: M:System.Decimal.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Parse(String, NumberStyles)\n- uid: System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  commentId: M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles, IFormatProvider)\n  fullName: System.Decimal.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 520\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified style and culture-specific format.</p>\\n\"\n  syntax:\n    content: public static decimal Parse(string s, NumberStyles style, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, style As NumberStyles, provider As IFormatProvider) As Decimal\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string representation of the number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that indicates the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Number\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that supplies culture-specific information about the format of <em>s</em>. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number equivalent to the number contained in <em>s</em> as specified by <em>style</em> and <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not in the correct format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> is the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.Decimal.TryParse(System.String,System.Decimal@)\n    commentId: M:System.Decimal.TryParse(System.String,System.Decimal@)\n  - type: System.Decimal.ToString\n    commentId: M:System.Decimal.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Parse(String, NumberStyles, IFormatProvider)\n- uid: System.Decimal.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.Decimal.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider)\n  fullName: System.Decimal.Parse(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 516\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified culture-specific format information.</p>\\n\"\n  syntax:\n    content: public static decimal Parse(string s, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider) As Decimal\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string representation of the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that supplies culture-specific parsing information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number equivalent to the number contained in <em>s</em> as specified by <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not of the correct format </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  seealso:\n  - type: System.Decimal.TryParse(System.String,System.Decimal@)\n    commentId: M:System.Decimal.TryParse(System.String,System.Decimal@)\n  - type: System.Decimal.ToString\n    commentId: M:System.Decimal.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Parse(String, IFormatProvider)\n- uid: System.Decimal.Remainder(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Remainder(System.Decimal,System.Decimal)\n  id: Remainder(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Remainder(Decimal, Decimal)\n  fullName: System.Decimal.Remainder(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remainder\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 668\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Computes the remainder after dividing two <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Remainder(decimal d1, decimal d2)\n    content.vb: Public Shared Function Remainder(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The dividend. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The divisor. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The remainder after dividing <em>d1</em> by <em>d2</em>.</p>\\n\"\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: \"\\n<p>\\n<em>d2</em> is zero. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Remainder(Decimal, Decimal)\n- uid: System.Decimal.Subtract(System.Decimal,System.Decimal)\n  commentId: M:System.Decimal.Subtract(System.Decimal,System.Decimal)\n  id: Subtract(System.Decimal,System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Decimal, Decimal)\n  fullName: System.Decimal.Subtract(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 785\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts one specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value from another.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal Subtract(decimal d1, decimal d2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Subtract(d1 As Decimal, d2 As Decimal) As Decimal\n    parameters:\n    - id: d1\n      type: System.Decimal\n      description: \"\\n<p>The minuend. </p>\\n\"\n    - id: d2\n      type: System.Decimal\n      description: \"\\n<p>The subtrahend. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of subtracting <em>d2</em> from <em>d1</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The return value is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Add(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Add(System.Decimal,System.Decimal)\n  - type: System.Decimal.Multiply(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Multiply(System.Decimal,System.Decimal)\n  - type: System.Decimal.Divide(System.Decimal,System.Decimal)\n    commentId: M:System.Decimal.Divide(System.Decimal,System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Subtract(Decimal, Decimal)\n- uid: System.Decimal.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Decimal.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Decimal.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 683\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Decimal.IComparable.CompareTo(Object)\n  nameWithType.vb: Decimal.System.IComparable.CompareTo(Object)\n- uid: System.Decimal.System#IConvertible#GetTypeCode\n  commentId: M:System.Decimal.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.Decimal.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 684\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: Decimal.IConvertible.GetTypeCode()\n  nameWithType.vb: Decimal.System.IConvertible.GetTypeCode()\n- uid: System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1170\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToBoolean(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1186\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1176\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>None. This conversion is not supported. </p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1236\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>None. This conversion is not supported. </p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1231\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDecimal(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the current instance, unchanged.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1226\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDouble(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1191\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1201\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>The parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1211\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1181\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1221\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSingle(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1241\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to which to convert the value of this <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation that supplies culture-specific information about the format of the returned value.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the current instance, converted to a <em>type</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The requested type conversion is not supported. </p>\\n\"\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1196\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1206\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.Decimal.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 1216\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The resulting integer value is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: Decimal.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: Decimal.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.Decimal.ToByte(System.Decimal)\n  commentId: M:System.Decimal.ToByte(System.Decimal)\n  id: ToByte(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Decimal)\n  fullName: System.Decimal.ToByte(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 796\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(decimal value)\n    content.vb: Public Shared Function ToByte(value As Decimal) As Byte\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToByte(Decimal)\n- uid: System.Decimal.ToDouble(System.Decimal)\n  commentId: M:System.Decimal.ToDouble(System.Decimal)\n  id: ToDouble(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Decimal)\n  fullName: System.Decimal.ToDouble(System.Decimal)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double ToDouble(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function ToDouble(d As Decimal) As Double\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number equivalent to <em>d</em>.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToDouble(Decimal)\n- uid: System.Decimal.ToInt16(System.Decimal)\n  commentId: M:System.Decimal.ToInt16(System.Decimal)\n  id: ToInt16(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Decimal)\n  fullName: System.Decimal.ToInt16(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 830\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(decimal value)\n    content.vb: Public Shared Function ToInt16(value As Decimal) As Short\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int16\n    commentId: T:System.Int16\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToInt16(Decimal)\n- uid: System.Decimal.ToInt32(System.Decimal)\n  commentId: M:System.Decimal.ToInt32(System.Decimal)\n  id: ToInt32(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Decimal)\n  fullName: System.Decimal.ToInt32(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 874\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int ToInt32(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToInt32(d As Decimal) As Integer\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer equivalent to the value of <em>d</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>d</em> is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToInt32(Decimal)\n- uid: System.Decimal.ToInt64(System.Decimal)\n  commentId: M:System.Decimal.ToInt64(System.Decimal)\n  id: ToInt64(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Decimal)\n  fullName: System.Decimal.ToInt64(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 894\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static long ToInt64(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToInt64(d As Decimal) As Long\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer equivalent to the value of <em>d</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>d</em> is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToInt64(Decimal)\n- uid: System.Decimal.ToSByte(System.Decimal)\n  commentId: M:System.Decimal.ToSByte(System.Decimal)\n  id: ToSByte(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Decimal)\n  fullName: System.Decimal.ToSByte(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 813\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Decimal) As SByte\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToSByte(Decimal)\n- uid: System.Decimal.ToSingle(System.Decimal)\n  commentId: M:System.Decimal.ToSingle(System.Decimal)\n  id: ToSingle(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Decimal)\n  fullName: System.Decimal.ToSingle(System.Decimal)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static float ToSingle(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function ToSingle(d As Decimal) As Single\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number equivalent to the value of <em>d</em>.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToSingle(Decimal)\n- uid: System.Decimal.ToString\n  commentId: M:System.Decimal.ToString\n  id: ToString\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Decimal.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 475\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Decimal.Parse(System.String)\n    commentId: M:System.Decimal.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Decimal.ToString()\n- uid: System.Decimal.ToString(System.IFormatProvider)\n  commentId: M:System.Decimal.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.Decimal.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 487\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(IFormatProvider provider)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(provider As IFormatProvider) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Parse(System.String)\n    commentId: M:System.Decimal.Parse(System.String)\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.ToString(IFormatProvider)\n- uid: System.Decimal.ToString(System.String)\n  commentId: M:System.Decimal.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Decimal.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 481\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string (see Remarks).</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Parse(System.String)\n    commentId: M:System.Decimal.Parse(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.ToString(String)\n- uid: System.Decimal.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Decimal.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Decimal.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 493\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format, IFormatProvider provider)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String, provider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A numeric format string (see Remarks).</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n\"\n  seealso:\n  - type: System.Decimal.Parse(System.String)\n    commentId: M:System.Decimal.Parse(System.String)\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Decimal.ToString(String, IFormatProvider)\n- uid: System.Decimal.ToUInt16(System.Decimal)\n  commentId: M:System.Decimal.ToUInt16(System.Decimal)\n  id: ToUInt16(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Decimal)\n  fullName: System.Decimal.ToUInt16(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 914\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Decimal) As UShort\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer equivalent to the value of <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToUInt16(Decimal)\n- uid: System.Decimal.ToUInt32(System.Decimal)\n  commentId: M:System.Decimal.ToUInt32(System.Decimal)\n  id: ToUInt32(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Decimal)\n  fullName: System.Decimal.ToUInt32(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 931\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(d As Decimal) As UInteger\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer equivalent to the value of <em>d</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>d</em> is negative or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToUInt32(Decimal)\n- uid: System.Decimal.ToUInt64(System.Decimal)\n  commentId: M:System.Decimal.ToUInt64(System.Decimal)\n  id: ToUInt64(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Decimal)\n  fullName: System.Decimal.ToUInt64(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 947\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(d As Decimal) As ULong\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer equivalent to the value of <em>d</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>d</em> is negative or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.ToUInt64(Decimal)\n- uid: System.Decimal.Truncate(System.Decimal)\n  commentId: M:System.Decimal.Truncate(System.Decimal)\n  id: Truncate(System.Decimal)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: Truncate(Decimal)\n  fullName: System.Decimal.Truncate(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Truncate\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 970\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the integral digits of the specified <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; any fractional digits are discarded.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static decimal Truncate(decimal d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Truncate(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to truncate. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The result of <em>d</em> rounded toward zero, to the nearest whole number.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Round(System.Decimal,System.Int32)\n    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)\n  - type: System.Decimal.Floor(System.Decimal)\n    commentId: M:System.Decimal.Floor(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Decimal.Truncate(Decimal)\n- uid: System.Decimal.TryParse(System.String,System.Decimal@)\n  commentId: M:System.Decimal.TryParse(System.String,System.Decimal@)\n  id: TryParse(System.String,System.Decimal@)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out Decimal)\n  fullName: System.Decimal.TryParse(System.String, out System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 525\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, out decimal result)\n    content.vb: Public Shared Function TryParse(s As String, ByRef result As Decimal) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string representation of the number to convert.</p>\\n\"\n    - id: result\n      type: System.Decimal\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number that is equivalent to the numeric value contained in <em>s</em>, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, is not a number in a valid format, or represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Parse(System.String)\n    commentId: M:System.Decimal.Parse(System.String)\n  - type: System.Decimal.ToString\n    commentId: M:System.Decimal.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.TryParse(System.String, ByRef System.Decimal)\n  name.vb: TryParse(String, ByRef Decimal)\n  nameWithType: Decimal.TryParse(String, out Decimal)\n  nameWithType.vb: Decimal.TryParse(String, ByRef Decimal)\n- uid: System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\n  commentId: M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\n  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)\n  parent: System.Decimal\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, NumberStyles, IFormatProvider, out Decimal)\n  fullName: System.Decimal.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Decimal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Decimal.cs\n    startLine: 529\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out decimal result)\n    content.vb: Public Shared Function TryParse(s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Decimal) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string representation of the number to convert.</p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Number\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific parsing information about <em>s</em>. </p>\\n\"\n    - id: result\n      type: System.Decimal\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number that is equivalent to the numeric value contained in <em>s</em>, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, is not in a format compliant with <em>style</em>, or represents a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> is the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.Decimal.Parse(System.String)\n    commentId: M:System.Decimal.Parse(System.String)\n  - type: System.Decimal.ToString\n    commentId: M:System.Decimal.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Decimal.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Decimal)\n  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef Decimal)\n  nameWithType: Decimal.TryParse(String, NumberStyles, IFormatProvider, out Decimal)\n  nameWithType.vb: Decimal.TryParse(String, NumberStyles, IFormatProvider, ByRef Decimal)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.Decimal}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<Decimal>\n  fullName: System.IComparable<System.Decimal>\n  fullname.vb: System.IComparable(Of System.Decimal)\n  name.vb: IComparable(Of Decimal)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Decimal>\n  nameWithType.vb: IComparable(Of Decimal)\n  commentId: T:System.IComparable{System.Decimal}\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IEquatable{System.Decimal}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Decimal>\n  fullName: System.IEquatable<System.Decimal>\n  fullname.vb: System.IEquatable(Of System.Decimal)\n  name.vb: IEquatable(Of Decimal)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Decimal>\n  nameWithType.vb: IEquatable(Of Decimal)\n  commentId: T:System.IEquatable{System.Decimal}\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.IComparable{System.Decimal}.CompareTo(System.Decimal)\n  parent: System.IComparable{System.Decimal}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(Decimal)\n  fullName: System.IComparable<System.Decimal>.CompareTo(System.Decimal)\n  fullname.vb: System.IComparable(Of System.Decimal).CompareTo(System.Decimal)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Decimal>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Decimal).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Decimal>.CompareTo(Decimal)\n  nameWithType.vb: IComparable(Of Decimal).CompareTo(Decimal)\n  commentId: M:System.IComparable{System.Decimal}.CompareTo(System.Decimal)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.IEquatable{System.Decimal}.Equals(System.Decimal)\n  parent: System.IEquatable{System.Decimal}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Decimal)\n  fullName: System.IEquatable<System.Decimal>.Equals(System.Decimal)\n  fullname.vb: System.IEquatable(Of System.Decimal).Equals(System.Decimal)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Decimal>.Equals\n  - name: (\n    fullName: (\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Decimal).Equals\n  - name: (\n    fullName: (\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Decimal>.Equals(Decimal)\n  nameWithType.vb: IEquatable(Of Decimal).Equals(Decimal)\n  commentId: M:System.IEquatable{System.Decimal}.Equals(System.Decimal)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Globalization.NumberStyles\n  parent: System.Globalization\n  isExternal: false\n  name: NumberStyles\n  fullName: System.Globalization.NumberStyles\n  nameWithType: NumberStyles\n  commentId: T:System.Globalization.NumberStyles\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.DivideByZeroException\n  isExternal: false\n  name: DivideByZeroException\n  fullName: System.DivideByZeroException\n  nameWithType: DivideByZeroException\n  commentId: T:System.DivideByZeroException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}