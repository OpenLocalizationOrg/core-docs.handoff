{"nodes":[{"pos":[409,425],"content":"InterfaceMapping","needQuote":true,"nodes":[{"content":"InterfaceMapping","pos":[0,16]}]},{"pos":[2144,2160],"content":"InterfaceMethods","needQuote":true,"nodes":[{"content":"InterfaceMethods","pos":[0,16]}]},{"pos":[3327,3340],"content":"InterfaceType","needQuote":true,"nodes":[{"content":"InterfaceType","pos":[0,13]}]},{"pos":[4416,4429],"content":"TargetMethods","needQuote":true,"nodes":[{"content":"TargetMethods","pos":[0,13]}]},{"pos":[5567,5577],"content":"TargetType","needQuote":true,"nodes":[{"content":"TargetType","pos":[0,10]}]},{"pos":[6504,6521],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[6719,6733],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6858,6864],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6913,6914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6964,6970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7030,7031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7117,7123],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7172,7173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7223,7229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7289,7290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7493,7506],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7613,7624],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7678,7679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7706,7707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7783,7794],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7848,7849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7876,7877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8066,8076],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8177,8185],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8236,8237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8264,8265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8338,8346],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8397,8398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8425,8426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8629,8651],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8799,8805],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8872,8873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8923,8929],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8990,8991]},{"pos":[9046,9052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9112,9113],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9210,9216],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9283,9284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9334,9340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9401,9402]},{"pos":[9457,9463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9523,9524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9769,9800],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9966,9981],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10057,10058],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10108,10114],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10175,10176]},{"pos":[10231,10237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10297,10298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10404,10419],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10495,10496],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10546,10552],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10613,10614]},{"pos":[10669,10675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10735,10736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10962,10971],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11064,11071],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11139,11140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11167,11168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11237,11244],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11312,11313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11340,11341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11497,11506],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[11660,11666],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11787,11793],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11904,11916],"content":"MethodInfo[]","needQuote":true,"nodes":[{"content":"MethodInfo[]","pos":[0,12]}]},{"pos":[12093,12103],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"content":"[]","pos":[12158,12160]},{"pos":[12240,12250],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[12304,12306],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[12449,12453],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]}],"content":"items:\n- uid: System.Reflection.InterfaceMapping\n  commentId: T:System.Reflection.InterfaceMapping\n  id: InterfaceMapping\n  parent: System.Reflection\n  children:\n  - System.Reflection.InterfaceMapping.InterfaceMethods\n  - System.Reflection.InterfaceMapping.InterfaceType\n  - System.Reflection.InterfaceMapping.TargetMethods\n  - System.Reflection.InterfaceMapping.TargetType\n  langs:\n  - csharp\n  - vb\n  name: InterfaceMapping\n  fullName: System.Reflection.InterfaceMapping\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InterfaceMapping\n    path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves the mapping of an interface into the actual methods on a class that implements that interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public struct InterfaceMapping\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Structure InterfaceMapping\n  seealso:\n  - type: System.Type.GetInterfaceMap(System.Type)\n    commentId: M:System.Type.GetInterfaceMap(System.Type)\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: InterfaceMapping\n- uid: System.Reflection.InterfaceMapping.InterfaceMethods\n  commentId: F:System.Reflection.InterfaceMapping.InterfaceMethods\n  id: InterfaceMethods\n  parent: System.Reflection.InterfaceMapping\n  langs:\n  - csharp\n  - vb\n  name: InterfaceMethods\n  fullName: System.Reflection.InterfaceMapping.InterfaceMethods\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InterfaceMethods\n    path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n    startLine: 24\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Shows the methods that are defined on the interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public MethodInfo[] InterfaceMethods\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public InterfaceMethods As MethodInfo()\n    return:\n      type: System.Reflection.MethodInfo[]\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: InterfaceMapping.InterfaceMethods\n- uid: System.Reflection.InterfaceMapping.InterfaceType\n  commentId: F:System.Reflection.InterfaceMapping.InterfaceType\n  id: InterfaceType\n  parent: System.Reflection.InterfaceMapping\n  langs:\n  - csharp\n  - vb\n  name: InterfaceType\n  fullName: System.Reflection.InterfaceMapping.InterfaceType\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InterfaceType\n    path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n    startLine: 20\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Shows the type that represents the interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public Type InterfaceType\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public InterfaceType As Type\n    return:\n      type: System.Type\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: InterfaceMapping.InterfaceType\n- uid: System.Reflection.InterfaceMapping.TargetMethods\n  commentId: F:System.Reflection.InterfaceMapping.TargetMethods\n  id: TargetMethods\n  parent: System.Reflection.InterfaceMapping\n  langs:\n  - csharp\n  - vb\n  name: TargetMethods\n  fullName: System.Reflection.InterfaceMapping.TargetMethods\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TargetMethods\n    path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n    startLine: 22\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Shows the methods that implement the interface.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public MethodInfo[] TargetMethods\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public TargetMethods As MethodInfo()\n    return:\n      type: System.Reflection.MethodInfo[]\n  seealso:\n  - type: System.Reflection.MethodInfo\n    commentId: T:System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: InterfaceMapping.TargetMethods\n- uid: System.Reflection.InterfaceMapping.TargetType\n  commentId: F:System.Reflection.InterfaceMapping.TargetType\n  id: TargetType\n  parent: System.Reflection.InterfaceMapping\n  langs:\n  - csharp\n  - vb\n  name: TargetType\n  fullName: System.Reflection.InterfaceMapping.TargetType\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TargetType\n    path: src/mscorlib/src/System/Reflection/InterfaceMapping.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Extensions\n  namespace: System.Reflection\n  summary: \"\\n<p>Represents the type that was used to create the interface mapping.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public Type TargetType\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public TargetType As Type\n    return:\n      type: System.Type\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: InterfaceMapping.TargetType\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.MethodInfo[]\n  name: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  fullname.vb: System.Reflection.MethodInfo()\n  name.vb: MethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: ()\n    fullName: ()\n  nameWithType: MethodInfo[]\n  nameWithType.vb: MethodInfo()\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n"}