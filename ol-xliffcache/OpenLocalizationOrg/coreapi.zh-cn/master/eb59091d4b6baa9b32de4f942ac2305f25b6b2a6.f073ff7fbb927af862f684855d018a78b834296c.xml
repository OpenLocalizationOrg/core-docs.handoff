{"nodes":[{"pos":[562,567],"content":"Mutex","needQuote":true,"nodes":[{"content":"Mutex","pos":[0,5]}]},{"pos":[4634,4641],"content":"Mutex()","needQuote":true,"nodes":[{"content":"Mutex()","pos":[0,7]}]},{"pos":[5771,5785],"content":"Mutex(Boolean)","needQuote":true,"nodes":[{"content":"Mutex(Boolean)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to give the calling thread initial ownership of the mutex; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[6847,6969],"source":"\\n<p>\\n<strong>true</strong> to give the calling thread initial ownership of the mutex; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6970,6976],"source":" </p>\\n"},{"pos":[7325,7347],"content":"Mutex(Boolean, String)","needQuote":true,"nodes":[{"content":"Mutex(Boolean, String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[8489,8686],"source":"\\n<p>\\n<strong>true</strong> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8687,8693],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[9435,9469],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.&lt;/p&gt;\\n","pos":[9618,9732],"source":"\\n<p>The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[9829,9886],"source":"\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"pos":[10551,10586],"content":"Mutex(Boolean, String, out Boolean)","needQuote":true,"nodes":[{"content":"Mutex(Boolean, String, out Boolean)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[11925,12122],"source":"\\n<p>\\n<strong>true</strong> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12123,12129],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains a Boolean that is &lt;strong&gt;true&lt;/strong&gt; if a local mutex was created (that is, if &lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or an empty string) or if the specified named system mutex was created; &lt;strong&gt;false&lt;/strong&gt; if the specified named system mutex already existed.","pos":[12511,12819],"source":"\\n<p>When this method returns, contains a Boolean that is <strong>true</strong> if a local mutex was created (that is, if <em>name</em> is <strong>null</strong> or an empty string) or if the specified named system mutex was created; <strong>false</strong> if the specified named system mutex already existed."},{"content":"This parameter is passed uninitialized.","pos":[12820,12859]},{"content":"&lt;/p&gt;\\n","pos":[12860,12866],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[13296,13330],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.&lt;/p&gt;\\n","pos":[13479,13593],"source":"\\n<p>The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[13690,13747],"source":"\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"pos":[14560,14580],"content":"OpenExisting(String)","needQuote":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the system mutex to open.&lt;/p&gt;\\n","pos":[15337,15385],"source":"\\n<p>The name of the system mutex to open.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the named system mutex.&lt;/p&gt;\\n","pos":[15454,15514],"source":"\\n<p>An object that represents the named system mutex.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[15625,15739],"source":"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15844,15896],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The named mutex does not exist.&lt;/p&gt;\\n","pos":[16045,16087],"source":"\\n<p>The named mutex does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[16178,16212],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named mutex exists, but the user does not have the security access required to use it.&lt;/p&gt;\\n","pos":[16329,16430],"source":"\\n<p>The named mutex exists, but the user does not have the security access required to use it.</p>\\n"},{"pos":[16996,17010],"content":"ReleaseMutex()","needQuote":true,"nodes":[{"content":"ReleaseMutex()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The calling thread does not own the mutex.","pos":[17941,17988],"source":"\\n<p>The calling thread does not own the mutex."},{"content":"&lt;/p&gt;\\n","pos":[17989,17995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.","pos":[18104,18156],"source":"\\n<p>The current instance has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[18157,18163],"source":" </p>\\n"},{"pos":[18567,18601],"content":"TryOpenExisting(String, out Mutex)","needQuote":true,"nodes":[{"content":"TryOpenExisting(String, out Mutex)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The name of the system mutex to open.&lt;/p&gt;\\n","pos":[19508,19556],"source":"\\n<p>The name of the system mutex to open.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the named mutex was opened successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19972,20085],"source":"\\n<p>\\n<strong>true</strong> if the named mutex was opened successfully; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[20196,20310],"source":"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20415,20467],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[20558,20592],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named mutex exists, but the user does not have the security access required to use it.&lt;/p&gt;\\n","pos":[20709,20810],"source":"\\n<p>The named mutex exists, but the user does not have the security access required to use it.</p>\\n"},{"pos":[21482,21498],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[21659,21665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21821,21839],"content":"MarshalByRefObject","needQuote":true,"nodes":[{"content":"MarshalByRefObject","pos":[0,18]}]},{"pos":[22044,22054],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[22236,22247],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[22453,22464],"content":"WaitTimeout","needQuote":true,"nodes":[{"content":"WaitTimeout","pos":[0,11]}]},{"pos":[22725,22738],"content":"InvalidHandle","needQuote":true,"nodes":[{"content":"InvalidHandle","pos":[0,13]}]},{"pos":[23028,23051],"content":"WaitOne(Int32, Boolean)","needQuote":true,"nodes":[{"content":"WaitOne(Int32, Boolean)","pos":[0,23]}]},{"pos":[23229,23236],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[23318,23319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23368,23373],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[23433,23434]},{"pos":[23490,23497],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23558,23559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23671,23678],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[23760,23761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23810,23815],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[23875,23876]},{"pos":[23932,23939],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24000,24001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24289,24315],"content":"WaitOne(TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"WaitOne(TimeSpan, Boolean)","pos":[0,26]}]},{"pos":[24499,24506],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[24588,24589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24641,24649],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[24712,24713]},{"pos":[24769,24776],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24837,24838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24953,24960],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[25042,25043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25095,25103],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[25166,25167]},{"pos":[25223,25230],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25291,25292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25554,25563],"content":"WaitOne()","needQuote":true,"nodes":[{"content":"WaitOne()","pos":[0,9]}]},{"pos":[25684,25691],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[25773,25774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25801,25802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25885,25892],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[25974,25975],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26002,26003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26230,26244],"content":"WaitOne(Int32)","needQuote":true,"nodes":[{"content":"WaitOne(Int32)","pos":[0,14]}]},{"pos":[26391,26398],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[26480,26481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26530,26535],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26594,26595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26692,26699],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[26781,26782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26831,26836],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26895,26896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27145,27162],"content":"WaitOne(TimeSpan)","needQuote":true,"nodes":[{"content":"WaitOne(TimeSpan)","pos":[0,17]}]},{"pos":[27315,27322],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[27404,27405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27457,27465],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[27527,27528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27628,27635],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[27717,27718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27770,27778],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[27840,27841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28138,28175],"content":"WaitAll(WaitHandle[], Int32, Boolean)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], Int32, Boolean)","pos":[0,37]}]},{"pos":[28575,28582],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[28664,28665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28729,28739],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[28814,28816]},{"content":",","pos":[28848,28849]},{"pos":[28903,28908],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[28968,28969]},{"pos":[29025,29032],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29093,29094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29236,29243],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[29325,29326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29390,29400],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[29474,29476],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[29505,29506]},{"pos":[29560,29565],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[29625,29626]},{"pos":[29682,29689],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29750,29751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30181,30221],"content":"WaitAll(WaitHandle[], TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], TimeSpan, Boolean)","pos":[0,40]}]},{"pos":[30633,30640],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[30722,30723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30787,30797],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[30872,30874]},{"content":",","pos":[30906,30907]},{"pos":[30964,30972],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[31035,31036]},{"pos":[31092,31099],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31160,31161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31306,31313],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[31395,31396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31460,31470],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[31544,31546],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[31575,31576]},{"pos":[31633,31641],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[31704,31705]},{"pos":[31761,31768],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31829,31830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32238,32259],"content":"WaitAll(WaitHandle[])","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[])","pos":[0,21]}]},{"pos":[32555,32562],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[32644,32645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32709,32719],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[32794,32796]},{"pos":[32827,32828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32942,32949],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[33031,33032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33096,33106],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[33180,33182],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33210,33211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33563,33591],"content":"WaitAll(WaitHandle[], Int32)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], Int32)","pos":[0,28]}]},{"pos":[33935,33942],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[34024,34025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34089,34099],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[34174,34176]},{"content":",","pos":[34208,34209]},{"pos":[34263,34268],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34327,34328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34455,34462],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[34544,34545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34609,34619],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[34693,34695],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[34724,34725]},{"pos":[34779,34784],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34843,34844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35226,35257],"content":"WaitAll(WaitHandle[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], TimeSpan)","pos":[0,31]}]},{"pos":[35613,35620],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[35702,35703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35767,35777],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[35852,35854]},{"content":",","pos":[35886,35887]},{"pos":[35944,35952],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[36014,36015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36145,36152],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[36234,36235],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36299,36309],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[36383,36385],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[36414,36415]},{"pos":[36472,36480],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[36542,36543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36946,36983],"content":"WaitAny(WaitHandle[], Int32, Boolean)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], Int32, Boolean)","pos":[0,37]}]},{"pos":[37383,37390],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[37472,37473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37537,37547],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[37622,37624]},{"content":",","pos":[37656,37657]},{"pos":[37711,37716],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[37776,37777]},{"pos":[37833,37840],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37901,37902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38044,38051],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[38133,38134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38198,38208],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[38282,38284],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[38313,38314]},{"pos":[38368,38373],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[38433,38434]},{"pos":[38490,38497],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38558,38559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38989,39029],"content":"WaitAny(WaitHandle[], TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], TimeSpan, Boolean)","pos":[0,40]}]},{"pos":[39441,39448],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[39530,39531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39595,39605],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[39680,39682]},{"content":",","pos":[39714,39715]},{"pos":[39772,39780],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[39843,39844]},{"pos":[39900,39907],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39968,39969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40114,40121],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[40203,40204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40268,40278],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[40352,40354],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[40383,40384]},{"pos":[40441,40449],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[40512,40513]},{"pos":[40569,40576],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40637,40638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41062,41093],"content":"WaitAny(WaitHandle[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], TimeSpan)","pos":[0,31]}]},{"pos":[41449,41456],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[41538,41539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41603,41613],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[41688,41690]},{"content":",","pos":[41722,41723]},{"pos":[41780,41788],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[41850,41851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41981,41988],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[42070,42071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42135,42145],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[42219,42221],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[42250,42251]},{"pos":[42308,42316],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[42378,42379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42754,42775],"content":"WaitAny(WaitHandle[])","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[])","pos":[0,21]}]},{"pos":[43071,43078],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[43160,43161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43225,43235],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[43310,43312]},{"pos":[43343,43344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43458,43465],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[43547,43548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43612,43622],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[43696,43698],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[43726,43727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44079,44107],"content":"WaitAny(WaitHandle[], Int32)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], Int32)","pos":[0,28]}]},{"pos":[44451,44458],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[44540,44541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44605,44615],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[44690,44692]},{"content":",","pos":[44724,44725]},{"pos":[44779,44784],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[44843,44844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44971,44978],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[45060,45061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45125,45135],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[45209,45211],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[45240,45241]},{"pos":[45295,45300],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45359,45360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45758,45795],"content":"SignalAndWait(WaitHandle, WaitHandle)","needQuote":true,"nodes":[{"content":"SignalAndWait(WaitHandle, WaitHandle)","pos":[0,37]}]},{"pos":[46041,46054],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[46142,46143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46207,46217],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[46292,46293]},{"pos":[46362,46372],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[46446,46447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46593,46606],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[46694,46695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46759,46769],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[46844,46845]},{"pos":[46914,46924],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[46998,46999],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47397,47453],"content":"SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)","pos":[0,56]}]},{"pos":[47763,47776],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[47864,47865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47929,47939],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[48014,48015]},{"pos":[48084,48094],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[48169,48170]},{"pos":[48227,48235],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[48298,48299]},{"pos":[48355,48362],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[48423,48424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48601,48614],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[48702,48703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48767,48777],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[48852,48853]},{"pos":[48922,48932],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[49007,49008]},{"pos":[49065,49073],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[49136,49137]},{"pos":[49193,49200],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49261,49262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49707,49760],"content":"SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)","needQuote":true,"nodes":[{"content":"SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)","pos":[0,53]}]},{"pos":[50064,50077],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[50165,50166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50230,50240],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[50315,50316]},{"pos":[50385,50395],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[50470,50471]},{"pos":[50525,50530],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[50590,50591]},{"pos":[50647,50654],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[50715,50716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50890,50903],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[50991,50992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51056,51066],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[51141,51142]},{"pos":[51211,51221],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[51296,51297]},{"pos":[51351,51356],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[51416,51417]},{"pos":[51473,51480],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51541,51542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51888,51895],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[52012,52017],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[52097,52098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52125,52126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52207,52212],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[52292,52293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52320,52321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52546,52562],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[52713,52720],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[52802,52803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52854,52861],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52922,52923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53022,53029],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[53111,53112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53163,53170],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[53231,53232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53468,53477],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[53598,53605],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[53687,53688],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53715,53716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53799,53806],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[53888,53889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53916,53917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54129,54135],"content":"Handle","needQuote":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[54382,54396],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[54680,54704],"content":"MemberwiseClone(Boolean)","needQuote":true,"nodes":[{"content":"MemberwiseClone(Boolean)","pos":[0,24]}]},{"pos":[54867,54882],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[54970,54971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55022,55029],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55090,55091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55196,55211],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[55299,55300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55351,55358],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55419,55420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55685,55705],"content":"GetLifetimeService()","needQuote":true,"nodes":[{"content":"GetLifetimeService()","pos":[0,20]}]},{"pos":[55844,55862],"content":"GetLifetimeService","needQuote":true,"nodes":[{"content":"GetLifetimeService","pos":[0,18]}]},{"pos":[55953,55954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55981,55982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56074,56092],"content":"GetLifetimeService","needQuote":true,"nodes":[{"content":"GetLifetimeService","pos":[0,18]}]},{"pos":[56183,56184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56211,56212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56467,56494],"content":"InitializeLifetimeService()","needQuote":true,"nodes":[{"content":"InitializeLifetimeService()","pos":[0,27]}]},{"pos":[56647,56672],"content":"InitializeLifetimeService","needQuote":true,"nodes":[{"content":"InitializeLifetimeService","pos":[0,25]}]},{"pos":[56770,56771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56798,56799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56898,56923],"content":"InitializeLifetimeService","needQuote":true,"nodes":[{"content":"InitializeLifetimeService","pos":[0,25]}]},{"pos":[57021,57022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57049,57050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57319,57337],"content":"CreateObjRef(Type)","needQuote":true,"nodes":[{"content":"CreateObjRef(Type)","pos":[0,18]}]},{"pos":[57488,57500],"content":"CreateObjRef","needQuote":true,"nodes":[{"content":"CreateObjRef","pos":[0,12]}]},{"pos":[57585,57586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57634,57638],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[57696,57697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57796,57808],"content":"CreateObjRef","needQuote":true,"nodes":[{"content":"CreateObjRef","pos":[0,12]}]},{"pos":[57893,57894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57942,57946],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[58004,58005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58224,58234],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[58329,58337],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[58406,58407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58434,58435],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58505,58513],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[58582,58583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58610,58611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58794,58808],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[58927,58933],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[59000,59001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59051,59057],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59117,59118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59201,59207],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[59274,59275],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59325,59331],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59391,59392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59606,59628],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[59776,59782],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[59849,59850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59900,59906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[59967,59968]},{"pos":[60023,60029],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60089,60090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60187,60193],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60260,60261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60311,60317],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60378,60379]},{"pos":[60434,60440],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60500,60501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60746,60777],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[60943,60958],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[61034,61035],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61085,61091],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61152,61153]},{"pos":[61208,61214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61274,61275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61381,61396],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[61472,61473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61523,61529],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61590,61591]},{"pos":[61646,61652],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61712,61713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61943,61956],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[62057,62068],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[62140,62141],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62168,62169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62242,62253],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[62325,62326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62353,62354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62529,62538],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[62631,62638],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[62706,62707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62734,62735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62804,62811],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[62879,62880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62907,62908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63083,63100],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[63209,63224],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[63300,63301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63328,63329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63406,63421],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[63497,63498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63525,63526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63875,63894],"content":"GetSafeWaitHandle()","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle()","pos":[0,19]}]},{"pos":[64055,64072],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[64153,64154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64181,64182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64285,64302],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[64383,64384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64411,64412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64919,64952],"content":"SetSafeWaitHandle(SafeWaitHandle)","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle(SafeWaitHandle)","pos":[0,33]}]},{"pos":[65199,65216],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[65297,65298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65377,65391],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[65459,65460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65607,65624],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[65705,65706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65785,65799],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[65867,65868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66141,66147],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[66331,66360],"content":"GetSafeWaitHandle(WaitHandle)","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle(WaitHandle)","pos":[0,29]}]},{"pos":[66577,66594],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[66675,66676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66740,66750],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[66824,66825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66957,66974],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[67055,67056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67120,67130],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[67204,67205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67489,67509],"content":"WaitHandleExtensions","needQuote":true,"nodes":[{"content":"WaitHandleExtensions","pos":[0,20]}]},{"pos":[67812,67857],"content":"SetSafeWaitHandle(WaitHandle, SafeWaitHandle)","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle(WaitHandle, SafeWaitHandle)","pos":[0,45]}]},{"pos":[68161,68178],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[68259,68260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68324,68334],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[68409,68410]},{"pos":[68494,68508],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[68576,68577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68752,68769],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[68850,68851],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68915,68925],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[69000,69001]},{"pos":[69085,69099],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[69167,69168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69478,69485],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[69633,69639],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69803,69808],"content":"Mutex","needQuote":true,"nodes":[{"content":"Mutex","pos":[0,5]}]},{"pos":[69991,70018],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[70237,70248],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[70434,70467],"content":"WaitHandleCannotBeOpenedException","needQuote":true,"nodes":[{"content":"WaitHandleCannotBeOpenedException","pos":[0,33]}]},{"pos":[70724,70741],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[70917,70938],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[71163,71186],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]}],"content":"items:\n- uid: System.Threading.Mutex\n  commentId: T:System.Threading.Mutex\n  id: Mutex\n  parent: System.Threading\n  children:\n  - System.Threading.Mutex.#ctor\n  - System.Threading.Mutex.#ctor(System.Boolean)\n  - System.Threading.Mutex.#ctor(System.Boolean,System.String)\n  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)\n  - System.Threading.Mutex.OpenExisting(System.String)\n  - System.Threading.Mutex.ReleaseMutex\n  - System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)\n  langs:\n  - csharp\n  - vb\n  name: Mutex\n  fullName: System.Threading.Mutex\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Mutex\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 32\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>A synchronization primitive that can also be used for interprocess synchronization. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [ComVisible(true)]\n\n      public sealed class Mutex : WaitHandle, IDisposable\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class Mutex\n          Inherits WaitHandle\n          Implements IDisposable\n  seealso:\n  - type: System.Threading.WaitHandle\n    commentId: T:System.Threading.WaitHandle\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Threading.WaitHandle\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Threading.WaitHandle.WaitTimeout\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.Close\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Handle\n  - System.Threading.WaitHandle.SafeWaitHandle\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Mutex\n  extensionMethods:\n  - System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n- uid: System.Threading.Mutex.#ctor\n  commentId: M:System.Threading.Mutex.#ctor\n  id: '#ctor'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: Mutex()\n  fullName: System.Threading.Mutex.Mutex()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 251\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with default properties.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public Mutex()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Mutex.Mutex()\n- uid: System.Threading.Mutex.#ctor(System.Boolean)\n  commentId: M:System.Threading.Mutex.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: Mutex(Boolean)\n  fullName: System.Threading.Mutex.Mutex(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 245\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public Mutex(bool initiallyOwned)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub New(initiallyOwned As Boolean)\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to give the calling thread initial ownership of the mutex; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Mutex.Mutex(Boolean)\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)\n  commentId: M:System.Threading.Mutex.#ctor(System.Boolean,System.String)\n  id: '#ctor(System.Boolean,System.String)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: Mutex(Boolean, String)\n  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 240\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public Mutex(bool initiallyOwned, string name)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub New(initiallyOwned As Boolean, name As String)\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the value is <strong>null</strong>, the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is unnamed. </p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named mutex exists and has access control security, but the user does not have <xref href=\\\"System.Security.AccessControl.MutexRights.FullControl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.Threading.WaitHandleCannotBeOpenedException\n    commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n    description: \"\\n<p>The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Mutex.Mutex(Boolean, String)\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)\n  commentId: M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)\n  id: '#ctor(System.Boolean,System.String,System.Boolean@)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: Mutex(Boolean, String, out Boolean)\n  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String, out System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 43\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public Mutex(bool initiallyOwned, string name, out bool createdNew)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub New(initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the value is <strong>null</strong>, the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is unnamed. </p>\\n\"\n    - id: createdNew\n      type: System.Boolean\n      description: \"\\n<p>When this method returns, contains a Boolean that is <strong>true</strong> if a local mutex was created (that is, if <em>name</em> is <strong>null</strong> or an empty string) or if the specified named system mutex was created; <strong>false</strong> if the specified named system mutex already existed. This parameter is passed uninitialized. </p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named mutex exists and has access control security, but the user does not have <xref href=\\\"System.Security.AccessControl.MutexRights.FullControl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.Threading.WaitHandleCannotBeOpenedException\n    commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n    description: \"\\n<p>The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Mutex.Mutex(System.Boolean, System.String, ByRef System.Boolean)\n  name.vb: Mutex(Boolean, String, ByRef Boolean)\n  nameWithType: Mutex.Mutex(Boolean, String, out Boolean)\n  nameWithType.vb: Mutex.Mutex(Boolean, String, ByRef Boolean)\n- uid: System.Threading.Mutex.OpenExisting(System.String)\n  commentId: M:System.Threading.Mutex.OpenExisting(System.String)\n  id: OpenExisting(System.String)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: OpenExisting(String)\n  fullName: System.Threading.Mutex.OpenExisting(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpenExisting\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 265\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Opens the specified named mutex, if it already exists.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static Mutex OpenExisting(string name)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function OpenExisting(name As String) As Mutex\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the system mutex to open.</p>\\n\"\n    return:\n      type: System.Threading.Mutex\n      description: \"\\n<p>An object that represents the named system mutex.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Threading.WaitHandleCannotBeOpenedException\n    commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n    description: \"\\n<p>The named mutex does not exist.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named mutex exists, but the user does not have the security access required to use it.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Mutex.OpenExisting(String)\n- uid: System.Threading.Mutex.ReleaseMutex\n  commentId: M:System.Threading.Mutex.ReleaseMutex\n  id: ReleaseMutex\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: ReleaseMutex()\n  fullName: System.Threading.Mutex.ReleaseMutex()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReleaseMutex\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 381\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> once.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public void ReleaseMutex()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub ReleaseMutex\n  exceptions:\n  - type: System.ApplicationException\n    commentId: T:System.ApplicationException\n    description: \"\\n<p>The calling thread does not own the mutex. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Mutex.ReleaseMutex()\n- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)\n  commentId: M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)\n  id: TryOpenExisting(System.String,System.Threading.Mutex@)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  - vb\n  name: TryOpenExisting(String, out Mutex)\n  fullName: System.Threading.Mutex.TryOpenExisting(System.String, out System.Threading.Mutex)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Mutex.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryOpenExisting\n    path: src/mscorlib/src/System/Threading/Mutex.cs\n    startLine: 302\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static bool TryOpenExisting(string name, out Mutex result)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function TryOpenExisting(name As String, ByRef result As Mutex) As Boolean\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the system mutex to open.</p>\\n\"\n    - id: result\n      type: System.Threading.Mutex\n      description: \"\\n<p>When this method returns, contains a <xref href=\\\"System.Threading.Mutex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the named mutex if the call succeeded, or <strong>null</strong> if the call failed. This parameter is treated as uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the named mutex was opened successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named mutex exists, but the user does not have the security access required to use it.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Mutex.TryOpenExisting(System.String, ByRef System.Threading.Mutex)\n  name.vb: TryOpenExisting(String, ByRef Mutex)\n  nameWithType: Mutex.TryOpenExisting(String, out Mutex)\n  nameWithType.vb: Mutex.TryOpenExisting(String, ByRef Mutex)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: true\n  name: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  commentId: T:System.MarshalByRefObject\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Threading.WaitHandle.WaitTimeout\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitTimeout\n  fullName: System.Threading.WaitHandle.WaitTimeout\n  nameWithType: WaitHandle.WaitTimeout\n  commentId: F:System.Threading.WaitHandle.WaitTimeout\n- uid: System.Threading.WaitHandle.InvalidHandle\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: InvalidHandle\n  fullName: System.Threading.WaitHandle.InvalidHandle\n  nameWithType: WaitHandle.InvalidHandle\n  commentId: F:System.Threading.WaitHandle.InvalidHandle\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(Int32, Boolean)\n  fullName: System.Threading.WaitHandle.WaitOne(System.Int32, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitOne\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne()\n  fullName: System.Threading.WaitHandle.WaitOne()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne()\n  commentId: M:System.Threading.WaitHandle.WaitOne\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(Int32)\n  fullName: System.Threading.WaitHandle.WaitOne(System.Int32)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(Int32)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], Int32, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32, System.Boolean)\n  name.vb: WaitAll(WaitHandle(), Int32, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan, System.Boolean)\n  name.vb: WaitAll(WaitHandle(), TimeSpan, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[])\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle())\n  name.vb: WaitAll(WaitHandle())\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[])\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle())\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], Int32)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32)\n  name.vb: WaitAll(WaitHandle(), Int32)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan)\n  name.vb: WaitAll(WaitHandle(), TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], Int32, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32, System.Boolean)\n  name.vb: WaitAny(WaitHandle(), Int32, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan, System.Boolean)\n  name.vb: WaitAny(WaitHandle(), TimeSpan, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan)\n  name.vb: WaitAny(WaitHandle(), TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[])\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle())\n  name.vb: WaitAny(WaitHandle())\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[])\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle())\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], Int32)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32)\n  name.vb: WaitAny(WaitHandle(), Int32)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SignalAndWait(WaitHandle, WaitHandle)\n  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)\n  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle, System.TimeSpan, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle, System.Int32, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.Close\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Close()\n  fullName: System.Threading.WaitHandle.Close()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.Close\n    name: Close\n    fullName: System.Threading.WaitHandle.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.Close\n    name: Close\n    fullName: System.Threading.WaitHandle.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.Close()\n  commentId: M:System.Threading.WaitHandle.Close\n- uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Threading.WaitHandle.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.Dispose(Boolean)\n  commentId: M:System.Threading.WaitHandle.Dispose(System.Boolean)\n- uid: System.Threading.WaitHandle.Dispose\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Dispose()\n  fullName: System.Threading.WaitHandle.Dispose()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.Dispose\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.Dispose\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.Dispose()\n  commentId: M:System.Threading.WaitHandle.Dispose\n- uid: System.Threading.WaitHandle.Handle\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Handle\n  fullName: System.Threading.WaitHandle.Handle\n  nameWithType: WaitHandle.Handle\n  commentId: P:System.Threading.WaitHandle.Handle\n- uid: System.Threading.WaitHandle.SafeWaitHandle\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SafeWaitHandle\n  fullName: System.Threading.WaitHandle.SafeWaitHandle\n  nameWithType: WaitHandle.SafeWaitHandle\n  commentId: P:System.Threading.WaitHandle.SafeWaitHandle\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: MemberwiseClone(Boolean)\n  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  spec.csharp:\n  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n    name: MemberwiseClone\n    fullName: System.MarshalByRefObject.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n    name: MemberwiseClone\n    fullName: System.MarshalByRefObject.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: GetLifetimeService()\n  fullName: System.MarshalByRefObject.GetLifetimeService()\n  spec.csharp:\n  - uid: System.MarshalByRefObject.GetLifetimeService\n    name: GetLifetimeService\n    fullName: System.MarshalByRefObject.GetLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.GetLifetimeService\n    name: GetLifetimeService\n    fullName: System.MarshalByRefObject.GetLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  commentId: M:System.MarshalByRefObject.GetLifetimeService\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: InitializeLifetimeService()\n  fullName: System.MarshalByRefObject.InitializeLifetimeService()\n  spec.csharp:\n  - uid: System.MarshalByRefObject.InitializeLifetimeService\n    name: InitializeLifetimeService\n    fullName: System.MarshalByRefObject.InitializeLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.InitializeLifetimeService\n    name: InitializeLifetimeService\n    fullName: System.MarshalByRefObject.InitializeLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  commentId: M:System.MarshalByRefObject.InitializeLifetimeService\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: CreateObjRef(Type)\n  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)\n  spec.csharp:\n  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n    name: CreateObjRef\n    fullName: System.MarshalByRefObject.CreateObjRef\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n    name: CreateObjRef\n    fullName: System.MarshalByRefObject.CreateObjRef\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  parent: System.Threading.WaitHandleExtensions\n  definition: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  name: GetSafeWaitHandle()\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle()\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle()\n  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n- uid: System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  definition: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  name: SetSafeWaitHandle(SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(SafeWaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  isExternal: true\n  name: GetSafeWaitHandle(WaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n- uid: System.Threading.WaitHandleExtensions\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandleExtensions\n  fullName: System.Threading.WaitHandleExtensions\n  nameWithType: WaitHandleExtensions\n  commentId: T:System.Threading.WaitHandleExtensions\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  isExternal: true\n  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Threading.Mutex\n  parent: System.Threading\n  isExternal: false\n  name: Mutex\n  fullName: System.Threading.Mutex\n  nameWithType: Mutex\n  commentId: T:System.Threading.Mutex\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException\n  fullName: System.Threading.WaitHandleCannotBeOpenedException\n  nameWithType: WaitHandleCannotBeOpenedException\n  commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ApplicationException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n"}