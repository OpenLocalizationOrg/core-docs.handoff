{"nodes":[{"pos":[1389,1397],"content":"GCHandle","needQuote":true,"nodes":[{"content":"GCHandle","pos":[0,8]}]},{"pos":[3094,3105],"content":"IsAllocated","needQuote":true,"nodes":[{"content":"IsAllocated","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle is allocated; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3833,3930],"source":"\\n<p>\\n<strong>true</strong> if the handle is allocated; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4388,4394],"content":"Target","needQuote":true,"nodes":[{"content":"Target","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The object this handle represents.&lt;/p&gt;\\n","pos":[5189,5234],"source":"\\n<p>The object this handle represents.</p>\\n"},{"content":"\\n&lt;p&gt;The handle was freed, or never initialized.","pos":[5361,5409],"source":"\\n<p>The handle was freed, or never initialized."},{"content":"&lt;/p&gt;\\n","pos":[5410,5416],"source":" </p>\\n"},{"pos":[6018,6038],"content":"AddrOfPinnedObject()","needQuote":true,"nodes":[{"content":"AddrOfPinnedObject()","pos":[0,20]}]},{"pos":[8088,8101],"content":"Alloc(Object)","needQuote":true,"nodes":[{"content":"Alloc(Object)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An instance with nonprimitive (non-blittable) members cannot be pinned.","pos":[9779,9855],"source":"\\n<p>An instance with nonprimitive (non-blittable) members cannot be pinned."},{"content":"&lt;/p&gt;\\n","pos":[9856,9862],"source":" </p>\\n"},{"pos":[10757,10784],"content":"Alloc(Object, GCHandleType)","needQuote":true,"nodes":[{"content":"Alloc(Object, GCHandleType)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An instance with nonprimitive (non-blittable) members cannot be pinned.","pos":[12793,12869],"source":"\\n<p>An instance with nonprimitive (non-blittable) members cannot be pinned."},{"content":"&lt;/p&gt;\\n","pos":[12870,12876],"source":" </p>\\n"},{"pos":[13656,13670],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15657,15663],"content":"Free()","needQuote":true,"nodes":[{"content":"Free()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The handle was freed or never initialized.","pos":[16503,16550],"source":"\\n<p>The handle was freed or never initialized."},{"content":"&lt;/p&gt;\\n","pos":[16551,16557],"source":" </p>\\n"},{"pos":[17180,17198],"content":"FromIntPtr(IntPtr)","needQuote":true,"nodes":[{"content":"FromIntPtr(IntPtr)","pos":[0,18]}]},{"pos":[19512,19525],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21112,21140],"content":"Equality(GCHandle, GCHandle)","needQuote":true,"nodes":[{"content":"Equality(GCHandle, GCHandle)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; parameters are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22582,22706],"source":"\\n<p>\\n<strong>true</strong> if the <em>a</em> and <em>b</em> parameters are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23236,23264],"content":"Explicit(IntPtr to GCHandle)","needQuote":true,"nodes":[{"content":"Explicit(IntPtr to GCHandle)","pos":[0,28]}]},{"pos":[25802,25830],"content":"Explicit(GCHandle to IntPtr)","needQuote":true,"nodes":[{"content":"Explicit(GCHandle to IntPtr)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The integer value.&lt;/p&gt;\\n","pos":[26988,27017],"source":"\\n<p>The integer value.</p>\\n"},{"pos":[28097,28127],"content":"Inequality(GCHandle, GCHandle)","needQuote":true,"nodes":[{"content":"Inequality(GCHandle, GCHandle)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; parameters are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29578,29706],"source":"\\n<p>\\n<strong>true</strong> if the <em>a</em> and <em>b</em> parameters are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30187,30205],"content":"ToIntPtr(GCHandle)","needQuote":true,"nodes":[{"content":"ToIntPtr(GCHandle)","pos":[0,18]}]},{"pos":[31775,31805],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[32030,32040],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[32141,32149],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32200,32201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32228,32229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32302,32310],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32361,32362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32389,32390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32593,32615],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32763,32769],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32836,32837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32887,32893],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32954,32955]},{"pos":[33010,33016],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33076,33077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33174,33180],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33247,33248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33298,33304],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33365,33366]},{"pos":[33421,33427],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33487,33488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33733,33764],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33930,33945],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34021,34022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34072,34078],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34139,34140]},{"pos":[34195,34201],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34261,34262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34368,34383],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34459,34460],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34510,34516],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34577,34578]},{"pos":[34633,34639],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34699,34700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34926,34935],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[35028,35035],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35103,35104],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35131,35132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35201,35208],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35276,35277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35304,35305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35461,35470],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[35624,35630],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35751,35757],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[35889,35896],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36044,36050],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[36245,36253],"content":"GCHandle","needQuote":true,"nodes":[{"content":"GCHandle","pos":[0,8]}]},{"pos":[36506,36518],"content":"GCHandleType","needQuote":true,"nodes":[{"content":"GCHandleType","pos":[0,12]}]},{"pos":[36763,36777],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[36902,36908],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36957,36958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37008,37014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37074,37075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37161,37167],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37216,37217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37267,37273],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37333,37334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37537,37550],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37657,37668],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37722,37723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37750,37751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37827,37838],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37892,37893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37920,37921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38087,38092],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38253,38278],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[38491,38508],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.GCHandle\n  commentId: T:System.Runtime.InteropServices.GCHandle\n  id: GCHandle\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject\n  - System.Runtime.InteropServices.GCHandle.Alloc(System.Object)\n  - System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)\n  - System.Runtime.InteropServices.GCHandle.Equals(System.Object)\n  - System.Runtime.InteropServices.GCHandle.Free\n  - System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)\n  - System.Runtime.InteropServices.GCHandle.GetHashCode\n  - System.Runtime.InteropServices.GCHandle.IsAllocated\n  - System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  - System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle\n  - System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr\n  - System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  - System.Runtime.InteropServices.GCHandle.Target\n  - System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)\n  langs:\n  - csharp\n  - vb\n  name: GCHandle\n  fullName: System.Runtime.InteropServices.GCHandle\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GCHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Provides a way to access a managed object from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      [ComVisible(true)]\n\n      public struct GCHandle\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      <ComVisible(True)>\n\n      Public Structure GCHandle\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: GCHandle\n- uid: System.Runtime.InteropServices.GCHandle.IsAllocated\n  commentId: P:System.Runtime.InteropServices.GCHandle.IsAllocated\n  id: IsAllocated\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: IsAllocated\n  fullName: System.Runtime.InteropServices.GCHandle.IsAllocated\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAllocated\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 178\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets a value indicating whether the handle is allocated.</p>\\n\"\n  syntax:\n    content: public bool IsAllocated { get; }\n    content.vb: Public ReadOnly Property IsAllocated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle is allocated; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GCHandle.IsAllocated\n- uid: System.Runtime.InteropServices.GCHandle.Target\n  commentId: P:System.Runtime.InteropServices.GCHandle.Target\n  id: Target\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Target\n  fullName: System.Runtime.InteropServices.GCHandle.Target\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Target\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 134\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets or sets the object this handle represents.</p>\\n\"\n  syntax:\n    content: >-\n      public object Target\n\n      {\n          [SecurityCritical]\n          get;\n          [SecurityCritical]\n          set;\n      }\n    content.vb: Public Property Target As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The object this handle represents.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The handle was freed, or never initialized. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: GCHandle.Target\n- uid: System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject\n  commentId: M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject\n  id: AddrOfPinnedObject\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: AddrOfPinnedObject()\n  fullName: System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddrOfPinnedObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 159\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Retrieves the address of an object in a <xref href=\\\"System.Runtime.InteropServices.GCHandleType.Pinned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public IntPtr AddrOfPinnedObject()\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Function AddrOfPinnedObject As IntPtr\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The address of the pinned object as an <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The handle is any type other than <xref href=\\\"System.Runtime.InteropServices.GCHandleType.Pinned\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GCHandle.AddrOfPinnedObject()\n- uid: System.Runtime.InteropServices.GCHandle.Alloc(System.Object)\n  commentId: M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)\n  id: Alloc(System.Object)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Alloc(Object)\n  fullName: System.Runtime.InteropServices.GCHandle.Alloc(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Alloc\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 88\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a <xref href=\\\"System.Runtime.InteropServices.GCHandleType.Normal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> handle for the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static GCHandle Alloc(object value)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function Alloc(value As Object) As GCHandle\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object that uses the <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A new <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that protects the object from garbage collection. This <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must be released with <xref href=\\\"System.Runtime.InteropServices.GCHandle.Free\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when it is no longer needed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An instance with nonprimitive (non-blittable) members cannot be pinned. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCHandle.Alloc(Object)\n- uid: System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)\n  commentId: M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)\n  id: Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Alloc(Object, GCHandleType)\n  fullName: System.Runtime.InteropServices.GCHandle.Alloc(System.Object, System.Runtime.InteropServices.GCHandleType)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Alloc\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 94\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a handle of the specified type for the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static GCHandle Alloc(object value, GCHandleType type)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function Alloc(value As Object, type As GCHandleType) As GCHandle\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object that uses the <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: type\n      type: System.Runtime.InteropServices.GCHandleType\n      description: \"\\n<p>One of the <xref href=\\\"System.Runtime.InteropServices.GCHandleType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values, indicating the type of <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create. </p>\\n\"\n    return:\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A new <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the specified type. This <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must be released with <xref href=\\\"System.Runtime.InteropServices.GCHandle.Free\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when it is no longer needed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An instance with nonprimitive (non-blittable) members cannot be pinned. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCHandle.Alloc(Object, GCHandleType)\n- uid: System.Runtime.InteropServices.GCHandle.Equals(System.Object)\n  commentId: M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Runtime.InteropServices.GCHandle.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 244\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the current <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GCHandle.Equals(Object)\n- uid: System.Runtime.InteropServices.GCHandle.Free\n  commentId: M:System.Runtime.InteropServices.GCHandle.Free\n  id: Free\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Free()\n  fullName: System.Runtime.InteropServices.GCHandle.Free()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Free\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 102\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases a <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public void Free()\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Sub Free\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The handle was freed or never initialized. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GCHandle.Free()\n- uid: System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)\n  id: FromIntPtr(System.IntPtr)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: FromIntPtr(IntPtr)\n  fullName: System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 194\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object created from a handle to a managed object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static GCHandle FromIntPtr(IntPtr value)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function FromIntPtr(value As IntPtr) As GCHandle\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>An <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> handle to a managed object to create a <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from.</p>\\n\"\n    return:\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A new <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that corresponds to the value parameter.  </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The value of the <em>value</em> parameter is <xref href=\\\"System.IntPtr.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCHandle.FromIntPtr(IntPtr)\n- uid: System.Runtime.InteropServices.GCHandle.GetHashCode\n  commentId: M:System.Runtime.InteropServices.GCHandle.GetHashCode\n  id: GetHashCode\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Runtime.InteropServices.GCHandle.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 239\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns an identifier for the current <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An identifier for the current <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GCHandle.GetHashCode()\n- uid: System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  commentId: M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  id: op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Equality(GCHandle, GCHandle)\n  fullName: System.Runtime.InteropServices.GCHandle.Equality(System.Runtime.InteropServices.GCHandle, System.Runtime.InteropServices.GCHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 257\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns a value indicating whether two <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(GCHandle a, GCHandle b)\n    content.vb: Public Shared Operator =(a As GCHandle, b As GCHandle) As Boolean\n    parameters:\n    - id: a\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>b</em> parameter. </p>\\n\"\n    - id: b\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>a</em> parameter.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>a</em> and <em>b</em> parameters are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCHandle.Equality(GCHandle, GCHandle)\n- uid: System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle\n  commentId: M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle\n  id: op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Explicit(IntPtr to GCHandle)\n  fullName: System.Runtime.InteropServices.GCHandle.Explicit(System.IntPtr to System.Runtime.InteropServices.GCHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 188\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is stored using an internal integer representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static explicit operator GCHandle(IntPtr value)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Narrowing Operator CType(value As IntPtr) As GCHandle\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>An <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates the handle for which the conversion is required. </p>\\n\"\n    return:\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>The stored <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object using an internal integer representation.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.GCHandle.Narrowing(System.IntPtr to System.Runtime.InteropServices.GCHandle)\n  name.vb: Narrowing(IntPtr to GCHandle)\n  nameWithType: GCHandle.Explicit(IntPtr to GCHandle)\n  nameWithType.vb: GCHandle.Narrowing(IntPtr to GCHandle)\n- uid: System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr\n  commentId: M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr\n  id: op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Explicit(GCHandle to IntPtr)\n  fullName: System.Runtime.InteropServices.GCHandle.Explicit(System.Runtime.InteropServices.GCHandle to System.IntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 221\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is stored using an internal integer representation.</p>\\n\"\n  syntax:\n    content: public static explicit operator IntPtr(GCHandle value)\n    content.vb: Public Shared Narrowing Operator CType(value As GCHandle) As IntPtr\n    parameters:\n    - id: value\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which the integer is required. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The integer value.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandleType\n    commentId: T:System.Runtime.InteropServices.GCHandleType\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.GCHandle.Narrowing(System.Runtime.InteropServices.GCHandle to System.IntPtr)\n  name.vb: Narrowing(GCHandle to IntPtr)\n  nameWithType: GCHandle.Explicit(GCHandle to IntPtr)\n  nameWithType.vb: GCHandle.Narrowing(GCHandle to IntPtr)\n- uid: System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  commentId: M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  id: op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: Inequality(GCHandle, GCHandle)\n  fullName: System.Runtime.InteropServices.GCHandle.Inequality(System.Runtime.InteropServices.GCHandle, System.Runtime.InteropServices.GCHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 262\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns a value indicating whether two <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(GCHandle a, GCHandle b)\n    content.vb: Public Shared Operator <>(a As GCHandle, b As GCHandle) As Boolean\n    parameters:\n    - id: a\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>b</em> parameter. </p>\\n\"\n    - id: b\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>a</em> parameter.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>a</em> and <em>b</em> parameters are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCHandle.Inequality(GCHandle, GCHandle)\n- uid: System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)\n  commentId: M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)\n  id: ToIntPtr(System.Runtime.InteropServices.GCHandle)\n  parent: System.Runtime.InteropServices.GCHandle\n  langs:\n  - csharp\n  - vb\n  name: ToIntPtr(GCHandle)\n  fullName: System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs\n    startLine: 226\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the internal integer representation of a <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static IntPtr ToIntPtr(GCHandle value)\n    content.vb: Public Shared Function ToIntPtr(value As GCHandle) As IntPtr\n    parameters:\n    - id: value\n      type: System.Runtime.InteropServices.GCHandle\n      description: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to retrieve an internal integer representation from.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a <xref href=\\\"System.Runtime.InteropServices.GCHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GCHandle.ToIntPtr(GCHandle)\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Runtime.InteropServices.GCHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: GCHandle\n  fullName: System.Runtime.InteropServices.GCHandle\n  nameWithType: GCHandle\n  commentId: T:System.Runtime.InteropServices.GCHandle\n- uid: System.Runtime.InteropServices.GCHandleType\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: GCHandleType\n  fullName: System.Runtime.InteropServices.GCHandleType\n  nameWithType: GCHandleType\n  commentId: T:System.Runtime.InteropServices.GCHandleType\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}