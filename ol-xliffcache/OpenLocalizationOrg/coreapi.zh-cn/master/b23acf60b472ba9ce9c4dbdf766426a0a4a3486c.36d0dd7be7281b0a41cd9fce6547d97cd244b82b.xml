{"nodes":[{"pos":[841,875],"content":"ConditionalWeakTable<TKey, TValue>","needQuote":true,"nodes":[{"content":"ConditionalWeakTable&lt;TKey, TValue&gt;","pos":[0,34],"source":"ConditionalWeakTable<TKey, TValue>"}]},{"content":"\\n&lt;p&gt;The reference type to which the field is attached.","pos":[1808,1863],"source":"\\n<p>The reference type to which the field is attached."},{"content":"&lt;/p&gt;\\n","pos":[1864,1870],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The field's type.","pos":[1909,1931],"source":"\\n<p>The field's type."},{"content":"This must be a reference type.&lt;/p&gt;\\n","pos":[1932,1968],"source":" This must be a reference type.</p>\\n"},{"pos":[2905,2927],"content":"ConditionalWeakTable()","needQuote":true,"nodes":[{"content":"ConditionalWeakTable()","pos":[0,22]}]},{"pos":[4354,4371],"content":"Add(TKey, TValue)","needQuote":true,"nodes":[{"content":"Add(TKey, TValue)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The key to add.","pos":[5176,5196],"source":"\\n<p>The key to add."},{"content":"&lt;em&gt;key&lt;/em&gt; represents the object to which the property is attached.&lt;/p&gt;\\n","pos":[5197,5272],"source":" <em>key</em> represents the object to which the property is attached.</p>\\n"},{"content":"\\n&lt;p&gt;The key's property value.&lt;/p&gt;\\n","pos":[5333,5369],"source":"\\n<p>The key's property value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5488,5539],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; already exists.&lt;/p&gt;\\n","pos":[5636,5677],"source":"\\n<p>\\n<em>key</em> already exists.</p>\\n"},{"pos":[6557,6567],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[8153,8175],"content":"GetOrCreateValue(TKey)","needQuote":true,"nodes":[{"content":"GetOrCreateValue(TKey)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The key to search for.","pos":[9182,9209],"source":"\\n<p>The key to search for."},{"content":"&lt;em&gt;key&lt;/em&gt; represents the object to which the property is attached.&lt;/p&gt;\\n","pos":[9210,9285],"source":" <em>key</em> represents the object to which the property is attached.</p>\\n"},{"content":"\\n&lt;p&gt;The value that corresponds to &lt;em&gt;key&lt;/em&gt;, if &lt;em&gt;key&lt;/em&gt; already exists in the table; otherwise, a new value created by the default constructor of the class defined by the &lt;em&gt;TValue&lt;/em&gt; generic type parameter.&lt;/p&gt;\\n","pos":[9342,9567],"source":"\\n<p>The value that corresponds to <em>key</em>, if <em>key</em> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <em>TValue</em> generic type parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9686,9737],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[11559,11629],"content":"GetValue(TKey, ConditionalWeakTable<TKey, TValue>.CreateValueCallback)","needQuote":true,"nodes":[{"content":"GetValue(TKey, ConditionalWeakTable&lt;TKey, TValue&gt;.CreateValueCallback)","pos":[0,70],"source":"GetValue(TKey, ConditionalWeakTable<TKey, TValue>.CreateValueCallback)"}]},{"content":"\\n&lt;p&gt;The key to search for.","pos":[12874,12901],"source":"\\n<p>The key to search for."},{"content":"&lt;em&gt;key&lt;/em&gt; represents the object to which the property is attached.&lt;/p&gt;\\n","pos":[12902,12977],"source":" <em>key</em> represents the object to which the property is attached.</p>\\n"},{"content":"\\n&lt;p&gt;A delegate to a method that can create a value for the given &lt;em&gt;key&lt;/em&gt;.","pos":[13116,13195],"source":"\\n<p>A delegate to a method that can create a value for the given <em>key</em>."},{"content":"It has a single parameter of type &lt;em&gt;TKey&lt;/em&gt;, and returns a value of type &lt;em&gt;TValue&lt;/em&gt;.&lt;/p&gt;\\n","pos":[13196,13295],"source":" It has a single parameter of type <em>TKey</em>, and returns a value of type <em>TValue</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value attached to &lt;em&gt;key&lt;/em&gt;, if &lt;em&gt;key&lt;/em&gt; already exists in the table; otherwise, the new value returned by the &lt;em&gt;createValueCallback&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[13352,13523],"source":"\\n<p>The value attached to <em>key</em>, if <em>key</em> already exists in the table; otherwise, the new value returned by the <em>createValueCallback</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; or &lt;em&gt;createValueCallback&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13642,13725],"source":"\\n<p>\\n<em>key</em> or <em>createValueCallback</em> is <strong>null</strong>.</p>\\n"},{"pos":[15247,15259],"content":"Remove(TKey)","needQuote":true,"nodes":[{"content":"Remove(TKey)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key to remove.","pos":[16072,16095],"source":"\\n<p>The key to remove."},{"content":"&lt;/p&gt;\\n","pos":[16096,16102],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is found and removed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16163,16265],"source":"\\n<p>\\n<strong>true</strong> if the key is found and removed; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16384,16435],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[17143,17172],"content":"TryGetValue(TKey, out TValue)","needQuote":true,"nodes":[{"content":"TryGetValue(TKey, out TValue)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The key that represents an object with an attached property.&lt;/p&gt;\\n","pos":[18051,18122],"source":"\\n<p>The key that represents an object with an attached property.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the attached property value.","pos":[18183,18251],"source":"\\n<p>When this method returns, contains the attached property value."},{"content":"If &lt;em&gt;key&lt;/em&gt; is not found, &lt;em&gt;value&lt;/em&gt; contains the default value.&lt;/p&gt;\\n","pos":[18252,18330],"source":" If <em>key</em> is not found, <em>value</em> contains the default value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;key&lt;/em&gt; is found; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18391,18486],"source":"\\n<p>\\n<strong>true</strong> if <em>key</em> is found; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18605,18656],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[19756,19787],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[19993,19999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20159,20169],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20264,20272],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20341,20342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20369,20370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20440,20448],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20517,20518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20545,20546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20729,20743],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20862,20868],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20935,20936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20986,20992],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21052,21053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21136,21142],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21209,21210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21260,21266],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21326,21327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21541,21563],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[21711,21717],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21784,21785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21835,21841],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21902,21903]},{"pos":[21958,21964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22024,22025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22122,22128],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22195,22196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22246,22252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22313,22314]},{"pos":[22369,22375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22435,22436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22681,22712],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[22878,22893],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22969,22970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23020,23026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23087,23088]},{"pos":[23143,23149],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23209,23210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23316,23331],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23407,23408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23458,23464],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23525,23526]},{"pos":[23581,23587],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23647,23648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23878,23891],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23992,24003],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24075,24076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24103,24104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24177,24188],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24260,24261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24288,24289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24464,24473],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[24566,24573],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24641,24642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24669,24670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24739,24746],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24814,24815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24842,24843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25018,25035],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25144,25159],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25235,25236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25263,25264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25341,25356],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25432,25433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25460,25461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25606,25612],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[25720,25724],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[25832,25838],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[25945,25949],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[26030,26036],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[26231,26273],"content":"ConditionalWeakTable.CreateValueCallback<>","needQuote":true,"nodes":[{"content":"ConditionalWeakTable.CreateValueCallback&lt;&gt;","pos":[0,42],"source":"ConditionalWeakTable.CreateValueCallback<>"}]},{"pos":[26620,26660],"content":"ConditionalWeakTable.CreateValueCallback","needQuote":true,"nodes":[{"content":"ConditionalWeakTable.CreateValueCallback","pos":[0,40]}]},{"pos":[26758,26759],"content":"<","needQuote":true,"nodes":[]},{"pos":[26913,26953],"content":"ConditionalWeakTable.CreateValueCallback","needQuote":true,"nodes":[{"content":"ConditionalWeakTable.CreateValueCallback","pos":[0,40]}]},{"content":"(Of","pos":[27052,27055]},{"pos":[27089,27090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27388,27395],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27541,27562],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[27763,27780],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[27957,27979],"content":"MissingMethodException","needQuote":true,"nodes":[{"content":"MissingMethodException","pos":[0,22]}]}],"content":"items:\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2\n  id: ConditionalWeakTable`2\n  parent: System.Runtime.CompilerServices\n  children:\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  langs:\n  - csharp\n  - vb\n  name: ConditionalWeakTable<TKey, TValue>\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConditionalWeakTable\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 71\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Enables compilers to dynamically attach object fields to managed objects.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public sealed class ConditionalWeakTable<TKey, TValue>\n          where TKey : class where TValue : class\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public NotInheritable Class ConditionalWeakTable(Of TKey As Class, TValue As Class)\n    typeParameters:\n    - id: TKey\n      description: \"\\n<p>The reference type to which the field is attached. </p>\\n\"\n    - id: TValue\n      description: \"\\n<p>The field's type. This must be a reference type.</p>\\n\"\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue)\n  name.vb: ConditionalWeakTable(Of TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey, TValue>\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  id: '#ctor'\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: ConditionalWeakTable()\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.ConditionalWeakTable()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 78\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.CompilerServices.ConditionalWeakTable`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public ConditionalWeakTable()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).ConditionalWeakTable()\n  nameWithType: ConditionalWeakTable<TKey, TValue>.ConditionalWeakTable()\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).ConditionalWeakTable()\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  id: Add(`0,`1)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: Add(TKey, TValue)\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Add(TKey, TValue)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 125\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Adds a key to the table.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Add(TKey key, TValue value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Add(key As TKey, value As TValue)\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key to add. <em>key</em> represents the object to which the property is attached.</p>\\n\"\n    - id: value\n      type: '{TValue}'\n      description: \"\\n<p>The key's property value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>key</em> already exists.</p>\\n\"\n  seealso:\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Add(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey, TValue>.Add(TKey, TValue)\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).Add(TKey, TValue)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  id: Finalize\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Finalize\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 590\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\\\"System.Runtime.CompilerServices.ConditionalWeakTable`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      protected void Finalize()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Protected Sub Finalize\n  seealso:\n  - type: System.Object.Finalize\n    commentId: M:System.Object.Finalize\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Finalize()\n  nameWithType: ConditionalWeakTable<TKey, TValue>.Finalize()\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).Finalize()\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  id: GetOrCreateValue(`0)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: GetOrCreateValue(TKey)\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.GetOrCreateValue(TKey)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetOrCreateValue\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 273\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key. </p>\\n\"\n  syntax:\n    content: public TValue GetOrCreateValue(TKey key)\n    content.vb: Public Function GetOrCreateValue(key As TKey) As TValue\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key to search for. <em>key</em> represents the object to which the property is attached.</p>\\n\"\n    return:\n      type: '{TValue}'\n      description: \"\\n<p>The value that corresponds to <em>key</em>, if <em>key</em> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <em>TValue</em> generic type parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MissingMemberException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The class that represents the table's value does not define a default constructor.</p>\\n\"\n  seealso:\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).GetOrCreateValue(TKey)\n  nameWithType: ConditionalWeakTable<TKey, TValue>.GetOrCreateValue(TKey)\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).GetOrCreateValue(TKey)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  id: GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: GetValue(TKey, ConditionalWeakTable<TKey, TValue>.CreateValueCallback)\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.GetValue(TKey, System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.CreateValueCallback)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 221\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public TValue GetValue(TKey key, ConditionalWeakTable<TKey, TValue>.CreateValueCallback createValueCallback)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function GetValue(key As TKey, createValueCallback As ConditionalWeakTable(Of TKey, TValue).CreateValueCallback) As TValue\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key to search for. <em>key</em> represents the object to which the property is attached.</p>\\n\"\n    - id: createValueCallback\n      type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n      description: \"\\n<p>A delegate to a method that can create a value for the given <em>key</em>. It has a single parameter of type <em>TKey</em>, and returns a value of type <em>TValue</em>.</p>\\n\"\n    return:\n      type: '{TValue}'\n      description: \"\\n<p>The value attached to <em>key</em>, if <em>key</em> already exists in the table; otherwise, the new value returned by the <em>createValueCallback</em> delegate.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> or <em>createValueCallback</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n    commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).GetValue(TKey, System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)\n  name.vb: GetValue(TKey, ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)\n  nameWithType: ConditionalWeakTable<TKey, TValue>.GetValue(TKey, ConditionalWeakTable<TKey, TValue>.CreateValueCallback)\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).GetValue(TKey, ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  id: Remove(`0)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: Remove(TKey)\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Remove(TKey)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 160\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Removes a key and its value from the table.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public bool Remove(TKey key)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Remove(key As TKey) As Boolean\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key to remove. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is found and removed; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Remove(TKey)\n  nameWithType: ConditionalWeakTable<TKey, TValue>.Remove(TKey)\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).Remove(TKey)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  id: TryGetValue(`0,`1@)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  - vb\n  name: TryGetValue(TKey, out TValue)\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.TryGetValue(TKey, out TValue)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryGetValue\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Gets the value of the specified key.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public bool TryGetValue(TKey key, out TValue value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key that represents an object with an attached property.</p>\\n\"\n    - id: value\n      type: '{TValue}'\n      description: \"\\n<p>When this method returns, contains the attached property value. If <em>key</em> is not found, <em>value</em> contains the default value.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>key</em> is found; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)\n  name.vb: TryGetValue(TKey, ByRef TValue)\n  nameWithType: ConditionalWeakTable<TKey, TValue>.TryGetValue(TKey, out TValue)\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)\nreferences:\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: '{TKey}'\n  definition: TKey\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n  commentId: '!:TKey'\n- uid: '{TValue}'\n  definition: TValue\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n  commentId: '!:TValue'\n- uid: TKey\n  isExternal: false\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n- uid: TValue\n  isExternal: false\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: ConditionalWeakTable.CreateValueCallback<>\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<>\n  fullname.vb: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback(Of )\n  name.vb: ConditionalWeakTable.CreateValueCallback(Of )\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n    name: ConditionalWeakTable.CreateValueCallback\n    fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback\n  - name: <\n    fullName: <\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n    name: ConditionalWeakTable.CreateValueCallback\n    fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback\n  - name: '(Of '\n    fullName: '(Of '\n  - name: )\n    fullName: )\n  nameWithType: ConditionalWeakTable.CreateValueCallback<>\n  nameWithType.vb: ConditionalWeakTable.CreateValueCallback(Of )\n  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.MissingMethodException\n  isExternal: false\n  name: MissingMethodException\n  fullName: System.MissingMethodException\n  nameWithType: MissingMethodException\n  commentId: T:System.MissingMethodException\n"}