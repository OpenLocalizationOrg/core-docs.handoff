{"nodes":[{"pos":[1145,1164],"content":"CspKeyContainerInfo","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[2737,2771],"content":"CspKeyContainerInfo(CspParameters)","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo(CspParameters)","pos":[0,34]}]},{"pos":[4310,4320],"content":"Accessible","needQuote":true,"nodes":[{"content":"Accessible","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is accessible; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5100,5195],"source":"\\n<p>\\n<strong>true</strong> if the key is accessible; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The key type is not supported.&lt;/p&gt;\\n","pos":[5314,5355],"source":"\\n<p>The key type is not supported.</p>\\n"},{"pos":[5736,5746],"content":"Exportable","needQuote":true,"nodes":[{"content":"Exportable","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key can be exported; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6530,6627],"source":"\\n<p>\\n<strong>true</strong> if the key can be exported; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The key type is not supported.&lt;/p&gt;\\n","pos":[6746,6787],"source":"\\n<p>The key type is not supported.</p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider cannot be found.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The key container was not found.&lt;/p&gt;\\n","pos":[6938,7054],"source":"\\n<p>The cryptographic service provider cannot be found.</p>\\n<p>-or-</p>\\n<p>The key container was not found.</p>\\n"},{"pos":[7447,7461],"content":"HardwareDevice","needQuote":true,"nodes":[{"content":"HardwareDevice","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is a hardware key; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8242,8341],"source":"\\n<p>\\n<strong>true</strong> if the key is a hardware key; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider cannot be found.&lt;/p&gt;\\n","pos":[8506,8568],"source":"\\n<p>The cryptographic service provider cannot be found.</p>\\n"},{"pos":[8971,8987],"content":"KeyContainerName","needQuote":true,"nodes":[{"content":"KeyContainerName","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The key container name.&lt;/p&gt;\\n","pos":[9746,9780],"source":"\\n<p>The key container name.</p>\\n"},{"pos":[10164,10173],"content":"KeyNumber","needQuote":true,"nodes":[{"content":"KeyNumber","pos":[0,9]}]},{"pos":[11627,11642],"content":"MachineKeyStore","needQuote":true,"nodes":[{"content":"MachineKeyStore","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is from the machine key set; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12435,12544],"source":"\\n<p>\\n<strong>true</strong> if the key is from the machine key set; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12927,12936],"content":"Protected","needQuote":true,"nodes":[{"content":"Protected","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key pair is protected; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13697,13796],"source":"\\n<p>\\n<strong>true</strong> if the key pair is protected; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The key type is not supported.&lt;/p&gt;\\n","pos":[13915,13956],"source":"\\n<p>The key type is not supported.</p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider cannot be found.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The key container was not found.&lt;/p&gt;\\n","pos":[14107,14223],"source":"\\n<p>The cryptographic service provider cannot be found.</p>\\n<p>-or-</p>\\n<p>The key container was not found.</p>\\n"},{"pos":[14609,14621],"content":"ProviderName","needQuote":true,"nodes":[{"content":"ProviderName","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The provider name.&lt;/p&gt;\\n","pos":[15370,15399],"source":"\\n<p>The provider name.</p>\\n"},{"pos":[15788,15800],"content":"ProviderType","needQuote":true,"nodes":[{"content":"ProviderType","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The provider type.","pos":[16546,16569],"source":"\\n<p>The provider type."},{"content":"The default is 1.&lt;/p&gt;\\n","pos":[16570,16593],"source":" The default is 1.</p>\\n"},{"pos":[16997,17014],"content":"RandomlyGenerated","needQuote":true,"nodes":[{"content":"RandomlyGenerated","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key container was randomly generated; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17854,17968],"source":"\\n<p>\\n<strong>true</strong> if the key container was randomly generated; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18353,18362],"content":"Removable","needQuote":true,"nodes":[{"content":"Removable","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is removable; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19141,19235],"source":"\\n<p>\\n<strong>true</strong> if the key is removable; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) was not found.&lt;/p&gt;\\n","pos":[19400,19466],"source":"\\n<p>The cryptographic service provider (CSP) was not found.</p>\\n"},{"pos":[19882,19904],"content":"UniqueKeyContainerName","needQuote":true,"nodes":[{"content":"UniqueKeyContainerName","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The unique key container name.&lt;/p&gt;\\n","pos":[20694,20735],"source":"\\n<p>The unique key container name.</p>\\n"},{"content":"\\n&lt;p&gt;The key type is not supported.&lt;/p&gt;\\n","pos":[20854,20895],"source":"\\n<p>The key type is not supported.</p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider cannot be found.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The key container was not found.&lt;/p&gt;\\n","pos":[21046,21162],"source":"\\n<p>The cryptographic service provider cannot be found.</p>\\n<p>-or-</p>\\n<p>The key container was not found.</p>\\n"},{"pos":[21378,21406],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[21603,21609],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21769,21779],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21874,21882],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21951,21952],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21979,21980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22050,22058],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22127,22128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22155,22156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22339,22353],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22472,22478],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22545,22546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22596,22602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22662,22663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22746,22752],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22819,22820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22870,22876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22936,22937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23151,23173],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23321,23327],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23394,23395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23445,23451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23512,23513]},{"pos":[23568,23574],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23634,23635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23732,23738],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23805,23806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23856,23862],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23923,23924]},{"pos":[23979,23985],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24045,24046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24291,24322],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24488,24503],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24579,24580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24630,24636],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24697,24698]},{"pos":[24753,24759],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24819,24820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24926,24941],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25017,25018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25068,25074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25135,25136]},{"pos":[25191,25197],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25257,25258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25488,25501],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25602,25613],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25685,25686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25713,25714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25787,25798],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25870,25871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25898,25899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26074,26083],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26176,26183],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26251,26252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26279,26280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26349,26356],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26424,26425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26452,26453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26628,26645],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[26754,26769],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26845,26846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26873,26874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26951,26966],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27042,27043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27070,27071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27216,27222],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[27404,27417],"content":"CspParameters","needQuote":true,"nodes":[{"content":"CspParameters","pos":[0,13]}]},{"pos":[27628,27635],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27783,27789],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[27981,27990],"content":"KeyNumber","needQuote":true,"nodes":[{"content":"KeyNumber","pos":[0,9]}]},{"pos":[28187,28192],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28349,28370],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[28581,28603],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  commentId: T:System.Security.Cryptography.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.CspKeyContainerInfo.Accessible\n  - System.Security.Cryptography.CspKeyContainerInfo.Exportable\n  - System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice\n  - System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName\n  - System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\n  - System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore\n  - System.Security.Cryptography.CspKeyContainerInfo.Protected\n  - System.Security.Cryptography.CspKeyContainerInfo.ProviderName\n  - System.Security.Cryptography.CspKeyContainerInfo.ProviderType\n  - System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated\n  - System.Security.Cryptography.CspKeyContainerInfo.Removable\n  - System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName\n  langs:\n  - csharp\n  - vb\n  name: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CspKeyContainerInfo\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 10\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides additional information about a cryptographic key pair. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public sealed class CspKeyContainerInfo\n    content.vb: Public NotInheritable Class CspKeyContainerInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CspKeyContainerInfo\n- uid: System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: CspKeyContainerInfo(CspParameters)\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.CspKeyContainerInfo(System.Security.Cryptography.CspParameters)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 12\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.CspKeyContainerInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified parameters.</p>\\n\"\n  syntax:\n    content: public CspKeyContainerInfo(CspParameters parameters)\n    content.vb: Public Sub New(parameters As CspParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: \"\\n<p>A <xref href=\\\"System.Security.Cryptography.CspParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that provides information about the key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CspKeyContainerInfo.CspKeyContainerInfo(CspParameters)\n- uid: System.Security.Cryptography.CspKeyContainerInfo.Accessible\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Accessible\n  id: Accessible\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: Accessible\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.Accessible\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Accessible\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 13\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key in a key container is accessible.</p>\\n\"\n  syntax:\n    content: public bool Accessible { get; }\n    content.vb: Public ReadOnly Property Accessible As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is accessible; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The key type is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.Accessible\n- uid: System.Security.Cryptography.CspKeyContainerInfo.Exportable\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Exportable\n  id: Exportable\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: Exportable\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.Exportable\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Exportable\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 14\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key can be exported from a key container.</p>\\n\"\n  syntax:\n    content: public bool Exportable { get; }\n    content.vb: Public ReadOnly Property Exportable As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key can be exported; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The key type is not supported.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider cannot be found.</p>\\n<p>-or-</p>\\n<p>The key container was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.Exportable\n- uid: System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice\n  id: HardwareDevice\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: HardwareDevice\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HardwareDevice\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 15\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key is a hardware key.</p>\\n\"\n  syntax:\n    content: public bool HardwareDevice { get; }\n    content.vb: Public ReadOnly Property HardwareDevice As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is a hardware key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider cannot be found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.HardwareDevice\n- uid: System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName\n  id: KeyContainerName\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: KeyContainerName\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyContainerName\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 16\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a key container name.</p>\\n\"\n  syntax:\n    content: public string KeyContainerName { get; }\n    content.vb: Public ReadOnly Property KeyContainerName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The key container name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.KeyContainerName\n- uid: System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\n  id: KeyNumber\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: KeyNumber\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyNumber\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 17\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\\n\"\n  syntax:\n    content: public KeyNumber KeyNumber { get; }\n    content.vb: Public ReadOnly Property KeyNumber As KeyNumber\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeyNumber\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.Cryptography.KeyNumber\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.KeyNumber\n- uid: System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore\n  id: MachineKeyStore\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: MachineKeyStore\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MachineKeyStore\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 18\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key is from a machine key set.</p>\\n\"\n  syntax:\n    content: public bool MachineKeyStore { get; }\n    content.vb: Public ReadOnly Property MachineKeyStore As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is from the machine key set; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.MachineKeyStore\n- uid: System.Security.Cryptography.CspKeyContainerInfo.Protected\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Protected\n  id: Protected\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: Protected\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.Protected\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Protected\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 19\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key pair is protected.</p>\\n\"\n  syntax:\n    content: public bool Protected { get; }\n    content.vb: Public ReadOnly Property Protected As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key pair is protected; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The key type is not supported.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider cannot be found.</p>\\n<p>-or-</p>\\n<p>The key container was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.Protected\n- uid: System.Security.Cryptography.CspKeyContainerInfo.ProviderName\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.ProviderName\n  id: ProviderName\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: ProviderName\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.ProviderName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProviderName\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 20\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the provider name of a key.</p>\\n\"\n  syntax:\n    content: public string ProviderName { get; }\n    content.vb: Public ReadOnly Property ProviderName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The provider name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.ProviderName\n- uid: System.Security.Cryptography.CspKeyContainerInfo.ProviderType\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.ProviderType\n  id: ProviderType\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: ProviderType\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.ProviderType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProviderType\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 21\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the provider type of a key.</p>\\n\"\n  syntax:\n    content: public int ProviderType { get; }\n    content.vb: Public ReadOnly Property ProviderType As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The provider type. The default is 1.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.ProviderType\n- uid: System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated\n  id: RandomlyGenerated\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: RandomlyGenerated\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RandomlyGenerated\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 22\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key container was randomly generated by a managed cryptography class.</p>\\n\"\n  syntax:\n    content: public bool RandomlyGenerated { get; }\n    content.vb: Public ReadOnly Property RandomlyGenerated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key container was randomly generated; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.RandomlyGenerated\n- uid: System.Security.Cryptography.CspKeyContainerInfo.Removable\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Removable\n  id: Removable\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: Removable\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.Removable\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Removable\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 23\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether a key can be removed from a key container.</p>\\n\"\n  syntax:\n    content: public bool Removable { get; }\n    content.vb: Public ReadOnly Property Removable As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is removable; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.Removable\n- uid: System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName\n  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName\n  id: UniqueKeyContainerName\n  parent: System.Security.Cryptography.CspKeyContainerInfo\n  langs:\n  - csharp\n  - vb\n  name: UniqueKeyContainerName\n  fullName: System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UniqueKeyContainerName\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 24\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a unique key container name.</p>\\n\"\n  syntax:\n    content: public string UniqueKeyContainerName { get; }\n    content.vb: Public ReadOnly Property UniqueKeyContainerName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The unique key container name.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The key type is not supported.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider cannot be found.</p>\\n<p>-or-</p>\\n<p>The key container was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CspKeyContainerInfo.UniqueKeyContainerName\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n  commentId: T:System.Security.Cryptography.CspParameters\n  nameWithType: CspParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.KeyNumber\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyNumber\n  fullName: System.Security.Cryptography.KeyNumber\n  commentId: T:System.Security.Cryptography.KeyNumber\n  nameWithType: KeyNumber\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}