{"nodes":[{"pos":[959,990],"content":"AsyncTaskMethodBuilder<TResult>","needQuote":true,"nodes":[{"content":"AsyncTaskMethodBuilder&lt;TResult&gt;","pos":[0,31],"source":"AsyncTaskMethodBuilder<TResult>"}]},{"content":"\\n&lt;p&gt;The result to use to complete the task.&lt;/p&gt;\\n","pos":[1965,2015],"source":"\\n<p>The result to use to complete the task.</p>\\n"},{"pos":[3131,3135],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The task for this builder.&lt;/p&gt;\\n","pos":[3891,3928],"source":"\\n<p>The task for this builder.</p>\\n"},{"pos":[4545,4619],"content":"AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)","needQuote":true,"nodes":[{"content":"AwaitOnCompleted&lt;TAwaiter, TStateMachine&gt;(ref TAwaiter, ref TStateMachine)","pos":[0,74],"source":"AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)"}]},{"content":"\\n&lt;p&gt;The awaiter.&lt;/p&gt;\\n","pos":[5759,5782],"source":"\\n<p>The awaiter.</p>\\n"},{"content":"\\n&lt;p&gt;The state machine.&lt;/p&gt;\\n","pos":[5857,5886],"source":"\\n<p>The state machine.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the awaiter.&lt;/p&gt;\\n","pos":[5947,5982],"source":"\\n<p>The type of the awaiter.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the state machine.&lt;/p&gt;\\n","pos":[6028,6069],"source":"\\n<p>The type of the state machine.</p>\\n"},{"pos":[7000,7080],"content":"AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)","needQuote":true,"nodes":[{"content":"AwaitUnsafeOnCompleted&lt;TAwaiter, TStateMachine&gt;(ref TAwaiter, ref TStateMachine)","pos":[0,80],"source":"AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)"}]},{"content":"\\n&lt;p&gt;The awaiter.&lt;/p&gt;\\n","pos":[8391,8414],"source":"\\n<p>The awaiter.</p>\\n"},{"content":"\\n&lt;p&gt;The state machine.&lt;/p&gt;\\n","pos":[8489,8518],"source":"\\n<p>The state machine.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the awaiter.&lt;/p&gt;\\n","pos":[8579,8614],"source":"\\n<p>The type of the awaiter.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the state machine.&lt;/p&gt;\\n","pos":[8660,8701],"source":"\\n<p>The type of the state machine.</p>\\n"},{"pos":[9566,9574],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A new instance of the builder.&lt;/p&gt;\\n","pos":[10490,10531],"source":"\\n<p>A new instance of the builder.</p>\\n"},{"pos":[11161,11184],"content":"SetException(Exception)","needQuote":true,"nodes":[{"content":"SetException(Exception)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The exception to bind to the task.&lt;/p&gt;\\n","pos":[12004,12049],"source":"\\n<p>The exception to bind to the task.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;exception&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12168,12225],"source":"\\n<p>\\n<em>exception</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task has already completed.&lt;/p&gt;\\n","pos":[12338,12380],"source":"\\n<p>The task has already completed.</p>\\n"},{"pos":[12989,13007],"content":"SetResult(TResult)","needQuote":true,"nodes":[{"content":"SetResult(TResult)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The result to use to complete the task.&lt;/p&gt;\\n","pos":[13758,13808],"source":"\\n<p>The result to use to complete the task.</p>\\n"},{"content":"\\n&lt;p&gt;The task has already completed.&lt;/p&gt;\\n","pos":[13935,13977],"source":"\\n<p>The task has already completed.</p>\\n"},{"pos":[14726,14761],"content":"SetStateMachine(IAsyncStateMachine)","needQuote":true,"nodes":[{"content":"SetStateMachine(IAsyncStateMachine)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The state machine instance to associate with the builder.&lt;/p&gt;\\n","pos":[15673,15741],"source":"\\n<p>The state machine instance to associate with the builder.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stateMachine&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15860,15920],"source":"\\n<p>\\n<em>stateMachine</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The state machine was previously set.&lt;/p&gt;\\n","pos":[16033,16081],"source":"\\n<p>The state machine was previously set.</p>\\n"},{"pos":[16754,16793],"content":"Start<TStateMachine>(ref TStateMachine)","needQuote":true,"nodes":[{"content":"Start&lt;TStateMachine&gt;(ref TStateMachine)","pos":[0,39],"source":"Start<TStateMachine>(ref TStateMachine)"}]},{"content":"\\n&lt;p&gt;The state machine instance, passed by reference.&lt;/p&gt;\\n","pos":[17850,17909],"source":"\\n<p>The state machine instance, passed by reference.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the state machine.&lt;/p&gt;\\n","pos":[17975,18016],"source":"\\n<p>The type of the state machine.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stateMachine&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18135,18195],"source":"\\n<p>\\n<em>stateMachine</em> is <strong>null</strong>.</p>\\n"},{"pos":[18704,18735],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[18975,18989],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19114,19120],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19169,19170],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19220,19226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19286,19287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19373,19379],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19428,19429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19479,19485],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19545,19546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19749,19762],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19869,19880],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19934,19935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19962,19963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20039,20050],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20104,20105],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20132,20133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20322,20332],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20433,20441],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20492,20493],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20520,20521],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20594,20602],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20653,20654],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20681,20682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20885,20907],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[21055,21061],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21128,21129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21179,21185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21246,21247]},{"pos":[21302,21308],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21368,21369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21466,21472],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21539,21540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21590,21596],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21657,21658]},{"pos":[21713,21719],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21779,21780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22025,22056],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[22222,22237],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22313,22314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22364,22370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22431,22432]},{"pos":[22487,22493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22553,22554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22660,22675],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22751,22752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22802,22808],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22869,22870]},{"pos":[22925,22931],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22991,22992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23218,23227],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23320,23327],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23395,23396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23423,23424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23493,23500],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23568,23569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23596,23597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23753,23762],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[23916,23922],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24043,24049],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24245,24258],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[24455,24459],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[24512,24513],"content":"<","needQuote":true,"nodes":[]},{"pos":[24540,24547],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[24662,24666],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[24720,24723]},{"pos":[24757,24764],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[24797,24798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24993,25006],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[25203,25207],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[25260,25261],"content":"<","needQuote":true,"nodes":[]},{"pos":[25288,25295],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[25410,25414],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[25468,25471]},{"pos":[25505,25512],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[25545,25546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25732,25754],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[25918,25926],"content":"TAwaiter","needQuote":true,"nodes":[{"content":"TAwaiter","pos":[0,8]}]},{"pos":[26060,26073],"content":"TStateMachine","needQuote":true,"nodes":[{"content":"TStateMachine","pos":[0,13]}]},{"pos":[26205,26213],"content":"TAwaiter","needQuote":true,"nodes":[{"content":"TAwaiter","pos":[0,8]}]},{"pos":[26309,26322],"content":"TStateMachine","needQuote":true,"nodes":[{"content":"TStateMachine","pos":[0,13]}]},{"pos":[26513,26544],"content":"AsyncTaskMethodBuilder<TResult>","needQuote":true,"nodes":[{"content":"AsyncTaskMethodBuilder&lt;TResult&gt;","pos":[0,31],"source":"AsyncTaskMethodBuilder<TResult>"}]},{"pos":[26840,26862],"content":"AsyncTaskMethodBuilder","needQuote":true,"nodes":[{"content":"AsyncTaskMethodBuilder","pos":[0,22]}]},{"pos":[26942,26943],"content":"<","needQuote":true,"nodes":[]},{"pos":[26970,26977],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[27119,27141],"content":"AsyncTaskMethodBuilder","needQuote":true,"nodes":[{"content":"AsyncTaskMethodBuilder","pos":[0,22]}]},{"content":"(Of","pos":[27222,27225]},{"pos":[27259,27266],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[27299,27300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27560,27569],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[27706,27713],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[27826,27833],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[28006,28024],"content":"IAsyncStateMachine","needQuote":true,"nodes":[{"content":"IAsyncStateMachine","pos":[0,18]}]},{"pos":[28253,28274],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[28483,28508],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  commentId: T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  id: AsyncTaskMethodBuilder`1\n  parent: System.Runtime.CompilerServices\n  children:\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)\n  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task\n  langs:\n  - csharp\n  - vb\n  name: AsyncTaskMethodBuilder<TResult>\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AsyncTaskMethodBuilder\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 423\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Represents a builder for asynchronous methods that returns a task and provides a parameter for the result.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public struct AsyncTaskMethodBuilder<TResult>\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Structure AsyncTaskMethodBuilder(Of TResult)\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The result to use to complete the task.</p>\\n\"\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult)\n  name.vb: AsyncTaskMethodBuilder(Of TResult)\n  nameWithType: AsyncTaskMethodBuilder<TResult>\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult)\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task\n  commentId: P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task\n  id: Task\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: Task\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Task\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Task\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 572\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Gets the task for this builder.</p>\\n\"\n  syntax:\n    content: public Task<TResult> Task { get; }\n    content.vb: Public ReadOnly Property Task As Task(Of TResult)\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The task for this builder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).Task\n  nameWithType: AsyncTaskMethodBuilder<TResult>.Task\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).Task\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)\n  id: AwaitOnCompleted``2(``0@,``1@)\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AwaitOnCompleted\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 496\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Schedules the state machine to proceed to the next action when the specified awaiter completes.</p>\\n\"\n  syntax:\n    content: 'public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine'\n    content.vb: Public Sub AwaitOnCompleted(Of TAwaiter As INotifyCompletion, TStateMachine As IAsyncStateMachine)(ByRef awaiter As TAwaiter, ByRef stateMachine As TStateMachine)\n    parameters:\n    - id: awaiter\n      type: '{TAwaiter}'\n      description: \"\\n<p>The awaiter.</p>\\n\"\n    - id: stateMachine\n      type: '{TStateMachine}'\n      description: \"\\n<p>The state machine.</p>\\n\"\n    typeParameters:\n    - id: TAwaiter\n      description: \"\\n<p>The type of the awaiter.</p>\\n\"\n    - id: TStateMachine\n      description: \"\\n<p>The type of the state machine.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).AwaitOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)\n  name.vb: AwaitOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)\n  nameWithType: AsyncTaskMethodBuilder<TResult>.AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).AwaitOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)\n  id: AwaitUnsafeOnCompleted``2(``0@,``1@)\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AwaitUnsafeOnCompleted\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 536\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be called from partially trusted code.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub AwaitUnsafeOnCompleted(Of TAwaiter As ICriticalNotifyCompletion, TStateMachine As IAsyncStateMachine)(ByRef awaiter As TAwaiter, ByRef stateMachine As TStateMachine)\n    parameters:\n    - id: awaiter\n      type: '{TAwaiter}'\n      description: \"\\n<p>The awaiter.</p>\\n\"\n    - id: stateMachine\n      type: '{TStateMachine}'\n      description: \"\\n<p>The state machine.</p>\\n\"\n    typeParameters:\n    - id: TAwaiter\n      description: \"\\n<p>The type of the awaiter.</p>\\n\"\n    - id: TStateMachine\n      description: \"\\n<p>The type of the state machine.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).AwaitUnsafeOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)\n  name.vb: AwaitUnsafeOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)\n  nameWithType: AsyncTaskMethodBuilder<TResult>.AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).AwaitUnsafeOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create\n  id: Create\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Create()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Create\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 442\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Creates an instance of the <xref href=\\\"System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public static AsyncTaskMethodBuilder<TResult> Create()\n    content.vb: Public Shared Function Create As AsyncTaskMethodBuilder(Of TResult)\n    return:\n      type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n      description: \"\\n<p>A new instance of the builder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).Create()\n  nameWithType: AsyncTaskMethodBuilder<TResult>.Create()\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).Create()\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)\n  id: SetException(System.Exception)\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: SetException(Exception)\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.SetException(System.Exception)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetException\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 650\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Marks the task as failed and binds the specified exception to the task.</p>\\n\"\n  syntax:\n    content: public void SetException(Exception exception)\n    content.vb: Public Sub SetException(exception As Exception)\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: \"\\n<p>The exception to bind to the task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>exception</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The task has already completed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).SetException(System.Exception)\n  nameWithType: AsyncTaskMethodBuilder<TResult>.SetException(Exception)\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).SetException(Exception)\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)\n  id: SetResult(`0)\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: SetResult(TResult)\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.SetResult(TResult)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetResult\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 589\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Marks the task as successfully completed.</p>\\n\"\n  syntax:\n    content: public void SetResult(TResult result)\n    content.vb: Public Sub SetResult(result As TResult)\n    parameters:\n    - id: result\n      type: '{TResult}'\n      description: \"\\n<p>The result to use to complete the task.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The task has already completed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).SetResult(TResult)\n  nameWithType: AsyncTaskMethodBuilder<TResult>.SetResult(TResult)\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).SetResult(TResult)\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)\n  id: SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: SetStateMachine(IAsyncStateMachine)\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetStateMachine\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 484\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Associates the builder with the specified state machine.</p>\\n\"\n  syntax:\n    content: public void SetStateMachine(IAsyncStateMachine stateMachine)\n    content.vb: Public Sub SetStateMachine(stateMachine As IAsyncStateMachine)\n    parameters:\n    - id: stateMachine\n      type: System.Runtime.CompilerServices.IAsyncStateMachine\n      description: \"\\n<p>The state machine instance to associate with the builder.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stateMachine</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The state machine was previously set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)\n  nameWithType: AsyncTaskMethodBuilder<TResult>.SetStateMachine(IAsyncStateMachine)\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).SetStateMachine(IAsyncStateMachine)\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)\n  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)\n  id: Start``1(``0@)\n  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  langs:\n  - csharp\n  - vb\n  name: Start<TStateMachine>(ref TStateMachine)\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Start<TStateMachine>(ref TStateMachine)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Start\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs\n    startLine: 452\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Begins running the builder with the associated state machine.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [DebuggerStepThrough]\n\n      public void Start<TStateMachine>(ref TStateMachine stateMachine)where TStateMachine : IAsyncStateMachine\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <DebuggerStepThrough>\n\n      Public Sub Start(Of TStateMachine As IAsyncStateMachine)(ByRef stateMachine As TStateMachine)\n    parameters:\n    - id: stateMachine\n      type: '{TStateMachine}'\n      description: \"\\n<p>The state machine instance, passed by reference.</p>\\n\"\n    typeParameters:\n    - id: TStateMachine\n      description: \"\\n<p>The type of the state machine.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stateMachine</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).Start(Of TStateMachine)(ByRef TStateMachine)\n  name.vb: Start(Of TStateMachine)(ByRef TStateMachine)\n  nameWithType: AsyncTaskMethodBuilder<TResult>.Start<TStateMachine>(ref TStateMachine)\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).Start(Of TStateMachine)(ByRef TStateMachine)\nreferences:\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.Tasks.Task{{TResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task{`0}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: '{TAwaiter}'\n  definition: TAwaiter\n  name: TAwaiter\n  fullName: TAwaiter\n  nameWithType: TAwaiter\n  commentId: '!:TAwaiter'\n- uid: '{TStateMachine}'\n  definition: TStateMachine\n  name: TStateMachine\n  fullName: TStateMachine\n  nameWithType: TStateMachine\n  commentId: '!:TStateMachine'\n- uid: TAwaiter\n  isExternal: false\n  name: TAwaiter\n  fullName: TAwaiter\n  nameWithType: TAwaiter\n- uid: TStateMachine\n  isExternal: false\n  name: TStateMachine\n  fullName: TStateMachine\n  nameWithType: TStateMachine\n- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: AsyncTaskMethodBuilder<TResult>\n  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>\n  fullname.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult)\n  name.vb: AsyncTaskMethodBuilder(Of TResult)\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n    name: AsyncTaskMethodBuilder\n    fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n    name: AsyncTaskMethodBuilder\n    fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: AsyncTaskMethodBuilder<TResult>\n  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult)\n  commentId: T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n  commentId: '!:TResult'\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n- uid: System.Runtime.CompilerServices.IAsyncStateMachine\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: IAsyncStateMachine\n  fullName: System.Runtime.CompilerServices.IAsyncStateMachine\n  nameWithType: IAsyncStateMachine\n  commentId: T:System.Runtime.CompilerServices.IAsyncStateMachine\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}