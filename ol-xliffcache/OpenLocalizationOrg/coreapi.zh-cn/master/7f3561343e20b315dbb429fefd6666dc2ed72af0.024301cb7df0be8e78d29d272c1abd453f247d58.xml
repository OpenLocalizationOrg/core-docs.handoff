{"nodes":[{"pos":[714,726],"content":"StringReader","needQuote":true,"nodes":[{"content":"StringReader","pos":[0,12]}]},{"pos":[2500,2520],"content":"StringReader(String)","needQuote":true,"nodes":[{"content":"StringReader(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3504,3559],"source":"\\n<p>The <em>s</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3560,3566],"source":" </p>\\n"},{"pos":[3890,3906],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[4690,4827],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[4828,4834],"source":" </p>\\n"},{"pos":[5189,5195],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.&lt;/p&gt;\\n","pos":[5787,5934],"source":"\\n<p>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</p>\\n"},{"content":"\\n&lt;p&gt;The current reader is closed.","pos":[6097,6131],"source":"\\n<p>The current reader is closed."},{"content":"&lt;/p&gt;\\n","pos":[6132,6138],"source":" </p>\\n"},{"pos":[6418,6424],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The next character from the underlying string, or -1 if no more characters are available.&lt;/p&gt;\\n","pos":[7055,7155],"source":"\\n<p>The next character from the underlying string, or -1 if no more characters are available.</p>\\n"},{"content":"\\n&lt;p&gt;The current reader is closed.","pos":[7318,7352],"source":"\\n<p>The current reader is closed."},{"content":"&lt;/p&gt;\\n","pos":[7353,7359],"source":" </p>\\n"},{"pos":[7762,7788],"content":"Read(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Char[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.","pos":[8585,8792],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source."},{"content":"&lt;/p&gt;\\n","pos":[8793,8799],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the buffer.","pos":[9166,9204],"source":"\\n<p>The starting index in the buffer."},{"content":"&lt;/p&gt;\\n","pos":[9205,9211],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to read.","pos":[9274,9312],"source":"\\n<p>The number of characters to read."},{"content":"&lt;/p&gt;\\n","pos":[9313,9319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The total number of characters read into the buffer.","pos":[9378,9435],"source":"\\n<p>The total number of characters read into the buffer."},{"content":"This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.&lt;/p&gt;\\n","pos":[9436,9613],"source":" This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9813,9861],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9862,9868],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[9965,10037],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[10038,10044],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[10161,10213],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[10214,10220],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current reader is closed.","pos":[10329,10363],"source":"\\n<p>The current reader is closed."},{"content":"&lt;/p&gt;\\n","pos":[10364,10370],"source":" </p>\\n"},{"pos":[10991,11022],"content":"ReadAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Char[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[11966,12179],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[12242,12311],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[12374,12420],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.&lt;/p&gt;\\n","pos":[12421,12552],"source":" If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[12640,12700],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[12701,12801],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.&lt;/p&gt;\\n","pos":[12802,13014],"source":" The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13219,13273],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[13390,13448],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[13545,13634],"source":"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\\n","pos":[13743,13790],"source":"\\n<p>The string reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[13903,13968],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[13969,13975],"source":" </p>\\n"},{"pos":[14631,14667],"content":"ReadBlockAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlockAsync(Char[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[15630,15843],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[15906,15975],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[16038,16084],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.&lt;/p&gt;\\n","pos":[16085,16216],"source":" If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[16304,16364],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[16365,16465],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.&lt;/p&gt;\\n","pos":[16466,16678],"source":" The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16888,16942],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[17059,17117],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[17214,17303],"source":"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\\n","pos":[17412,17459],"source":"\\n<p>The string reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[17572,17637],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[17638,17644],"source":" </p>\\n"},{"pos":[18179,18189],"content":"ReadLine()","needQuote":true,"nodes":[{"content":"ReadLine()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The next line from the current string, or &lt;strong&gt;null&lt;/strong&gt; if the end of the string is reached.&lt;/p&gt;\\n","pos":[18824,18935],"source":"\\n<p>The next line from the current string, or <strong>null</strong> if the end of the string is reached.</p>\\n"},{"content":"\\n&lt;p&gt;The current reader is closed.","pos":[19102,19136],"source":"\\n<p>The current reader is closed."},{"content":"&lt;/p&gt;\\n","pos":[19137,19143],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.","pos":[19246,19325],"source":"\\n<p>There is insufficient memory to allocate a buffer for the returned string."},{"content":"&lt;/p&gt;\\n","pos":[19326,19332],"source":" </p>\\n"},{"pos":[19643,19658],"content":"ReadLineAsync()","needQuote":true,"nodes":[{"content":"ReadLineAsync()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[20444,20504],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the next line from the string reader, or is &lt;strong&gt;null&lt;/strong&gt; if all the characters have been read.&lt;/p&gt;\\n","pos":[20505,20667],"source":" The value of the <em>TResult</em> parameter contains the next line from the string reader, or is <strong>null</strong> if all the characters have been read.</p>\\n"},{"content":"\\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\\n","pos":[21106,21153],"source":"\\n<p>The string reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[21266,21331],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[21332,21338],"source":" </p>\\n"},{"pos":[21642,21653],"content":"ReadToEnd()","needQuote":true,"nodes":[{"content":"ReadToEnd()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The content from the current position to the end of the underlying string.&lt;/p&gt;\\n","pos":[22316,22401],"source":"\\n<p>The content from the current position to the end of the underlying string.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.","pos":[22563,22642],"source":"\\n<p>There is insufficient memory to allocate a buffer for the returned string."},{"content":"&lt;/p&gt;\\n","pos":[22643,22649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current reader is closed.","pos":[22758,22792],"source":"\\n<p>The current reader is closed."},{"content":"&lt;/p&gt;\\n","pos":[22793,22799],"source":" </p>\\n"},{"pos":[23114,23130],"content":"ReadToEndAsync()","needQuote":true,"nodes":[{"content":"ReadToEndAsync()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[23944,24004],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains a string with the characters from the current position to the end of the string.","pos":[24005,24138],"source":" The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the string."},{"content":"&lt;/p&gt;\\n","pos":[24139,24145],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\\n","pos":[24568,24615],"source":"\\n<p>The string reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[24728,24793],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[24794,24800],"source":" </p>\\n"},{"pos":[24990,24999],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[25139,25145],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25300,25310],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[25478,25489],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[25873,25882],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[25989,25996],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26050,26051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26078,26079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26155,26162],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26216,26217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26244,26245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26480,26511],"content":"ReadBlock(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlock(Char[], Int32, Int32)","pos":[0,31]}]},{"pos":[26836,26845],"content":"ReadBlock","needQuote":true,"nodes":[{"content":"ReadBlock","pos":[0,9]}]},{"pos":[26901,26902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26950,26954],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[27013,27015]},{"content":",","pos":[27047,27048]},{"pos":[27102,27107],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[27167,27168]},{"pos":[27222,27227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27286,27287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27406,27415],"content":"ReadBlock","needQuote":true,"nodes":[{"content":"ReadBlock","pos":[0,9]}]},{"pos":[27471,27472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27520,27524],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[27582,27584],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[27613,27614]},{"pos":[27668,27673],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[27733,27734]},{"pos":[27788,27793],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27852,27853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28159,28169],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28264,28272],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28341,28342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28369,28370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28440,28448],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28517,28518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28545,28546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28729,28743],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28862,28868],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28935,28936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28986,28992],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29052,29053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29136,29142],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29209,29210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29260,29266],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29326,29327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29541,29563],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29711,29717],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29784,29785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29835,29841],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29902,29903]},{"pos":[29958,29964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30024,30025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30122,30128],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30195,30196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30246,30252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30313,30314]},{"pos":[30369,30375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30435,30436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30681,30712],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30878,30893],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30969,30970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31020,31026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31087,31088]},{"pos":[31143,31149],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31209,31210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31316,31331],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31407,31408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31458,31464],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31525,31526]},{"pos":[31581,31587],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31647,31648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31878,31891],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31992,32003],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32075,32076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32103,32104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32177,32188],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32260,32261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32288,32289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32464,32473],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32566,32573],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32641,32642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32669,32670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32739,32746],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32814,32815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32842,32843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33018,33035],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[33144,33159],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33235,33236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33263,33264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33341,33356],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33432,33433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33460,33461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33606,33612],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33743,33749],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33938,33954],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[34091,34098],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[34152,34153],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34204,34211],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34272,34273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34365,34372],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[34426,34427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34478,34485],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34546,34547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34735,34742],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34916,34922],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"pos":[35023,35027],"content":"Peek","needQuote":true,"nodes":[{"content":"Peek","pos":[0,4]}]},{"pos":[35078,35079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35106,35107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35180,35184],"content":"Peek","needQuote":true,"nodes":[{"content":"Peek","pos":[0,4]}]},{"pos":[35235,35236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35263,35264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35421,35426],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[35594,35600],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"pos":[35701,35705],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[35756,35757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35784,35785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35858,35862],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[35913,35914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35941,35942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36166,36192],"content":"Read(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Char[], Int32, Int32)","pos":[0,26]}]},{"pos":[36497,36501],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[36552,36553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36601,36605],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[36664,36666]},{"content":",","pos":[36698,36699]},{"pos":[36753,36758],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[36818,36819]},{"pos":[36873,36878],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36937,36938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37052,37056],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[37107,37108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37156,37160],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[37218,37220],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[37249,37250]},{"pos":[37304,37309],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[37369,37370]},{"pos":[37424,37429],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37488,37489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37728,37734],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[37854,37858],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[37917,37919]},{"pos":[37982,37986],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[38044,38046],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[38250,38281],"content":"ReadAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Char[], Int32, Int32)","pos":[0,31]}]},{"pos":[38606,38615],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[38671,38672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38720,38724],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[38783,38785]},{"content":",","pos":[38817,38818]},{"pos":[38872,38877],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[38937,38938]},{"pos":[38992,38997],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39056,39057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39176,39185],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[39241,39242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39290,39294],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[39352,39354],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[39383,39384]},{"pos":[39438,39443],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[39503,39504]},{"pos":[39558,39563],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39622,39623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39982,39993],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[40198,40202],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[40276,40277],"content":"<","needQuote":true,"nodes":[]},{"pos":[40326,40331],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40472,40476],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[40551,40554]},{"pos":[40610,40615],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40674,40675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40876,40889],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[41086,41090],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[41143,41144],"content":"<","needQuote":true,"nodes":[]},{"pos":[41171,41178],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[41293,41297],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[41351,41354]},{"pos":[41388,41395],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[41428,41429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41615,41637],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[41892,41928],"content":"ReadBlockAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlockAsync(Char[], Int32, Int32)","pos":[0,36]}]},{"pos":[42273,42287],"content":"ReadBlockAsync","needQuote":true,"nodes":[{"content":"ReadBlockAsync","pos":[0,14]}]},{"pos":[42348,42349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42397,42401],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[42460,42462]},{"content":",","pos":[42494,42495]},{"pos":[42549,42554],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[42614,42615]},{"pos":[42669,42674],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42733,42734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42858,42872],"content":"ReadBlockAsync","needQuote":true,"nodes":[{"content":"ReadBlockAsync","pos":[0,14]}]},{"pos":[42933,42934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42982,42986],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[43044,43046],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[43075,43076]},{"pos":[43130,43135],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[43195,43196]},{"pos":[43250,43255],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43314,43315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43651,43661],"content":"ReadLine()","needQuote":true,"nodes":[{"content":"ReadLine()","pos":[0,10]}]},{"pos":[43770,43778],"content":"ReadLine","needQuote":true,"nodes":[{"content":"ReadLine","pos":[0,8]}]},{"pos":[43833,43834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43861,43862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43939,43947],"content":"ReadLine","needQuote":true,"nodes":[{"content":"ReadLine","pos":[0,8]}]},{"pos":[44002,44003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44030,44031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44232,44247],"content":"ReadLineAsync()","needQuote":true,"nodes":[{"content":"ReadLineAsync()","pos":[0,15]}]},{"pos":[44366,44379],"content":"ReadLineAsync","needQuote":true,"nodes":[{"content":"ReadLineAsync","pos":[0,13]}]},{"pos":[44439,44440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44467,44468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44550,44563],"content":"ReadLineAsync","needQuote":true,"nodes":[{"content":"ReadLineAsync","pos":[0,13]}]},{"pos":[44623,44624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44651,44652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44897,44909],"content":"Task<String>","needQuote":true,"nodes":[{"content":"Task&lt;String&gt;","pos":[0,12],"source":"Task<String>"}]},{"pos":[45117,45121],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[45195,45196],"content":"<","needQuote":true,"nodes":[]},{"pos":[45246,45252],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[45394,45398],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[45473,45476]},{"pos":[45533,45539],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[45599,45600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45836,45847],"content":"ReadToEnd()","needQuote":true,"nodes":[{"content":"ReadToEnd()","pos":[0,11]}]},{"pos":[45958,45967],"content":"ReadToEnd","needQuote":true,"nodes":[{"content":"ReadToEnd","pos":[0,9]}]},{"pos":[46023,46024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46051,46052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46130,46139],"content":"ReadToEnd","needQuote":true,"nodes":[{"content":"ReadToEnd","pos":[0,9]}]},{"pos":[46195,46196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46223,46224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46428,46444],"content":"ReadToEndAsync()","needQuote":true,"nodes":[{"content":"ReadToEndAsync()","pos":[0,16]}]},{"pos":[46565,46579],"content":"ReadToEndAsync","needQuote":true,"nodes":[{"content":"ReadToEndAsync","pos":[0,14]}]},{"pos":[46640,46641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46668,46669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46752,46766],"content":"ReadToEndAsync","needQuote":true,"nodes":[{"content":"ReadToEndAsync","pos":[0,14]}]},{"pos":[46827,46828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46855,46856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47032,47053],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[47243,47266],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[47473,47490],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[47672,47699],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[47926,47951],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[48150,48170],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]}],"content":"items:\n- uid: System.IO.StringReader\n  commentId: T:System.IO.StringReader\n  id: StringReader\n  parent: System.IO\n  children:\n  - System.IO.StringReader.#ctor(System.String)\n  - System.IO.StringReader.Dispose(System.Boolean)\n  - System.IO.StringReader.Peek\n  - System.IO.StringReader.Read\n  - System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringReader.ReadLine\n  - System.IO.StringReader.ReadLineAsync\n  - System.IO.StringReader.ReadToEnd\n  - System.IO.StringReader.ReadToEndAsync\n  langs:\n  - csharp\n  - vb\n  name: StringReader\n  fullName: System.IO.StringReader\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringReader\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 23\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Implements a <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that reads from a string.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class StringReader : TextReader, IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class StringReader\n          Inherits TextReader\n          Implements IDisposable\n  seealso:\n  - type: System.IO.TextReader\n    commentId: T:System.IO.TextReader\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  inheritance:\n  - System.Object\n  - System.IO.TextReader\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.IO.TextReader.Null\n  - System.IO.TextReader.Dispose\n  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: StringReader\n- uid: System.IO.StringReader.#ctor(System.String)\n  commentId: M:System.IO.StringReader.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: StringReader(String)\n  fullName: System.IO.StringReader.StringReader(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 31\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StringReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that reads from the specified string.</p>\\n\"\n  syntax:\n    content: public StringReader(string s)\n    content.vb: Public Sub New(s As String)\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to which the <xref href=\\\"System.IO.StringReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be initialized. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>s</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringReader.StringReader(String)\n- uid: System.IO.StringReader.Dispose(System.Boolean)\n  commentId: M:System.IO.StringReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.StringReader.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 45\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.StringReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  overridden: System.IO.TextReader.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: StringReader.Dispose(Boolean)\n- uid: System.IO.StringReader.Peek\n  commentId: M:System.IO.StringReader.Peek\n  id: Peek\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: Peek()\n  fullName: System.IO.StringReader.Peek()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Peek\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 57\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Returns the next available character but does not consume it.</p>\\n\"\n  syntax:\n    content: public override int Peek()\n    content.vb: Public Overrides Function Peek As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</p>\\n\"\n  overridden: System.IO.TextReader.Peek\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current reader is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringReader.Peek()\n- uid: System.IO.StringReader.Read\n  commentId: M:System.IO.StringReader.Read\n  id: Read\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: Read()\n  fullName: System.IO.StringReader.Read()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 68\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the next character from the input string and advances the character position by one character.</p>\\n\"\n  syntax:\n    content: public override int Read()\n    content.vb: Public Overrides Function Read As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The next character from the underlying string, or -1 if no more characters are available.</p>\\n\"\n  overridden: System.IO.TextReader.Read\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current reader is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringReader.Read()\n- uid: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  id: Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: Read(Char[], Int32, Int32)\n  fullName: System.IO.StringReader.Read(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 80\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a block of characters from the input string and advances the character position by <em>count</em>.</p>\\n\"\n  syntax:\n    content: public override int Read([In, Out] char[] buffer, int index, int count)\n    content.vb: Public Overrides Function Read(buffer As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source. </p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index in the buffer. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.</p>\\n\"\n  overridden: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current reader is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StringReader.Read(System.Char(), System.Int32, System.Int32)\n  name.vb: Read(Char(), Int32, Int32)\n  nameWithType: StringReader.Read(Char[], Int32, Int32)\n  nameWithType.vb: StringReader.Read(Char(), Int32, Int32)\n- uid: System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(Char[], Int32, Int32)\n  fullName: System.IO.StringReader.ReadAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadAsync\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 171\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index. </p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Task<int> ReadAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</p>\\n\"\n  overridden: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The string reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StringReader.ReadAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Char(), Int32, Int32)\n  nameWithType: StringReader.ReadAsync(Char[], Int32, Int32)\n  nameWithType.vb: StringReader.ReadAsync(Char(), Int32, Int32)\n- uid: System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  fullName: System.IO.StringReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBlockAsync\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 156\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Task<int> ReadBlockAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</p>\\n\"\n  overridden: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The string reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StringReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlockAsync(Char(), Int32, Int32)\n  nameWithType: StringReader.ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType.vb: StringReader.ReadBlockAsync(Char(), Int32, Int32)\n- uid: System.IO.StringReader.ReadLine\n  commentId: M:System.IO.StringReader.ReadLine\n  id: ReadLine\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: ReadLine()\n  fullName: System.IO.StringReader.ReadLine()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadLine\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 121\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a line of characters from the current string and returns the data as a string.</p>\\n\"\n  syntax:\n    content: public override string ReadLine()\n    content.vb: Public Overrides Function ReadLine As String\n    return:\n      type: System.String\n      description: \"\\n<p>The next line from the current string, or <strong>null</strong> if the end of the string is reached.</p>\\n\"\n  overridden: System.IO.TextReader.ReadLine\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current reader is closed. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringReader.ReadLine()\n- uid: System.IO.StringReader.ReadLineAsync\n  commentId: M:System.IO.StringReader.ReadLineAsync\n  id: ReadLineAsync\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: ReadLineAsync()\n  fullName: System.IO.StringReader.ReadLineAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadLineAsync\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 144\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a line of characters asynchronously from the current string and returns the data as a string.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Task<string> ReadLineAsync()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function ReadLineAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the next line from the string reader, or is <strong>null</strong> if all the characters have been read.</p>\\n\"\n  overridden: System.IO.TextReader.ReadLineAsync\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters in the next line is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The string reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringReader.ReadLineAsync()\n- uid: System.IO.StringReader.ReadToEnd\n  commentId: M:System.IO.StringReader.ReadToEnd\n  id: ReadToEnd\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: ReadToEnd()\n  fullName: System.IO.StringReader.ReadToEnd()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadToEnd\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 102\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads all characters from the current position to the end of the string and returns them as a single string.</p>\\n\"\n  syntax:\n    content: public override string ReadToEnd()\n    content.vb: Public Overrides Function ReadToEnd As String\n    return:\n      type: System.String\n      description: \"\\n<p>The content from the current position to the end of the underlying string.</p>\\n\"\n  overridden: System.IO.TextReader.ReadToEnd\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current reader is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringReader.ReadToEnd()\n- uid: System.IO.StringReader.ReadToEndAsync\n  commentId: M:System.IO.StringReader.ReadToEndAsync\n  id: ReadToEndAsync\n  parent: System.IO.StringReader\n  langs:\n  - csharp\n  - vb\n  name: ReadToEndAsync()\n  fullName: System.IO.StringReader.ReadToEndAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StringReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadToEndAsync\n    path: src/mscorlib/src/System/IO/StringReader.cs\n    startLine: 150\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Task<string> ReadToEndAsync()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function ReadToEndAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the string. </p>\\n\"\n  overridden: System.IO.TextReader.ReadToEndAsync\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The string reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringReader.ReadToEndAsync()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  fullName: System.IO.TextReader\n  nameWithType: TextReader\n  commentId: T:System.IO.TextReader\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.IO.TextReader.Null\n  parent: System.IO.TextReader\n  isExternal: false\n  fullName: System.IO.TextReader.Null\n  nameWithType: TextReader.Null\n  commentId: F:System.IO.TextReader.Null\n- uid: System.IO.TextReader.Dispose\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Dispose()\n  fullName: System.IO.TextReader.Dispose()\n  spec.csharp:\n  - uid: System.IO.TextReader.Dispose\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Dispose\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Dispose()\n  commentId: M:System.IO.TextReader.Dispose\n- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: ReadBlock(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlock(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n    name: ReadBlock\n    fullName: System.IO.TextReader.ReadBlock\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n    name: ReadBlock\n    fullName: System.IO.TextReader.ReadBlock\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadBlock(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IO.TextReader.Dispose(System.Boolean)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.IO.TextReader.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.IO.TextReader.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Dispose(Boolean)\n  commentId: M:System.IO.TextReader.Dispose(System.Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IO.TextReader.Peek\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Peek()\n  fullName: System.IO.TextReader.Peek()\n  spec.csharp:\n  - uid: System.IO.TextReader.Peek\n    name: Peek\n    fullName: System.IO.TextReader.Peek\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Peek\n    name: Peek\n    fullName: System.IO.TextReader.Peek\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Peek()\n  commentId: M:System.IO.TextReader.Peek\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IO.TextReader.Read\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Read()\n  fullName: System.IO.TextReader.Read()\n  spec.csharp:\n  - uid: System.IO.TextReader.Read\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Read\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Read()\n  commentId: M:System.IO.TextReader.Read\n- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: Read(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)\n  name.vb: Read(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Read(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.Read(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: ReadAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.TextReader.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.TextReader.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadAsync(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlockAsync(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadBlockAsync\n    fullName: System.IO.TextReader.ReadBlockAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadBlockAsync\n    fullName: System.IO.TextReader.ReadBlockAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadBlockAsync(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n- uid: System.IO.TextReader.ReadLine\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLine()\n  fullName: System.IO.TextReader.ReadLine()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadLine\n    name: ReadLine\n    fullName: System.IO.TextReader.ReadLine\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadLine\n    name: ReadLine\n    fullName: System.IO.TextReader.ReadLine\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadLine()\n  commentId: M:System.IO.TextReader.ReadLine\n- uid: System.IO.TextReader.ReadLineAsync\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLineAsync()\n  fullName: System.IO.TextReader.ReadLineAsync()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadLineAsync\n    name: ReadLineAsync\n    fullName: System.IO.TextReader.ReadLineAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadLineAsync\n    name: ReadLineAsync\n    fullName: System.IO.TextReader.ReadLineAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadLineAsync()\n  commentId: M:System.IO.TextReader.ReadLineAsync\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  fullname.vb: System.Threading.Tasks.Task(Of System.String)\n  name.vb: Task(Of String)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<String>\n  nameWithType.vb: Task(Of String)\n  commentId: T:System.Threading.Tasks.Task{System.String}\n- uid: System.IO.TextReader.ReadToEnd\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEnd()\n  fullName: System.IO.TextReader.ReadToEnd()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadToEnd\n    name: ReadToEnd\n    fullName: System.IO.TextReader.ReadToEnd\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadToEnd\n    name: ReadToEnd\n    fullName: System.IO.TextReader.ReadToEnd\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadToEnd()\n  commentId: M:System.IO.TextReader.ReadToEnd\n- uid: System.IO.TextReader.ReadToEndAsync\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEndAsync()\n  fullName: System.IO.TextReader.ReadToEndAsync()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadToEndAsync\n    name: ReadToEndAsync\n    fullName: System.IO.TextReader.ReadToEndAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadToEndAsync\n    name: ReadToEndAsync\n    fullName: System.IO.TextReader.ReadToEndAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadToEndAsync()\n  commentId: M:System.IO.TextReader.ReadToEndAsync\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n"}