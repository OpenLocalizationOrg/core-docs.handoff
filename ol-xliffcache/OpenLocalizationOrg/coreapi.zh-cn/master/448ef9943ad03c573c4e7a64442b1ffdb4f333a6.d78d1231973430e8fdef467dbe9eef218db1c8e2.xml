{"nodes":[{"pos":[535,552],"content":"XPathNodeIterator","needQuote":true,"nodes":[{"content":"XPathNodeIterator","pos":[0,17]}]},{"pos":[2198,2217],"content":"XPathNodeIterator()","needQuote":true,"nodes":[{"content":"XPathNodeIterator()","pos":[0,19]}]},{"pos":[3168,3173],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The index of the last node in the selected set of nodes, or 0 if there are no selected nodes.&lt;/p&gt;\\n","pos":[3835,3939],"source":"\\n<p>The index of the last node in the selected set of nodes, or 0 if there are no selected nodes.</p>\\n"},{"pos":[4290,4297],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[7012,7027],"content":"CurrentPosition","needQuote":true,"nodes":[{"content":"CurrentPosition","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the current position.&lt;/p&gt;\\n","pos":[7774,7819],"source":"\\n<p>The index of the current position.</p>\\n"},{"pos":[8176,8183],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[9672,9687],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[11124,11134],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[12579,12595],"content":"System.Xml.XPath","needQuote":true,"nodes":[{"content":"System.Xml.XPath","pos":[0,16]}]},{"pos":[12756,12762],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12936,12947],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[13146,13156],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13251,13259],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13328,13329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13356,13357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13427,13435],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13504,13505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13532,13533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13716,13730],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13849,13855],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13922,13923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13973,13979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14039,14040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14123,14129],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14196,14197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14247,14253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14313,14314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14528,14550],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14698,14704],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14771,14772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14822,14828],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14889,14890]},{"pos":[14945,14951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15011,15012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15109,15115],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15182,15183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15233,15239],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15300,15301]},{"pos":[15356,15362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15422,15423],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15668,15699],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15865,15880],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15956,15957],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16007,16013],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16074,16075]},{"pos":[16130,16136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16196,16197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16303,16318],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16394,16395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16445,16451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16512,16513]},{"pos":[16568,16574],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16634,16635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16865,16878],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16979,16990],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17062,17063],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17090,17091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17164,17175],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17247,17248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17275,17276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17451,17460],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17553,17560],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17628,17629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17656,17657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17726,17733],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17801,17802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17829,17830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18005,18022],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[18131,18146],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18222,18223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18250,18251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18328,18343],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18419,18420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18447,18448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18743,18756],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[18873,18884],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[18943,18944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18971,18972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19053,19064],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[19123,19124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19151,19152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19507,19519],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[19652,19662],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[19729,19730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19757,19758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19847,19857],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[19924,19925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19952,19953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20294,20309],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[20513,20526],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[20588,20589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20616,20617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20695,20711],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[20776,20777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20804,20805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21183,21200],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[21412,21427],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[21491,21492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21519,21520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21600,21618],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[21685,21686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21713,21714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21949,21955],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[22074,22092],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[22293,22317],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[22496,22507],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[22566,22567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22634,22645],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[22722,22723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22836,22847],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[22906,22907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22974,22985],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[23062,23063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23291,23300],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[23506,23529],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[23724,23734],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[23801,23802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23869,23880],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[23957,23958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24079,24089],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[24156,24157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24224,24235],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[24312,24313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24566,24584],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[24806,24832],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[25139,25152],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[25214,25215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25282,25293],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[25370,25371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25481,25497],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[25562,25563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25630,25641],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[25718,25719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26008,26018],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[26218,26246],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[26561,26576],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[26640,26641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26708,26719],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[26796,26797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26909,26927],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[26994,26995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27062,27073],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27150,27151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27413,27424],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[27569,27574],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27744,27758],"content":"XPathNavigator","needQuote":true,"nodes":[{"content":"XPathNavigator","pos":[0,14]}]},{"pos":[27978,27995],"content":"XPathNodeIterator","needQuote":true,"nodes":[{"content":"XPathNodeIterator","pos":[0,17]}]},{"pos":[28248,28263],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[28402,28415],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[28485,28486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28513,28514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28606,28619],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[28689,28690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28717,28718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28934,28945],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[29130,29137],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Xml.XPath.XPathNodeIterator\n  commentId: T:System.Xml.XPath.XPathNodeIterator\n  id: XPathNodeIterator\n  parent: System.Xml.XPath\n  children:\n  - System.Xml.XPath.XPathNodeIterator.#ctor\n  - System.Xml.XPath.XPathNodeIterator.Clone\n  - System.Xml.XPath.XPathNodeIterator.Count\n  - System.Xml.XPath.XPathNodeIterator.Current\n  - System.Xml.XPath.XPathNodeIterator.CurrentPosition\n  - System.Xml.XPath.XPathNodeIterator.GetEnumerator\n  - System.Xml.XPath.XPathNodeIterator.MoveNext\n  langs:\n  - csharp\n  - vb\n  name: XPathNodeIterator\n  fullName: System.Xml.XPath.XPathNodeIterator\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathNodeIterator\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 205\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Provides an iterator over a selected set of nodes.</p>\\n\"\n  syntax:\n    content: 'public abstract class XPathNodeIterator : IEnumerable'\n    content.vb: >-\n      Public MustInherit Class XPathNodeIterator\n          Implements IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XPathNodeIterator\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XPath.XPathNodeIterator.#ctor\n  commentId: M:System.Xml.XPath.XPathNodeIterator.#ctor\n  id: '#ctor'\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: XPathNodeIterator()\n  fullName: System.Xml.XPath.XPathNodeIterator.XPathNodeIterator()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 207\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XPath.XPathNodeIterator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected XPathNodeIterator()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XPathNodeIterator.XPathNodeIterator()\n- uid: System.Xml.XPath.XPathNodeIterator.Count\n  commentId: P:System.Xml.XPath.XPathNodeIterator.Count\n  id: Count\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Xml.XPath.XPathNodeIterator.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 208\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Gets the index of the last node in the selected set of nodes.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the last node in the selected set of nodes, or 0 if there are no selected nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XPathNodeIterator.Count\n- uid: System.Xml.XPath.XPathNodeIterator.Current\n  commentId: P:System.Xml.XPath.XPathNodeIterator.Current\n  id: Current\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Xml.XPath.XPathNodeIterator.Current\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Current\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 209\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>When overridden in a derived class, gets the <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for this <xref href=\\\"System.Xml.XPath.XPathNodeIterator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, positioned on the current context node.</p>\\n\"\n  syntax:\n    content: public abstract XPathNavigator Current { get; }\n    content.vb: Public MustOverride ReadOnly Property Current As XPathNavigator\n    parameters: []\n    return:\n      type: System.Xml.XPath.XPathNavigator\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object positioned on the context node from which the node set was selected. The <xref href=\\\"System.Xml.XPath.XPathNodeIterator.MoveNext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method must be called to move the <xref href=\\\"System.Xml.XPath.XPathNodeIterator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the first node in the selected set.</p>\\n\"\n  seealso:\n  - type: System.Xml.XPath.XPathNodeIterator.MoveNext\n    commentId: M:System.Xml.XPath.XPathNodeIterator.MoveNext\n  - type: System.Xml.XPath.XPathNavigator.Clone\n    commentId: M:System.Xml.XPath.XPathNavigator.Clone\n  - type: System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)\n    commentId: M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)\n  - type: System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)\n    commentId: M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)\n  - type: System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)\n    commentId: M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)\n  - type: System.Xml.XPath.XPathNodeIterator.Count\n    commentId: P:System.Xml.XPath.XPathNodeIterator.Count\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XPathNodeIterator.Current\n- uid: System.Xml.XPath.XPathNodeIterator.CurrentPosition\n  commentId: P:System.Xml.XPath.XPathNodeIterator.CurrentPosition\n  id: CurrentPosition\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: CurrentPosition\n  fullName: System.Xml.XPath.XPathNodeIterator.CurrentPosition\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CurrentPosition\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 210\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>When overridden in a derived class, gets the index of the current position in the selected set of nodes.</p>\\n\"\n  syntax:\n    content: public abstract int CurrentPosition { get; }\n    content.vb: Public MustOverride ReadOnly Property CurrentPosition As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the current position.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XPathNodeIterator.CurrentPosition\n- uid: System.Xml.XPath.XPathNodeIterator.Clone\n  commentId: M:System.Xml.XPath.XPathNodeIterator.Clone\n  id: Clone\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Xml.XPath.XPathNodeIterator.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 211\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>When overridden in a derived class, returns a clone of this <xref href=\\\"System.Xml.XPath.XPathNodeIterator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract XPathNodeIterator Clone()\n    content.vb: Public MustOverride Function Clone As XPathNodeIterator\n    return:\n      type: System.Xml.XPath.XPathNodeIterator\n      description: \"\\n<p>A new <xref href=\\\"System.Xml.XPath.XPathNodeIterator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object clone of this <xref href=\\\"System.Xml.XPath.XPathNodeIterator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Xml.XPath.XPathNodeIterator.MoveNext\n    commentId: M:System.Xml.XPath.XPathNodeIterator.MoveNext\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XPathNodeIterator.Clone()\n- uid: System.Xml.XPath.XPathNodeIterator.GetEnumerator\n  commentId: M:System.Xml.XPath.XPathNodeIterator.GetEnumerator\n  id: GetEnumerator\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Xml.XPath.XPathNodeIterator.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 212\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to iterate through the selected node set.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to iterate through the selected node set.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XPathNodeIterator.GetEnumerator()\n- uid: System.Xml.XPath.XPathNodeIterator.MoveNext\n  commentId: M:System.Xml.XPath.XPathNodeIterator.MoveNext\n  id: MoveNext\n  parent: System.Xml.XPath.XPathNodeIterator\n  langs:\n  - csharp\n  - vb\n  name: MoveNext()\n  fullName: System.Xml.XPath.XPathNodeIterator.MoveNext()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveNext\n    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs\n    startLine: 213\n  assemblies:\n  - System.Xml.XPath\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>When overridden in a derived class, moves the <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object returned by the <xref href=\\\"System.Xml.XPath.XPathNodeIterator.Current\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to the next node in the selected node set.</p>\\n\"\n  syntax:\n    content: public abstract bool MoveNext()\n    content.vb: Public MustOverride Function MoveNext As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object moved to the next node; <strong>false</strong> if there are no more selected nodes.</p>\\n\"\n  seealso:\n  - type: System.Xml.XPath.XPathNodeIterator.Current\n    commentId: P:System.Xml.XPath.XPathNodeIterator.Current\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XPathNodeIterator.MoveNext()\nreferences:\n- uid: System.Xml.XPath\n  isExternal: false\n  name: System.Xml.XPath\n  fullName: System.Xml.XPath\n  commentId: N:System.Xml.XPath\n  nameWithType: System.Xml.XPath\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Xml.XPath.XPathNavigator\n  parent: System.Xml.XPath\n  isExternal: false\n  name: XPathNavigator\n  fullName: System.Xml.XPath.XPathNavigator\n  commentId: T:System.Xml.XPath.XPathNavigator\n  nameWithType: XPathNavigator\n- uid: System.Xml.XPath.XPathNodeIterator\n  parent: System.Xml.XPath\n  isExternal: false\n  name: XPathNodeIterator\n  fullName: System.Xml.XPath.XPathNodeIterator\n  commentId: T:System.Xml.XPath.XPathNodeIterator\n  nameWithType: XPathNodeIterator\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n"}