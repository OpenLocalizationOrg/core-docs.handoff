{"nodes":[{"pos":[2556,2588],"content":"NotifyCollectionChangedEventArgs","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs","pos":[0,32]}]},{"pos":[4525,4588],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction)","pos":[0,63]}]},{"pos":[6656,6726],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The items that are affected by the change.&lt;/p&gt;\\n","pos":[8367,8420],"source":"\\n<p>The items that are affected by the change.</p>\\n"},{"pos":[9221,9298],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList)","pos":[0,77]}]},{"content":"\\n&lt;p&gt;The new items that are replacing the original items.&lt;/p&gt;\\n","pos":[10866,10929],"source":"\\n<p>The new items that are replacing the original items.</p>\\n"},{"content":"\\n&lt;p&gt;The original items that are replaced.&lt;/p&gt;\\n","pos":[11007,11055],"source":"\\n<p>The original items that are replaced.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Replace.&lt;/p&gt;\\n","pos":[11166,11211],"source":"\\n<p>If <em>action</em> is not Replace.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;oldItems&lt;/em&gt; or &lt;em&gt;newItems&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[11316,11377],"source":"\\n<p>If <em>oldItems</em> or <em>newItems</em> is null.</p>\\n"},{"pos":[12224,12308],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList, Int32)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList, Int32)","pos":[0,84]}]},{"content":"\\n&lt;p&gt;The new items that are replacing the original items.&lt;/p&gt;\\n","pos":[13935,13998],"source":"\\n<p>The new items that are replacing the original items.</p>\\n"},{"content":"\\n&lt;p&gt;The original items that are replaced.&lt;/p&gt;\\n","pos":[14076,14124],"source":"\\n<p>The original items that are replaced.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first item of the items that are being replaced.&lt;/p&gt;\\n","pos":[14195,14271],"source":"\\n<p>The index of the first item of the items that are being replaced.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Replace.&lt;/p&gt;\\n","pos":[14382,14427],"source":"\\n<p>If <em>action</em> is not Replace.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;oldItems&lt;/em&gt; or &lt;em&gt;newItems&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[14532,14593],"source":"\\n<p>If <em>oldItems</em> or <em>newItems</em> is null.</p>\\n"},{"pos":[15372,15449],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32)","pos":[0,77]}]},{"content":"\\n&lt;p&gt;The items affected by the change.&lt;/p&gt;\\n","pos":[17288,17332],"source":"\\n<p>The items affected by the change.</p>\\n"},{"content":"\\n&lt;p&gt;The index where the change occurred.&lt;/p&gt;\\n","pos":[17403,17450],"source":"\\n<p>The index where the change occurred.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Reset, Add, or Remove, if &lt;em&gt;action&lt;/em&gt; is Reset and either &lt;em&gt;changedItems&lt;/em&gt; is not null or &lt;em&gt;startingIndex&lt;/em&gt; is not -1, or if action is Add or Remove and &lt;em&gt;startingIndex&lt;/em&gt; is less than -1.&lt;/p&gt;\\n","pos":[17561,17804],"source":"\\n<p>If <em>action</em> is not Reset, Add, or Remove, if <em>action</em> is Reset and either <em>changedItems</em> is not null or <em>startingIndex</em> is not -1, or if action is Add or Remove and <em>startingIndex</em> is less than -1.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is Add or Remove and &lt;em&gt;changedItems&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[17909,17990],"source":"\\n<p>If <em>action</em> is Add or Remove and <em>changedItems</em> is null.</p>\\n"},{"pos":[18801,18885],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32, Int32)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32, Int32)","pos":[0,84]}]},{"content":"\\n&lt;p&gt;The items affected by the change.&lt;/p&gt;\\n","pos":[20490,20534],"source":"\\n<p>The items affected by the change.</p>\\n"},{"content":"\\n&lt;p&gt;The new index for the changed items.&lt;/p&gt;\\n","pos":[20597,20644],"source":"\\n<p>The new index for the changed items.</p>\\n"},{"content":"\\n&lt;p&gt;The old index for the changed items.&lt;/p&gt;\\n","pos":[20710,20757],"source":"\\n<p>The old index for the changed items.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Move or &lt;em&gt;index&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[20868,20943],"source":"\\n<p>If <em>action</em> is not Move or <em>index</em> is less than 0.</p>\\n"},{"pos":[21650,21721],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object)","pos":[0,71]}]},{"content":"\\n&lt;p&gt;The item that is affected by the change.&lt;/p&gt;\\n","pos":[23337,23388],"source":"\\n<p>The item that is affected by the change.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Reset, Add, or Remove, or if &lt;em&gt;action&lt;/em&gt; is Reset and &lt;em&gt;changedItem&lt;/em&gt; is not null.&lt;/p&gt;\\n","pos":[23499,23627],"source":"\\n<p>If <em>action</em> is not Reset, Add, or Remove, or if <em>action</em> is Reset and <em>changedItem</em> is not null.</p>\\n"},{"pos":[24360,24438],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32)","pos":[0,78]}]},{"content":"\\n&lt;p&gt;The item that is affected by the change.&lt;/p&gt;\\n","pos":[26097,26148],"source":"\\n<p>The item that is affected by the change.</p>\\n"},{"content":"\\n&lt;p&gt;The index where the change occurred.&lt;/p&gt;\\n","pos":[26211,26258],"source":"\\n<p>The index where the change occurred.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Reset, Add, or Remove, or if &lt;em&gt;action&lt;/em&gt; is Reset and either &lt;em&gt;changedItems&lt;/em&gt; is not null or &lt;em&gt;index&lt;/em&gt; is not -1.&lt;/p&gt;\\n","pos":[26369,26533],"source":"\\n<p>If <em>action</em> is not Reset, Add, or Remove, or if <em>action</em> is Reset and either <em>changedItems</em> is not null or <em>index</em> is not -1.</p>\\n"},{"pos":[27312,27397],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32, Int32)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32, Int32)","pos":[0,85]}]},{"content":"\\n&lt;p&gt;The item affected by the change.&lt;/p&gt;\\n","pos":[28977,29020],"source":"\\n<p>The item affected by the change.</p>\\n"},{"content":"\\n&lt;p&gt;The new index for the changed item.&lt;/p&gt;\\n","pos":[29083,29129],"source":"\\n<p>The new index for the changed item.</p>\\n"},{"content":"\\n&lt;p&gt;The old index for the changed item.&lt;/p&gt;\\n","pos":[29195,29241],"source":"\\n<p>The old index for the changed item.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Move or &lt;em&gt;index&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[29352,29427],"source":"\\n<p>If <em>action</em> is not Move or <em>index</em> is less than 0.</p>\\n"},{"pos":[30177,30256],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object)","pos":[0,79]}]},{"content":"\\n&lt;p&gt;The new item that is replacing the original item.&lt;/p&gt;\\n","pos":[31788,31848],"source":"\\n<p>The new item that is replacing the original item.</p>\\n"},{"content":"\\n&lt;p&gt;The original item that is replaced.&lt;/p&gt;\\n","pos":[31914,31960],"source":"\\n<p>The original item that is replaced.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Replace.&lt;/p&gt;\\n","pos":[32071,32116],"source":"\\n<p>If <em>action</em> is not Replace.</p>\\n"},{"pos":[32899,32985],"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object, Int32)","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object, Int32)","pos":[0,86]}]},{"content":"\\n&lt;p&gt;The new item that is replacing the original item.&lt;/p&gt;\\n","pos":[34555,34615],"source":"\\n<p>The new item that is replacing the original item.</p>\\n"},{"content":"\\n&lt;p&gt;The original item that is replaced.&lt;/p&gt;\\n","pos":[34681,34727],"source":"\\n<p>The original item that is replaced.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the item being replaced.&lt;/p&gt;\\n","pos":[34790,34838],"source":"\\n<p>The index of the item being replaced.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;action&lt;/em&gt; is not Replace.&lt;/p&gt;\\n","pos":[34949,34994],"source":"\\n<p>If <em>action</em> is not Replace.</p>\\n"},{"pos":[35476,35482],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[36872,36880],"content":"NewItems","needQuote":true,"nodes":[{"content":"NewItems","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The list of new items involved in the change.&lt;/p&gt;\\n","pos":[37588,37644],"source":"\\n<p>The list of new items involved in the change.</p>\\n"},{"pos":[38099,38115],"content":"NewStartingIndex","needQuote":true,"nodes":[{"content":"NewStartingIndex","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based index at which the change occurred.&lt;/p&gt;\\n","pos":[38837,38898],"source":"\\n<p>The zero-based index at which the change occurred.</p>\\n"},{"pos":[39337,39345],"content":"OldItems","needQuote":true,"nodes":[{"content":"OldItems","pos":[0,8]}]},{"pos":[40844,40860],"content":"OldStartingIndex","needQuote":true,"nodes":[{"content":"OldStartingIndex","pos":[0,16]}]},{"pos":[42156,42186],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[42389,42395],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42543,42552],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[42724,42729],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[42916,42926],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[43021,43029],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43098,43099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43126,43127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43197,43205],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43274,43275],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43302,43303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43486,43500],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[43619,43625],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43692,43693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43743,43749],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43809,43810],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43893,43899],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43966,43967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44017,44023],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44083,44084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44298,44320],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[44468,44474],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44541,44542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44592,44598],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44659,44660]},{"pos":[44715,44721],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44781,44782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44879,44885],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44952,44953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45003,45009],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45070,45071]},{"pos":[45126,45132],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45192,45193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45438,45469],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[45635,45650],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[45726,45727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45777,45783],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45844,45845]},{"pos":[45900,45906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45966,45967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46073,46088],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[46164,46165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46215,46221],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46282,46283]},{"pos":[46338,46344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46404,46405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46635,46648],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[46749,46760],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[46832,46833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46860,46861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46934,46945],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[47017,47018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47045,47046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47221,47230],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[47323,47330],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[47398,47399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47426,47427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47496,47503],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[47571,47572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47599,47600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47775,47792],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[47901,47916],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[47992,47993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48020,48021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48098,48113],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48189,48190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48217,48218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48363,48369],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[48571,48600],"content":"NotifyCollectionChangedAction","needQuote":true,"nodes":[{"content":"NotifyCollectionChangedAction","pos":[0,29]}]},{"pos":[48885,48890],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[49044,49062],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[49228,49233],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[49386,49403],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[49579,49600],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  id: NotifyCollectionChangedEventArgs\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems\n  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotifyCollectionChangedEventArgs\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 141\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: 'public class NotifyCollectionChangedEventArgs : EventArgs'\n    content.vb: >-\n      Public Class NotifyCollectionChangedEventArgs\n          Inherits EventArgs\n  seealso:\n  - type: System.Collections.Specialized.INotifyCollectionChanged\n    commentId: T:System.Collections.Specialized.INotifyCollectionChanged\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: NotifyCollectionChangedEventArgs\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 143\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This must be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 144\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a multi-item change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItems As IList)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: changedItems\n      type: System.Collections.IList\n      description: \"\\n<p>The items that are affected by the change.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 145\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a multi-item <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItems As IList, oldItems As IList)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can only be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: newItems\n      type: System.Collections.IList\n      description: \"\\n<p>The new items that are replacing the original items.</p>\\n\"\n    - id: oldItems\n      type: System.Collections.IList\n      description: \"\\n<p>The original items that are replaced.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Replace.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>If <em>oldItems</em> or <em>newItems</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList, Int32)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 146\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a multi-item <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItems As IList, oldItems As IList, startingIndex As Integer)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can only be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: newItems\n      type: System.Collections.IList\n      description: \"\\n<p>The new items that are replacing the original items.</p>\\n\"\n    - id: oldItems\n      type: System.Collections.IList\n      description: \"\\n<p>The original items that are replaced.</p>\\n\"\n    - id: startingIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first item of the items that are being replaced.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Replace.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>If <em>oldItems</em> or <em>newItems</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList, Int32)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 147\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a multi-item change or a <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItems As IList, startingIndex As Integer)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: changedItems\n      type: System.Collections.IList\n      description: \"\\n<p>The items affected by the change.</p>\\n\"\n    - id: startingIndex\n      type: System.Int32\n      description: \"\\n<p>The index where the change occurred.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Reset, Add, or Remove, if <em>action</em> is Reset and either <em>changedItems</em> is not null or <em>startingIndex</em> is not -1, or if action is Add or Remove and <em>startingIndex</em> is less than -1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>If <em>action</em> is Add or Remove and <em>changedItems</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32, Int32)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 148\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a multi-item <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItems As IList, index As Integer, oldIndex As Integer)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can only be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: changedItems\n      type: System.Collections.IList\n      description: \"\\n<p>The items affected by the change.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The new index for the changed items.</p>\\n\"\n    - id: oldIndex\n      type: System.Int32\n      description: \"\\n<p>The old index for the changed items.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Move or <em>index</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32, Int32)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 149\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a one-item change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItem As Object)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: changedItem\n      type: System.Object\n      description: \"\\n<p>The item that is affected by the change.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Reset, Add, or Remove, or if <em>action</em> is Reset and <em>changedItem</em> is not null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 150\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a one-item change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItem As Object, index As Integer)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: changedItem\n      type: System.Object\n      description: \"\\n<p>The item that is affected by the change.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index where the change occurred.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Reset, Add, or Remove, or if <em>action</em> is Reset and either <em>changedItems</em> is not null or <em>index</em> is not -1.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32, Int32)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 151\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a one-item <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItem As Object, index As Integer, oldIndex As Integer)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can only be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: changedItem\n      type: System.Object\n      description: \"\\n<p>The item affected by the change.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The new index for the changed item.</p>\\n\"\n    - id: oldIndex\n      type: System.Int32\n      description: \"\\n<p>The old index for the changed item.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Move or <em>index</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32, Int32)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 152\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a one-item <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItem As Object, oldItem As Object)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can only be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: newItem\n      type: System.Object\n      description: \"\\n<p>The new item that is replacing the original item.</p>\\n\"\n    - id: oldItem\n      type: System.Object\n      description: \"\\n<p>The original item that is replaced.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Replace.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)\n  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)\n  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)'\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object, Int32)\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 153\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that describes a one-item <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> change.</p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index)\n    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItem As Object, oldItem As Object, index As Integer)\n    parameters:\n    - id: action\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>The action that caused the event. This can be set to <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: newItem\n      type: System.Object\n      description: \"\\n<p>The new item that is replacing the original item.</p>\\n\"\n    - id: oldItem\n      type: System.Object\n      description: \"\\n<p>The original item that is replaced.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the item being replaced.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>If <em>action</em> is not Replace.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object, Int32)\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action\n  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action\n  id: Action\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Action\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action\n  type: Property\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Action\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 154\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the action that caused the event. </p>\\n\"\n  syntax:\n    content: public NotifyCollectionChangedAction Action { get; }\n    content.vb: Public ReadOnly Property Action As NotifyCollectionChangedAction\n    parameters: []\n    return:\n      type: System.Collections.Specialized.NotifyCollectionChangedAction\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that describes the action that caused the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NotifyCollectionChangedEventArgs.Action\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems\n  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems\n  id: NewItems\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NewItems\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems\n  type: Property\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewItems\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 155\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the list of new items involved in the change.</p>\\n\"\n  syntax:\n    content: public IList NewItems { get; }\n    content.vb: Public ReadOnly Property NewItems As IList\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>The list of new items involved in the change.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NotifyCollectionChangedEventArgs.NewItems\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex\n  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex\n  id: NewStartingIndex\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NewStartingIndex\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex\n  type: Property\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewStartingIndex\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 156\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the index at which the change occurred.</p>\\n\"\n  syntax:\n    content: public int NewStartingIndex { get; }\n    content.vb: Public ReadOnly Property NewStartingIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which the change occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NotifyCollectionChangedEventArgs.NewStartingIndex\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems\n  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems\n  id: OldItems\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: OldItems\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems\n  type: Property\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OldItems\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 157\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the list of items affected by a <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, Remove, or Move action.</p>\\n\"\n  syntax:\n    content: public IList OldItems { get; }\n    content.vb: Public ReadOnly Property OldItems As IList\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>The list of items affected by a <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, Remove, or Move action.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NotifyCollectionChangedEventArgs.OldItems\n- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex\n  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex\n  id: OldStartingIndex\n  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: OldStartingIndex\n  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex\n  type: Property\n  source:\n    remote:\n      path: src/System.ObjectModel/ref/System.ObjectModel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OldStartingIndex\n    path: src/System.ObjectModel/ref/System.ObjectModel.cs\n    startLine: 158\n  assemblies:\n  - System.ObjectModel\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the index at which a <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, Remove, or Replace action occurred.</p>\\n\"\n  syntax:\n    content: public int OldStartingIndex { get; }\n    content.vb: Public ReadOnly Property OldStartingIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which a <xref href=\\\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, Remove, or Replace action occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NotifyCollectionChangedEventArgs.OldStartingIndex\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  commentId: T:System.EventArgs\n  nameWithType: EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.Specialized.NotifyCollectionChangedAction\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NotifyCollectionChangedAction\n  fullName: System.Collections.Specialized.NotifyCollectionChangedAction\n  commentId: T:System.Collections.Specialized.NotifyCollectionChangedAction\n  nameWithType: NotifyCollectionChangedAction\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  commentId: T:System.Collections.IList\n  nameWithType: IList\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}