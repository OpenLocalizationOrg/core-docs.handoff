{"nodes":[{"pos":[848,871],"content":"IPv4InterfaceProperties","needQuote":true,"nodes":[{"content":"IPv4InterfaceProperties","pos":[0,23]}]},{"pos":[2332,2357],"content":"IPv4InterfaceProperties()","needQuote":true,"nodes":[{"content":"IPv4InterfaceProperties()","pos":[0,25]}]},{"pos":[3505,3510],"content":"Index","needQuote":true,"nodes":[{"content":"Index","pos":[0,5]}]},{"pos":[4943,4977],"content":"IsAutomaticPrivateAddressingActive","needQuote":true,"nodes":[{"content":"IsAutomaticPrivateAddressingActive","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the interface uses an APIPA address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5977,6086],"source":"\\n<p>\\n<strong>true</strong> if the interface uses an APIPA address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[6615,6650],"content":"IsAutomaticPrivateAddressingEnabled","needQuote":true,"nodes":[{"content":"IsAutomaticPrivateAddressingEnabled","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the interface uses APIPA; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7651,7749],"source":"\\n<p>\\n<strong>true</strong> if the interface uses APIPA; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8213,8226],"content":"IsDhcpEnabled","needQuote":true,"nodes":[{"content":"IsDhcpEnabled","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the interface is configured to obtain an IP address from a DHCP server; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9183,9327],"source":"\\n<p>\\n<strong>true</strong> if the interface is configured to obtain an IP address from a DHCP server; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9787,9806],"content":"IsForwardingEnabled","needQuote":true,"nodes":[{"content":"IsForwardingEnabled","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this interface routes packets; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10719,10821],"source":"\\n<p>\\n<strong>true</strong> if this interface routes packets; otherwise <strong>false</strong>.</p>\\n"},{"pos":[11239,11242],"content":"Mtu","needQuote":true,"nodes":[{"content":"Mtu","pos":[0,3]}]},{"pos":[12535,12543],"content":"UsesWins","needQuote":true,"nodes":[{"content":"UsesWins","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the interface uses WINS; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13424,13521],"source":"\\n<p>\\n<strong>true</strong> if the interface uses WINS; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13758,13787],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[13987,13993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14153,14163],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14258,14266],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14335,14336],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14363,14364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14434,14442],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14511,14512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14539,14540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14723,14737],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14856,14862],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14929,14930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14980,14986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15046,15047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15130,15136],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15203,15204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15254,15260],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15320,15321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15535,15557],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15705,15711],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15778,15779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15829,15835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15896,15897]},{"pos":[15952,15958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16018,16019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16116,16122],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16189,16190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16240,16246],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16307,16308]},{"pos":[16363,16369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16429,16430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16675,16706],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16872,16887],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16963,16964],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17014,17020],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17081,17082]},{"pos":[17137,17143],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17203,17204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17310,17325],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17401,17402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17452,17458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17519,17520]},{"pos":[17575,17581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17641,17642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17872,17885],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17986,17997],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18069,18070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18097,18098],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18171,18182],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18254,18255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18282,18283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18458,18467],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18560,18567],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18635,18636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18663,18664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18733,18740],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18808,18809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18836,18837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19012,19029],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19138,19153],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19229,19230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19257,19258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19335,19350],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19426,19427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19454,19455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19600,19606],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19736,19741],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19884,19891],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties\n  commentId: T:System.Net.NetworkInformation.IPv4InterfaceProperties\n  id: IPv4InterfaceProperties\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.Index\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu\n  - System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins\n  langs:\n  - csharp\n  - vb\n  name: IPv4InterfaceProperties\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv4InterfaceProperties\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 204\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides information about network interfaces that support Internet Protocol version 4 (IPv4).</p>\\n\"\n  syntax:\n    content: public abstract class IPv4InterfaceProperties\n    content.vb: Public MustInherit Class IPv4InterfaceProperties\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: IPv4InterfaceProperties\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor\n  commentId: M:System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IPv4InterfaceProperties()\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.IPv4InterfaceProperties()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 206\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.IPv4InterfaceProperties\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected IPv4InterfaceProperties()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: IPv4InterfaceProperties.IPv4InterfaceProperties()\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.Index\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.Index\n  id: Index\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: Index\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.Index\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Index\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 207\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.</p>\\n\"\n  syntax:\n    content: public abstract int Index { get; }\n    content.vb: Public MustOverride ReadOnly Property Index As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the index of the IPv4 interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.Index\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive\n  id: IsAutomaticPrivateAddressingActive\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IsAutomaticPrivateAddressingActive\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAutomaticPrivateAddressingActive\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 208\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether this interface has an automatic private IP addressing (APIPA) address.</p>\\n\"\n  syntax:\n    content: public abstract bool IsAutomaticPrivateAddressingActive { get; }\n    content.vb: Public MustOverride ReadOnly Property IsAutomaticPrivateAddressingActive As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the interface uses an APIPA address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled\n  id: IsAutomaticPrivateAddressingEnabled\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IsAutomaticPrivateAddressingEnabled\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAutomaticPrivateAddressingEnabled\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 209\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.</p>\\n\"\n  syntax:\n    content: public abstract bool IsAutomaticPrivateAddressingEnabled { get; }\n    content.vb: Public MustOverride ReadOnly Property IsAutomaticPrivateAddressingEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the interface uses APIPA; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled\n  id: IsDhcpEnabled\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IsDhcpEnabled\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDhcpEnabled\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 210\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.</p>\\n\"\n  syntax:\n    content: public abstract bool IsDhcpEnabled { get; }\n    content.vb: Public MustOverride ReadOnly Property IsDhcpEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the interface is configured to obtain an IP address from a DHCP server; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.IsDhcpEnabled\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled\n  id: IsForwardingEnabled\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: IsForwardingEnabled\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsForwardingEnabled\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 211\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether this interface can forward (route) packets.</p>\\n\"\n  syntax:\n    content: public abstract bool IsForwardingEnabled { get; }\n    content.vb: Public MustOverride ReadOnly Property IsForwardingEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this interface routes packets; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.IsForwardingEnabled\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu\n  id: Mtu\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: Mtu\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mtu\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 212\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the maximum transmission unit (MTU) for this network interface.</p>\\n\"\n  syntax:\n    content: public abstract int Mtu { get; }\n    content.vb: Public MustOverride ReadOnly Property Mtu As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the MTU.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.Mtu\n- uid: System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins\n  commentId: P:System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins\n  id: UsesWins\n  parent: System.Net.NetworkInformation.IPv4InterfaceProperties\n  langs:\n  - csharp\n  - vb\n  name: UsesWins\n  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UsesWins\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 213\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether an interface uses Windows Internet Name Service (WINS).</p>\\n\"\n  syntax:\n    content: public abstract bool UsesWins { get; }\n    content.vb: Public MustOverride ReadOnly Property UsesWins As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the interface uses WINS; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IPv4InterfaceProperties.UsesWins\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n"}