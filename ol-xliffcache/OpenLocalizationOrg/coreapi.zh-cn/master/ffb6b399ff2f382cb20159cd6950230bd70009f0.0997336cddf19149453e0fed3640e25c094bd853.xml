{"nodes":[{"pos":[559,564],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[2176,2190],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this &lt;strong&gt;Label&lt;/strong&gt; instance.","pos":[2942,3011],"source":"\\n<p>The object to compare with this <strong>Label</strong> instance."},{"content":"&lt;/p&gt;\\n","pos":[3012,3018],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Returns &lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; is an instance of &lt;strong&gt;Label&lt;/strong&gt; and is equal to this object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3079,3240],"source":"\\n<p>Returns <strong>true</strong> if <em>obj</em> is an instance of <strong>Label</strong> and is equal to this object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[3688,3701],"content":"Equals(Label)","needQuote":true,"nodes":[{"content":"Equals(Label)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;obj&lt;/em&gt; is equal to the value of the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4718,4863],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>obj</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5155,5168],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;Returns a hash code for this instance.&lt;/p&gt;\\n","pos":[5824,5873],"source":"\\n<p>Returns a hash code for this instance.</p>\\n"},{"pos":[6412,6434],"content":"Equality(Label, Label)","needQuote":true,"nodes":[{"content":"Equality(Label, Label)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7691,7798],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8304,8328],"content":"Inequality(Label, Label)","needQuote":true,"nodes":[{"content":"Inequality(Label, Label)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is not equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9594,9705],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9904,9926],"content":"System.Reflection.Emit","needQuote":true,"nodes":[{"content":"System.Reflection.Emit","pos":[0,22]}]},{"pos":[10127,10137],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10238,10246],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10297,10298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10325,10326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10399,10407],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10458,10459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10486,10487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10690,10712],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10860,10866],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10933,10934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10984,10990],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11051,11052]},{"pos":[11107,11113],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11173,11174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11271,11277],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11344,11345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11395,11401],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11462,11463]},{"pos":[11518,11524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11584,11585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11830,11861],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12027,12042],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12118,12119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12169,12175],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12236,12237]},{"pos":[12292,12298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12358,12359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12465,12480],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12556,12557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12607,12613],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12674,12675]},{"pos":[12730,12736],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12796,12797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13023,13032],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13125,13132],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13200,13201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13228,13229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13298,13305],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13373,13374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13401,13402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13558,13567],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[13721,13727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13848,13854],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14019,14033],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14158,14164],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14213,14214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14264,14270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14330,14331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14417,14423],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14472,14473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14523,14529],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14589,14590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14769,14776],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14955,14960],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[15159,15172],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15279,15290],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15344,15345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15372,15373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15449,15460],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15514,15515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15542,15543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15709,15714],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Reflection.Emit.Label\n  commentId: T:System.Reflection.Emit.Label\n  id: Label\n  parent: System.Reflection.Emit\n  children:\n  - System.Reflection.Emit.Label.Equals(System.Object)\n  - System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)\n  - System.Reflection.Emit.Label.GetHashCode\n  - System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  - System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  langs:\n  - csharp\n  - vb\n  name: Label\n  fullName: System.Reflection.Emit.Label\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Label\n    path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Represents a label in the instruction stream. <strong>Label</strong> is used in conjunction with the <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct Label\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure Label\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Label\n- uid: System.Reflection.Emit.Label.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.Label.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.Label\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.Emit.Label.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n    startLine: 50\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Checks if the given object is an instance of <strong>Label</strong> and is equal to this instance.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with this <strong>Label</strong> instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <strong>true</strong> if <em>obj</em> is an instance of <strong>Label</strong> and is equal to this object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Label.Equals(Object)\n- uid: System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)\n  id: Equals(System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.Label\n  langs:\n  - csharp\n  - vb\n  name: Equals(Label)\n  fullName: System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n    startLine: 58\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates whether the current instance is equal to the specified <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Equals(Label obj)\n    content.vb: Public Function Equals(obj As Label) As Boolean\n    parameters:\n    - id: obj\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>obj</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Label.Equals(Label)\n- uid: System.Reflection.Emit.Label.GetHashCode\n  commentId: M:System.Reflection.Emit.Label.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.Label\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.Emit.Label.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n    startLine: 45\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Generates a hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns a hash code for this instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Label.GetHashCode()\n- uid: System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  id: op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.Label\n  langs:\n  - csharp\n  - vb\n  name: Equality(Label, Label)\n  fullName: System.Reflection.Emit.Label.Equality(System.Reflection.Emit.Label, System.Reflection.Emit.Label)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n    startLine: 63\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(Label a, Label b)\n    content.vb: Public Shared Operator =(a As Label, b As Label) As Boolean\n    parameters:\n    - id: a\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>b</em>.</p>\\n\"\n    - id: b\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>a</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Label.Equality(Label, Label)\n- uid: System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  id: op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.Label\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Label, Label)\n  fullName: System.Reflection.Emit.Label.Inequality(System.Reflection.Emit.Label, System.Reflection.Emit.Label)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Reflection/Emit/Label.cs\n    startLine: 68\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(Label a, Label b)\n    content.vb: Public Shared Operator <>(a As Label, b As Label) As Boolean\n    parameters:\n    - id: a\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>b</em>.</p>\\n\"\n    - id: b\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.Emit.Label\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>a</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Label.Inequality(Label, Label)\nreferences:\n- uid: System.Reflection.Emit\n  isExternal: false\n  name: System.Reflection.Emit\n  fullName: System.Reflection.Emit\n  nameWithType: System.Reflection.Emit\n  commentId: N:System.Reflection.Emit\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.Emit.Label\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: Label\n  fullName: System.Reflection.Emit.Label\n  nameWithType: Label\n  commentId: T:System.Reflection.Emit.Label\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}