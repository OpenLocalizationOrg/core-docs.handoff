{"nodes":[{"pos":[1723,1728],"content":"Debug","needQuote":true,"nodes":[{"content":"Debug","pos":[0,5]}]},{"pos":[3934,3949],"content":"Assert(Boolean)","needQuote":true,"nodes":[{"content":"Assert(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[4800,4844],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, a failure message is not sent and the message box is not displayed.&lt;/p&gt;\\n","pos":[4845,4961],"source":" If the condition is <strong>true</strong>, a failure message is not sent and the message box is not displayed.</p>\\n"},{"pos":[6296,6319],"content":"Assert(Boolean, String)","needQuote":true,"nodes":[{"content":"Assert(Boolean, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[7252,7296],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the specified message is not sent and the message box is not displayed.","pos":[7297,7411],"source":" If the condition is <strong>true</strong>, the specified message is not sent and the message box is not displayed."},{"content":"&lt;/p&gt;\\n","pos":[7413,7419],"source":"  </p>\\n"},{"pos":[9015,9046],"content":"Assert(Boolean, String, String)","needQuote":true,"nodes":[{"content":"Assert(Boolean, String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[10044,10088],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the specified messages are not sent and the message box is not displayed.","pos":[10089,10205],"source":" If the condition is <strong>true</strong>, the specified messages are not sent and the message box is not displayed."},{"content":"&lt;/p&gt;\\n","pos":[10207,10213],"source":"  </p>\\n"},{"pos":[12091,12132],"content":"Assert(Boolean, String, String, Object[])","needQuote":true,"nodes":[{"content":"Assert(Boolean, String, String, Object[])","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[13223,13267],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the specified messages are not sent and the message box is not displayed.","pos":[13268,13384],"source":" If the condition is <strong>true</strong>, the specified messages are not sent and the message box is not displayed."},{"content":"&lt;/p&gt;\\n","pos":[13386,13392],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;An object array that contains zero or more objects to format.&lt;/p&gt;\\n","pos":[14046,14118],"source":"\\n<p>An object array that contains zero or more objects to format.</p>\\n"},{"pos":[14897,14909],"content":"Fail(String)","needQuote":true,"nodes":[{"content":"Fail(String)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A message to emit.","pos":[15662,15685],"source":"\\n<p>A message to emit."},{"content":"&lt;/p&gt;\\n","pos":[15686,15692],"source":" </p>\\n"},{"pos":[17015,17035],"content":"Fail(String, String)","needQuote":true,"nodes":[{"content":"Fail(String, String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A message to emit.","pos":[17868,17891],"source":"\\n<p>A message to emit."},{"content":"&lt;/p&gt;\\n","pos":[17892,17898],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A detailed message to emit.","pos":[17970,18002],"source":"\\n<p>A detailed message to emit."},{"content":"&lt;/p&gt;\\n","pos":[18003,18009],"source":" </p>\\n"},{"pos":[19301,19314],"content":"Write(Object)","needQuote":true,"nodes":[{"content":"Write(Object)","pos":[0,13]}]},{"pos":[21760,21781],"content":"Write(Object, String)","needQuote":true,"nodes":[{"content":"Write(Object, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[23039,23088],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[23089,23095],"source":" </p>\\n"},{"pos":[24388,24401],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[25277,25301],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[25302,25308],"source":" </p>\\n"},{"pos":[26635,26656],"content":"Write(String, String)","needQuote":true,"nodes":[{"content":"Write(String, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[27602,27626],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[27627,27633],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[27700,27749],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[27750,27756],"source":" </p>\\n"},{"pos":[29100,29124],"content":"WriteIf(Boolean, Object)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[30207,30251],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the value is written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[30252,30363],"source":" If the condition is <strong>true</strong>, the value is written to the trace listeners in the collection.</p>\\n"},{"pos":[31959,31991],"content":"WriteIf(Boolean, Object, String)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, Object, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[33146,33190],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the category name and value are written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[33191,33321],"source":" If the condition is <strong>true</strong>, the category name and value are written to the trace listeners in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[33595,33644],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[33645,33651],"source":" </p>\\n"},{"pos":[35006,35030],"content":"WriteIf(Boolean, String)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[36011,36055],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the message is written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[36056,36169],"source":" If the condition is <strong>true</strong>, the message is written to the trace listeners in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[36235,36259],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[36260,36266],"source":" </p>\\n"},{"pos":[37655,37687],"content":"WriteIf(Boolean, String, String)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[38738,38782],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the category name and message are written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[38783,38915],"source":" If the condition is <strong>true</strong>, the category name and message are written to the trace listeners in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[38981,39005],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[39006,39012],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[39079,39128],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[39129,39135],"source":" </p>\\n"},{"pos":[40451,40468],"content":"WriteLine(Object)","needQuote":true,"nodes":[{"content":"WriteLine(Object)","pos":[0,17]}]},{"pos":[42946,42971],"content":"WriteLine(Object, String)","needQuote":true,"nodes":[{"content":"WriteLine(Object, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[44245,44294],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[44295,44301],"source":" </p>\\n"},{"pos":[45610,45627],"content":"WriteLine(String)","needQuote":true,"nodes":[{"content":"WriteLine(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[46549,46573],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[46574,46580],"source":" </p>\\n"},{"pos":[47929,47956],"content":"WriteLine(String, Object[])","needQuote":true,"nodes":[{"content":"WriteLine(String, Object[])","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[48953,49121],"source":"\\n<p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An object array that contains zero or more objects to format.","pos":[49186,49252],"source":"\\n<p>An object array that contains zero or more objects to format."},{"content":"&lt;/p&gt;\\n","pos":[49253,49259],"source":" </p>\\n"},{"pos":[50025,50050],"content":"WriteLine(String, String)","needQuote":true,"nodes":[{"content":"WriteLine(String, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[51012,51036],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[51037,51043],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[51110,51159],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[51160,51166],"source":" </p>\\n"},{"pos":[52526,52554],"content":"WriteLineIf(Boolean, Object)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[53653,53697],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the value is written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[53698,53809],"source":" If the condition is <strong>true</strong>, the value is written to the trace listeners in the collection.</p>\\n"},{"pos":[55421,55457],"content":"WriteLineIf(Boolean, Object, String)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, Object, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[56628,56672],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the category name and value are written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[56673,56803],"source":" If the condition is <strong>true</strong>, the category name and value are written to the trace listeners in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[57077,57126],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[57127,57133],"source":" </p>\\n"},{"pos":[58504,58532],"content":"WriteLineIf(Boolean, String)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[59529,59573],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the message is written to the trace listeners in the collection.&lt;/p&gt;\\n","pos":[59574,59687],"source":" If the condition is <strong>true</strong>, the message is written to the trace listeners in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[59753,59777],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[59778,59784],"source":" </p>\\n"},{"pos":[61189,61225],"content":"WriteLineIf(Boolean, String, String)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[62292,62389],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[62390,62396],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[62462,62486],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[62487,62493],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[62560,62609],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[62610,62616],"source":" </p>\\n"},{"pos":[63779,63797],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[63964,63970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64130,64140],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[64235,64243],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[64312,64313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64340,64341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64411,64419],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[64488,64489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64516,64517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64700,64714],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[64833,64839],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[64906,64907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64957,64963],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65023,65024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65107,65113],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65180,65181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65231,65237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65297,65298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65512,65534],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[65682,65688],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65755,65756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65806,65812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[65873,65874]},{"pos":[65929,65935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65995,65996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66093,66099],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66166,66167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66217,66223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[66284,66285]},{"pos":[66340,66346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66406,66407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66652,66683],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[66849,66864],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[66940,66941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66991,66997],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67058,67059]},{"pos":[67114,67120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67180,67181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67287,67302],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[67378,67379],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67429,67435],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67496,67497]},{"pos":[67552,67558],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67618,67619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67849,67862],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[67963,67974],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68046,68047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68074,68075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68148,68159],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68231,68232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68259,68260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68435,68444],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[68537,68544],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[68612,68613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68640,68641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68710,68717],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[68785,68786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68813,68814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68989,69006],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[69115,69130],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[69206,69207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69234,69235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69312,69327],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[69403,69404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69431,69432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69577,69583],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[69715,69722],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[69870,69876],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69986,69994],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[70122,70128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[70189,70191]},{"pos":[70256,70262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70322,70324],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Diagnostics.Debug\n  commentId: T:System.Diagnostics.Debug\n  id: Debug\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.Debug.Assert(System.Boolean)\n  - System.Diagnostics.Debug.Assert(System.Boolean,System.String)\n  - System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)\n  - System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])\n  - System.Diagnostics.Debug.Fail(System.String)\n  - System.Diagnostics.Debug.Fail(System.String,System.String)\n  - System.Diagnostics.Debug.Write(System.Object)\n  - System.Diagnostics.Debug.Write(System.Object,System.String)\n  - System.Diagnostics.Debug.Write(System.String)\n  - System.Diagnostics.Debug.Write(System.String,System.String)\n  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)\n  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)\n  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)\n  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)\n  - System.Diagnostics.Debug.WriteLine(System.Object)\n  - System.Diagnostics.Debug.WriteLine(System.Object,System.String)\n  - System.Diagnostics.Debug.WriteLine(System.String)\n  - System.Diagnostics.Debug.WriteLine(System.String,System.Object[])\n  - System.Diagnostics.Debug.WriteLine(System.String,System.String)\n  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)\n  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)\n  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)\n  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)\n  langs:\n  - csharp\n  - vb\n  name: Debug\n  fullName: System.Diagnostics.Debug\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/src/System/Diagnostics/Debug.Public.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Debug\n    path: src/System.Diagnostics.Debug/src/System/Diagnostics/Debug.Public.cs\n    startLine: 7\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a set of methods and properties that help debug your code.</p>\\n\"\n  syntax:\n    content: public class Debug\n    content.vb: Public Class Debug\n  seealso:\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.Switch\n    commentId: T:System.Diagnostics.Switch\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Debug\n- uid: System.Diagnostics.Debug.Assert(System.Boolean)\n  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean)\n  id: Assert(System.Boolean)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean)\n  fullName: System.Diagnostics.Debug.Assert(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 12\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Assert(bool condition)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Assert(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, a failure message is not sent and the message box is not displayed.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Assert(Boolean)\n- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)\n  id: Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean, String)\n  fullName: System.Diagnostics.Debug.Assert(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 14\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, outputs a specified message and displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Assert(bool condition, string message)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Assert(condition As Boolean, message As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the specified message is not sent and the message box is not displayed.  </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Assert(Boolean, String)\n- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)\n  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)\n  id: Assert(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean, String, String)\n  fullName: System.Diagnostics.Debug.Assert(System.Boolean, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 16\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, outputs two specified messages and displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Assert(bool condition, string message, string detailMessage)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Assert(condition As Boolean, message As String, detailMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the specified messages are not sent and the message box is not displayed.  </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n    - id: detailMessage\n      type: System.String\n      description: \"\\n<p>The detailed message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Assert(Boolean, String, String)\n- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])\n  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])\n  id: Assert(System.Boolean,System.String,System.String,System.Object[])\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean, String, String, Object[])\n  fullName: System.Diagnostics.Debug.Assert(System.Boolean, System.String, System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 18\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Assert(bool condition, string message, string detailMessageFormat, params object[] args)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Assert(condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the specified messages are not sent and the message box is not displayed.  </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n    - id: detailMessageFormat\n      type: System.String\n      description: \"\\n<p>The composite format string (see Remarks) to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. This message contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains zero or more objects to format.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Debug.Assert(System.Boolean, System.String, System.String, System.Object())\n  name.vb: Assert(Boolean, String, String, Object())\n  nameWithType: Debug.Assert(Boolean, String, String, Object[])\n  nameWithType.vb: Debug.Assert(Boolean, String, String, Object())\n- uid: System.Diagnostics.Debug.Fail(System.String)\n  commentId: M:System.Diagnostics.Debug.Fail(System.String)\n  id: Fail(System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Fail(String)\n  fullName: System.Diagnostics.Debug.Fail(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Fail\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 20\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Emits the specified error message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Fail(string message)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Fail(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to emit. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Fail(String)\n- uid: System.Diagnostics.Debug.Fail(System.String,System.String)\n  commentId: M:System.Diagnostics.Debug.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Fail(String, String)\n  fullName: System.Diagnostics.Debug.Fail(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Fail\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 22\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Emits an error message and a detailed error message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Fail(string message, string detailMessage)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Fail(message As String, detailMessage As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to emit. </p>\\n\"\n    - id: detailMessage\n      type: System.String\n      description: \"\\n<p>A detailed message to emit. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Fail(String, String)\n- uid: System.Diagnostics.Debug.Write(System.Object)\n  commentId: M:System.Diagnostics.Debug.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Write(Object)\n  fullName: System.Diagnostics.Debug.Write(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 24\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Write(object value)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Write(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Write(Object)\n- uid: System.Diagnostics.Debug.Write(System.Object,System.String)\n  commentId: M:System.Diagnostics.Debug.Write(System.Object,System.String)\n  id: Write(System.Object,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Write(Object, String)\n  fullName: System.Diagnostics.Debug.Write(System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 26\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Write(object value, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Write(value As Object, category As String)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Write(Object, String)\n- uid: System.Diagnostics.Debug.Write(System.String)\n  commentId: M:System.Diagnostics.Debug.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Write(String)\n  fullName: System.Diagnostics.Debug.Write(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 28\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Write(string message)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Write(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Write(String)\n- uid: System.Diagnostics.Debug.Write(System.String,System.String)\n  commentId: M:System.Diagnostics.Debug.Write(System.String,System.String)\n  id: Write(System.String,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: Write(String, String)\n  fullName: System.Diagnostics.Debug.Write(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 30\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void Write(string message, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub Write(message As String, category As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.Write(String, String)\n- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)\n  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)\n  id: WriteIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, Object)\n  fullName: System.Diagnostics.Debug.WriteIf(System.Boolean, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 32\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteIf(bool condition, object value)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, value As Object)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the value is written to the trace listeners in the collection.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteIf(Boolean, Object)\n- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)\n  id: WriteIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, Object, String)\n  fullName: System.Diagnostics.Debug.WriteIf(System.Boolean, System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 34\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteIf(bool condition, object value, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, value As Object, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the category name and value are written to the trace listeners in the collection.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteIf(Boolean, Object, String)\n- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)\n  id: WriteIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, String)\n  fullName: System.Diagnostics.Debug.WriteIf(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 36\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteIf(bool condition, string message)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, message As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the message is written to the trace listeners in the collection.</p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteIf(Boolean, String)\n- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)\n  id: WriteIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, String, String)\n  fullName: System.Diagnostics.Debug.WriteIf(System.Boolean, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 38\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteIf(bool condition, string message, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, message As String, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the category name and message are written to the trace listeners in the collection.</p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteIf(Boolean, String, String)\n- uid: System.Diagnostics.Debug.WriteLine(System.Object)\n  commentId: M:System.Diagnostics.Debug.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object)\n  fullName: System.Diagnostics.Debug.WriteLine(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 40\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLine(object value)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLine(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLine(Object)\n- uid: System.Diagnostics.Debug.WriteLine(System.Object,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)\n  id: WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object, String)\n  fullName: System.Diagnostics.Debug.WriteLine(System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 42\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLine(object value, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLine(value As Object, category As String)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLine(Object, String)\n- uid: System.Diagnostics.Debug.WriteLine(System.String)\n  commentId: M:System.Diagnostics.Debug.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String)\n  fullName: System.Diagnostics.Debug.WriteLine(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 44\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message followed by a line terminator to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLine(string message)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLine(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLine(String)\n- uid: System.Diagnostics.Debug.WriteLine(System.String,System.Object[])\n  commentId: M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])\n  id: WriteLine(System.String,System.Object[])\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, Object[])\n  fullName: System.Diagnostics.Debug.WriteLine(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 46\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a formatted message followed by a line terminator to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLine(string format, params object[] args)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLine(format As String, ParamArray args As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains zero or more objects to format. </p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Debug.WriteLine(System.String, System.Object())\n  name.vb: WriteLine(String, Object())\n  nameWithType: Debug.WriteLine(String, Object[])\n  nameWithType.vb: Debug.WriteLine(String, Object())\n- uid: System.Diagnostics.Debug.WriteLine(System.String,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteLine(System.String,System.String)\n  id: WriteLine(System.String,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, String)\n  fullName: System.Diagnostics.Debug.WriteLine(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 48\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLine(string message, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLine(message As String, category As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLine(String, String)\n- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)\n  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)\n  id: WriteLineIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, Object)\n  fullName: System.Diagnostics.Debug.WriteLineIf(System.Boolean, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 50\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLineIf(bool condition, object value)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, value As Object)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the value is written to the trace listeners in the collection.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLineIf(Boolean, Object)\n- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)\n  id: WriteLineIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, Object, String)\n  fullName: System.Diagnostics.Debug.WriteLineIf(System.Boolean, System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 52\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLineIf(bool condition, object value, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, value As Object, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the category name and value are written to the trace listeners in the collection.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object whose name is sent to the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLineIf(Boolean, Object, String)\n- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)\n  id: WriteLineIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, String)\n  fullName: System.Diagnostics.Debug.WriteLineIf(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 54\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLineIf(bool condition, string message)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, message As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the message is written to the trace listeners in the collection.</p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLineIf(Boolean, String)\n- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)\n  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)\n  id: WriteLineIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Debug\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, String, String)\n  fullName: System.Diagnostics.Debug.WriteLineIf(System.Boolean, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs\n    startLine: 56\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Debug.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"DEBUG\")]\n\n      public static void WriteLineIf(bool condition, string message, string category)\n    content.vb: >-\n      <Conditional(\"DEBUG\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, message As String, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConsoleTraceListener\n    commentId: T:System.Diagnostics.ConsoleTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DEBUG\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debug.WriteLineIf(Boolean, String, String)\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n"}