{"nodes":[{"pos":[1459,1472],"content":"SemaphoreSlim","needQuote":true,"nodes":[{"content":"SemaphoreSlim","pos":[0,13]}]},{"pos":[3279,3299],"content":"SemaphoreSlim(Int32)","needQuote":true,"nodes":[{"content":"SemaphoreSlim(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The initial number of requests for the semaphore that can be granted concurrently.&lt;/p&gt;\\n","pos":[4140,4233],"source":"\\n<p>The initial number of requests for the semaphore that can be granted concurrently.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[4364,4414],"source":"\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n"},{"pos":[4792,4819],"content":"SemaphoreSlim(Int32, Int32)","needQuote":true,"nodes":[{"content":"SemaphoreSlim(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The initial number of requests for the semaphore that can be granted concurrently.&lt;/p&gt;\\n","pos":[5721,5814],"source":"\\n<p>The initial number of requests for the semaphore that can be granted concurrently.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of requests for the semaphore that can be granted concurrently.&lt;/p&gt;\\n","pos":[5880,5973],"source":"\\n<p>The maximum number of requests for the semaphore that can be granted concurrently.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is less than 0, or &lt;em&gt;initialCount&lt;/em&gt; is greater than &lt;em&gt;maxCount&lt;/em&gt;, or &lt;em&gt;maxCount&lt;/em&gt; is equal to or less than 0.&lt;/p&gt;\\n","pos":[6104,6263],"source":"\\n<p>\\n<em>initialCount</em> is less than 0, or <em>initialCount</em> is greater than <em>maxCount</em>, or <em>maxCount</em> is equal to or less than 0.</p>\\n"},{"pos":[6607,6626],"content":"AvailableWaitHandle","needQuote":true,"nodes":[{"content":"AvailableWaitHandle","pos":[0,19]}]},{"pos":[8163,8175],"content":"CurrentCount","needQuote":true,"nodes":[{"content":"CurrentCount","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The number of remaining threads that can enter the semaphore.&lt;/p&gt;\\n","pos":[8948,9020],"source":"\\n<p>The number of remaining threads that can enter the semaphore.</p>\\n"},{"pos":[9334,9343],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[10371,10387],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[11220,11363],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[11694,11703],"content":"Release()","needQuote":true,"nodes":[{"content":"Release()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[12633,12691],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[13293,13307],"content":"Release(Int32)","needQuote":true,"nodes":[{"content":"Release(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The number of times to exit the semaphore.&lt;/p&gt;\\n","pos":[14089,14142],"source":"\\n<p>The number of times to exit the semaphore.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[14452,14510],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;releaseCount&lt;/em&gt; is less than 1.&lt;/p&gt;\\n","pos":[14627,14677],"source":"\\n<p>\\n<em>releaseCount</em> is less than 1.</p>\\n"},{"pos":[15233,15239],"content":"Wait()","needQuote":true,"nodes":[{"content":"Wait()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[15979,16037],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[16357,16368],"content":"Wait(Int32)","needQuote":true,"nodes":[{"content":"Wait(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[17788,17904],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[18334,18364],"content":"Wait(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(Int32, CancellationToken)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[20227,20280],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[20397,20513],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[21332,21355],"content":"Wait(CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(CancellationToken)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[22564,22617],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n"},{"pos":[23323,23337],"content":"Wait(TimeSpan)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The semaphoreSlim instance has been disposed&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;\\n","pos":[25226,25291],"source":"\\n<p>The semaphoreSlim instance has been disposed<em>.</em></p>\\n"},{"pos":[25733,25766],"content":"Wait(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan, CancellationToken)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[27765,27818],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n"},{"pos":[28863,28874],"content":"WaitAsync()","needQuote":true,"nodes":[{"content":"WaitAsync()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A task that will complete when the semaphore has been entered.&lt;/p&gt;\\n","pos":[29584,29657],"source":"\\n<p>A task that will complete when the semaphore has been entered.</p>\\n"},{"pos":[29997,30013],"content":"WaitAsync(Int32)","needQuote":true,"nodes":[{"content":"WaitAsync(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[31535,31593],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[31710,31826],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[32276,32311],"content":"WaitAsync(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAsync(Int32, CancellationToken)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.","pos":[34287,34397],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."},{"content":"&lt;/p&gt;\\n","pos":[34398,34404],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.","pos":[34513,34565],"source":"\\n<p>The current instance has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[34566,34572],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.","pos":[34687,34734],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled."},{"content":"&lt;/p&gt;\\n","pos":[34735,34741],"source":" </p>\\n"},{"pos":[35171,35199],"content":"WaitAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAsync(CancellationToken)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A task that will complete when the semaphore has been entered.","pos":[36372,36439],"source":"\\n<p>A task that will complete when the semaphore has been entered."},{"content":"&lt;/p&gt;\\n","pos":[36440,36446],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[36569,36627],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.","pos":[36742,36789],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled."},{"content":"&lt;/p&gt;\\n","pos":[36790,36796],"source":" </p>\\n"},{"pos":[37162,37181],"content":"WaitAsync(TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAsync(TimeSpan)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[38837,38895],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[39719,39757],"content":"WaitAsync(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAsync(TimeSpan, CancellationToken)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.","pos":[42230,42277],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled."},{"content":"&lt;/p&gt;\\n","pos":[42278,42284],"source":" </p>\\n"},{"pos":[42477,42493],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[42654,42660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42810,42821],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[42996,43006],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[43101,43109],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43178,43179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43206,43207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43277,43285],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43354,43355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43382,43383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43566,43580],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[43699,43705],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43772,43773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43823,43829],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43889,43890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43973,43979],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44046,44047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44097,44103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44163,44164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44378,44400],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[44548,44554],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44621,44622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44672,44678],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44739,44740]},{"pos":[44795,44801],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44861,44862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44959,44965],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45032,45033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45083,45089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45150,45151]},{"pos":[45206,45212],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45272,45273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45518,45549],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[45715,45730],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[45806,45807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45857,45863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45924,45925]},{"pos":[45980,45986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46046,46047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46153,46168],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[46244,46245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46295,46301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46362,46363]},{"pos":[46418,46424],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46484,46485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46715,46728],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[46829,46840],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[46912,46913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46940,46941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47014,47025],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[47097,47098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47125,47126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47301,47310],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[47403,47410],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[47478,47479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47506,47507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47576,47583],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[47651,47652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47679,47680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47855,47872],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[47981,47996],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48072,48073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48100,48101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48178,48193],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48269,48270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48297,48298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48443,48449],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[48579,48584],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48750,48760],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[48962,48971],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[49074,49081],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[49133,49134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49161,49162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49236,49243],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[49295,49296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49323,49324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49488,49495],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49674,49691],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[49891,49899],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[50080,50084],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[50247,50269],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[50518,50531],"content":"Task<Boolean>","needQuote":true,"nodes":[{"content":"Task&lt;Boolean&gt;","pos":[0,13],"source":"Task<Boolean>"}]},{"pos":[50742,50746],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[50820,50821],"content":"<","needQuote":true,"nodes":[]},{"pos":[50872,50879],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51022,51026],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[51101,51104]},{"pos":[51162,51169],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51230,51231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51438,51451],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[51648,51652],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[51705,51706],"content":"<","needQuote":true,"nodes":[]},{"pos":[51733,51740],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[51855,51859],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[51913,51916]},{"pos":[51950,51957],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[51990,51991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52189,52216],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[52424,52447],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[52652,52674],"content":"SemaphoreFullException","needQuote":true,"nodes":[{"content":"SemaphoreFullException","pos":[0,22]}]},{"pos":[52907,52933],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]}],"content":"items:\n- uid: System.Threading.SemaphoreSlim\n  commentId: T:System.Threading.SemaphoreSlim\n  id: SemaphoreSlim\n  parent: System.Threading\n  children:\n  - System.Threading.SemaphoreSlim.#ctor(System.Int32)\n  - System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)\n  - System.Threading.SemaphoreSlim.AvailableWaitHandle\n  - System.Threading.SemaphoreSlim.CurrentCount\n  - System.Threading.SemaphoreSlim.Dispose\n  - System.Threading.SemaphoreSlim.Dispose(System.Boolean)\n  - System.Threading.SemaphoreSlim.Release\n  - System.Threading.SemaphoreSlim.Release(System.Int32)\n  - System.Threading.SemaphoreSlim.Wait\n  - System.Threading.SemaphoreSlim.Wait(System.Int32)\n  - System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)\n  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan)\n  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.SemaphoreSlim.WaitAsync\n  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32)\n  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)\n  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)\n  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  - vb\n  name: SemaphoreSlim\n  fullName: System.Threading.SemaphoreSlim\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SemaphoreSlim\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 41\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Represents a lightweight alternative to <xref href=\\\"System.Threading.Semaphore\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that limits the number of threads that can access a resource or pool of resources concurrently.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerDisplay(\"Current Count = {m_currentCount}\")]\n\n      public class SemaphoreSlim : IDisposable\n    content.vb: >-\n      <ComVisible(False)>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerDisplay(\"Current Count = {m_currentCount}\")>\n\n      Public Class SemaphoreSlim\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SemaphoreSlim\n- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32)\n  commentId: M:System.Threading.SemaphoreSlim.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: SemaphoreSlim(Int32)\n  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 159\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the initial number of requests that can be granted concurrently.</p>\\n\"\n  syntax:\n    content: public SemaphoreSlim(int initialCount)\n    content.vb: Public Sub New(initialCount As Integer)\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: \"\\n<p>The initial number of requests for the semaphore that can be granted concurrently.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.SemaphoreSlim(Int32)\n- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: SemaphoreSlim(Int32, Int32)\n  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 176\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the initial and maximum number of requests that can be granted concurrently.</p>\\n\"\n  syntax:\n    content: public SemaphoreSlim(int initialCount, int maxCount)\n    content.vb: Public Sub New(initialCount As Integer, maxCount As Integer)\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: \"\\n<p>The initial number of requests for the semaphore that can be granted concurrently.</p>\\n\"\n    - id: maxCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of requests for the semaphore that can be granted concurrently.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>initialCount</em> is less than 0, or <em>initialCount</em> is greater than <em>maxCount</em>, or <em>maxCount</em> is equal to or less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.SemaphoreSlim(Int32, Int32)\n- uid: System.Threading.SemaphoreSlim.AvailableWaitHandle\n  commentId: P:System.Threading.SemaphoreSlim.AvailableWaitHandle\n  id: AvailableWaitHandle\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: AvailableWaitHandle\n  fullName: System.Threading.SemaphoreSlim.AvailableWaitHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AvailableWaitHandle\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 124\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to wait on the semaphore.</p>\\n\"\n  syntax:\n    content: public WaitHandle AvailableWaitHandle { get; }\n    content.vb: Public ReadOnly Property AvailableWaitHandle As WaitHandle\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to wait on the semaphore.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SemaphoreSlim.AvailableWaitHandle\n- uid: System.Threading.SemaphoreSlim.CurrentCount\n  commentId: P:System.Threading.SemaphoreSlim.CurrentCount\n  id: CurrentCount\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: CurrentCount\n  fullName: System.Threading.SemaphoreSlim.CurrentCount\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentCount\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 106\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the number of remaining threads that can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public int CurrentCount { get; }\n    content.vb: Public ReadOnly Property CurrentCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of remaining threads that can enter the semaphore.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SemaphoreSlim.CurrentCount\n- uid: System.Threading.SemaphoreSlim.Dispose\n  commentId: M:System.Threading.SemaphoreSlim.Dispose\n  id: Dispose\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.SemaphoreSlim.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 845\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Dispose()\n- uid: System.Threading.SemaphoreSlim.Dispose(System.Boolean)\n  commentId: M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Threading.SemaphoreSlim.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 861\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: SemaphoreSlim.Dispose(Boolean)\n- uid: System.Threading.SemaphoreSlim.Release\n  commentId: M:System.Threading.SemaphoreSlim.Release\n  id: Release\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Release()\n  fullName: System.Threading.SemaphoreSlim.Release()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Release\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 739\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object once.</p>\\n\"\n  syntax:\n    content: public int Release()\n    content.vb: Public Function Release As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The previous count of the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.Threading.SemaphoreFullException\n    commentId: T:System.Threading.SemaphoreFullException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already reached its maximum size.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Release()\n- uid: System.Threading.SemaphoreSlim.Release(System.Int32)\n  commentId: M:System.Threading.SemaphoreSlim.Release(System.Int32)\n  id: Release(System.Int32)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Release(Int32)\n  fullName: System.Threading.SemaphoreSlim.Release(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Release\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 755\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object a specified number of times.</p>\\n\"\n  syntax:\n    content: public int Release(int releaseCount)\n    content.vb: Public Function Release(releaseCount As Integer) As Integer\n    parameters:\n    - id: releaseCount\n      type: System.Int32\n      description: \"\\n<p>The number of times to exit the semaphore.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The previous count of the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>releaseCount</em> is less than 1.</p>\\n\"\n  - type: System.Threading.SemaphoreFullException\n    commentId: T:System.Threading.SemaphoreFullException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already reached its maximum size.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Release(Int32)\n- uid: System.Threading.SemaphoreSlim.Wait\n  commentId: M:System.Threading.SemaphoreSlim.Wait\n  id: Wait\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait()\n  fullName: System.Threading.SemaphoreSlim.Wait()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 203\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until it can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Wait()\n    content.vb: Public Sub Wait\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Wait()\n- uid: System.Threading.SemaphoreSlim.Wait(System.Int32)\n  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32)\n  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 291\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until it can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a 32-bit signed integer that specifies the timeout.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Wait(Int32)\n- uid: System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32, CancellationToken)\n  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 309\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until it can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a 32-bit signed integer that specifies the timeout, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has been disposed, or the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Wait(Int32, CancellationToken)\n- uid: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(CancellationToken)\n  fullName: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 219\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until it can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Wait(CancellationToken cancellationToken)\n    content.vb: Public Sub Wait(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> token to observe.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Wait(CancellationToken)\n- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)\n  commentId: M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan)\n  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 237\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until it can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to specify the timeout.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout)\n    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The semaphoreSlim instance has been disposed<em>.</em></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Wait(TimeSpan)\n- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  id: Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan, CancellationToken)\n  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 267\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until it can enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the timeout, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The semaphoreSlim instance has been disposed<em>.</em></p>\\n<p>\\n<em>-or-</em>\\n</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.Wait(TimeSpan, CancellationToken)\n- uid: System.Threading.SemaphoreSlim.WaitAsync\n  commentId: M:System.Threading.SemaphoreSlim.WaitAsync\n  id: WaitAsync\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitAsync()\n  fullName: System.Threading.SemaphoreSlim.WaitAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAsync\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 478\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Asynchronously waits to enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public Task WaitAsync()\n    content.vb: Public Function WaitAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that will complete when the semaphore has been entered.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.WaitAsync()\n- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)\n  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)\n  id: WaitAsync(System.Int32)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitAsync(Int32)\n  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAsync\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 515\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Asynchronously waits to enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a 32-bit signed integer to measure the time interval. </p>\\n\"\n  syntax:\n    content: public Task<bool> WaitAsync(int millisecondsTimeout)\n    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer) As Task(Of Boolean)\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, otherwise with a result of <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.WaitAsync(Int32)\n- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)\n  id: WaitAsync(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitAsync(Int32, CancellationToken)\n  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAsync\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 596\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Asynchronously waits to enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, otherwise with a result of <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. </p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.WaitAsync(Int32, CancellationToken)\n- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)\n  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)\n  id: WaitAsync(System.Threading.CancellationToken)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitAsync(CancellationToken)\n  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAsync\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 494\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Asynchronously waits to enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public Task WaitAsync(CancellationToken cancellationToken)\n    content.vb: Public Function WaitAsync(cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> token to observe.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that will complete when the semaphore has been entered. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.WaitAsync(CancellationToken)\n- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)\n  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)\n  id: WaitAsync(System.TimeSpan)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitAsync(TimeSpan)\n  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAsync\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 543\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Asynchronously waits to enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to measure the time interval.</p>\\n\"\n  syntax:\n    content: public Task<bool> WaitAsync(TimeSpan timeout)\n    content.vb: Public Function WaitAsync(timeout As TimeSpan) As Task(Of Boolean)\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, otherwise with a result of <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out </p>\\n<p>-or- </p>\\n<p>timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.WaitAsync(TimeSpan)\n- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)\n  id: WaitAsync(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.SemaphoreSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitAsync(TimeSpan, CancellationToken)\n  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAsync\n    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs\n    startLine: 564\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Asynchronously waits to enter the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to measure the time interval, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken)\n    content.vb: Public Function WaitAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> token to observe.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\\\"System.Threading.SemaphoreSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, otherwise with a result of <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out</p>\\n<p>-or-</p>\\n<p>timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SemaphoreSlim.WaitAsync(TimeSpan, CancellationToken)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Threading.Tasks.Task{System.Boolean}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Boolean>\n  fullName: System.Threading.Tasks.Task<System.Boolean>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)\n  name.vb: Task(Of Boolean)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Boolean>\n  nameWithType.vb: Task(Of Boolean)\n  commentId: T:System.Threading.Tasks.Task{System.Boolean}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.Threading.SemaphoreFullException\n  isExternal: false\n  name: SemaphoreFullException\n  fullName: System.Threading.SemaphoreFullException\n  nameWithType: SemaphoreFullException\n  commentId: T:System.Threading.SemaphoreFullException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n"}