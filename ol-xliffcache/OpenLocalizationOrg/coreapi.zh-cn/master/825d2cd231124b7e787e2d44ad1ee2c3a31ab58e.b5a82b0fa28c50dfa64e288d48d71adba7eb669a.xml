{"nodes":[{"pos":[476,485],"content":"PingReply","needQuote":true,"nodes":[{"content":"PingReply","pos":[0,9]}]},{"pos":[1905,1912],"content":"Address","needQuote":true,"nodes":[{"content":"Address","pos":[0,7]}]},{"pos":[3102,3108],"content":"Buffer","needQuote":true,"nodes":[{"content":"Buffer","pos":[0,6]}]},{"pos":[4333,4340],"content":"Options","needQuote":true,"nodes":[{"content":"Options","pos":[0,7]}]},{"pos":[5913,5926],"content":"RoundtripTime","needQuote":true,"nodes":[{"content":"RoundtripTime","pos":[0,13]}]},{"pos":[7180,7186],"content":"Status","needQuote":true,"nodes":[{"content":"Status","pos":[0,6]}]},{"pos":[8311,8340],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[8540,8546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8706,8716],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8811,8819],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8888,8889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8916,8917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8987,8995],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9064,9065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9092,9093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9276,9290],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9409,9415],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9482,9483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9533,9539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9599,9600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9683,9689],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9756,9757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9807,9813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9873,9874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10088,10110],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10258,10264],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10331,10332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10382,10388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10449,10450]},{"pos":[10505,10511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10571,10572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10669,10675],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10742,10743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10793,10799],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10860,10861]},{"pos":[10916,10922],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10982,10983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11228,11259],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11425,11440],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11516,11517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11567,11573],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11634,11635]},{"pos":[11690,11696],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11756,11757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11863,11878],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11954,11955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12005,12011],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12072,12073]},{"pos":[12128,12134],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12194,12195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12425,12438],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12539,12550],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12622,12623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12650,12651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12724,12735],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12807,12808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12835,12836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13011,13020],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13113,13120],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13188,13189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13216,13217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13286,13293],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13361,13362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13389,13390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13565,13582],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13691,13706],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13782,13783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13810,13811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13888,13903],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13979,13980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14007,14008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14153,14159],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14301,14310],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[14452,14462],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[14568,14574],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[14694,14698],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14757,14759]},{"pos":[14822,14826],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[14884,14886],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[15070,15081],"content":"PingOptions","needQuote":true,"nodes":[{"content":"PingOptions","pos":[0,11]}]},{"pos":[15286,15291],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[15481,15489],"content":"IPStatus","needQuote":true,"nodes":[{"content":"IPStatus","pos":[0,8]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.PingReply\n  commentId: T:System.Net.NetworkInformation.PingReply\n  id: PingReply\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.PingReply.Address\n  - System.Net.NetworkInformation.PingReply.Buffer\n  - System.Net.NetworkInformation.PingReply.Options\n  - System.Net.NetworkInformation.PingReply.RoundtripTime\n  - System.Net.NetworkInformation.PingReply.Status\n  langs:\n  - csharp\n  - vb\n  name: PingReply\n  fullName: System.Net.NetworkInformation.PingReply\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PingReply\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 61\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides information about the status and data resulting from a <xref href=\\\"System.Net.NetworkInformation.Ping.Send\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Net.NetworkInformation.Ping.SendAsync\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operation.</p>\\n\"\n  syntax:\n    content: public class PingReply\n    content.vb: Public Class PingReply\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: PingReply\n- uid: System.Net.NetworkInformation.PingReply.Address\n  commentId: P:System.Net.NetworkInformation.PingReply.Address\n  id: Address\n  parent: System.Net.NetworkInformation.PingReply\n  langs:\n  - csharp\n  - vb\n  name: Address\n  fullName: System.Net.NetworkInformation.PingReply.Address\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Address\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 64\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.</p>\\n\"\n  syntax:\n    content: public IPAddress Address { get; }\n    content.vb: Public ReadOnly Property Address As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the destination for the ICMP echo message.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PingReply.Address\n- uid: System.Net.NetworkInformation.PingReply.Buffer\n  commentId: P:System.Net.NetworkInformation.PingReply.Buffer\n  id: Buffer\n  parent: System.Net.NetworkInformation.PingReply\n  langs:\n  - csharp\n  - vb\n  name: Buffer\n  fullName: System.Net.NetworkInformation.PingReply.Buffer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Buffer\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 65\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.</p>\\n\"\n  syntax:\n    content: public byte[] Buffer { get; }\n    content.vb: Public ReadOnly Property Buffer As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array containing the data received in an ICMP echo reply message, or an empty array, if no reply was received.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PingReply.Buffer\n- uid: System.Net.NetworkInformation.PingReply.Options\n  commentId: P:System.Net.NetworkInformation.PingReply.Options\n  id: Options\n  parent: System.Net.NetworkInformation.PingReply\n  langs:\n  - csharp\n  - vb\n  name: Options\n  fullName: System.Net.NetworkInformation.PingReply.Options\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Options\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 66\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.</p>\\n\"\n  syntax:\n    content: public PingOptions Options { get; }\n    content.vb: Public ReadOnly Property Options As PingOptions\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.PingOptions\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.PingOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the Time to Live (TTL) and the fragmentation directive used for transmitting the reply if <xref href=\\\"System.Net.NetworkInformation.PingReply.Status\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Net.NetworkInformation.IPStatus.Success\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PingReply.Options\n- uid: System.Net.NetworkInformation.PingReply.RoundtripTime\n  commentId: P:System.Net.NetworkInformation.PingReply.RoundtripTime\n  id: RoundtripTime\n  parent: System.Net.NetworkInformation.PingReply\n  langs:\n  - csharp\n  - vb\n  name: RoundtripTime\n  fullName: System.Net.NetworkInformation.PingReply.RoundtripTime\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RoundtripTime\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 67\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\\n\"\n  syntax:\n    content: public long RoundtripTime { get; }\n    content.vb: Public ReadOnly Property RoundtripTime As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>An <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the round trip time, in milliseconds.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PingReply.RoundtripTime\n- uid: System.Net.NetworkInformation.PingReply.Status\n  commentId: P:System.Net.NetworkInformation.PingReply.Status\n  id: Status\n  parent: System.Net.NetworkInformation.PingReply\n  langs:\n  - csharp\n  - vb\n  name: Status\n  fullName: System.Net.NetworkInformation.PingReply.Status\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Status\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 68\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\\n\"\n  syntax:\n    content: public IPStatus Status { get; }\n    content.vb: Public ReadOnly Property Status As IPStatus\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.IPStatus\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating the result of the request.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PingReply.Status\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Net.NetworkInformation.PingOptions\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingOptions\n  fullName: System.Net.NetworkInformation.PingOptions\n  commentId: T:System.Net.NetworkInformation.PingOptions\n  nameWithType: PingOptions\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Net.NetworkInformation.IPStatus\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPStatus\n  fullName: System.Net.NetworkInformation.IPStatus\n  commentId: T:System.Net.NetworkInformation.IPStatus\n  nameWithType: IPStatus\n"}