{"nodes":[{"pos":[605,616],"content":"ContentInfo","needQuote":true,"nodes":[{"content":"ContentInfo","pos":[0,11]}]},{"pos":[2255,2274],"content":"ContentInfo(Byte[])","needQuote":true,"nodes":[{"content":"ContentInfo(Byte[])","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A null reference  was passed to a method that does not accept it as a valid argument.","pos":[3721,3811],"source":"\\n<p>A null reference  was passed to a method that does not accept it as a valid argument."},{"content":"&lt;/p&gt;\\n","pos":[3812,3818],"source":" </p>\\n"},{"pos":[4471,4495],"content":"ContentInfo(Oid, Byte[])","needQuote":true,"nodes":[{"content":"ContentInfo(Oid, Byte[])","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A null reference  was passed to a method that does not accept it as a valid argument.","pos":[6448,6538],"source":"\\n<p>A null reference  was passed to a method that does not accept it as a valid argument."},{"content":"&lt;/p&gt;\\n","pos":[6539,6545],"source":" </p>\\n"},{"pos":[7107,7114],"content":"Content","needQuote":true,"nodes":[{"content":"Content","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An array of byte values that represents the content data.&lt;/p&gt;\\n","pos":[8057,8125],"source":"\\n<p>An array of byte values that represents the content data.</p>\\n"},{"pos":[8643,8654],"content":"ContentType","needQuote":true,"nodes":[{"content":"ContentType","pos":[0,11]}]},{"pos":[10561,10583],"content":"GetContentType(Byte[])","needQuote":true,"nodes":[{"content":"GetContentType(Byte[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A null reference  was passed to a method that does not accept it as a valid argument.&lt;/p&gt;\\n","pos":[12540,12636],"source":"\\n<p>A null reference  was passed to a method that does not accept it as a valid argument.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred during a cryptographic operation.&lt;/p&gt;\\n","pos":[12787,12849],"source":"\\n<p>An error occurred during a cryptographic operation.</p>\\n"},{"pos":[13242,13275],"content":"System.Security.Cryptography.Pkcs","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.Pkcs","pos":[0,33]}]},{"pos":[13487,13493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13653,13663],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13758,13766],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13835,13836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13863,13864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13934,13942],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14011,14012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14039,14040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14223,14237],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14356,14362],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14429,14430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14480,14486],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14546,14547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14630,14636],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14703,14704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14754,14760],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14820,14821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15035,15057],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15205,15211],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15278,15279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15329,15335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15396,15397]},{"pos":[15452,15458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15518,15519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15616,15622],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15689,15690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15740,15746],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15807,15808]},{"pos":[15863,15869],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15929,15930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16175,16206],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16372,16387],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16463,16464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16514,16520],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16581,16582]},{"pos":[16637,16643],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16703,16704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16810,16825],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16901,16902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16952,16958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17019,17020]},{"pos":[17075,17081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17141,17142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17372,17385],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17486,17497],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17569,17570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17597,17598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17671,17682],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17754,17755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17782,17783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17958,17967],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18060,18067],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18135,18136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18163,18164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18233,18240],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18308,18309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18336,18337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18512,18529],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[18638,18653],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18729,18730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18757,18758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18835,18850],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18926,18927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18954,18955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19100,19106],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19200,19206],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[19326,19330],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[19389,19391]},{"pos":[19454,19458],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19516,19518],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19692,19695],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[19873,19901],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[20096,20117],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[20328,20350],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.Pkcs.ContentInfo\n  commentId: T:System.Security.Cryptography.Pkcs.ContentInfo\n  id: ContentInfo\n  parent: System.Security.Cryptography.Pkcs\n  children:\n  - System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])\n  - System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])\n  - System.Security.Cryptography.Pkcs.ContentInfo.Content\n  - System.Security.Cryptography.Pkcs.ContentInfo.ContentType\n  - System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ContentInfo\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContentInfo\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class represents the CMS/PKCS #7 ContentInfo data structure as defined in the CMS/PKCS #7 standards document. This data structure is the basis for all CMS/PKCS #7 messages.</p>\\n\"\n  syntax:\n    content: public sealed class ContentInfo\n    content.vb: Public NotInheritable Class ContentInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ContentInfo\n- uid: System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.Pkcs.ContentInfo\n  langs:\n  - csharp\n  - vb\n  name: ContentInfo(Byte[])\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo.ContentInfo(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor  creates an instance of the <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using an array of byte values as the data and a default <em>object identifier</em> (OID) that represents the content type.</p>\\n\"\n  syntax:\n    content: public ContentInfo(byte[] content)\n    content.vb: Public Sub New(content As Byte())\n    parameters:\n    - id: content\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the data from which to create the <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>A null reference  was passed to a method that does not accept it as a valid argument. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.Pkcs.ContentInfo.ContentInfo(System.Byte())\n  name.vb: ContentInfo(Byte())\n  nameWithType: ContentInfo.ContentInfo(Byte[])\n  nameWithType.vb: ContentInfo.ContentInfo(Byte())\n- uid: System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])\n  commentId: M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])\n  id: '#ctor(System.Security.Cryptography.Oid,System.Byte[])'\n  parent: System.Security.Cryptography.Pkcs.ContentInfo\n  langs:\n  - csharp\n  - vb\n  name: ContentInfo(Oid, Byte[])\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo.ContentInfo(System.Security.Cryptography.Oid, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  constructor  creates an instance of the <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified content type and an array of byte values as the data.</p>\\n\"\n  syntax:\n    content: public ContentInfo(Oid contentType, byte[] content)\n    content.vb: Public Sub New(contentType As Oid, content As Byte())\n    parameters:\n    - id: contentType\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains an <em>object identifier</em> (OID) that specifies the content type of the content. This can be data, digestedData, encryptedData, envelopedData, hashedData, signedAndEnvelopedData, or signedData.  For more information, see  Remarks.</p>\\n\"\n    - id: content\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the data from which to create the <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>A null reference  was passed to a method that does not accept it as a valid argument. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.Pkcs.ContentInfo.ContentInfo(System.Security.Cryptography.Oid, System.Byte())\n  name.vb: ContentInfo(Oid, Byte())\n  nameWithType: ContentInfo.ContentInfo(Oid, Byte[])\n  nameWithType.vb: ContentInfo.ContentInfo(Oid, Byte())\n- uid: System.Security.Cryptography.Pkcs.ContentInfo.Content\n  commentId: P:System.Security.Cryptography.Pkcs.ContentInfo.Content\n  id: Content\n  parent: System.Security.Cryptography.Pkcs.ContentInfo\n  langs:\n  - csharp\n  - vb\n  name: Content\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo.Content\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Content\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo.Content\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property  retrieves the content of the CMS/PKCS #7 message.</p>\\n\"\n  syntax:\n    content: >-\n      public byte[] Content\n\n      {\n          [CompilerGenerated]\n          get;\n      }\n    content.vb: Public ReadOnly Property Content As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the content data.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.ContentInfo.ContentType\n    commentId: P:System.Security.Cryptography.Pkcs.ContentInfo.ContentType\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ContentInfo.Content\n- uid: System.Security.Cryptography.Pkcs.ContentInfo.ContentType\n  commentId: P:System.Security.Cryptography.Pkcs.ContentInfo.ContentType\n  id: ContentType\n  parent: System.Security.Cryptography.Pkcs.ContentInfo\n  langs:\n  - csharp\n  - vb\n  name: ContentType\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo.ContentType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContentType\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo.ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property  retrieves the <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>   object that contains the <em>object identifier</em> (OID)  of the content type of the inner content of the CMS/PKCS #7 message.</p>\\n\"\n  syntax:\n    content: >-\n      public Oid ContentType\n\n      {\n          [CompilerGenerated]\n          get;\n      }\n    content.vb: Public ReadOnly Property ContentType As Oid\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object that contains the OID value that represents the content type.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.ContentInfo.Content\n    commentId: P:System.Security.Cryptography.Pkcs.ContentInfo.Content\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ContentInfo.ContentType\n- uid: System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])\n  commentId: M:System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])\n  id: GetContentType(System.Byte[])\n  parent: System.Security.Cryptography.Pkcs.ContentInfo\n  langs:\n  - csharp\n  - vb\n  name: GetContentType(Byte[])\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetContentType\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> static method  retrieves the outer content type of the encoded <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> message represented by an array of byte values.</p>\\n\"\n  syntax:\n    content: public static Oid GetContentType(byte[] encodedMessage)\n    content.vb: Public Shared Function GetContentType(encodedMessage As Byte()) As Oid\n    parameters:\n    - id: encodedMessage\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the encoded <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> message from which to retrieve the outer content type.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>If the method succeeds, the method returns an <xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the outer content type of the specified encoded <xref href=\\\"System.Security.Cryptography.Pkcs.ContentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> message.</p>\\n<p>If the method fails, it throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>A null reference  was passed to a method that does not accept it as a valid argument.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred during a cryptographic operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte())\n  name.vb: GetContentType(Byte())\n  nameWithType: ContentInfo.GetContentType(Byte[])\n  nameWithType.vb: ContentInfo.GetContentType(Byte())\nreferences:\n- uid: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: System.Security.Cryptography.Pkcs\n  fullName: System.Security.Cryptography.Pkcs\n  commentId: N:System.Security.Cryptography.Pkcs\n  nameWithType: System.Security.Cryptography.Pkcs\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  fullName: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  nameWithType: Oid\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}