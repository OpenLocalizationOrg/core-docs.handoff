{"nodes":[{"pos":[497,517],"content":"Partitioner<TSource>","needQuote":true,"nodes":[{"content":"Partitioner&lt;TSource&gt;","pos":[0,20],"source":"Partitioner<TSource>"}]},{"content":"\\n&lt;p&gt;Type of the elements in the collection.&lt;/p&gt;\\n","pos":[1424,1474],"source":"\\n<p>Type of the elements in the collection.</p>\\n"},{"pos":[2574,2587],"content":"Partitioner()","needQuote":true,"nodes":[{"content":"Partitioner()","pos":[0,13]}]},{"pos":[3999,4024],"content":"SupportsDynamicPartitions","needQuote":true,"nodes":[{"content":"SupportsDynamicPartitions","pos":[0,25]}]},{"pos":[6046,6068],"content":"GetDynamicPartitions()","needQuote":true,"nodes":[{"content":"GetDynamicPartitions()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An object that can create partitions over the underlying data source.&lt;/p&gt;\\n","pos":[6940,7020],"source":"\\n<p>An object that can create partitions over the underlying data source.</p>\\n"},{"content":"\\n&lt;p&gt;Dynamic partitioning is not supported by the base class.","pos":[7139,7200],"source":"\\n<p>Dynamic partitioning is not supported by the base class."},{"content":"You must implement it in a derived class.&lt;/p&gt;\\n","pos":[7201,7248],"source":" You must implement it in a derived class.</p>\\n"},{"pos":[8098,8118],"content":"GetPartitions(Int32)","needQuote":true,"nodes":[{"content":"GetPartitions(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of partitions to create.&lt;/p&gt;\\n","pos":[9003,9049],"source":"\\n<p>The number of partitions to create.</p>\\n"},{"content":"\\n&lt;p&gt;A list containing &lt;em&gt;partitionCount&lt;/em&gt; enumerators.&lt;/p&gt;\\n","pos":[9179,9244],"source":"\\n<p>A list containing <em>partitionCount</em> enumerators.</p>\\n"},{"pos":[9885,9914],"content":"System.Collections.Concurrent","needQuote":true,"nodes":[{"content":"System.Collections.Concurrent","pos":[0,29]}]},{"pos":[10114,10120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10280,10290],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10385,10393],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10462,10463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10490,10491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10561,10569],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10638,10639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10666,10667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10850,10864],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[10983,10989],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11056,11057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11107,11113],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11173,11174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11257,11263],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11330,11331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11381,11387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11447,11448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11662,11684],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11832,11838],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11905,11906],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11956,11962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12023,12024]},{"pos":[12079,12085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12145,12146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12243,12249],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12316,12317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12367,12373],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12434,12435]},{"pos":[12490,12496],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12556,12557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12802,12833],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12999,13014],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13090,13091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13141,13147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13208,13209]},{"pos":[13264,13270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13330,13331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13437,13452],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13528,13529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13579,13585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13646,13647]},{"pos":[13702,13708],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13768,13769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13999,14012],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14113,14124],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14196,14197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14224,14225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14298,14309],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14381,14382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14409,14410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14585,14594],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14687,14694],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14762,14763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14790,14791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14860,14867],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14935,14936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14963,14964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15139,15156],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15265,15280],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15356,15357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15384,15385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15462,15477],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15553,15554],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15581,15582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15727,15733],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15865,15872],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16111,16131],"content":"IEnumerable<TSource>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSource&gt;","pos":[0,20],"source":"IEnumerable<TSource>"}]},{"pos":[16368,16379],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[16464,16465],"content":"<","needQuote":true,"nodes":[]},{"pos":[16492,16499],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[16625,16636],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[16722,16725]},{"pos":[16759,16766],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[16799,16800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17032,17046],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[17265,17276],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[17340,17341],"content":"<","needQuote":true,"nodes":[]},{"pos":[17368,17369],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17489,17500],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[17565,17568]},{"pos":[17602,17603],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17630,17631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17834,17860],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[18050,18055],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18316,18343],"content":"IList<IEnumerator<TSource>>","needQuote":true,"nodes":[{"content":"IList&lt;IEnumerator&lt;TSource&gt;&gt;","pos":[0,27],"source":"IList<IEnumerator<TSource>>"}]},{"pos":[18655,18660],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[18739,18740],"content":"<","needQuote":true,"nodes":[]},{"pos":[18817,18828],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[18913,18914],"content":"<","needQuote":true,"nodes":[]},{"pos":[18941,18948],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[19100,19105],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[19185,19188]},{"pos":[19272,19283],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[19369,19372]},{"pos":[19406,19413],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[19446,19447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19474,19475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19751,19759],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[19954,19959],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[20017,20018],"content":"<","needQuote":true,"nodes":[]},{"pos":[20045,20046],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20160,20165],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[20224,20227]},{"pos":[20261,20262],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20289,20290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20494,20515],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.Concurrent.Partitioner`1\n  commentId: T:System.Collections.Concurrent.Partitioner`1\n  id: Partitioner`1\n  parent: System.Collections.Concurrent\n  children:\n  - System.Collections.Concurrent.Partitioner`1.#ctor\n  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  langs:\n  - csharp\n  - vb\n  name: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Partitioner\n    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n    startLine: 46\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  summary: \"\\n<p>Represents a particular manner of splitting a data source into multiple partitions.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public abstract class Partitioner<TSource>\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public MustInherit Class Partitioner(Of TSource)\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>Type of the elements in the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.Concurrent.OrderablePartitioner`1\n    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n  - type: System.Collections.Concurrent.Partitioner\n    commentId: T:System.Collections.Concurrent.Partitioner\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)\n  name.vb: Partitioner(Of TSource)\n  nameWithType: Partitioner<TSource>\n  nameWithType.vb: Partitioner(Of TSource)\n- uid: System.Collections.Concurrent.Partitioner`1.#ctor\n  commentId: M:System.Collections.Concurrent.Partitioner`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  - vb\n  name: Partitioner()\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs\n    startLine: 204\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  summary: \"\\n<p>Creates a new partitioner instance.</p>\\n\"\n  syntax:\n    content: protected Partitioner()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Collections.Concurrent.OrderablePartitioner`1\n    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n  - type: System.Collections.Concurrent.Partitioner\n    commentId: T:System.Collections.Concurrent.Partitioner\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).Partitioner()\n  nameWithType: Partitioner<TSource>.Partitioner()\n  nameWithType.vb: Partitioner(Of TSource).Partitioner()\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  commentId: P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  id: SupportsDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  - vb\n  name: SupportsDynamicPartitions\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SupportsDynamicPartitions\n    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n    startLine: 71\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  summary: \"\\n<p>Gets whether additional partitions can be created dynamically.</p>\\n\"\n  syntax:\n    content: public virtual bool SupportsDynamicPartitions { get; }\n    content.vb: Public Overridable ReadOnly Property SupportsDynamicPartitions As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the <xref href=\\\"System.Collections.Concurrent.Partitioner`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can create partitions dynamically as they are requested; false if the <xref href=\\\"System.Collections.Concurrent.Partitioner`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can only allocate partitions statically.</p>\\n\"\n  seealso:\n  - type: System.Collections.Concurrent.OrderablePartitioner`1\n    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n  - type: System.Collections.Concurrent.Partitioner\n    commentId: T:System.Collections.Concurrent.Partitioner\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  nameWithType.vb: Partitioner(Of TSource).SupportsDynamicPartitions\n- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  commentId: M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  id: GetDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  - vb\n  name: GetDynamicPartitions()\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDynamicPartitions\n    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n    startLine: 96\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  summary: \"\\n<p>Creates an object that can partition the underlying collection into a variable number of partitions.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<TSource> GetDynamicPartitions()\n    content.vb: Public Overridable Function GetDynamicPartitions As IEnumerable(Of TSource)\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An object that can create partitions over the underlying data source.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Dynamic partitioning is not supported by the base class. You must implement it in a derived class.</p>\\n\"\n  seealso:\n  - type: System.Collections.Concurrent.OrderablePartitioner`1\n    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n  - type: System.Collections.Concurrent.Partitioner\n    commentId: T:System.Collections.Concurrent.Partitioner\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()\n  nameWithType: Partitioner<TSource>.GetDynamicPartitions()\n  nameWithType.vb: Partitioner(Of TSource).GetDynamicPartitions()\n- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  commentId: M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  id: GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  - vb\n  name: GetPartitions(Int32)\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPartitions\n    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs\n    startLine: 54\n  assemblies:\n  - System.Collections.Concurrent\n  namespace: System.Collections.Concurrent\n  summary: \"\\n<p>Partitions the underlying collection into the given number of partitions.</p>\\n\"\n  syntax:\n    content: public abstract IList<IEnumerator<TSource>> GetPartitions(int partitionCount)\n    content.vb: Public MustOverride Function GetPartitions(partitionCount As Integer) As IList(Of IEnumerator(Of TSource))\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: \"\\n<p>The number of partitions to create.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}\n      description: \"\\n<p>A list containing <em>partitionCount</em> enumerators.</p>\\n\"\n  seealso:\n  - type: System.Collections.Concurrent.OrderablePartitioner`1\n    commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n  - type: System.Collections.Concurrent.Partitioner\n    commentId: T:System.Collections.Concurrent.Partitioner\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)\n  nameWithType: Partitioner<TSource>.GetPartitions(Int32)\n  nameWithType.vb: Partitioner(Of TSource).GetPartitions(Int32)\nreferences:\n- uid: System.Collections.Concurrent\n  isExternal: false\n  name: System.Collections.Concurrent\n  fullName: System.Collections.Concurrent\n  nameWithType: System.Collections.Concurrent\n  commentId: N:System.Collections.Concurrent\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.IEnumerable{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)\n  name.vb: IEnumerable(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<TSource>\n  nameWithType.vb: IEnumerable(Of TSource)\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<IEnumerator<TSource>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>\n  fullname.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of TSource))\n  name.vb: IList(Of IEnumerator(Of TSource))\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: IList<IEnumerator<TSource>>\n  nameWithType.vb: IList(Of IEnumerator(Of TSource))\n  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{`0}}\n- uid: System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList`1\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}