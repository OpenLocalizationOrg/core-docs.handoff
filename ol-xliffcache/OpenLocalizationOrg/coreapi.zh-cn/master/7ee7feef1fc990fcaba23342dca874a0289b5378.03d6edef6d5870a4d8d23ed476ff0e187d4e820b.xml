{"nodes":[{"pos":[1895,1913],"content":"SymmetricAlgorithm","needQuote":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[3483,3503],"content":"SymmetricAlgorithm()","needQuote":true,"nodes":[{"content":"SymmetricAlgorithm()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The implementation of the class derived from the symmetric algorithm is not valid.&lt;/p&gt;\\n","pos":[4458,4551],"source":"\\n<p>The implementation of the class derived from the symmetric algorithm is not valid.</p>\\n"},{"pos":[4920,4929],"content":"BlockSize","needQuote":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The block size, in bits.&lt;/p&gt;\\n","pos":[5751,5786],"source":"\\n<p>The block size, in bits.</p>\\n"},{"content":"\\n&lt;p&gt;The block size is invalid.","pos":[5951,5982],"source":"\\n<p>The block size is invalid."},{"content":"&lt;/p&gt;\\n","pos":[5983,5989],"source":" </p>\\n"},{"pos":[6364,6366],"content":"IV","needQuote":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"content":"\\n&lt;p&gt;The initialization vector.&lt;/p&gt;\\n","pos":[7274,7311],"source":"\\n<p>The initialization vector.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to set the initialization vector to &lt;strong&gt;null&lt;/strong&gt;.","pos":[7430,7513],"source":"\\n<p>An attempt was made to set the initialization vector to <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7514,7520],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to set the initialization vector to an invalid size.","pos":[7671,7748],"source":"\\n<p>An attempt was made to set the initialization vector to an invalid size."},{"content":"&lt;/p&gt;\\n","pos":[7749,7755],"source":" </p>\\n"},{"pos":[8126,8129],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The secret key to use for the symmetric algorithm.&lt;/p&gt;\\n","pos":[8917,8978],"source":"\\n<p>The secret key to use for the symmetric algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to set the key to &lt;strong&gt;null&lt;/strong&gt;.","pos":[9097,9162],"source":"\\n<p>An attempt was made to set the key to <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9163,9169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key size is invalid.&lt;/p&gt;\\n","pos":[9320,9355],"source":"\\n<p>The key size is invalid.</p>\\n"},{"pos":[9739,9746],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The size, in bits, of the secret key used by the symmetric algorithm.&lt;/p&gt;\\n","pos":[10573,10653],"source":"\\n<p>The size, in bits, of the secret key used by the symmetric algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;The key size is not valid.","pos":[10818,10849],"source":"\\n<p>The key size is not valid."},{"content":"&lt;/p&gt;\\n","pos":[10850,10856],"source":" </p>\\n"},{"pos":[11268,11283],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An array that contains the block sizes supported by the algorithm.&lt;/p&gt;\\n","pos":[12178,12255],"source":"\\n<p>An array that contains the block sizes supported by the algorithm.</p>\\n"},{"pos":[12674,12687],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An array that contains the key sizes supported by the algorithm.&lt;/p&gt;\\n","pos":[13572,13647],"source":"\\n<p>An array that contains the key sizes supported by the algorithm.</p>\\n"},{"pos":[14037,14041],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[15758,15765],"content":"Padding","needQuote":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[17527,17544],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A symmetric decryptor object.&lt;/p&gt;\\n","pos":[18659,18699],"source":"\\n<p>A symmetric decryptor object.</p>\\n"},{"pos":[19192,19223],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The secret key to use for the symmetric algorithm.","pos":[20457,20512],"source":"\\n<p>The secret key to use for the symmetric algorithm."},{"content":"&lt;/p&gt;\\n","pos":[20513,20519],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The initialization vector to use for the symmetric algorithm.","pos":[20583,20649],"source":"\\n<p>The initialization vector to use for the symmetric algorithm."},{"content":"&lt;/p&gt;\\n","pos":[20650,20656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A symmetric decryptor object.&lt;/p&gt;\\n","pos":[20748,20788],"source":"\\n<p>A symmetric decryptor object.</p>\\n"},{"pos":[21432,21449],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A symmetric encryptor object.&lt;/p&gt;\\n","pos":[22564,22604],"source":"\\n<p>A symmetric encryptor object.</p>\\n"},{"pos":[23097,23128],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The secret key to use for the symmetric algorithm.","pos":[24362,24417],"source":"\\n<p>The secret key to use for the symmetric algorithm."},{"content":"&lt;/p&gt;\\n","pos":[24418,24424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The initialization vector to use for the symmetric algorithm.","pos":[24488,24554],"source":"\\n<p>The initialization vector to use for the symmetric algorithm."},{"content":"&lt;/p&gt;\\n","pos":[24555,24561],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A symmetric encryptor object.&lt;/p&gt;\\n","pos":[24653,24693],"source":"\\n<p>A symmetric encryptor object.</p>\\n"},{"pos":[25313,25322],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[26554,26570],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[27550,27687],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[27688,27694],"source":" </p>\\n"},{"pos":[28090,28102],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[29362,29375],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[30618,30627],"content":"ModeValue","needQuote":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[31762,31774],"content":"PaddingValue","needQuote":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[32916,32924],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[34000,34007],"content":"IVValue","needQuote":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[35223,35237],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[36368,36380],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[37538,37558],"content":"LegalBlockSizesValue","needQuote":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[38789,38807],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[39828,39856],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[40053,40059],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40209,40220],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[40395,40405],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[40500,40508],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40577,40578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40605,40606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40676,40684],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40753,40754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40781,40782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40965,40979],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[41098,41104],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41171,41172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41222,41228],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41288,41289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41372,41378],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41445,41446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41496,41502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41562,41563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41777,41799],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[41947,41953],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42020,42021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42071,42077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42138,42139]},{"pos":[42194,42200],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42260,42261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42358,42364],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42431,42432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42482,42488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42549,42550]},{"pos":[42605,42611],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42671,42672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42917,42948],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[43114,43129],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43205,43206],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43256,43262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43323,43324]},{"pos":[43379,43385],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43445,43446],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43552,43567],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43643,43644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43694,43700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43761,43762]},{"pos":[43817,43823],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43883,43884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44114,44127],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[44228,44239],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[44311,44312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44339,44340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44413,44424],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[44496,44497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44524,44525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44700,44709],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[44802,44809],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44877,44878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44905,44906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44975,44982],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[45050,45051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45078,45079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45254,45271],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[45380,45395],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45471,45472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45499,45500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45577,45592],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45668,45669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45696,45697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45842,45848],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[45978,45983],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46088,46094],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[46214,46218],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[46277,46279]},{"pos":[46342,46346],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[46404,46406],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[46528,46538],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[46740,46748],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[46812,46814]},{"pos":[46903,46911],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[46974,46976],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[47165,47175],"content":"CipherMode","needQuote":true,"nodes":[{"content":"CipherMode","pos":[0,10]}]},{"pos":[47425,47436],"content":"PaddingMode","needQuote":true,"nodes":[{"content":"PaddingMode","pos":[0,11]}]},{"pos":[47694,47710],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[47954,47963],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[48066,48073],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[48125,48126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48153,48154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48228,48235],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[48287,48288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48315,48316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48480,48487],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[48656,48678],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[48913,48934],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.SymmetricAlgorithm\n  id: SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Key\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  langs:\n  - csharp\n  - vb\n  name: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymmetricAlgorithm\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 127\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the abstract base class from which all implementations of symmetric algorithms must inherit.</p>\\n\"\n  syntax:\n    content: 'public abstract class SymmetricAlgorithm : IDisposable'\n    content.vb: >-\n      Public MustInherit Class SymmetricAlgorithm\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: SymmetricAlgorithm\n- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: SymmetricAlgorithm()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 129\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected SymmetricAlgorithm()\n    content.vb: Protected Sub New\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The implementation of the class derived from the symmetric algorithm is not valid.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  id: BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BlockSize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 130\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the block size, in bits, of the cryptographic operation.</p>\\n\"\n  syntax:\n    content: public virtual int BlockSize { get; set; }\n    content.vb: Public Overridable Property BlockSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The block size, in bits.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The block size is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV\n  id: IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IV\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 131\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) for the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual byte[] IV { get; set; }\n    content.vb: Public Overridable Property IV As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>An attempt was made to set the initialization vector to <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An attempt was made to set the initialization vector to an invalid size. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Key\n  id: Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 132\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the secret key for the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual byte[] Key { get; set; }\n    content.vb: Public Overridable Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the symmetric algorithm.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>An attempt was made to set the key to <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The key size is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.Key\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 133\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual int KeySize { get; set; }\n    content.vb: Public Overridable Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size, in bits, of the secret key used by the symmetric algorithm.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The key size is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  id: LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalBlockSizes\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 134\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual KeySizes[] LegalBlockSizes { get; }\n    content.vb: Public Overridable ReadOnly Property LegalBlockSizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: \"\\n<p>An array that contains the block sizes supported by the algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 135\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overridable ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: \"\\n<p>An array that contains the key sizes supported by the algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode\n  id: Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mode\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 136\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the mode for operation of the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual CipherMode Mode { get; set; }\n    content.vb: Public Overridable Property Mode As CipherMode\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: \"\\n<p>The mode for operation of the symmetric algorithm. The default is <xref href=\\\"System.Security.Cryptography.CipherMode.CBC\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cipher mode is not one of the <xref href=\\\"System.Security.Cryptography.CipherMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding\n  id: Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Padding\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 137\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the padding mode used in the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public virtual PaddingMode Padding { get; set; }\n    content.vb: Public Overridable Property Padding As PaddingMode\n    parameters: []\n    return:\n      type: System.Security.Cryptography.PaddingMode\n      description: \"\\n<p>The padding mode used in the symmetric algorithm. The default is <xref href=\\\"System.Security.Cryptography.PaddingMode.PKCS7\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The padding mode is not one of the <xref href=\\\"System.Security.Cryptography.PaddingMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  id: CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDecryptor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 138\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric decryptor object with the current <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.Key\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual ICryptoTransform CreateDecryptor()\n    content.vb: Public Overridable Function CreateDecryptor As ICryptoTransform\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric decryptor object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  id: CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDecryptor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 139\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, creates a symmetric decryptor object with the specified <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.Key\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)\n    content.vb: Public MustOverride Function CreateDecryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the symmetric algorithm. </p>\\n\"\n    - id: rgbIV\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector to use for the symmetric algorithm. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric decryptor object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  id: CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEncryptor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 140\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric encryptor object with the current <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.Key\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual ICryptoTransform CreateEncryptor()\n    content.vb: Public Overridable Function CreateEncryptor As ICryptoTransform\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric encryptor object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  id: CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEncryptor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 141\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, creates a symmetric encryptor object with the specified <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.Key\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)\n    content.vb: Public MustOverride Function CreateEncryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the symmetric algorithm. </p>\\n\"\n    - id: rgbIV\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector to use for the symmetric algorithm. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric encryptor object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 142\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 143\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  id: GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateIV\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 144\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, generates a random initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) to use for the algorithm.</p>\\n\"\n  syntax:\n    content: public abstract void GenerateIV()\n    content.vb: Public MustOverride Sub GenerateIV\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  id: GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateKey\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 145\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, generates a random key (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.Key\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) to use for the algorithm. </p>\\n\"\n  syntax:\n    content: public abstract void GenerateKey()\n    content.vb: Public MustOverride Sub GenerateKey\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  id: ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModeValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 146\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the cipher mode used in the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected CipherMode ModeValue\n    content.vb: Protected ModeValue As CipherMode\n    return:\n      type: System.Security.Cryptography.CipherMode\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  id: PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PaddingValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 147\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the padding mode used in the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected PaddingMode PaddingValue\n    content.vb: Protected PaddingValue As PaddingMode\n    return:\n      type: System.Security.Cryptography.PaddingMode\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  id: KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 148\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the secret key for the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected byte[] KeyValue\n    content.vb: Protected KeyValue As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  id: IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IVValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 149\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) for the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected byte[] IVValue\n    content.vb: Protected IVValue As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  id: BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BlockSizeValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 150\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the block size, in bits, of the cryptographic operation.</p>\\n\"\n  syntax:\n    content: protected int BlockSizeValue\n    content.vb: Protected BlockSizeValue As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  id: KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySizeValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 151\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the size, in bits, of the secret key used by the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected int KeySizeValue\n    content.vb: Protected KeySizeValue As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  id: LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalBlockSizesValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 152\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the block sizes, in bits, that are supported by the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected KeySizes[] LegalBlockSizesValue\n    content.vb: Protected LegalBlockSizesValue As KeySizes()\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  id: LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizesValue\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 153\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the key sizes, in bits, that are supported by the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: protected KeySizes[] LegalKeySizesValue\n    content.vb: Protected LegalKeySizesValue As KeySizes()\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Security.Cryptography.CipherMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CipherMode\n  fullName: System.Security.Cryptography.CipherMode\n  commentId: T:System.Security.Cryptography.CipherMode\n  nameWithType: CipherMode\n- uid: System.Security.Cryptography.PaddingMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: PaddingMode\n  fullName: System.Security.Cryptography.PaddingMode\n  commentId: T:System.Security.Cryptography.PaddingMode\n  nameWithType: PaddingMode\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}