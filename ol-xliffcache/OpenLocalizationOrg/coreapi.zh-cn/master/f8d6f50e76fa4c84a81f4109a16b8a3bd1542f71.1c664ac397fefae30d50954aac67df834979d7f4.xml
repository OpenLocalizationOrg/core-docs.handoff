{"nodes":[{"pos":[835,851],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[2696,2732],"content":"UdpReceiveResult(Byte[], IPEndPoint)","needQuote":true,"nodes":[{"content":"UdpReceiveResult(Byte[], IPEndPoint)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A buffer for data to receive in the UDP packet.&lt;/p&gt;\\n","pos":[3578,3636],"source":"\\n<p>A buffer for data to receive in the UDP packet.</p>\\n"},{"content":"\\n&lt;p&gt;The remote endpoint of the UDP packet.&lt;/p&gt;\\n","pos":[3717,3766],"source":"\\n<p>The remote endpoint of the UDP packet.</p>\\n"},{"pos":[4325,4331],"content":"Buffer","needQuote":true,"nodes":[{"content":"Buffer","pos":[0,6]}]},{"pos":[5555,5569],"content":"RemoteEndPoint","needQuote":true,"nodes":[{"content":"RemoteEndPoint","pos":[0,14]}]},{"pos":[6894,6918],"content":"Equals(UdpReceiveResult)","needQuote":true,"nodes":[{"content":"Equals(UdpReceiveResult)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[7693,7745],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"pos":[8619,8633],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[9357,9409],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"pos":[10204,10217],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11587,11631],"content":"Equality(UdpReceiveResult, UdpReceiveResult)","needQuote":true,"nodes":[{"content":"Equality(UdpReceiveResult, UdpReceiveResult)","pos":[0,44]}]},{"pos":[13867,13913],"content":"Inequality(UdpReceiveResult, UdpReceiveResult)","needQuote":true,"nodes":[{"content":"Inequality(UdpReceiveResult, UdpReceiveResult)","pos":[0,46]}]},{"pos":[15783,15801],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[16023,16051],"content":"IEquatable<UdpReceiveResult>","needQuote":true,"nodes":[{"content":"IEquatable&lt;UdpReceiveResult&gt;","pos":[0,28],"source":"IEquatable<UdpReceiveResult>"}]},{"pos":[16289,16299],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[16363,16364],"content":"<","needQuote":true,"nodes":[]},{"pos":[16436,16452],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[16585,16595],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[16660,16663]},{"pos":[16742,16758],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[16819,16820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17091,17101],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[17202,17210],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17261,17262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17289,17290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17363,17371],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17422,17423],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17450,17451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17654,17676],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17824,17830],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17897,17898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17948,17954],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18015,18016]},{"pos":[18071,18077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18137,18138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18235,18241],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18308,18309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18359,18365],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18426,18427]},{"pos":[18482,18488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18548,18549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18794,18825],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18991,19006],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19082,19083],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19133,19139],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19200,19201]},{"pos":[19256,19262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19322,19323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19429,19444],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19520,19521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19571,19577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19638,19639]},{"pos":[19694,19700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19760,19761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19987,19996],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20089,20096],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20164,20165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20192,20193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20262,20269],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20337,20338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20365,20366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20508,20521],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[20676,20686],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[20729,20730],"content":"<","needQuote":true,"nodes":[]},{"pos":[20757,20758],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20857,20867],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[20911,20914]},{"pos":[20948,20949],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20976,20977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21137,21143],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21277,21286],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[21440,21446],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21554,21560],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[21680,21684],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[21743,21745]},{"pos":[21808,21812],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21870,21872],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[21996,22006],"content":"IPEndPoint","needQuote":true,"nodes":[{"content":"IPEndPoint","pos":[0,10]}]},{"pos":[22329,22353],"content":"Equals(UdpReceiveResult)","needQuote":true,"nodes":[{"content":"Equals(UdpReceiveResult)","pos":[0,24]}]},{"pos":[22647,22653],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22761,22762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22834,22850],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[22911,22912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22990,22996],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23107,23108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23180,23196],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[23257,23258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23635,23651],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[23851,23858],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24006,24015],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[24173,24179],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24232,24233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24260,24261],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24288,24289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24367,24373],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24429,24430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24457,24458],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24485,24486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24735,24749],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24874,24880],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24929,24930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24980,24986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25046,25047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25133,25139],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25188,25189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25239,25245],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25305,25306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25509,25522],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25629,25640],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25694,25695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25722,25723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25799,25810],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25864,25865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25892,25893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26059,26064],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Net.Sockets.UdpReceiveResult\n  commentId: T:System.Net.Sockets.UdpReceiveResult\n  id: UdpReceiveResult\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpReceiveResult.Buffer\n  - System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)\n  - System.Net.Sockets.UdpReceiveResult.Equals(System.Object)\n  - System.Net.Sockets.UdpReceiveResult.GetHashCode\n  - System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  - System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  - System.Net.Sockets.UdpReceiveResult.RemoteEndPoint\n  langs:\n  - csharp\n  - vb\n  name: UdpReceiveResult\n  fullName: System.Net.Sockets.UdpReceiveResult\n  type: Struct\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UdpReceiveResult\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 481\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Presents UDP receive result information from a call to the <xref href=\\\"System.Net.Sockets.UdpClient.ReceiveAsync\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct UdpReceiveResult : IEquatable<UdpReceiveResult>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure UdpReceiveResult\n          Implements IEquatable(Of UdpReceiveResult)\n  implements:\n  - System.IEquatable{System.Net.Sockets.UdpReceiveResult}\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: UdpReceiveResult\n- uid: System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)\n  id: '#ctor(System.Byte[],System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: UdpReceiveResult(Byte[], IPEndPoint)\n  fullName: System.Net.Sockets.UdpReceiveResult.UdpReceiveResult(System.Byte[], System.Net.IPEndPoint)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 484\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UdpReceiveResult(byte[] buffer, IPEndPoint remoteEndPoint)\n    content.vb: Public Sub New(buffer As Byte(), remoteEndPoint As IPEndPoint)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A buffer for data to receive in the UDP packet.</p>\\n\"\n    - id: remoteEndPoint\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>The remote endpoint of the UDP packet.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.UdpReceiveResult.UdpReceiveResult(System.Byte(), System.Net.IPEndPoint)\n  name.vb: UdpReceiveResult(Byte(), IPEndPoint)\n  nameWithType: UdpReceiveResult.UdpReceiveResult(Byte[], IPEndPoint)\n  nameWithType.vb: UdpReceiveResult.UdpReceiveResult(Byte(), IPEndPoint)\n- uid: System.Net.Sockets.UdpReceiveResult.Buffer\n  commentId: P:System.Net.Sockets.UdpReceiveResult.Buffer\n  id: Buffer\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: Buffer\n  fullName: System.Net.Sockets.UdpReceiveResult.Buffer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Buffer\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 485\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets a buffer with the data received in the UDP packet.</p>\\n\"\n  syntax:\n    content: public byte[] Buffer { get; }\n    content.vb: Public ReadOnly Property Buffer As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>Returns <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array with the data received in the UDP packet.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: UdpReceiveResult.Buffer\n- uid: System.Net.Sockets.UdpReceiveResult.RemoteEndPoint\n  commentId: P:System.Net.Sockets.UdpReceiveResult.RemoteEndPoint\n  id: RemoteEndPoint\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: RemoteEndPoint\n  fullName: System.Net.Sockets.UdpReceiveResult.RemoteEndPoint\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoteEndPoint\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 486\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the remote endpoint from which the UDP packet was received. </p>\\n\"\n  syntax:\n    content: public IPEndPoint RemoteEndPoint { get; }\n    content.vb: Public ReadOnly Property RemoteEndPoint As IPEndPoint\n    parameters: []\n    return:\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The remote endpoint from which the UDP packet was received.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: UdpReceiveResult.RemoteEndPoint\n- uid: System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)\n  commentId: M:System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)\n  id: Equals(System.Net.Sockets.UdpReceiveResult)\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: Equals(UdpReceiveResult)\n  fullName: System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 487\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public bool Equals(UdpReceiveResult other)\n    content.vb: Public Function Equals(other As UdpReceiveResult) As Boolean\n    parameters:\n    - id: other\n      type: System.Net.Sockets.UdpReceiveResult\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>other</em> is an instance of <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of the instance; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Net.Sockets.UdpReceiveResult}.Equals(System.Net.Sockets.UdpReceiveResult)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpReceiveResult.Equals(UdpReceiveResult)\n- uid: System.Net.Sockets.UdpReceiveResult.Equals(System.Object)\n  commentId: M:System.Net.Sockets.UdpReceiveResult.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Sockets.UdpReceiveResult.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 488\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of the instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UdpReceiveResult.Equals(Object)\n- uid: System.Net.Sockets.UdpReceiveResult.GetHashCode\n  commentId: M:System.Net.Sockets.UdpReceiveResult.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Sockets.UdpReceiveResult.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 489\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UdpReceiveResult.GetHashCode()\n- uid: System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  commentId: M:System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  id: op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: Equality(UdpReceiveResult, UdpReceiveResult)\n  fullName: System.Net.Sockets.UdpReceiveResult.Equality(System.Net.Sockets.UdpReceiveResult, System.Net.Sockets.UdpReceiveResult)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 490\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Tests whether two specified <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equivalent.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(UdpReceiveResult left, UdpReceiveResult right)\n    content.vb: Public Shared Operator =(left As UdpReceiveResult, right As UdpReceiveResult) As Boolean\n    parameters:\n    - id: left\n      type: System.Net.Sockets.UdpReceiveResult\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the left of the equality operator.</p>\\n\"\n    - id: right\n      type: System.Net.Sockets.UdpReceiveResult\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the right of the equality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UdpReceiveResult.Equality(UdpReceiveResult, UdpReceiveResult)\n- uid: System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  commentId: M:System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  id: op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)\n  parent: System.Net.Sockets.UdpReceiveResult\n  langs:\n  - csharp\n  - vb\n  name: Inequality(UdpReceiveResult, UdpReceiveResult)\n  fullName: System.Net.Sockets.UdpReceiveResult.Inequality(System.Net.Sockets.UdpReceiveResult, System.Net.Sockets.UdpReceiveResult)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 491\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Tests whether two specified <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(UdpReceiveResult left, UdpReceiveResult right)\n    content.vb: Public Shared Operator <>(left As UdpReceiveResult, right As UdpReceiveResult) As Boolean\n    parameters:\n    - id: left\n      type: System.Net.Sockets.UdpReceiveResult\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the left of the not equal operator.</p>\\n\"\n    - id: right\n      type: System.Net.Sockets.UdpReceiveResult\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.UdpReceiveResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the right of the not equal operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are unequal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UdpReceiveResult.Inequality(UdpReceiveResult, UdpReceiveResult)\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.IEquatable{System.Net.Sockets.UdpReceiveResult}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<UdpReceiveResult>\n  fullName: System.IEquatable<System.Net.Sockets.UdpReceiveResult>\n  fullname.vb: System.IEquatable(Of System.Net.Sockets.UdpReceiveResult)\n  name.vb: IEquatable(Of UdpReceiveResult)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Net.Sockets.UdpReceiveResult}\n  nameWithType: IEquatable<UdpReceiveResult>\n  nameWithType.vb: IEquatable(Of UdpReceiveResult)\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Net.IPEndPoint\n  isExternal: false\n  name: IPEndPoint\n  fullName: System.Net.IPEndPoint\n  commentId: T:System.Net.IPEndPoint\n  nameWithType: IPEndPoint\n- uid: System.IEquatable{System.Net.Sockets.UdpReceiveResult}.Equals(System.Net.Sockets.UdpReceiveResult)\n  parent: System.IEquatable{System.Net.Sockets.UdpReceiveResult}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(UdpReceiveResult)\n  fullName: System.IEquatable<System.Net.Sockets.UdpReceiveResult>.Equals(System.Net.Sockets.UdpReceiveResult)\n  fullname.vb: System.IEquatable(Of System.Net.Sockets.UdpReceiveResult).Equals(System.Net.Sockets.UdpReceiveResult)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Net.Sockets.UdpReceiveResult>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Net.Sockets.UdpReceiveResult).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Net.Sockets.UdpReceiveResult}.Equals(System.Net.Sockets.UdpReceiveResult)\n  nameWithType: IEquatable<UdpReceiveResult>.Equals(UdpReceiveResult)\n  nameWithType.vb: IEquatable(Of UdpReceiveResult).Equals(UdpReceiveResult)\n- uid: System.Net.Sockets.UdpReceiveResult\n  parent: System.Net.Sockets\n  isExternal: false\n  name: UdpReceiveResult\n  fullName: System.Net.Sockets.UdpReceiveResult\n  commentId: T:System.Net.Sockets.UdpReceiveResult\n  nameWithType: UdpReceiveResult\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n"}