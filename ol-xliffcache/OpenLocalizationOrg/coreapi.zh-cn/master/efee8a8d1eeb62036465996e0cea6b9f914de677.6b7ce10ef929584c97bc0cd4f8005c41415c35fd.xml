{"nodes":[{"pos":[1376,1381],"content":"Plane","needQuote":true,"nodes":[{"content":"Plane","pos":[0,5]}]},{"pos":[2826,2827],"content":"D","needQuote":true,"nodes":[{"content":"D","pos":[0,1]}]},{"pos":[3648,3654],"content":"Normal","needQuote":true,"nodes":[{"content":"Normal","pos":[0,6]}]},{"pos":[4601,4623],"content":"Plane(Vector3, Single)","needQuote":true,"nodes":[{"content":"Plane(Vector3, Single)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The plane's normal vector.","pos":[5472,5503],"source":"\\n<p>The plane's normal vector."},{"content":"&lt;/p&gt;\\n","pos":[5504,5510],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The plane's distance from the origin along its normal vector.","pos":[5570,5636],"source":"\\n<p>The plane's distance from the origin along its normal vector."},{"content":"&lt;/p&gt;\\n","pos":[5637,5643],"source":" </p>\\n"},{"pos":[5982,5996],"content":"Plane(Vector4)","needQuote":true,"nodes":[{"content":"Plane(Vector4)","pos":[0,14]}]},{"pos":[7426,7463],"content":"Plane(Single, Single, Single, Single)","needQuote":true,"nodes":[{"content":"Plane(Single, Single, Single, Single)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The X component of the normal.","pos":[8370,8405],"source":"\\n<p>The X component of the normal."},{"content":"&lt;/p&gt;\\n","pos":[8406,8412],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Y component of the normal.","pos":[8472,8507],"source":"\\n<p>The Y component of the normal."},{"content":"&lt;/p&gt;\\n","pos":[8508,8514],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Z component of the normal.","pos":[8574,8609],"source":"\\n<p>The Z component of the normal."},{"content":"&lt;/p&gt;\\n","pos":[8610,8616],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The distance of the plane along its normal from the origin.","pos":[8676,8740],"source":"\\n<p>The distance of the plane along its normal from the origin."},{"content":"&lt;/p&gt;\\n","pos":[8741,8747],"source":" </p>\\n"},{"pos":[9282,9327],"content":"CreateFromVertices(Vector3, Vector3, Vector3)","needQuote":true,"nodes":[{"content":"CreateFromVertices(Vector3, Vector3, Vector3)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The first point defining the plane.","pos":[10305,10345],"source":"\\n<p>The first point defining the plane."},{"content":"&lt;/p&gt;\\n","pos":[10346,10352],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second point defining the plane.","pos":[10427,10468],"source":"\\n<p>The second point defining the plane."},{"content":"&lt;/p&gt;\\n","pos":[10469,10475],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third point defining the plane.","pos":[10550,10590],"source":"\\n<p>The third point defining the plane."},{"content":"&lt;/p&gt;\\n","pos":[10591,10597],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The plane containing the three points.","pos":[10665,10708],"source":"\\n<p>The plane containing the three points."},{"content":"&lt;/p&gt;\\n","pos":[10709,10715],"source":" </p>\\n"},{"pos":[11157,11176],"content":"Dot(Plane, Vector4)","needQuote":true,"nodes":[{"content":"Dot(Plane, Vector4)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The plane.","pos":[11951,11966],"source":"\\n<p>The plane."},{"content":"&lt;/p&gt;\\n","pos":[11967,11973],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The four-dimensional vector.","pos":[12047,12080],"source":"\\n<p>The four-dimensional vector."},{"content":"&lt;/p&gt;\\n","pos":[12081,12087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The dot product.","pos":[12147,12168],"source":"\\n<p>The dot product."},{"content":"&lt;/p&gt;\\n","pos":[12169,12175],"source":" </p>\\n"},{"pos":[12621,12650],"content":"DotCoordinate(Plane, Vector3)","needQuote":true,"nodes":[{"content":"DotCoordinate(Plane, Vector3)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The plane.","pos":[13622,13637],"source":"\\n<p>The plane."},{"content":"&lt;/p&gt;\\n","pos":[13638,13644],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 3-dimensional vector.","pos":[13718,13748],"source":"\\n<p>The 3-dimensional vector."},{"content":"&lt;/p&gt;\\n","pos":[13749,13755],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The dot product.","pos":[13815,13836],"source":"\\n<p>The dot product."},{"content":"&lt;/p&gt;\\n","pos":[13837,13843],"source":" </p>\\n"},{"pos":[14287,14312],"content":"DotNormal(Plane, Vector3)","needQuote":true,"nodes":[{"content":"DotNormal(Plane, Vector3)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The plane.","pos":[15227,15242],"source":"\\n<p>The plane."},{"content":"&lt;/p&gt;\\n","pos":[15243,15249],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The three-dimensional vector.","pos":[15323,15357],"source":"\\n<p>The three-dimensional vector."},{"content":"&lt;/p&gt;\\n","pos":[15358,15364],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The dot product.","pos":[15424,15445],"source":"\\n<p>The dot product."},{"content":"&lt;/p&gt;\\n","pos":[15446,15452],"source":" </p>\\n"},{"pos":[15811,15824],"content":"Equals(Plane)","needQuote":true,"nodes":[{"content":"Equals(Plane)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The other plane.","pos":[16561,16582],"source":"\\n<p>The other plane."},{"content":"&lt;/p&gt;\\n","pos":[16583,16589],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two planes are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[16650,16742],"source":"\\n<p>\\n<strong>true</strong> if the two planes are equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16743,16749],"source":" </p>\\n"},{"pos":[17139,17153],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[17888,17941],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[17942,17948],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance and &lt;em&gt;obj&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;.","pos":[18009,18141],"source":"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>."},{"content":"If &lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, the method returns &lt;strong&gt;false&lt;/strong&gt;.","pos":[18142,18226],"source":" If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18227,18233],"source":" </p>\\n"},{"pos":[18585,18598],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code.","pos":[19249,19268],"source":"\\n<p>The hash code."},{"content":"&lt;/p&gt;\\n","pos":[19269,19275],"source":" </p>\\n"},{"pos":[19679,19695],"content":"Normalize(Plane)","needQuote":true,"nodes":[{"content":"Normalize(Plane)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The source plane.","pos":[20540,20562],"source":"\\n<p>The source plane."},{"content":"&lt;/p&gt;\\n","pos":[20563,20569],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The normalized plane.","pos":[20637,20663],"source":"\\n<p>The normalized plane."},{"content":"&lt;/p&gt;\\n","pos":[20664,20670],"source":" </p>\\n"},{"pos":[21101,21123],"content":"Equality(Plane, Plane)","needQuote":true,"nodes":[{"content":"Equality(Plane, Plane)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The first plane to compare.","pos":[21914,21946],"source":"\\n<p>The first plane to compare."},{"content":"&lt;/p&gt;\\n","pos":[21947,21953],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second plane to compare.","pos":[22026,22059],"source":"\\n<p>The second plane to compare."},{"content":"&lt;/p&gt;\\n","pos":[22060,22066],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; and &lt;em&gt;value2&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22127,22246],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22689,22713],"content":"Inequality(Plane, Plane)","needQuote":true,"nodes":[{"content":"Inequality(Plane, Plane)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first plane to compare.","pos":[23513,23545],"source":"\\n<p>The first plane to compare."},{"content":"&lt;/p&gt;\\n","pos":[23546,23552],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second plane to compare.","pos":[23625,23658],"source":"\\n<p>The second plane to compare."},{"content":"&lt;/p&gt;\\n","pos":[23659,23665],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; and &lt;em&gt;value2&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[23726,23843],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are not equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[23844,23850],"source":" </p>\\n"},{"pos":[24145,24155],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25419,25446],"content":"Transform(Plane, Matrix4x4)","needQuote":true,"nodes":[{"content":"Transform(Plane, Matrix4x4)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The normalized plane to transform.","pos":[26233,26272],"source":"\\n<p>The normalized plane to transform."},{"content":"&lt;/p&gt;\\n","pos":[26273,26279],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformation matrix to apply to &lt;em&gt;plane&lt;/em&gt;.","pos":[26356,26414],"source":"\\n<p>The transformation matrix to apply to <em>plane</em>."},{"content":"&lt;/p&gt;\\n","pos":[26415,26421],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed plane.","pos":[26489,26516],"source":"\\n<p>The transformed plane."},{"content":"&lt;/p&gt;\\n","pos":[26517,26523],"source":" </p>\\n"},{"pos":[26974,27002],"content":"Transform(Plane, Quaternion)","needQuote":true,"nodes":[{"content":"Transform(Plane, Quaternion)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The normalized plane to transform.","pos":[27805,27844],"source":"\\n<p>The normalized plane to transform."},{"content":"&lt;/p&gt;\\n","pos":[27845,27851],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Quaternion rotation to apply to the plane.","pos":[27931,27982],"source":"\\n<p>The Quaternion rotation to apply to the plane."},{"content":"&lt;/p&gt;\\n","pos":[27983,27989],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new plane that results from applying the Quaternion rotation.","pos":[28057,28125],"source":"\\n<p>A new plane that results from applying the Quaternion rotation."},{"content":"&lt;/p&gt;\\n","pos":[28126,28132],"source":" </p>\\n"},{"pos":[28328,28343],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[28542,28559],"content":"IEquatable<Plane>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Plane&gt;","pos":[0,17],"source":"IEquatable<Plane>"}]},{"pos":[28758,28768],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[28832,28833],"content":"<","needQuote":true,"nodes":[]},{"pos":[28891,28896],"content":"Plane","needQuote":true,"nodes":[{"content":"Plane","pos":[0,5]}]},{"pos":[29015,29025],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[29090,29093]},{"pos":[29158,29163],"content":"Plane","needQuote":true,"nodes":[{"content":"Plane","pos":[0,5]}]},{"pos":[29210,29211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29466,29488],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29636,29642],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29709,29710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29760,29766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29827,29828]},{"pos":[29883,29889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29949,29950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30047,30053],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30120,30121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30171,30177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30238,30239]},{"pos":[30294,30300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30360,30361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30606,30637],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30803,30818],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30894,30895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30945,30951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31012,31013]},{"pos":[31068,31074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31134,31135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31241,31256],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31332,31333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31383,31389],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31450,31451]},{"pos":[31506,31512],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31572,31573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31799,31808],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31901,31908],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31976,31977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32004,32005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32074,32081],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32149,32150],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32177,32178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32320,32333],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[32488,32498],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[32541,32542],"content":"<","needQuote":true,"nodes":[]},{"pos":[32569,32570],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32669,32679],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[32723,32726]},{"pos":[32760,32761],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32788,32789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32949,32955],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33086,33092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33237,33243],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[33407,33414],"content":"Vector3","needQuote":true,"nodes":[{"content":"Vector3","pos":[0,7]}]},{"pos":[33599,33606],"content":"Vector4","needQuote":true,"nodes":[{"content":"Vector4","pos":[0,7]}]},{"pos":[33789,33794],"content":"Plane","needQuote":true,"nodes":[{"content":"Plane","pos":[0,5]}]},{"pos":[34070,34083],"content":"Equals(Plane)","needQuote":true,"nodes":[{"content":"Equals(Plane)","pos":[0,13]}]},{"pos":[34321,34327],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34421,34422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34480,34485],"content":"Plane","needQuote":true,"nodes":[{"content":"Plane","pos":[0,5]}]},{"pos":[34532,34533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34611,34617],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34714,34715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34773,34778],"content":"Plane","needQuote":true,"nodes":[{"content":"Plane","pos":[0,5]}]},{"pos":[34825,34826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35098,35105],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35253,35262],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[35420,35426],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35479,35480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35507,35508],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35535,35536],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35614,35620],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35676,35677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35704,35705],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35732,35733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35982,35996],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[36121,36127],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36176,36177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36227,36233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36293,36294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36380,36386],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36435,36436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36486,36492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36552,36553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36734,36743],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[36922,36935],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37042,37053],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37107,37108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37135,37136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37212,37223],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37277,37278],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37305,37306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37472,37477],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37641,37651],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[37752,37760],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[37811,37812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37839,37840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37913,37921],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[37972,37973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38000,38001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38162,38168],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[38334,38343],"content":"Matrix4x4","needQuote":true,"nodes":[{"content":"Matrix4x4","pos":[0,9]}]},{"pos":[38537,38547],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]}],"content":"items:\n- uid: System.Numerics.Plane\n  commentId: T:System.Numerics.Plane\n  id: Plane\n  parent: System.Numerics\n  children:\n  - System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Plane.#ctor(System.Numerics.Vector4)\n  - System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\n  - System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  - System.Numerics.Plane.D\n  - System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  - System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  - System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  - System.Numerics.Plane.Equals(System.Numerics.Plane)\n  - System.Numerics.Plane.Equals(System.Object)\n  - System.Numerics.Plane.GetHashCode\n  - System.Numerics.Plane.Normal\n  - System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  - System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  - System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  - System.Numerics.Plane.ToString\n  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  langs:\n  - csharp\n  - vb\n  name: Plane\n  fullName: System.Numerics.Plane\n  type: Struct\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Plane\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 130\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Represents a three-dimensional plane.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Plane : IEquatable<Plane>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Plane\n          Implements IEquatable(Of Plane)\n  implements:\n  - System.IEquatable{System.Numerics.Plane}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Plane\n- uid: System.Numerics.Plane.D\n  commentId: F:System.Numerics.Plane.D\n  id: D\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: D\n  fullName: System.Numerics.Plane.D\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: D\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 133\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The distance of the plane along its normal from the origin. </p>\\n\"\n  syntax:\n    content: public float D\n    content.vb: Public D As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Plane.D\n- uid: System.Numerics.Plane.Normal\n  commentId: F:System.Numerics.Plane.Normal\n  id: Normal\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Normal\n  fullName: System.Numerics.Plane.Normal\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Normal\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 134\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The normal vector of the plane. </p>\\n\"\n  syntax:\n    content: public Vector3 Normal\n    content.vb: Public Normal As Vector3\n    return:\n      type: System.Numerics.Vector3\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Plane.Normal\n- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)\n  commentId: M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)\n  id: '#ctor(System.Numerics.Vector3,System.Single)'\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Plane(Vector3, Single)\n  fullName: System.Numerics.Plane.Plane(System.Numerics.Vector3, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 135\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Numerics.Plane\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from a specified normal and the distance along the normal from the origin. </p>\\n\"\n  syntax:\n    content: public Plane(Vector3 normal, float d)\n    content.vb: Public Sub New(normal As Vector3, d As Single)\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The plane's normal vector. </p>\\n\"\n    - id: d\n      type: System.Single\n      description: \"\\n<p>The plane's distance from the origin along its normal vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Plane.Plane(Vector3, Single)\n- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)\n  commentId: M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)\n  id: '#ctor(System.Numerics.Vector4)'\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Plane(Vector4)\n  fullName: System.Numerics.Plane.Plane(System.Numerics.Vector4)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 136\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Numerics.Plane\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from a specified four-dimensional vector. </p>\\n\"\n  syntax:\n    content: public Plane(Vector4 value)\n    content.vb: Public Sub New(value As Vector4)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector4\n      description: \"\\n<p>A vector whose first three elements describe the normal vector, and whose <xref href=\\\"System.Numerics.Vector4.W\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> defines the distance along that normal from the origin. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Plane.Plane(Vector4)\n- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\n  commentId: M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Plane(Single, Single, Single, Single)\n  fullName: System.Numerics.Plane.Plane(System.Single, System.Single, System.Single, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 137\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Numerics.Plane\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.  </p>\\n\"\n  syntax:\n    content: public Plane(float x, float y, float z, float d)\n    content.vb: Public Sub New(x As Single, y As Single, z As Single, d As Single)\n    parameters:\n    - id: x\n      type: System.Single\n      description: \"\\n<p>The X component of the normal. </p>\\n\"\n    - id: y\n      type: System.Single\n      description: \"\\n<p>The Y component of the normal. </p>\\n\"\n    - id: z\n      type: System.Single\n      description: \"\\n<p>The Z component of the normal. </p>\\n\"\n    - id: d\n      type: System.Single\n      description: \"\\n<p>The distance of the plane along its normal from the origin. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Plane.Plane(Single, Single, Single, Single)\n- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  id: CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: CreateFromVertices(Vector3, Vector3, Vector3)\n  fullName: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromVertices\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 138\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Numerics.Plane\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains three specified points. </p>\\n\"\n  syntax:\n    content: public static Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3)\n    content.vb: Public Shared Function CreateFromVertices(point1 As Vector3, point2 As Vector3, point3 As Vector3) As Plane\n    parameters:\n    - id: point1\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The first point defining the plane. </p>\\n\"\n    - id: point2\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The second point defining the plane. </p>\\n\"\n    - id: point3\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The third point defining the plane. </p>\\n\"\n    return:\n      type: System.Numerics.Plane\n      description: \"\\n<p>The plane containing the three points. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.CreateFromVertices(Vector3, Vector3, Vector3)\n- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  commentId: M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  id: Dot(System.Numerics.Plane,System.Numerics.Vector4)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Dot(Plane, Vector4)\n  fullName: System.Numerics.Plane.Dot(System.Numerics.Plane, System.Numerics.Vector4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 139\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Calculates the dot product of a plane and a 4-dimensional vector. </p>\\n\"\n  syntax:\n    content: public static float Dot(Plane plane, Vector4 value)\n    content.vb: Public Shared Function Dot(plane As Plane, value As Vector4) As Single\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: \"\\n<p>The plane. </p>\\n\"\n    - id: value\n      type: System.Numerics.Vector4\n      description: \"\\n<p>The four-dimensional vector. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The dot product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.Dot(Plane, Vector4)\n- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  id: DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: DotCoordinate(Plane, Vector3)\n  fullName: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DotCoordinate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 140\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<xref href=\\\"System.Numerics.Plane.D\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) value of the plane.</p>\\n\"\n  syntax:\n    content: public static float DotCoordinate(Plane plane, Vector3 value)\n    content.vb: Public Shared Function DotCoordinate(plane As Plane, value As Vector3) As Single\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: \"\\n<p>The plane. </p>\\n\"\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The 3-dimensional vector. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The dot product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.DotCoordinate(Plane, Vector3)\n- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  commentId: M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  id: DotNormal(System.Numerics.Plane,System.Numerics.Vector3)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: DotNormal(Plane, Vector3)\n  fullName: System.Numerics.Plane.DotNormal(System.Numerics.Plane, System.Numerics.Vector3)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DotNormal\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 141\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the dot product of a specified three-dimensional vector and the <xref href=\\\"System.Numerics.Plane.Normal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> vector of this plane.</p>\\n\"\n  syntax:\n    content: public static float DotNormal(Plane plane, Vector3 value)\n    content.vb: Public Shared Function DotNormal(plane As Plane, value As Vector3) As Single\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: \"\\n<p>The plane. </p>\\n\"\n    - id: value\n      type: System.Numerics.Vector3\n      description: \"\\n<p>The three-dimensional vector. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The dot product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.DotNormal(Plane, Vector3)\n- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)\n  commentId: M:System.Numerics.Plane.Equals(System.Numerics.Plane)\n  id: Equals(System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Equals(Plane)\n  fullName: System.Numerics.Plane.Equals(System.Numerics.Plane)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 142\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and another plane object are equal.</p>\\n\"\n  syntax:\n    content: public bool Equals(Plane other)\n    content.vb: Public Function Equals(other As Plane) As Boolean\n    parameters:\n    - id: other\n      type: System.Numerics.Plane\n      description: \"\\n<p>The other plane. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two planes are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  implements:\n  - System.IEquatable{System.Numerics.Plane}.Equals(System.Numerics.Plane)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Plane.Equals(Plane)\n- uid: System.Numerics.Plane.Equals(System.Object)\n  commentId: M:System.Numerics.Plane.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Numerics.Plane.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 143\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and a specified object are equal. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>. If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Plane.Equals(Object)\n- uid: System.Numerics.Plane.GetHashCode\n  commentId: M:System.Numerics.Plane.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Numerics.Plane.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 144\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hash code for this instance. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code. </p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Plane.GetHashCode()\n- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  commentId: M:System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  id: Normalize(System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Normalize(Plane)\n  fullName: System.Numerics.Plane.Normalize(System.Numerics.Plane)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Normalize\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 145\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Numerics.Plane\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object whose normal vector is the source plane's normal vector normalized. </p>\\n\"\n  syntax:\n    content: public static Plane Normalize(Plane value)\n    content.vb: Public Shared Function Normalize(value As Plane) As Plane\n    parameters:\n    - id: value\n      type: System.Numerics.Plane\n      description: \"\\n<p>The source plane. </p>\\n\"\n    return:\n      type: System.Numerics.Plane\n      description: \"\\n<p>The normalized plane. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.Normalize(Plane)\n- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  commentId: M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  id: op_Equality(System.Numerics.Plane,System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Equality(Plane, Plane)\n  fullName: System.Numerics.Plane.Equality(System.Numerics.Plane, System.Numerics.Plane)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 146\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two planes are equal.  </p>\\n\"\n  syntax:\n    content: public static bool operator ==(Plane value1, Plane value2)\n    content.vb: Public Shared Operator =(value1 As Plane, value2 As Plane) As Boolean\n    parameters:\n    - id: value1\n      type: System.Numerics.Plane\n      description: \"\\n<p>The first plane to compare. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Plane\n      description: \"\\n<p>The second plane to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.Equality(Plane, Plane)\n- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  commentId: M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  id: op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Plane, Plane)\n  fullName: System.Numerics.Plane.Inequality(System.Numerics.Plane, System.Numerics.Plane)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 147\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two planes are not equal.  </p>\\n\"\n  syntax:\n    content: public static bool operator !=(Plane value1, Plane value2)\n    content.vb: Public Shared Operator <>(value1 As Plane, value2 As Plane) As Boolean\n    parameters:\n    - id: value1\n      type: System.Numerics.Plane\n      description: \"\\n<p>The first plane to compare. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Plane\n      description: \"\\n<p>The second plane to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are not equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.Inequality(Plane, Plane)\n- uid: System.Numerics.Plane.ToString\n  commentId: M:System.Numerics.Plane.ToString\n  id: ToString\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Numerics.Plane.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 148\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of this plane object. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents this <xref href=\\\"System.Numerics.Plane\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Plane.ToString()\n- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  commentId: M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  id: Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Transform(Plane, Matrix4x4)\n  fullName: System.Numerics.Plane.Transform(System.Numerics.Plane, System.Numerics.Matrix4x4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 149\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a normalized plane by a 4x4 matrix. </p>\\n\"\n  syntax:\n    content: public static Plane Transform(Plane plane, Matrix4x4 matrix)\n    content.vb: Public Shared Function Transform(plane As Plane, matrix As Matrix4x4) As Plane\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: \"\\n<p>The normalized plane to transform. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: \"\\n<p>The transformation matrix to apply to <em>plane</em>. </p>\\n\"\n    return:\n      type: System.Numerics.Plane\n      description: \"\\n<p>The transformed plane. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.Transform(Plane, Matrix4x4)\n- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  id: Transform(System.Numerics.Plane,System.Numerics.Quaternion)\n  parent: System.Numerics.Plane\n  langs:\n  - csharp\n  - vb\n  name: Transform(Plane, Quaternion)\n  fullName: System.Numerics.Plane.Transform(System.Numerics.Plane, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 150\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a normalized plane by a Quaternion rotation. </p>\\n\"\n  syntax:\n    content: public static Plane Transform(Plane plane, Quaternion rotation)\n    content.vb: Public Shared Function Transform(plane As Plane, rotation As Quaternion) As Plane\n    parameters:\n    - id: plane\n      type: System.Numerics.Plane\n      description: \"\\n<p>The normalized plane to transform. </p>\\n\"\n    - id: rotation\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The Quaternion rotation to apply to the plane. </p>\\n\"\n    return:\n      type: System.Numerics.Plane\n      description: \"\\n<p>A new plane that results from applying the Quaternion rotation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Plane.Transform(Plane, Quaternion)\nreferences:\n- uid: System.Numerics\n  isExternal: false\n  name: System.Numerics\n  fullName: System.Numerics\n  commentId: N:System.Numerics\n  nameWithType: System.Numerics\n- uid: System.IEquatable{System.Numerics.Plane}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Plane>\n  fullName: System.IEquatable<System.Numerics.Plane>\n  fullname.vb: System.IEquatable(Of System.Numerics.Plane)\n  name.vb: IEquatable(Of Plane)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.Plane\n    name: Plane\n    fullName: System.Numerics.Plane\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.Plane\n    name: Plane\n    fullName: System.Numerics.Plane\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Numerics.Plane}\n  nameWithType: IEquatable<Plane>\n  nameWithType.vb: IEquatable(Of Plane)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Numerics.Vector3\n  parent: System.Numerics\n  isExternal: false\n  name: Vector3\n  fullName: System.Numerics.Vector3\n  commentId: T:System.Numerics.Vector3\n  nameWithType: Vector3\n- uid: System.Numerics.Vector4\n  parent: System.Numerics\n  isExternal: false\n  name: Vector4\n  fullName: System.Numerics.Vector4\n  commentId: T:System.Numerics.Vector4\n  nameWithType: Vector4\n- uid: System.Numerics.Plane\n  parent: System.Numerics\n  isExternal: false\n  name: Plane\n  fullName: System.Numerics.Plane\n  commentId: T:System.Numerics.Plane\n  nameWithType: Plane\n- uid: System.IEquatable{System.Numerics.Plane}.Equals(System.Numerics.Plane)\n  parent: System.IEquatable{System.Numerics.Plane}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Plane)\n  fullName: System.IEquatable<System.Numerics.Plane>.Equals(System.Numerics.Plane)\n  fullname.vb: System.IEquatable(Of System.Numerics.Plane).Equals(System.Numerics.Plane)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Numerics.Plane>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Plane\n    name: Plane\n    fullName: System.Numerics.Plane\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Numerics.Plane).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Plane\n    name: Plane\n    fullName: System.Numerics.Plane\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Numerics.Plane}.Equals(System.Numerics.Plane)\n  nameWithType: IEquatable<Plane>.Equals(Plane)\n  nameWithType.vb: IEquatable(Of Plane).Equals(Plane)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n  commentId: T:System.Numerics.Matrix4x4\n  nameWithType: Matrix4x4\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  fullName: System.Numerics.Quaternion\n  commentId: T:System.Numerics.Quaternion\n  nameWithType: Quaternion\n"}