{"nodes":[{"pos":[665,680],"content":"CollectionsUtil","needQuote":true,"nodes":[{"content":"CollectionsUtil","pos":[0,15]}]},{"pos":[2099,2116],"content":"CollectionsUtil()","needQuote":true,"nodes":[{"content":"CollectionsUtil()","pos":[0,17]}]},{"pos":[3262,3294],"content":"CreateCaseInsensitiveHashtable()","needQuote":true,"nodes":[{"content":"CreateCaseInsensitiveHashtable()","pos":[0,32]}]},{"pos":[5345,5388],"content":"CreateCaseInsensitiveHashtable(IDictionary)","needQuote":true,"nodes":[{"content":"CreateCaseInsensitiveHashtable(IDictionary)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7226,7269],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7270,7276],"source":" </p>\\n"},{"pos":[8210,8247],"content":"CreateCaseInsensitiveHashtable(Int32)","needQuote":true,"nodes":[{"content":"CreateCaseInsensitiveHashtable(Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[9838,9881],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[9882,9888],"source":" </p>\\n"},{"pos":[10688,10721],"content":"CreateCaseInsensitiveSortedList()","needQuote":true,"nodes":[{"content":"CreateCaseInsensitiveSortedList()","pos":[0,33]}]},{"pos":[12294,12324],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[12527,12533],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12693,12703],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12798,12806],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12875,12876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12903,12904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12974,12982],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13051,13052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13079,13080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13263,13277],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13396,13402],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13469,13470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13520,13526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13586,13587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13670,13676],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13743,13744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13794,13800],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13860,13861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14075,14097],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14245,14251],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14318,14319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14369,14375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14436,14437]},{"pos":[14492,14498],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14558,14559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14656,14662],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14729,14730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14780,14786],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14847,14848]},{"pos":[14903,14909],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14969,14970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15215,15246],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15412,15427],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15503,15504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15554,15560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15621,15622]},{"pos":[15677,15683],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15743,15744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15850,15865],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15941,15942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15992,15998],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16059,16060]},{"pos":[16115,16121],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16181,16182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16412,16425],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16526,16537],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16609,16610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16637,16638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16711,16722],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16794,16795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16822,16823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16998,17007],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17100,17107],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17175,17176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17203,17204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17273,17280],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17348,17349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17376,17377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17552,17569],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17678,17693],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17769,17770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17797,17798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17875,17890],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17966,17967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17994,17995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18140,18146],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18304,18313],"content":"Hashtable","needQuote":true,"nodes":[{"content":"Hashtable","pos":[0,9]}]},{"pos":[18479,18497],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[18693,18704],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[18887,18892],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19062,19072],"content":"SortedList","needQuote":true,"nodes":[{"content":"SortedList","pos":[0,10]}]},{"pos":[19251,19272],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[19466,19493],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Collections.Specialized.CollectionsUtil\n  commentId: T:System.Collections.Specialized.CollectionsUtil\n  id: CollectionsUtil\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.CollectionsUtil.#ctor\n  - System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable\n  - System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)\n  - System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)\n  - System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList\n  langs:\n  - csharp\n  - vb\n  name: CollectionsUtil\n  fullName: System.Collections.Specialized.CollectionsUtil\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CollectionsUtil\n    path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n    startLine: 15\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates collections that ignore the case in strings.</p>\\n\"\n  syntax:\n    content: public class CollectionsUtil\n    content.vb: Public Class CollectionsUtil\n  seealso:\n  - type: System.Collections\n    commentId: N:System.Collections\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CollectionsUtil\n- uid: System.Collections.Specialized.CollectionsUtil.#ctor\n  commentId: M:System.Collections.Specialized.CollectionsUtil.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.CollectionsUtil\n  langs:\n  - csharp\n  - vb\n  name: CollectionsUtil()\n  fullName: System.Collections.Specialized.CollectionsUtil.CollectionsUtil()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs\n    startLine: 271\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.CollectionsUtil\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public CollectionsUtil()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CollectionsUtil.CollectionsUtil()\n- uid: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable\n  commentId: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable\n  id: CreateCaseInsensitiveHashtable\n  parent: System.Collections.Specialized.CollectionsUtil\n  langs:\n  - csharp\n  - vb\n  name: CreateCaseInsensitiveHashtable()\n  fullName: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCaseInsensitiveHashtable\n    path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n    startLine: 17\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates a new case-insensitive instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the default initial capacity.</p>\\n\"\n  syntax:\n    content: public static Hashtable CreateCaseInsensitiveHashtable()\n    content.vb: Public Shared Function CreateCaseInsensitiveHashtable As Hashtable\n    return:\n      type: System.Collections.Hashtable\n      description: \"\\n<p>A new case-insensitive instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the default initial capacity.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CollectionsUtil.CreateCaseInsensitiveHashtable()\n- uid: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)\n  commentId: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)\n  id: CreateCaseInsensitiveHashtable(System.Collections.IDictionary)\n  parent: System.Collections.Specialized.CollectionsUtil\n  langs:\n  - csharp\n  - vb\n  name: CreateCaseInsensitiveHashtable(IDictionary)\n  fullName: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCaseInsensitiveHashtable\n    path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n    startLine: 27\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the entries from the specified dictionary to a new case-insensitive instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the same initial capacity as the number of entries copied.</p>\\n\"\n  syntax:\n    content: public static Hashtable CreateCaseInsensitiveHashtable(IDictionary d)\n    content.vb: Public Shared Function CreateCaseInsensitiveHashtable(d As IDictionary) As Hashtable\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy to a new case-insensitive <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Collections.Hashtable\n      description: \"\\n<p>A new case-insensitive instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class containing the entries from the specified <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CollectionsUtil.CreateCaseInsensitiveHashtable(IDictionary)\n- uid: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)\n  commentId: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)\n  id: CreateCaseInsensitiveHashtable(System.Int32)\n  parent: System.Collections.Specialized.CollectionsUtil\n  langs:\n  - csharp\n  - vb\n  name: CreateCaseInsensitiveHashtable(Int32)\n  fullName: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCaseInsensitiveHashtable\n    path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n    startLine: 22\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates a new case-insensitive instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified initial capacity.</p>\\n\"\n  syntax:\n    content: public static Hashtable CreateCaseInsensitiveHashtable(int capacity)\n    content.vb: Public Shared Function CreateCaseInsensitiveHashtable(capacity As Integer) As Hashtable\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of entries that the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can initially contain. </p>\\n\"\n    return:\n      type: System.Collections.Hashtable\n      description: \"\\n<p>A new case-insensitive instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified initial capacity.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CollectionsUtil.CreateCaseInsensitiveHashtable(Int32)\n- uid: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList\n  commentId: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList\n  id: CreateCaseInsensitiveSortedList\n  parent: System.Collections.Specialized.CollectionsUtil\n  langs:\n  - csharp\n  - vb\n  name: CreateCaseInsensitiveSortedList()\n  fullName: System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCaseInsensitiveSortedList\n    path: src/System.Collections.NonGeneric/src/System/Collections/Specialized/CollectionsUtil.cs\n    startLine: 32\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that ignores the case of strings.</p>\\n\"\n  syntax:\n    content: public static SortedList CreateCaseInsensitiveSortedList()\n    content.vb: Public Shared Function CreateCaseInsensitiveSortedList As SortedList\n    return:\n      type: System.Collections.SortedList\n      description: \"\\n<p>A new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that ignores the case of strings.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList\n    commentId: T:System.Collections.SortedList\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CollectionsUtil.CreateCaseInsensitiveSortedList()\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  fullName: System.Collections.Hashtable\n  nameWithType: Hashtable\n  commentId: T:System.Collections.Hashtable\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.SortedList\n  parent: System.Collections\n  isExternal: false\n  name: SortedList\n  fullName: System.Collections.SortedList\n  nameWithType: SortedList\n  commentId: T:System.Collections.SortedList\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}