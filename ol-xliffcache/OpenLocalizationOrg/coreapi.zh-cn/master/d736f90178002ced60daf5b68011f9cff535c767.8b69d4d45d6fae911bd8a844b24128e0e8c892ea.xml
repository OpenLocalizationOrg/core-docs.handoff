{"nodes":[{"pos":[904,920],"content":"XmlQualifiedName","needQuote":true,"nodes":[{"content":"XmlQualifiedName","pos":[0,16]}]},{"pos":[1990,1995],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[3026,3044],"content":"XmlQualifiedName()","needQuote":true,"nodes":[{"content":"XmlQualifiedName()","pos":[0,18]}]},{"pos":[4020,4044],"content":"XmlQualifiedName(String)","needQuote":true,"nodes":[{"content":"XmlQualifiedName(String)","pos":[0,24]}]},{"pos":[5359,5391],"content":"XmlQualifiedName(String, String)","needQuote":true,"nodes":[{"content":"XmlQualifiedName(String, String)","pos":[0,32]}]},{"pos":[6875,6882],"content":"IsEmpty","needQuote":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if name and namespace are empty strings; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7629,7739],"source":"\\n<p>\\n<strong>true</strong> if name and namespace are empty strings; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8033,8037],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A string representation of the qualified name or String.Empty if a name is not defined for the object.&lt;/p&gt;\\n","pos":[8785,8898],"source":"\\n<p>A string representation of the qualified name or String.Empty if a name is not defined for the object.</p>\\n"},{"pos":[9204,9213],"content":"Namespace","needQuote":true,"nodes":[{"content":"Namespace","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A string representation of the namespace or String.Empty if a namespace is not defined for the object.&lt;/p&gt;\\n","pos":[9976,10089],"source":"\\n<p>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</p>\\n"},{"pos":[10436,10450],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two are the same instance object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11529,11639],"source":"\\n<p>\\n<strong>true</strong> if the two are the same instance object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12017,12030],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A hash code for this object.&lt;/p&gt;\\n","pos":[12759,12798],"source":"\\n<p>A hash code for this object.</p>\\n"},{"pos":[13336,13380],"content":"Equality(XmlQualifiedName, XmlQualifiedName)","needQuote":true,"nodes":[{"content":"Equality(XmlQualifiedName, XmlQualifiedName)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects have the same name and namespace values; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14619,14748],"source":"\\n<p>\\n<strong>true</strong> if the two objects have the same name and namespace values; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15278,15324],"content":"Inequality(XmlQualifiedName, XmlQualifiedName)","needQuote":true,"nodes":[{"content":"Inequality(XmlQualifiedName, XmlQualifiedName)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the name and namespace values for the two objects differ; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16568,16698],"source":"\\n<p>\\n<strong>true</strong> if the name and namespace values for the two objects differ; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17044,17054],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18482,18506],"content":"ToString(String, String)","needQuote":true,"nodes":[{"content":"ToString(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the object.","pos":[19322,19350],"source":"\\n<p>The name of the object."},{"content":"&lt;/p&gt;\\n","pos":[19351,19357],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace of the object.","pos":[19418,19451],"source":"\\n<p>The namespace of the object."},{"content":"&lt;/p&gt;\\n","pos":[19452,19458],"source":" </p>\\n"},{"pos":[19983,19993],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[20136,20142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20329,20351],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20499,20505],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20572,20573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20623,20629],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20690,20691]},{"pos":[20746,20752],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20812,20813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20910,20916],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20983,20984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21034,21040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21101,21102]},{"pos":[21157,21163],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21223,21224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21469,21500],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21666,21681],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21757,21758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21808,21814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21875,21876]},{"pos":[21931,21937],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21997,21998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22104,22119],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22195,22196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22246,22252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22313,22314]},{"pos":[22369,22375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22435,22436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22662,22671],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22764,22771],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22839,22840],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22867,22868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22937,22944],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23012,23013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23040,23041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23216,23233],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23342,23357],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23433,23434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23461,23462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23539,23554],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23630,23631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23658,23659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23804,23810],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23959,23975],"content":"XmlQualifiedName","needQuote":true,"nodes":[{"content":"XmlQualifiedName","pos":[0,16]}]},{"pos":[24158,24164],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24310,24317],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24493,24507],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24626,24632],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24699,24700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24750,24756],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24816,24817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24900,24906],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24973,24974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25024,25030],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25090,25091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25281,25294],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25395,25406],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25478,25479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25506,25507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25580,25591],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25663,25664],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25691,25692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25852,25857],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26014,26024],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26119,26127],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26196,26197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26224,26225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26295,26303],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26372,26373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26400,26401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Xml.XmlQualifiedName\n  commentId: T:System.Xml.XmlQualifiedName\n  id: XmlQualifiedName\n  parent: System.Xml\n  children:\n  - System.Xml.XmlQualifiedName.#ctor\n  - System.Xml.XmlQualifiedName.#ctor(System.String)\n  - System.Xml.XmlQualifiedName.#ctor(System.String,System.String)\n  - System.Xml.XmlQualifiedName.Empty\n  - System.Xml.XmlQualifiedName.Equals(System.Object)\n  - System.Xml.XmlQualifiedName.GetHashCode\n  - System.Xml.XmlQualifiedName.IsEmpty\n  - System.Xml.XmlQualifiedName.Name\n  - System.Xml.XmlQualifiedName.Namespace\n  - System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  - System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  - System.Xml.XmlQualifiedName.ToString\n  - System.Xml.XmlQualifiedName.ToString(System.String,System.String)\n  langs:\n  - csharp\n  - vb\n  name: XmlQualifiedName\n  fullName: System.Xml.XmlQualifiedName\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlQualifiedName\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 213\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Represents an XML qualified name.</p>\\n\"\n  syntax:\n    content: public class XmlQualifiedName\n    content.vb: Public Class XmlQualifiedName\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlQualifiedName\n- uid: System.Xml.XmlQualifiedName.Empty\n  commentId: F:System.Xml.XmlQualifiedName.Empty\n  id: Empty\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Xml.XmlQualifiedName.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 215\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Provides an empty <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static readonly XmlQualifiedName Empty\n    content.vb: Public Shared ReadOnly Empty As XmlQualifiedName\n    return:\n      type: System.Xml.XmlQualifiedName\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: XmlQualifiedName.Empty\n- uid: System.Xml.XmlQualifiedName.#ctor\n  commentId: M:System.Xml.XmlQualifiedName.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: XmlQualifiedName()\n  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 216\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public XmlQualifiedName()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlQualifiedName.XmlQualifiedName()\n- uid: System.Xml.XmlQualifiedName.#ctor(System.String)\n  commentId: M:System.Xml.XmlQualifiedName.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: XmlQualifiedName(String)\n  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 217\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name.</p>\\n\"\n  syntax:\n    content: public XmlQualifiedName(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The local name to use as the name of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlQualifiedName.XmlQualifiedName(String)\n- uid: System.Xml.XmlQualifiedName.#ctor(System.String,System.String)\n  commentId: M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: XmlQualifiedName(String, String)\n  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 218\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name and namespace.</p>\\n\"\n  syntax:\n    content: public XmlQualifiedName(string name, string ns)\n    content.vb: Public Sub New(name As String, ns As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The local name to use as the name of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace for the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlQualifiedName.XmlQualifiedName(String, String)\n- uid: System.Xml.XmlQualifiedName.IsEmpty\n  commentId: P:System.Xml.XmlQualifiedName.IsEmpty\n  id: IsEmpty\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: IsEmpty\n  fullName: System.Xml.XmlQualifiedName.IsEmpty\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEmpty\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 219\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is empty.</p>\\n\"\n  syntax:\n    content: public bool IsEmpty { get; }\n    content.vb: Public ReadOnly Property IsEmpty As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if name and namespace are empty strings; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlQualifiedName.IsEmpty\n- uid: System.Xml.XmlQualifiedName.Name\n  commentId: P:System.Xml.XmlQualifiedName.Name\n  id: Name\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Xml.XmlQualifiedName.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 220\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a string representation of the qualified name of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the qualified name or String.Empty if a name is not defined for the object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlQualifiedName.Name\n- uid: System.Xml.XmlQualifiedName.Namespace\n  commentId: P:System.Xml.XmlQualifiedName.Namespace\n  id: Namespace\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: Namespace\n  fullName: System.Xml.XmlQualifiedName.Namespace\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Namespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 221\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a string representation of the namespace of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public string Namespace { get; }\n    content.vb: Public ReadOnly Property Namespace As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlQualifiedName.Namespace\n- uid: System.Xml.XmlQualifiedName.Equals(System.Object)\n  commentId: M:System.Xml.XmlQualifiedName.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Xml.XmlQualifiedName.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 222\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object other)\n    content.vb: Public Overrides Function Equals(other As Object) As Boolean\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two are the same instance object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlQualifiedName.Equals(Object)\n- uid: System.Xml.XmlQualifiedName.GetHashCode\n  commentId: M:System.Xml.XmlQualifiedName.GetHashCode\n  id: GetHashCode\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Xml.XmlQualifiedName.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 223\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the hash code for the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for this object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlQualifiedName.GetHashCode()\n- uid: System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  commentId: M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  id: op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: Equality(XmlQualifiedName, XmlQualifiedName)\n  fullName: System.Xml.XmlQualifiedName.Equality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 224\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(XmlQualifiedName a, XmlQualifiedName b)\n    content.vb: Public Shared Operator =(a As XmlQualifiedName, b As XmlQualifiedName) As Boolean\n    parameters:\n    - id: a\n      type: System.Xml.XmlQualifiedName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare. </p>\\n\"\n    - id: b\n      type: System.Xml.XmlQualifiedName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects have the same name and namespace values; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlQualifiedName.Equality(XmlQualifiedName, XmlQualifiedName)\n- uid: System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  commentId: M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  id: op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: Inequality(XmlQualifiedName, XmlQualifiedName)\n  fullName: System.Xml.XmlQualifiedName.Inequality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 225\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(XmlQualifiedName a, XmlQualifiedName b)\n    content.vb: Public Shared Operator <>(a As XmlQualifiedName, b As XmlQualifiedName) As Boolean\n    parameters:\n    - id: a\n      type: System.Xml.XmlQualifiedName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare. </p>\\n\"\n    - id: b\n      type: System.Xml.XmlQualifiedName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the name and namespace values for the two objects differ; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlQualifiedName.Inequality(XmlQualifiedName, XmlQualifiedName)\n- uid: System.Xml.XmlQualifiedName.ToString\n  commentId: M:System.Xml.XmlQualifiedName.ToString\n  id: ToString\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Xml.XmlQualifiedName.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 226\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the string value of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string value of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the format of <strong>namespace:localname</strong>. If the object does not have a namespace defined, this method returns just the local name.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlQualifiedName.ToString()\n- uid: System.Xml.XmlQualifiedName.ToString(System.String,System.String)\n  commentId: M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)\n  id: ToString(System.String,System.String)\n  parent: System.Xml.XmlQualifiedName\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, String)\n  fullName: System.Xml.XmlQualifiedName.ToString(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 227\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the string value of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(string name, string ns)\n    content.vb: Public Shared Function ToString(name As String, ns As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the object. </p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace of the object. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string value of the <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the format of <strong>namespace:localname</strong>. If the object does not have a namespace defined, this method returns just the local name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlQualifiedName.ToString(String, String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Xml.XmlQualifiedName\n  parent: System.Xml\n  isExternal: false\n  name: XmlQualifiedName\n  fullName: System.Xml.XmlQualifiedName\n  commentId: T:System.Xml.XmlQualifiedName\n  nameWithType: XmlQualifiedName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n"}