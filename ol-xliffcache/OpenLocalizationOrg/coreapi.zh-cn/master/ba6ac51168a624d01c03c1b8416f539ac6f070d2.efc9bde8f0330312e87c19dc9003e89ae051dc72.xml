{"nodes":[{"pos":[1959,1976],"content":"ServiceController","needQuote":true,"nodes":[{"content":"ServiceController","pos":[0,17]}]},{"pos":[3845,3870],"content":"ServiceController(String)","needQuote":true,"nodes":[{"content":"ServiceController(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name that identifies the service to the system.","pos":[4813,4869],"source":"\\n<p>The name that identifies the service to the system."},{"content":"This can also be the display name for the service.&lt;/p&gt;\\n","pos":[4870,4926],"source":" This can also be the display name for the service.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is invalid.","pos":[5037,5069],"source":"\\n<p>\\n<em>name</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[5070,5076],"source":" </p>\\n"},{"pos":[5496,5529],"content":"ServiceController(String, String)","needQuote":true,"nodes":[{"content":"ServiceController(String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The name that identifies the service to the system.","pos":[6534,6590],"source":"\\n<p>The name that identifies the service to the system."},{"content":"This can also be the display name for the service.&lt;/p&gt;\\n","pos":[6591,6647],"source":" This can also be the display name for the service.</p>\\n"},{"content":"\\n&lt;p&gt;The computer on which the service resides.","pos":[6717,6764],"source":"\\n<p>The computer on which the service resides."},{"content":"&lt;/p&gt;\\n","pos":[6765,6771],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;machineName&lt;/em&gt; is invalid.","pos":[6882,6971],"source":"\\n<p>\\n<em>name</em> is invalid.</p>\\n<p>-or- </p>\\n<p>\\n<em>machineName</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[6972,6978],"source":" </p>\\n"},{"pos":[7359,7378],"content":"CanPauseAndContinue","needQuote":true,"nodes":[{"content":"CanPauseAndContinue","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the service can be paused; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8212,8311],"source":"\\n<p>\\n<strong>true</strong> if the service can be paused; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[8446,8497],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[8498,8504],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[8617,8654],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[9018,9029],"content":"CanShutdown","needQuote":true,"nodes":[{"content":"CanShutdown","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the service should be notified when the system is shutting down; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9857,9994],"source":"\\n<p>\\n<strong>true</strong> if the service should be notified when the system is shutting down; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[10129,10180],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[10181,10187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[10300,10337],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[10681,10688],"content":"CanStop","needQuote":true,"nodes":[{"content":"CanStop","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[11842,11893],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[11894,11900],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[12013,12050],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[12420,12437],"content":"DependentServices","needQuote":true,"nodes":[{"content":"DependentServices","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[13771,13822],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[13823,13829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[13942,13979],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[14475,14486],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The friendly name of the service, which can be used to identify the service.&lt;/p&gt;\\n","pos":[15263,15350],"source":"\\n<p>The friendly name of the service, which can be used to identify the service.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[15743,15794],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[15795,15801],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[15914,15951],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[16307,16318],"content":"MachineName","needQuote":true,"nodes":[{"content":"MachineName","pos":[0,11]}]},{"pos":[17974,17987],"content":"ServiceHandle","needQuote":true,"nodes":[{"content":"ServiceHandle","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[19079,19116],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[19602,19613],"content":"ServiceName","needQuote":true,"nodes":[{"content":"ServiceName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[21286,21323],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[21700,21718],"content":"ServicesDependedOn","needQuote":true,"nodes":[{"content":"ServicesDependedOn","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[22938,22989],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[22990,22996],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[23109,23146],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[23643,23654],"content":"ServiceType","needQuote":true,"nodes":[{"content":"ServiceType","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[24770,24821],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[24822,24828],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[24941,24978],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[25434,25443],"content":"StartType","needQuote":true,"nodes":[{"content":"StartType","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A value that indicates how the service starts.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[26391,26457],"source":"\\n<p>A value that indicates how the service starts.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[26592,26643],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[26644,26650],"source":" </p>\\n"},{"pos":[27239,27245],"content":"Status","needQuote":true,"nodes":[{"content":"Status","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[28491,28542],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[28543,28549],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[28662,28699],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[29041,29051],"content":"Continue()","needQuote":true,"nodes":[{"content":"Continue()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[29839,29890],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[29891,29897],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.","pos":[30010,30041],"source":"\\n<p>The service was not found."},{"content":"&lt;/p&gt;\\n","pos":[30042,30048],"source":" </p>\\n"},{"pos":[31023,31032],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[32025,32041],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[32998,33141],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[33512,33524],"content":"GetDevices()","needQuote":true,"nodes":[{"content":"GetDevices()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[34694,34745],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[34746,34752],"source":" </p>\\n"},{"pos":[35294,35312],"content":"GetDevices(String)","needQuote":true,"nodes":[{"content":"GetDevices(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The computer from which to retrieve the device driver services.","pos":[36188,36256],"source":"\\n<p>The computer from which to retrieve the device driver services."},{"content":"&lt;/p&gt;\\n","pos":[36257,36263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[36705,36756],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[36757,36763],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;machineName&lt;/em&gt; parameter has invalid syntax.","pos":[36860,36919],"source":"\\n<p>The <em>machineName</em> parameter has invalid syntax."},{"content":"&lt;/p&gt;\\n","pos":[36920,36926],"source":" </p>\\n"},{"pos":[37432,37445],"content":"GetServices()","needQuote":true,"nodes":[{"content":"GetServices()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[38634,38685],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[38686,38692],"source":" </p>\\n"},{"pos":[39236,39255],"content":"GetServices(String)","needQuote":true,"nodes":[{"content":"GetServices(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The computer from which to retrieve the services.","pos":[40164,40218],"source":"\\n<p>The computer from which to retrieve the services."},{"content":"&lt;/p&gt;\\n","pos":[40219,40225],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[40653,40704],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[40705,40711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;machineName&lt;/em&gt; parameter has invalid syntax.","pos":[40808,40867],"source":"\\n<p>The <em>machineName</em> parameter has invalid syntax."},{"content":"&lt;/p&gt;\\n","pos":[40868,40874],"source":" </p>\\n"},{"pos":[41361,41368],"content":"Pause()","needQuote":true,"nodes":[{"content":"Pause()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[42130,42181],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[42182,42188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.","pos":[42301,42332],"source":"\\n<p>The service was not found."},{"content":"&lt;/p&gt;\\n","pos":[42333,42339],"source":" </p>\\n"},{"pos":[43317,43326],"content":"Refresh()","needQuote":true,"nodes":[{"content":"Refresh()","pos":[0,9]}]},{"pos":[44323,44330],"content":"Start()","needQuote":true,"nodes":[{"content":"Start()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[45102,45153],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[45154,45160],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.&lt;/p&gt;\\n","pos":[45273,45310],"source":"\\n<p>The service was not found.</p>\\n"},{"pos":[46178,46193],"content":"Start(String[])","needQuote":true,"nodes":[{"content":"Start(String[])","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An array of arguments to pass to the service when it starts.","pos":[46966,47031],"source":"\\n<p>An array of arguments to pass to the service when it starts."},{"content":"&lt;/p&gt;\\n","pos":[47032,47038],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[47173,47224],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[47225,47231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service cannot be started.","pos":[47344,47379],"source":"\\n<p>The service cannot be started."},{"content":"&lt;/p&gt;\\n","pos":[47380,47386],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;args&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;A member of the array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47491,47612],"source":"\\n<p>\\n<em>args</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>A member of the array is <strong>null</strong>.</p>\\n"},{"pos":[48592,48598],"content":"Stop()","needQuote":true,"nodes":[{"content":"Stop()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing a system API.","pos":[49396,49447],"source":"\\n<p>An error occurred when accessing a system API."},{"content":"&lt;/p&gt;\\n","pos":[49448,49454],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The service was not found.","pos":[49567,49598],"source":"\\n<p>The service was not found."},{"content":"&lt;/p&gt;\\n","pos":[49599,49605],"source":" </p>\\n"},{"pos":[50711,50749],"content":"WaitForStatus(ServiceControllerStatus)","needQuote":true,"nodes":[{"content":"WaitForStatus(ServiceControllerStatus)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The status to wait for.","pos":[51684,51712],"source":"\\n<p>The status to wait for."},{"content":"&lt;/p&gt;\\n","pos":[51713,51719],"source":" </p>\\n"},{"pos":[52778,52826],"content":"WaitForStatus(ServiceControllerStatus, TimeSpan)","needQuote":true,"nodes":[{"content":"WaitForStatus(ServiceControllerStatus, TimeSpan)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The status to wait for.","pos":[53846,53874],"source":"\\n<p>The status to wait for."},{"content":"&lt;/p&gt;\\n","pos":[53875,53881],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value specified for the &lt;em&gt;timeout&lt;/em&gt; parameter expires.","pos":[54625,54693],"source":"\\n<p>The value specified for the <em>timeout</em> parameter expires."},{"content":"&lt;/p&gt;\\n","pos":[54694,54700],"source":" </p>\\n"},{"pos":[55044,55065],"content":"System.ServiceProcess","needQuote":true,"nodes":[{"content":"System.ServiceProcess","pos":[0,21]}]},{"pos":[55241,55247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55397,55408],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[55583,55593],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[55688,55696],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[55765,55766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55793,55794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55864,55872],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[55941,55942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55969,55970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56153,56167],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[56286,56292],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56359,56360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56410,56416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56476,56477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56560,56566],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56633,56634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56684,56690],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56750,56751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56965,56987],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[57135,57141],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[57208,57209],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57259,57265],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[57326,57327]},{"pos":[57382,57388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57448,57449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57546,57552],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[57619,57620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57670,57676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[57737,57738]},{"pos":[57793,57799],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57859,57860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58105,58136],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[58302,58317],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[58393,58394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58444,58450],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[58511,58512]},{"pos":[58567,58573],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58633,58634],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58740,58755],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[58831,58832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58882,58888],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[58949,58950]},{"pos":[59005,59011],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59071,59072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59302,59315],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[59416,59427],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[59499,59500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59527,59528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59601,59612],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[59684,59685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59712,59713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59888,59897],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[59990,59997],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[60065,60066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60093,60094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60163,60170],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[60238,60239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60266,60267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60442,60459],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[60568,60583],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[60659,60660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60687,60688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60765,60780],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[60856,60857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60884,60885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61030,61036],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[61167,61173],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61319,61326],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[61465,61484],"content":"ServiceController[]","needQuote":true,"nodes":[{"content":"ServiceController[]","pos":[0,19]}]},{"pos":[61701,61718],"content":"ServiceController","needQuote":true,"nodes":[{"content":"ServiceController","pos":[0,17]}]},{"content":"[]","pos":[61784,61786]},{"pos":[61877,61894],"content":"ServiceController","needQuote":true,"nodes":[{"content":"ServiceController","pos":[0,17]}]},{"pos":[61959,61961],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[62172,62182],"content":"SafeHandle","needQuote":true,"nodes":[{"content":"SafeHandle","pos":[0,10]}]},{"pos":[62387,62417],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[62655,62666],"content":"ServiceType","needQuote":true,"nodes":[{"content":"ServiceType","pos":[0,11]}]},{"pos":[62896,62912],"content":"ServiceStartMode","needQuote":true,"nodes":[{"content":"ServiceStartMode","pos":[0,16]}]},{"pos":[63164,63187],"content":"ServiceControllerStatus","needQuote":true,"nodes":[{"content":"ServiceControllerStatus","pos":[0,23]}]},{"pos":[63438,63447],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[63550,63557],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[63609,63610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63637,63638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63712,63719],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[63771,63772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63799,63800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63928,63936],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[64064,64070],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[64131,64133]},{"pos":[64198,64204],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[64264,64266],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[64405,64413],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[64575,64592],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[64776,64790],"content":"Win32Exception","needQuote":true,"nodes":[{"content":"Win32Exception","pos":[0,14]}]},{"pos":[65008,65033],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[65233,65254],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[65510,65526],"content":"TimeoutException","needQuote":true,"nodes":[{"content":"TimeoutException","pos":[0,16]}]}],"content":"items:\n- uid: System.ServiceProcess.ServiceController\n  commentId: T:System.ServiceProcess.ServiceController\n  id: ServiceController\n  parent: System.ServiceProcess\n  children:\n  - System.ServiceProcess.ServiceController.#ctor(System.String)\n  - System.ServiceProcess.ServiceController.#ctor(System.String,System.String)\n  - System.ServiceProcess.ServiceController.CanPauseAndContinue\n  - System.ServiceProcess.ServiceController.CanShutdown\n  - System.ServiceProcess.ServiceController.CanStop\n  - System.ServiceProcess.ServiceController.Continue\n  - System.ServiceProcess.ServiceController.DependentServices\n  - System.ServiceProcess.ServiceController.DisplayName\n  - System.ServiceProcess.ServiceController.Dispose\n  - System.ServiceProcess.ServiceController.Dispose(System.Boolean)\n  - System.ServiceProcess.ServiceController.GetDevices\n  - System.ServiceProcess.ServiceController.GetDevices(System.String)\n  - System.ServiceProcess.ServiceController.GetServices\n  - System.ServiceProcess.ServiceController.GetServices(System.String)\n  - System.ServiceProcess.ServiceController.MachineName\n  - System.ServiceProcess.ServiceController.Pause\n  - System.ServiceProcess.ServiceController.Refresh\n  - System.ServiceProcess.ServiceController.ServiceHandle\n  - System.ServiceProcess.ServiceController.ServiceName\n  - System.ServiceProcess.ServiceController.ServicesDependedOn\n  - System.ServiceProcess.ServiceController.ServiceType\n  - System.ServiceProcess.ServiceController.Start\n  - System.ServiceProcess.ServiceController.Start(System.String[])\n  - System.ServiceProcess.ServiceController.StartType\n  - System.ServiceProcess.ServiceController.Status\n  - System.ServiceProcess.ServiceController.Stop\n  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)\n  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)\n  langs:\n  - csharp\n  - vb\n  name: ServiceController\n  fullName: System.ServiceProcess.ServiceController\n  type: Class\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServiceController\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 10\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Represents a Windows service and allows you to connect to a running or stopped service, manipulate it, or get information about it.</p>\\n\"\n  syntax:\n    content: 'public class ServiceController : IDisposable'\n    content.vb: >-\n      Public Class ServiceController\n          Implements IDisposable\n  seealso:\n  - type: System.ServiceProcess.ServiceBase\n    commentId: T:System.ServiceProcess.ServiceBase\n  - type: System.ServiceProcess.ServiceControllerStatus\n    commentId: T:System.ServiceProcess.ServiceControllerStatus\n  - type: System.ServiceProcess.ServiceType\n    commentId: T:System.ServiceProcess.ServiceType\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ServiceController\n- uid: System.ServiceProcess.ServiceController.#ctor(System.String)\n  commentId: M:System.ServiceProcess.ServiceController.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: ServiceController(String)\n  fullName: System.ServiceProcess.ServiceController.ServiceController(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 12\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is associated with an existing service on the local computer.</p>\\n\"\n  syntax:\n    content: public ServiceController(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name that identifies the service to the system. This can also be the display name for the service.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.ServiceController(String)\n- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)\n  commentId: M:System.ServiceProcess.ServiceController.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: ServiceController(String, String)\n  fullName: System.ServiceProcess.ServiceController.ServiceController(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 13\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is associated with an existing service on the specified computer.</p>\\n\"\n  syntax:\n    content: public ServiceController(string name, string machineName)\n    content.vb: Public Sub New(name As String, machineName As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name that identifies the service to the system. This can also be the display name for the service.</p>\\n\"\n    - id: machineName\n      type: System.String\n      description: \"\\n<p>The computer on which the service resides. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is invalid.</p>\\n<p>-or- </p>\\n<p>\\n<em>machineName</em> is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.ServiceController(String, String)\n- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue\n  commentId: P:System.ServiceProcess.ServiceController.CanPauseAndContinue\n  id: CanPauseAndContinue\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: CanPauseAndContinue\n  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanPauseAndContinue\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 14\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets a value indicating whether the service can be paused and resumed.</p>\\n\"\n  syntax:\n    content: public bool CanPauseAndContinue { get; }\n    content.vb: Public ReadOnly Property CanPauseAndContinue As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the service can be paused; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.CanPauseAndContinue\n- uid: System.ServiceProcess.ServiceController.CanShutdown\n  commentId: P:System.ServiceProcess.ServiceController.CanShutdown\n  id: CanShutdown\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: CanShutdown\n  fullName: System.ServiceProcess.ServiceController.CanShutdown\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanShutdown\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 15\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets a value indicating whether the service should be notified when the system is shutting down.</p>\\n\"\n  syntax:\n    content: public bool CanShutdown { get; }\n    content.vb: Public ReadOnly Property CanShutdown As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the service should be notified when the system is shutting down; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.CanShutdown\n- uid: System.ServiceProcess.ServiceController.CanStop\n  commentId: P:System.ServiceProcess.ServiceController.CanStop\n  id: CanStop\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: CanStop\n  fullName: System.ServiceProcess.ServiceController.CanStop\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanStop\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 16\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets a value indicating whether the service can be stopped after it has started.</p>\\n\"\n  syntax:\n    content: public bool CanStop { get; }\n    content.vb: Public ReadOnly Property CanStop As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the service can be stopped and the <xref href=\\\"System.ServiceProcess.ServiceBase.OnStop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method called; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.CanStop\n- uid: System.ServiceProcess.ServiceController.DependentServices\n  commentId: P:System.ServiceProcess.ServiceController.DependentServices\n  id: DependentServices\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: DependentServices\n  fullName: System.ServiceProcess.ServiceController.DependentServices\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DependentServices\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 17\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets the set of services that depends on the service associated with this <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public ServiceController[] DependentServices { get; }\n    content.vb: Public ReadOnly Property DependentServices As ServiceController()\n    parameters: []\n    return:\n      type: System.ServiceProcess.ServiceController[]\n      description: \"\\n<p>An array of <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances, each of which is associated with a service that depends on this service.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.DependentServices\n- uid: System.ServiceProcess.ServiceController.DisplayName\n  commentId: P:System.ServiceProcess.ServiceController.DisplayName\n  id: DisplayName\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: DisplayName\n  fullName: System.ServiceProcess.ServiceController.DisplayName\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DisplayName\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 18\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets or sets a friendly name for the service.</p>\\n\"\n  syntax:\n    content: public string DisplayName { get; }\n    content.vb: Public ReadOnly Property DisplayName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The friendly name of the service, which can be used to identify the service.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <xref href=\\\"System.ServiceProcess.ServiceController.DisplayName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong>. </p>\\n\"\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.DisplayName\n- uid: System.ServiceProcess.ServiceController.MachineName\n  commentId: P:System.ServiceProcess.ServiceController.MachineName\n  id: MachineName\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: MachineName\n  fullName: System.ServiceProcess.ServiceController.MachineName\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MachineName\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 19\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets or sets the name of the computer on which this service resides.</p>\\n\"\n  syntax:\n    content: public string MachineName { get; }\n    content.vb: Public ReadOnly Property MachineName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the computer that is running the service associated with this <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. The default is the local computer (\\\".\\\").</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.ServiceProcess.ServiceController.MachineName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> syntax is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.MachineName\n- uid: System.ServiceProcess.ServiceController.ServiceHandle\n  commentId: P:System.ServiceProcess.ServiceController.ServiceHandle\n  id: ServiceHandle\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: ServiceHandle\n  fullName: System.ServiceProcess.ServiceController.ServiceHandle\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServiceHandle\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 20\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets the handle for the service.</p>\\n\"\n  syntax:\n    content: public SafeHandle ServiceHandle { get; }\n    content.vb: Public ReadOnly Property ServiceHandle As SafeHandle\n    parameters: []\n    return:\n      type: System.Runtime.InteropServices.SafeHandle\n      description: \"\\n<p>A <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the handle for the service. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.ServiceHandle\n- uid: System.ServiceProcess.ServiceController.ServiceName\n  commentId: P:System.ServiceProcess.ServiceController.ServiceName\n  id: ServiceName\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: ServiceName\n  fullName: System.ServiceProcess.ServiceController.ServiceName\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServiceName\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 21\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets or sets the name that identifies the service that this instance references.</p>\\n\"\n  syntax:\n    content: public string ServiceName { get; }\n    content.vb: Public ReadOnly Property ServiceName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name that identifies the service that this <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance references. The default is an empty string (\\\"\\\").</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <xref href=\\\"System.ServiceProcess.ServiceController.ServiceName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The syntax of the <xref href=\\\"System.ServiceProcess.ServiceController.ServiceName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is invalid. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.ServiceName\n- uid: System.ServiceProcess.ServiceController.ServicesDependedOn\n  commentId: P:System.ServiceProcess.ServiceController.ServicesDependedOn\n  id: ServicesDependedOn\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: ServicesDependedOn\n  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServicesDependedOn\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 22\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>The set of services that this service depends on.</p>\\n\"\n  syntax:\n    content: public ServiceController[] ServicesDependedOn { get; }\n    content.vb: Public ReadOnly Property ServicesDependedOn As ServiceController()\n    parameters: []\n    return:\n      type: System.ServiceProcess.ServiceController[]\n      description: \"\\n<p>An array of <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances, each of which is associated with a service that must be running for this service to run.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.ServicesDependedOn\n- uid: System.ServiceProcess.ServiceController.ServiceType\n  commentId: P:System.ServiceProcess.ServiceController.ServiceType\n  id: ServiceType\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: ServiceType\n  fullName: System.ServiceProcess.ServiceController.ServiceType\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServiceType\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 23\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets the type of service that this object references.</p>\\n\"\n  syntax:\n    content: public ServiceType ServiceType { get; }\n    content.vb: Public ReadOnly Property ServiceType As ServiceType\n    parameters: []\n    return:\n      type: System.ServiceProcess.ServiceType\n      description: \"\\n<p>One of the <xref href=\\\"System.ServiceProcess.ServiceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values, used to indicate the network service type.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceType\n    commentId: T:System.ServiceProcess.ServiceType\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.ServiceType\n- uid: System.ServiceProcess.ServiceController.StartType\n  commentId: P:System.ServiceProcess.ServiceController.StartType\n  id: StartType\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: StartType\n  fullName: System.ServiceProcess.ServiceController.StartType\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StartType\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 24\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets a value that indicates how the service represented by the <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object starts.  </p>\\n\"\n  syntax:\n    content: public ServiceStartMode StartType { get; }\n    content.vb: Public ReadOnly Property StartType As ServiceStartMode\n    parameters: []\n    return:\n      type: System.ServiceProcess.ServiceStartMode\n      description: \"\\n<p>A value that indicates how the service starts.</p>\\n<p></p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceStartMode\n    commentId: T:System.ServiceProcess.ServiceStartMode\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.StartType\n- uid: System.ServiceProcess.ServiceController.Status\n  commentId: P:System.ServiceProcess.ServiceController.Status\n  id: Status\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Status\n  fullName: System.ServiceProcess.ServiceController.Status\n  type: Property\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Status\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 25\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Gets the status of the service that is referenced by this instance.</p>\\n\"\n  syntax:\n    content: public ServiceControllerStatus Status { get; }\n    content.vb: Public ReadOnly Property Status As ServiceControllerStatus\n    parameters: []\n    return:\n      type: System.ServiceProcess.ServiceControllerStatus\n      description: \"\\n<p>One of the <xref href=\\\"System.ServiceProcess.ServiceControllerStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that indicates whether the service is running, stopped, or paused, or whether a start, stop, pause, or continue command is pending.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ServiceController.Status\n- uid: System.ServiceProcess.ServiceController.Continue\n  commentId: M:System.ServiceProcess.ServiceController.Continue\n  id: Continue\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Continue()\n  fullName: System.ServiceProcess.ServiceController.Continue()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Continue\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 26\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Continues a service after it has been paused.</p>\\n\"\n  syntax:\n    content: public void Continue()\n    content.vb: Public Sub Continue\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.CanPauseAndContinue\n    commentId: P:System.ServiceProcess.ServiceController.CanPauseAndContinue\n  - type: System.ServiceProcess.ServiceController.Pause\n    commentId: M:System.ServiceProcess.ServiceController.Pause\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.Continue()\n- uid: System.ServiceProcess.ServiceController.Dispose\n  commentId: M:System.ServiceProcess.ServiceController.Dispose\n  id: Dispose\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.ServiceProcess.ServiceController.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 27\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.Dispose()\n- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)\n  commentId: M:System.ServiceProcess.ServiceController.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.ServiceProcess.ServiceController.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 28\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources. </p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ServiceController.Dispose(Boolean)\n- uid: System.ServiceProcess.ServiceController.GetDevices\n  commentId: M:System.ServiceProcess.ServiceController.GetDevices\n  id: GetDevices\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: GetDevices()\n  fullName: System.ServiceProcess.ServiceController.GetDevices()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDevices\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 29\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Retrieves the device driver services on the local computer.</p>\\n\"\n  syntax:\n    content: public static ServiceController[] GetDevices()\n    content.vb: Public Shared Function GetDevices As ServiceController()\n    return:\n      type: System.ServiceProcess.ServiceController[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which each element is associated with a device driver service on the local computer.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.GetServices\n    commentId: M:System.ServiceProcess.ServiceController.GetServices\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ServiceController.GetDevices()\n- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)\n  commentId: M:System.ServiceProcess.ServiceController.GetDevices(System.String)\n  id: GetDevices(System.String)\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: GetDevices(String)\n  fullName: System.ServiceProcess.ServiceController.GetDevices(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDevices\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 30\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Retrieves the device driver services on the specified computer.</p>\\n\"\n  syntax:\n    content: public static ServiceController[] GetDevices(string machineName)\n    content.vb: Public Shared Function GetDevices(machineName As String) As ServiceController()\n    parameters:\n    - id: machineName\n      type: System.String\n      description: \"\\n<p>The computer from which to retrieve the device driver services. </p>\\n\"\n    return:\n      type: System.ServiceProcess.ServiceController[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which each element is associated with a device driver service on the specified computer.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>machineName</em> parameter has invalid syntax. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.GetServices\n    commentId: M:System.ServiceProcess.ServiceController.GetServices\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ServiceController.GetDevices(String)\n- uid: System.ServiceProcess.ServiceController.GetServices\n  commentId: M:System.ServiceProcess.ServiceController.GetServices\n  id: GetServices\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: GetServices()\n  fullName: System.ServiceProcess.ServiceController.GetServices()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetServices\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 31\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Retrieves all the services on the local computer, except for the device driver services.</p>\\n\"\n  syntax:\n    content: public static ServiceController[] GetServices()\n    content.vb: Public Shared Function GetServices As ServiceController()\n    return:\n      type: System.ServiceProcess.ServiceController[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which each element is associated with a service on the local computer.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.GetDevices\n    commentId: M:System.ServiceProcess.ServiceController.GetDevices\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ServiceController.GetServices()\n- uid: System.ServiceProcess.ServiceController.GetServices(System.String)\n  commentId: M:System.ServiceProcess.ServiceController.GetServices(System.String)\n  id: GetServices(System.String)\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: GetServices(String)\n  fullName: System.ServiceProcess.ServiceController.GetServices(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetServices\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 32\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Retrieves all the services on the specified computer, except for the device driver services.</p>\\n\"\n  syntax:\n    content: public static ServiceController[] GetServices(string machineName)\n    content.vb: Public Shared Function GetServices(machineName As String) As ServiceController()\n    parameters:\n    - id: machineName\n      type: System.String\n      description: \"\\n<p>The computer from which to retrieve the services. </p>\\n\"\n    return:\n      type: System.ServiceProcess.ServiceController[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ServiceProcess.ServiceController\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which each element is associated with a service on the specified computer.</p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>machineName</em> parameter has invalid syntax. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.GetDevices\n    commentId: M:System.ServiceProcess.ServiceController.GetDevices\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ServiceController.GetServices(String)\n- uid: System.ServiceProcess.ServiceController.Pause\n  commentId: M:System.ServiceProcess.ServiceController.Pause\n  id: Pause\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Pause()\n  fullName: System.ServiceProcess.ServiceController.Pause()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pause\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 33\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Suspends a service's operation.</p>\\n\"\n  syntax:\n    content: public void Pause()\n    content.vb: Public Sub Pause\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.CanPauseAndContinue\n    commentId: P:System.ServiceProcess.ServiceController.CanPauseAndContinue\n  - type: System.ServiceProcess.ServiceController.Continue\n    commentId: M:System.ServiceProcess.ServiceController.Continue\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.Pause()\n- uid: System.ServiceProcess.ServiceController.Refresh\n  commentId: M:System.ServiceProcess.ServiceController.Refresh\n  id: Refresh\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Refresh()\n  fullName: System.ServiceProcess.ServiceController.Refresh()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Refresh\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 34\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Refreshes property values by resetting the properties to their current values.</p>\\n\"\n  syntax:\n    content: public void Refresh()\n    content.vb: Public Sub Refresh\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.Refresh()\n- uid: System.ServiceProcess.ServiceController.Start\n  commentId: M:System.ServiceProcess.ServiceController.Start\n  id: Start\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Start()\n  fullName: System.ServiceProcess.ServiceController.Start()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Start\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 35\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Starts the service, passing no arguments.</p>\\n\"\n  syntax:\n    content: public void Start()\n    content.vb: Public Sub Start\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found.</p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.Stop\n    commentId: M:System.ServiceProcess.ServiceController.Stop\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.Start()\n- uid: System.ServiceProcess.ServiceController.Start(System.String[])\n  commentId: M:System.ServiceProcess.ServiceController.Start(System.String[])\n  id: Start(System.String[])\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Start(String[])\n  fullName: System.ServiceProcess.ServiceController.Start(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Start\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 36\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Starts a service, passing the specified arguments.</p>\\n\"\n  syntax:\n    content: public void Start(string[] args)\n    content.vb: Public Sub Start(args As String())\n    parameters:\n    - id: args\n      type: System.String[]\n      description: \"\\n<p>An array of arguments to pass to the service when it starts. </p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service cannot be started. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>args</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>A member of the array is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.Stop\n    commentId: M:System.ServiceProcess.ServiceController.Stop\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ServiceProcess.ServiceController.Start(System.String())\n  name.vb: Start(String())\n  nameWithType: ServiceController.Start(String[])\n  nameWithType.vb: ServiceController.Start(String())\n- uid: System.ServiceProcess.ServiceController.Stop\n  commentId: M:System.ServiceProcess.ServiceController.Stop\n  id: Stop\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: Stop()\n  fullName: System.ServiceProcess.ServiceController.Stop()\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Stop\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 37\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Stops this service and any services that are dependent on this service.</p>\\n\"\n  syntax:\n    content: public void Stop()\n    content.vb: Public Sub Stop\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: \"\\n<p>An error occurred when accessing a system API. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The service was not found. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.CanStop\n    commentId: P:System.ServiceProcess.ServiceController.CanStop\n  - type: System.ServiceProcess.ServiceController.Start\n    commentId: M:System.ServiceProcess.ServiceController.Start\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  see:\n  - type: System.ServiceProcess.ServiceControllerPermission\n    commentId: T:System.ServiceProcess.ServiceControllerPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.Stop()\n- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)\n  commentId: M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)\n  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus)\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: WaitForStatus(ServiceControllerStatus)\n  fullName: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WaitForStatus\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 38\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Infinitely waits for the service to reach the specified status.</p>\\n\"\n  syntax:\n    content: public void WaitForStatus(ServiceControllerStatus desiredStatus)\n    content.vb: Public Sub WaitForStatus(desiredStatus As ServiceControllerStatus)\n    parameters:\n    - id: desiredStatus\n      type: System.ServiceProcess.ServiceControllerStatus\n      description: \"\\n<p>The status to wait for. </p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"\\n<p>The <em>desiredStatus</em> parameter is not any of the values defined in the <xref href=\\\"System.ServiceProcess.ServiceControllerStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)\n- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)\n  commentId: M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)\n  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)\n  parent: System.ServiceProcess.ServiceController\n  langs:\n  - csharp\n  - vb\n  name: WaitForStatus(ServiceControllerStatus, TimeSpan)\n  fullName: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WaitForStatus\n    path: src/System.ServiceProcess.ServiceController/ref/System.ServiceProcess.ServiceController.cs\n    startLine: 39\n  assemblies:\n  - System.ServiceProcess.ServiceController\n  namespace: System.ServiceProcess\n  summary: \"\\n<p>Waits for the service to reach the specified status or for the specified time-out to expire.</p>\\n\"\n  syntax:\n    content: public void WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout)\n    content.vb: Public Sub WaitForStatus(desiredStatus As ServiceControllerStatus, timeout As TimeSpan)\n    parameters:\n    - id: desiredStatus\n      type: System.ServiceProcess.ServiceControllerStatus\n      description: \"\\n<p>The status to wait for. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifying the amount of time to wait for the service to reach the specified status. </p>\\n\"\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"\\n<p>The <em>desiredStatus</em> parameter is not any of the values defined in the <xref href=\\\"System.ServiceProcess.ServiceControllerStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration. </p>\\n\"\n  - type: System.ServiceProcess.TimeoutException\n    commentId: T:System.ServiceProcess.TimeoutException\n    description: \"\\n<p>The value specified for the <em>timeout</em> parameter expires. </p>\\n\"\n  seealso:\n  - type: System.ServiceProcess.ServiceController.Status\n    commentId: P:System.ServiceProcess.ServiceController.Status\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus, TimeSpan)\nreferences:\n- uid: System.ServiceProcess\n  isExternal: false\n  name: System.ServiceProcess\n  fullName: System.ServiceProcess\n  commentId: N:System.ServiceProcess\n  nameWithType: System.ServiceProcess\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ServiceProcess.ServiceController[]\n  name: ServiceController[]\n  fullName: System.ServiceProcess.ServiceController[]\n  fullname.vb: System.ServiceProcess.ServiceController()\n  name.vb: ServiceController()\n  spec.csharp:\n  - uid: System.ServiceProcess.ServiceController\n    name: ServiceController\n    fullName: System.ServiceProcess.ServiceController\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.ServiceProcess.ServiceController\n    name: ServiceController\n    fullName: System.ServiceProcess.ServiceController\n  - name: ()\n    fullName: ()\n  nameWithType: ServiceController[]\n  nameWithType.vb: ServiceController()\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n  commentId: T:System.Runtime.InteropServices.SafeHandle\n  nameWithType: SafeHandle\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n- uid: System.ServiceProcess.ServiceType\n  parent: System.ServiceProcess\n  isExternal: false\n  name: ServiceType\n  fullName: System.ServiceProcess.ServiceType\n  commentId: T:System.ServiceProcess.ServiceType\n  nameWithType: ServiceType\n- uid: System.ServiceProcess.ServiceStartMode\n  parent: System.ServiceProcess\n  isExternal: false\n  name: ServiceStartMode\n  fullName: System.ServiceProcess.ServiceStartMode\n  commentId: T:System.ServiceProcess.ServiceStartMode\n  nameWithType: ServiceStartMode\n- uid: System.ServiceProcess.ServiceControllerStatus\n  parent: System.ServiceProcess\n  isExternal: false\n  name: ServiceControllerStatus\n  fullName: System.ServiceProcess.ServiceControllerStatus\n  commentId: T:System.ServiceProcess.ServiceControllerStatus\n  nameWithType: ServiceControllerStatus\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ComponentModel.Win32Exception\n  isExternal: false\n  name: Win32Exception\n  fullName: System.ComponentModel.Win32Exception\n  nameWithType: Win32Exception\n  commentId: T:System.ComponentModel.Win32Exception\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.ServiceProcess.TimeoutException\n  isExternal: false\n  name: TimeoutException\n  fullName: System.ServiceProcess.TimeoutException\n  commentId: T:System.ServiceProcess.TimeoutException\n  nameWithType: TimeoutException\n"}