{"nodes":[{"pos":[1753,1766],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[4163,4184],"content":"DirectoryInfo(String)","needQuote":true,"nodes":[{"content":"DirectoryInfo(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A string specifying the path on which to create the &lt;strong&gt;DirectoryInfo&lt;/strong&gt;.","pos":[4997,5085],"source":"\\n<p>A string specifying the path on which to create the <strong>DirectoryInfo</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5086,5092],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5211,5257],"source":"\\n<p>\\n<em>path</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5258,5264],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[5379,5433],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[5434,5440],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[5725,5810],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[5811,5940]},{"content":"The specified path, file name, or both are too long.&lt;/p&gt;\\n","pos":[5941,5999],"source":" The specified path, file name, or both are too long.</p>\\n"},{"pos":[6479,6485],"content":"Exists","needQuote":true,"nodes":[{"content":"Exists","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the directory exists; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7195,7289],"source":"\\n<p>\\n<strong>true</strong> if the directory exists; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7640,7644],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The directory name.&lt;/p&gt;\\n","pos":[8343,8373],"source":"\\n<p>The directory name.</p>\\n"},{"pos":[8832,8838],"content":"Parent","needQuote":true,"nodes":[{"content":"Parent","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[9849,9903],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[9904,9910],"source":" </p>\\n"},{"pos":[10312,10316],"content":"Root","needQuote":true,"nodes":[{"content":"Root","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An object that represents the root of the directory.&lt;/p&gt;\\n","pos":[11009,11072],"source":"\\n<p>An object that represents the root of the directory.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[11201,11255],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[11256,11262],"source":" </p>\\n"},{"pos":[11668,11676],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The directory cannot be created.","pos":[12262,12299],"source":"\\n<p>The directory cannot be created."},{"content":"&lt;/p&gt;\\n","pos":[12300,12306],"source":" </p>\\n"},{"pos":[12776,12802],"content":"CreateSubdirectory(String)","needQuote":true,"nodes":[{"content":"CreateSubdirectory(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The specified path.","pos":[13752,13776],"source":"\\n<p>The specified path."},{"content":"This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[13777,13858]},{"content":"&lt;/p&gt;\\n","pos":[13859,13865],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The last directory specified in &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt;\\n","pos":[13935,13992],"source":"\\n<p>The last directory specified in <em>path</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; does not specify a valid file path or contains invalid &lt;strong&gt;DirectoryInfo&lt;/strong&gt; characters.","pos":[14103,14221],"source":"\\n<p>\\n<em>path</em> does not specify a valid file path or contains invalid <strong>DirectoryInfo</strong> characters."},{"content":"&lt;/p&gt;\\n","pos":[14222,14228],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14333,14379],"source":"\\n<p>\\n<em>path</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14380,14386],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[14507,14578],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[14579,14585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The subdirectory cannot be created.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;A file or directory already has the name specified by &lt;em&gt;path&lt;/em&gt;.","pos":[14676,14807],"source":"\\n<p>The subdirectory cannot be created.</p>\\n<p>-or- </p>\\n<p>A file or directory already has the name specified by <em>path</em>."},{"content":"&lt;/p&gt;\\n","pos":[14808,14814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[14923,15008],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[15009,15138]},{"content":"The specified path, file name, or both are too long.&lt;/p&gt;\\n","pos":[15139,15197],"source":" The specified path, file name, or both are too long.</p>\\n"},{"pos":[16301,16309],"content":"Delete()","needQuote":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The directory contains a read-only file.&lt;/p&gt;\\n","pos":[17156,17207],"source":"\\n<p>The directory contains a read-only file.</p>\\n"},{"content":"\\n&lt;p&gt;The directory is not empty.","pos":[17590,17622],"source":"\\n<p>The directory is not empty."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The directory is the application's current working directory.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;There is an open handle on the directory, and the operating system is Windows XP or earlier.","pos":[17623,17820],"source":" </p>\\n<p>-or-</p>\\n<p>The directory is the application's current working directory.</p>\\n<p>-or-</p>\\n<p>There is an open handle on the directory, and the operating system is Windows XP or earlier."},{"content":"This open handle can result from enumerating directories.","pos":[17821,17878]},{"content":"For more information, see How to: Enumerate Directories and Files.&lt;/p&gt;\\n","pos":[17879,17951],"source":" For more information, see How to: Enumerate Directories and Files.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[18066,18120],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[18121,18127],"source":" </p>\\n"},{"pos":[18591,18606],"content":"Delete(Boolean)","needQuote":true,"nodes":[{"content":"Delete(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to delete this directory, its subdirectories, and all files; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[19446,19570],"source":"\\n<p>\\n<strong>true</strong> to delete this directory, its subdirectories, and all files; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19571,19577],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The directory contains a read-only file.&lt;/p&gt;\\n","pos":[19708,19759],"source":"\\n<p>The directory contains a read-only file.</p>\\n"},{"content":"\\n&lt;p&gt;The directory is read-only.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The directory contains one or more files or subdirectories and &lt;em&gt;recursive&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The directory is the application's current working directory.","pos":[20142,20388],"source":"\\n<p>The directory is read-only.</p>\\n<p>-or- </p>\\n<p>The directory contains one or more files or subdirectories and <em>recursive</em> is <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The directory is the application's current working directory."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier.","pos":[20389,20526],"source":" </p>\\n<p>-or-</p>\\n<p>There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier."},{"content":"This open handle can result from enumerating directories and files.","pos":[20527,20594]},{"content":"For more information, see How to: Enumerate Directories and Files.&lt;/p&gt;\\n","pos":[20595,20667],"source":" For more information, see How to: Enumerate Directories and Files.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[20782,20836],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[20837,20843],"source":" </p>\\n"},{"pos":[21293,21315],"content":"EnumerateDirectories()","needQuote":true,"nodes":[{"content":"EnumerateDirectories()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An enumerable collection of directories in the current directory.&lt;/p&gt;\\n","pos":[22085,22161],"source":"\\n<p>An enumerable collection of directories in the current directory.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[22596,22650],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[22651,22657],"source":" </p>\\n"},{"pos":[23023,23051],"content":"EnumerateDirectories(String)","needQuote":true,"nodes":[{"content":"EnumerateDirectories(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An enumerable collection of directories that matches &lt;em&gt;searchPattern&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24262,24349],"source":"\\n<p>An enumerable collection of directories that matches <em>searchPattern</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24468,24523],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24524,24530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[24951,25005],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[25006,25012],"source":" </p>\\n"},{"pos":[25453,25495],"content":"EnumerateDirectories(String, SearchOption)","needQuote":true,"nodes":[{"content":"EnumerateDirectories(String, SearchOption)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;An enumerable collection of directories that matches &lt;em&gt;searchPattern&lt;/em&gt; and &lt;em&gt;searchOption&lt;/em&gt;.&lt;/p&gt;\\n","pos":[27170,27283],"source":"\\n<p>An enumerable collection of directories that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27402,27457],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27458,27464],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[28141,28195],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[28196,28202],"source":" </p>\\n"},{"pos":[28525,28541],"content":"EnumerateFiles()","needQuote":true,"nodes":[{"content":"EnumerateFiles()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An enumerable collection of the files in the current directory.&lt;/p&gt;\\n","pos":[29267,29341],"source":"\\n<p>An enumerable collection of the files in the current directory.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[29776,29830],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[29831,29837],"source":" </p>\\n"},{"pos":[30179,30201],"content":"EnumerateFiles(String)","needQuote":true,"nodes":[{"content":"EnumerateFiles(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An enumerable collection of files that matches &lt;em&gt;searchPattern&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31352,31433],"source":"\\n<p>An enumerable collection of files that matches <em>searchPattern</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[31552,31607],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[31608,31614],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[32036,32090],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[32091,32097],"source":" </p>\\n"},{"pos":[32514,32550],"content":"EnumerateFiles(String, SearchOption)","needQuote":true,"nodes":[{"content":"EnumerateFiles(String, SearchOption)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An enumerable collection of files that matches &lt;em&gt;searchPattern&lt;/em&gt; and &lt;em&gt;searchOption&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34174,34281],"source":"\\n<p>An enumerable collection of files that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34400,34455],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34456,34462],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[35139,35193],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[35194,35200],"source":" </p>\\n"},{"pos":[35547,35573],"content":"EnumerateFileSystemInfos()","needQuote":true,"nodes":[{"content":"EnumerateFileSystemInfos()","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An enumerable collection of file system information in the current directory.","pos":[36364,36446],"source":"\\n<p>An enumerable collection of file system information in the current directory."},{"content":"&lt;/p&gt;\\n","pos":[36447,36453],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[36888,36942],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[36943,36949],"source":" </p>\\n"},{"pos":[37425,37457],"content":"EnumerateFileSystemInfos(String)","needQuote":true,"nodes":[{"content":"EnumerateFileSystemInfos(String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An enumerable collection of file system information objects that matches &lt;em&gt;searchPattern&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38689,38796],"source":"\\n<p>An enumerable collection of file system information objects that matches <em>searchPattern</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38915,38970],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38971,38977],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[39398,39452],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[39453,39459],"source":" </p>\\n"},{"pos":[40010,40056],"content":"EnumerateFileSystemInfos(String, SearchOption)","needQuote":true,"nodes":[{"content":"EnumerateFileSystemInfos(String, SearchOption)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;An enumerable collection of file system information objects that matches &lt;em&gt;searchPattern&lt;/em&gt; and &lt;em&gt;searchOption&lt;/em&gt;.&lt;/p&gt;\\n","pos":[41751,41884],"source":"\\n<p>An enumerable collection of file system information objects that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[42003,42058],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[42059,42065],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[42742,42796],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[42797,42803],"source":" </p>\\n"},{"pos":[43224,43240],"content":"GetDirectories()","needQuote":true,"nodes":[{"content":"GetDirectories()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[44436,44490],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[44491,44497],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[44614,44668],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[44669,44675],"source":" </p>\\n"},{"pos":[45141,45163],"content":"GetDirectories(String)","needQuote":true,"nodes":[{"content":"GetDirectories(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;DirectoryInfo&lt;/strong&gt; matching &lt;em&gt;searchPattern&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46355,46446],"source":"\\n<p>An array of type <strong>DirectoryInfo</strong> matching <em>searchPattern</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46856,46911],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[46912,46918],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The path encapsulated in the &lt;strong&gt;DirectoryInfo&lt;/strong&gt; object is invalid (for example, it is on an unmapped drive).","pos":[47039,47164],"source":"\\n<p>The path encapsulated in the <strong>DirectoryInfo</strong> object is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[47165,47171],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[47288,47342],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[47343,47349],"source":" </p>\\n"},{"pos":[47890,47926],"content":"GetDirectories(String, SearchOption)","needQuote":true,"nodes":[{"content":"GetDirectories(String, SearchOption)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.&lt;/p&gt;\\n","pos":[49271,49420],"source":"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\\n"},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;DirectoryInfo&lt;/strong&gt; matching &lt;em&gt;searchPattern&lt;/em&gt;.&lt;/p&gt;\\n","pos":[49492,49583],"source":"\\n<p>An array of type <strong>DirectoryInfo</strong> matching <em>searchPattern</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[49993,50048],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50049,50055],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The path encapsulated in the &lt;strong&gt;DirectoryInfo&lt;/strong&gt; object is invalid (for example, it is on an unmapped drive).","pos":[50432,50557],"source":"\\n<p>The path encapsulated in the <strong>DirectoryInfo</strong> object is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[50558,50564],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[50681,50735],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[50736,50742],"source":" </p>\\n"},{"pos":[51165,51175],"content":"GetFiles()","needQuote":true,"nodes":[{"content":"GetFiles()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The path is invalid, such as being on an unmapped drive.","pos":[52025,52086],"source":"\\n<p>The path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[52087,52093],"source":" </p>\\n"},{"pos":[52535,52551],"content":"GetFiles(String)","needQuote":true,"nodes":[{"content":"GetFiles(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[54130,54185],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[54186,54192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The path is invalid (for example, it is on an unmapped drive).","pos":[54313,54380],"source":"\\n<p>The path is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[54381,54387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[54502,54556],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[54557,54563],"source":" </p>\\n"},{"pos":[55080,55110],"content":"GetFiles(String, SearchOption)","needQuote":true,"nodes":[{"content":"GetFiles(String, SearchOption)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.&lt;/p&gt;\\n","pos":[56330,56479],"source":"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[57063,57118],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[57119,57125],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The path is invalid (for example, it is on an unmapped drive).","pos":[57502,57569],"source":"\\n<p>The path is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[57570,57576],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[57691,57745],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[57746,57752],"source":" </p>\\n"},{"pos":[58199,58219],"content":"GetFileSystemInfos()","needQuote":true,"nodes":[{"content":"GetFileSystemInfos()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The path is invalid (for example, it is on an unmapped drive).","pos":[59293,59360],"source":"\\n<p>The path is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[59361,59367],"source":" </p>\\n"},{"pos":[59896,59922],"content":"GetFileSystemInfos(String)","needQuote":true,"nodes":[{"content":"GetFileSystemInfos(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An array of strongly typed &lt;strong&gt;FileSystemInfo&lt;/strong&gt; objects matching the search criteria.&lt;/p&gt;\\n","pos":[61190,61297],"source":"\\n<p>An array of strongly typed <strong>FileSystemInfo</strong> objects matching the search criteria.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[61707,61762],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[61763,61769],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid (for example, it is on an unmapped drive).","pos":[61890,61967],"source":"\\n<p>The specified path is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[61968,61974],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[62089,62143],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[62144,62150],"source":" </p>\\n"},{"pos":[62878,62918],"content":"GetFileSystemInfos(String, SearchOption)","needQuote":true,"nodes":[{"content":"GetFileSystemInfos(String, SearchOption)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;An array of file system entries that match the search criteria.&lt;/p&gt;\\n","pos":[64604,64678],"source":"\\n<p>An array of file system entries that match the search criteria.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;searchPattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[65088,65143],"source":"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[65144,65150],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid (for example, it is on an unmapped drive).","pos":[65527,65604],"source":"\\n<p>The specified path is invalid (for example, it is on an unmapped drive)."},{"content":"&lt;/p&gt;\\n","pos":[65605,65611],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[65726,65780],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[65781,65787],"source":" </p>\\n"},{"pos":[66223,66237],"content":"MoveTo(String)","needQuote":true,"nodes":[{"content":"MoveTo(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The name and path to which to move this directory.","pos":[67048,67103],"source":"\\n<p>The name and path to which to move this directory."},{"content":"The destination cannot be another disk volume or a directory with the identical name.","pos":[67104,67189]},{"content":"It can be an existing directory to which you want to add this directory as a subdirectory.","pos":[67190,67280]},{"content":"&lt;/p&gt;\\n","pos":[67281,67287],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destDirName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[67406,67459],"source":"\\n<p>\\n<em>destDirName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67460,67466],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to move a directory to a different volume.","pos":[67715,67782],"source":"\\n<p>An attempt was made to move a directory to a different volume."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destDirName&lt;/em&gt; already exists.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;You are not authorized to access this path.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The directory being moved and the destination directory have the same name.&lt;/p&gt;\\n","pos":[67783,68012],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>destDirName</em> already exists.</p>\\n<p>-or-</p>\\n<p>You are not authorized to access this path.</p>\\n<p>-or- </p>\\n<p>The directory being moved and the destination directory have the same name.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[68127,68181],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[68182,68188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The destination directory cannot be found.&lt;/p&gt;\\n","pos":[68309,68362],"source":"\\n<p>The destination directory cannot be found.</p>\\n"},{"pos":[68763,68773],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;Returns the original path that was passed by the user.&lt;/p&gt;\\n","pos":[69392,69457],"source":"\\n<p>Returns the original path that was passed by the user.</p>\\n"},{"pos":[69679,69688],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[69828,69834],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69993,70007],"content":"FileSystemInfo","needQuote":true,"nodes":[{"content":"FileSystemInfo","pos":[0,14]}]},{"pos":[70220,70228],"content":"FullPath","needQuote":true,"nodes":[{"content":"FullPath","pos":[0,8]}]},{"pos":[70472,70484],"content":"OriginalPath","needQuote":true,"nodes":[{"content":"OriginalPath","pos":[0,12]}]},{"pos":[70738,70748],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[70998,71010],"content":"CreationTime","needQuote":true,"nodes":[{"content":"CreationTime","pos":[0,12]}]},{"pos":[71269,71284],"content":"CreationTimeUtc","needQuote":true,"nodes":[{"content":"CreationTimeUtc","pos":[0,15]}]},{"pos":[71546,71555],"content":"Extension","needQuote":true,"nodes":[{"content":"Extension","pos":[0,9]}]},{"pos":[71798,71806],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"pos":[72052,72066],"content":"LastAccessTime","needQuote":true,"nodes":[{"content":"LastAccessTime","pos":[0,14]}]},{"pos":[72333,72350],"content":"LastAccessTimeUtc","needQuote":true,"nodes":[{"content":"LastAccessTimeUtc","pos":[0,17]}]},{"pos":[72622,72635],"content":"LastWriteTime","needQuote":true,"nodes":[{"content":"LastWriteTime","pos":[0,13]}]},{"pos":[72898,72914],"content":"LastWriteTimeUtc","needQuote":true,"nodes":[{"content":"LastWriteTimeUtc","pos":[0,16]}]},{"pos":[73177,73186],"content":"Refresh()","needQuote":true,"nodes":[{"content":"Refresh()","pos":[0,9]}]},{"pos":[73301,73308],"content":"Refresh","needQuote":true,"nodes":[{"content":"Refresh","pos":[0,7]}]},{"pos":[73366,73367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73394,73395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73475,73482],"content":"Refresh","needQuote":true,"nodes":[{"content":"Refresh","pos":[0,7]}]},{"pos":[73540,73541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73568,73569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73769,73783],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[73902,73908],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73975,73976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74026,74032],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74092,74093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74176,74182],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74249,74250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74300,74306],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74366,74367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74581,74603],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[74751,74757],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74824,74825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74875,74881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[74942,74943]},{"pos":[74998,75004],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75064,75065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75162,75168],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75235,75236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75286,75292],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[75353,75354]},{"pos":[75409,75415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75475,75476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75721,75752],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[75918,75933],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[76009,76010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76060,76066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76127,76128]},{"pos":[76183,76189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76249,76250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76356,76371],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[76447,76448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76498,76504],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76565,76566]},{"pos":[76621,76627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76687,76688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76918,76931],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[77032,77043],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[77115,77116],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77143,77144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77217,77228],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[77300,77301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77328,77329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77504,77513],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[77606,77613],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[77681,77682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77709,77710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77779,77786],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[77854,77855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77882,77883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78058,78075],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[78184,78199],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[78275,78276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78303,78304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78381,78396],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[78472,78473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78500,78501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78646,78652],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[78783,78789],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[78970,78976],"content":"Exists","needQuote":true,"nodes":[{"content":"Exists","pos":[0,6]}]},{"pos":[79173,79180],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[79362,79366],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[79569,79582],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[79790,79798],"content":"Delete()","needQuote":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"pos":[79911,79917],"content":"Delete","needQuote":true,"nodes":[{"content":"Delete","pos":[0,6]}]},{"pos":[79974,79975],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80002,80003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80082,80088],"content":"Delete","needQuote":true,"nodes":[{"content":"Delete","pos":[0,6]}]},{"pos":[80145,80146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80173,80174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80449,80475],"content":"IEnumerable<DirectoryInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;DirectoryInfo&gt;","pos":[0,26],"source":"IEnumerable<DirectoryInfo>"}]},{"pos":[80750,80761],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[80846,80847],"content":"<","needQuote":true,"nodes":[]},{"pos":[80907,80920],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[81062,81073],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[81159,81162]},{"pos":[81229,81242],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[81291,81292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81556,81570],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[81789,81800],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[81864,81865],"content":"<","needQuote":true,"nodes":[]},{"pos":[81892,81893],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82013,82024],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[82089,82092]},{"pos":[82126,82127],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82154,82155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82358,82384],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[82587,82599],"content":"SearchOption","needQuote":true,"nodes":[{"content":"SearchOption","pos":[0,12]}]},{"pos":[82868,82889],"content":"IEnumerable<FileInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;FileInfo&gt;","pos":[0,21],"source":"IEnumerable<FileInfo>"}]},{"pos":[83149,83160],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[83245,83246],"content":"<","needQuote":true,"nodes":[]},{"pos":[83301,83309],"content":"FileInfo","needQuote":true,"nodes":[{"content":"FileInfo","pos":[0,8]}]},{"pos":[83446,83457],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[83543,83546]},{"pos":[83608,83616],"content":"FileInfo","needQuote":true,"nodes":[{"content":"FileInfo","pos":[0,8]}]},{"pos":[83660,83661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84006,84033],"content":"IEnumerable<FileSystemInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;FileSystemInfo&gt;","pos":[0,27],"source":"IEnumerable<FileSystemInfo>"}]},{"pos":[84311,84322],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84407,84408],"content":"<","needQuote":true,"nodes":[]},{"pos":[84469,84483],"content":"FileSystemInfo","needQuote":true,"nodes":[{"content":"FileSystemInfo","pos":[0,14]}]},{"pos":[84626,84637],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[84723,84726]},{"pos":[84794,84808],"content":"FileSystemInfo","needQuote":true,"nodes":[{"content":"FileSystemInfo","pos":[0,14]}]},{"pos":[84858,84859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85091,85106],"content":"DirectoryInfo[]","needQuote":true,"nodes":[{"content":"DirectoryInfo[]","pos":[0,15]}]},{"pos":[85271,85284],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"content":"[]","pos":[85334,85336]},{"pos":[85411,85424],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[85473,85475],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[85596,85606],"content":"FileInfo[]","needQuote":true,"nodes":[{"content":"FileInfo[]","pos":[0,10]}]},{"pos":[85751,85759],"content":"FileInfo","needQuote":true,"nodes":[{"content":"FileInfo","pos":[0,8]}]},{"content":"[]","pos":[85804,85806]},{"pos":[85876,85884],"content":"FileInfo","needQuote":true,"nodes":[{"content":"FileInfo","pos":[0,8]}]},{"pos":[85928,85930],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[86047,86063],"content":"FileSystemInfo[]","needQuote":true,"nodes":[{"content":"FileSystemInfo[]","pos":[0,16]}]},{"pos":[86232,86246],"content":"FileSystemInfo","needQuote":true,"nodes":[{"content":"FileSystemInfo","pos":[0,14]}]},{"content":"[]","pos":[86297,86299]},{"pos":[86375,86389],"content":"FileSystemInfo","needQuote":true,"nodes":[{"content":"FileSystemInfo","pos":[0,14]}]},{"pos":[86439,86441],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[86609,86619],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[86714,86722],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[86791,86792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86819,86820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86890,86898],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[86967,86968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86995,86996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87149,87170],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[87363,87380],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[87587,87604],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[87782,87802],"content":"PathTooLongException","needQuote":true,"nodes":[{"content":"PathTooLongException","pos":[0,20]}]},{"pos":[88006,88017],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[88189,88215],"content":"DirectoryNotFoundException","needQuote":true,"nodes":[{"content":"DirectoryNotFoundException","pos":[0,26]}]},{"pos":[88441,88462],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[88673,88700],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[88912,88939],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.IO.DirectoryInfo\n  commentId: T:System.IO.DirectoryInfo\n  id: DirectoryInfo\n  parent: System.IO\n  children:\n  - System.IO.DirectoryInfo.#ctor(System.String)\n  - System.IO.DirectoryInfo.Create\n  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  - System.IO.DirectoryInfo.Delete\n  - System.IO.DirectoryInfo.Delete(System.Boolean)\n  - System.IO.DirectoryInfo.EnumerateDirectories\n  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.EnumerateFiles\n  - System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.Exists\n  - System.IO.DirectoryInfo.GetDirectories\n  - System.IO.DirectoryInfo.GetDirectories(System.String)\n  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFiles\n  - System.IO.DirectoryInfo.GetFiles(System.String)\n  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFileSystemInfos\n  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.MoveTo(System.String)\n  - System.IO.DirectoryInfo.Name\n  - System.IO.DirectoryInfo.Parent\n  - System.IO.DirectoryInfo.Root\n  - System.IO.DirectoryInfo.ToString\n  langs:\n  - csharp\n  - vb\n  name: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DirectoryInfo\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 34\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class DirectoryInfo : FileSystemInfo, ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class DirectoryInfo\n          Inherits FileSystemInfo\n          Implements ISerializable\n  seealso:\n  - type: System.IO.File\n    commentId: T:System.IO.File\n  - type: System.IO.FileSystemInfo.Attributes\n    commentId: P:System.IO.FileSystemInfo.Attributes\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  - type: System.IO.Directory\n    commentId: T:System.IO.Directory\n  - type: System.IO.Path\n    commentId: T:System.IO.Path\n  inheritance:\n  - System.Object\n  - System.IO.FileSystemInfo\n  inheritedMembers:\n  - System.IO.FileSystemInfo.FullPath\n  - System.IO.FileSystemInfo.OriginalPath\n  - System.IO.FileSystemInfo.Attributes\n  - System.IO.FileSystemInfo.CreationTime\n  - System.IO.FileSystemInfo.CreationTimeUtc\n  - System.IO.FileSystemInfo.Extension\n  - System.IO.FileSystemInfo.FullName\n  - System.IO.FileSystemInfo.LastAccessTime\n  - System.IO.FileSystemInfo.LastAccessTimeUtc\n  - System.IO.FileSystemInfo.LastWriteTime\n  - System.IO.FileSystemInfo.LastWriteTimeUtc\n  - System.IO.FileSystemInfo.Refresh\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: DirectoryInfo\n- uid: System.IO.DirectoryInfo.#ctor(System.String)\n  commentId: M:System.IO.DirectoryInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: DirectoryInfo(String)\n  fullName: System.IO.DirectoryInfo.DirectoryInfo(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 62\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class on the specified path.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public DirectoryInfo(string path)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(path As String)\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>A string specifying the path on which to create the <strong>DirectoryInfo</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains invalid characters such as \\\", <, >, or |. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\\n\"\n  seealso:\n  - type: System.IO.DriveInfo\n    commentId: T:System.IO.DriveInfo\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.DirectoryInfo(String)\n- uid: System.IO.DirectoryInfo.Exists\n  commentId: P:System.IO.DirectoryInfo.Exists\n  id: Exists\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Exists\n  fullName: System.IO.DirectoryInfo.Exists\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exists\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 240\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value indicating whether the directory exists.</p>\\n\"\n  syntax:\n    content: >-\n      public override bool Exists\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overrides ReadOnly Property Exists As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the directory exists; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.IO.FileSystemInfo.Exists\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: DirectoryInfo.Exists\n- uid: System.IO.DirectoryInfo.Name\n  commentId: P:System.IO.DirectoryInfo.Name\n  id: Name\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.IO.DirectoryInfo.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 127\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets the name of this <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override string Name { get; }\n    content.vb: Public Overrides ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The directory name.</p>\\n\"\n  overridden: System.IO.FileSystemInfo.Name\n  seealso:\n  - type: System.IO.FileSystemInfo.FullName\n    commentId: P:System.IO.FileSystemInfo.FullName\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: DirectoryInfo.Name\n- uid: System.IO.DirectoryInfo.Parent\n  commentId: P:System.IO.DirectoryInfo.Parent\n  id: Parent\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Parent\n  fullName: System.IO.DirectoryInfo.Parent\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parent\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 140\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets the parent directory of a specified subdirectory.</p>\\n\"\n  syntax:\n    content: >-\n      public DirectoryInfo Parent\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property Parent As DirectoryInfo\n    parameters: []\n    return:\n      type: System.IO.DirectoryInfo\n      description: \"\\n<p>The parent directory, or <strong>null</strong> if the path is null or if the file path denotes a root (such as \\\"\\\\\\\", \\\"C:\\\", or * \\\"\\\\\\\\server\\\\share\\\").</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DirectoryInfo.Parent\n- uid: System.IO.DirectoryInfo.Root\n  commentId: P:System.IO.DirectoryInfo.Root\n  id: Root\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Root\n  fullName: System.IO.DirectoryInfo.Root\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Root\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 516\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets the root portion of the directory.</p>\\n\"\n  syntax:\n    content: >-\n      public DirectoryInfo Root\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property Root As DirectoryInfo\n    parameters: []\n    return:\n      type: System.IO.DirectoryInfo\n      description: \"\\n<p>An object that represents the root of the directory.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DirectoryInfo.Root\n- uid: System.IO.DirectoryInfo.Create\n  commentId: M:System.IO.DirectoryInfo.Create\n  id: Create\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.IO.DirectoryInfo.Create()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Create\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 223\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a directory.</p>\\n\"\n  syntax:\n    content: public void Create()\n    content.vb: Public Sub Create\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The directory cannot be created. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.Create()\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  commentId: M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  id: CreateSubdirectory(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: CreateSubdirectory(String)\n  fullName: System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateSubdirectory\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 165\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public DirectoryInfo CreateSubdirectory(string path)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function CreateSubdirectory(path As String) As DirectoryInfo\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </p>\\n\"\n    return:\n      type: System.IO.DirectoryInfo\n      description: \"\\n<p>The last directory specified in <em>path</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> does not specify a valid file path or contains invalid <strong>DirectoryInfo</strong> characters. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The subdirectory cannot be created.</p>\\n<p>-or- </p>\\n<p>A file or directory already has the name specified by <em>path</em>. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have code access permission to create the directory.</p>\\n<p>-or-</p>\\n<p>The caller does not have code access permission to read the directory described by the returned <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.  This can occur when the <em>path</em> parameter describes an existing directory.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>path</em> contains a colon character (:) that is not part of a drive label (\\\"C:\\\\\\\").</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.CreateSubdirectory(String)\n- uid: System.IO.DirectoryInfo.Delete\n  commentId: M:System.IO.DirectoryInfo.Delete\n  id: Delete\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Delete()\n  fullName: System.IO.DirectoryInfo.Delete()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delete\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 607\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Deletes this <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if it is empty.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override void Delete()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Sub Delete\n  overridden: System.IO.FileSystemInfo.Delete\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The directory contains a read-only file.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The directory described by this <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object does not exist or could not be found.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The directory is not empty. </p>\\n<p>-or-</p>\\n<p>The directory is the application's current working directory.</p>\\n<p>-or-</p>\\n<p>There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see How to: Enumerate Directories and Files.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DirectoryInfo.Delete()\n- uid: System.IO.DirectoryInfo.Delete(System.Boolean)\n  commentId: M:System.IO.DirectoryInfo.Delete(System.Boolean)\n  id: Delete(System.Boolean)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: Delete(Boolean)\n  fullName: System.IO.DirectoryInfo.Delete(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delete\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 613\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Deletes this instance of a <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, specifying whether to delete subdirectories and files.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Delete(bool recursive)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Delete(recursive As Boolean)\n    parameters:\n    - id: recursive\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to delete this directory, its subdirectories, and all files; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The directory contains a read-only file.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The directory described by this <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object does not exist or could not be found.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The directory is read-only.</p>\\n<p>-or- </p>\\n<p>The directory contains one or more files or subdirectories and <em>recursive</em> is <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The directory is the application's current working directory. </p>\\n<p>-or-</p>\\n<p>There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermissionAccess\n    commentId: T:System.Security.Permissions.FileIOPermissionAccess\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.Delete(Boolean)\n- uid: System.IO.DirectoryInfo.EnumerateDirectories\n  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories\n  id: EnumerateDirectories\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateDirectories()\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateDirectories\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 407\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of directory information in the current directory.</p>\\n\"\n  syntax:\n    content: public IEnumerable<DirectoryInfo> EnumerateDirectories()\n    content.vb: Public Function EnumerateDirectories As IEnumerable(Of DirectoryInfo)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: \"\\n<p>An enumerable collection of directories in the current directory.</p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateDirectories()\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  id: EnumerateDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateDirectories(String)\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateDirectories\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 412\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of directory information that matches a specified search pattern.</p>\\n\"\n  syntax:\n    content: public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern)\n    content.vb: Public Function EnumerateDirectories(searchPattern As String) As IEnumerable(Of DirectoryInfo)\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: \"\\n<p>An enumerable collection of directories that matches <em>searchPattern</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateDirectories(String)\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  id: EnumerateDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateDirectories(String, SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories(System.String, System.IO.SearchOption)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateDirectories\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 421\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. </p>\\n\"\n  syntax:\n    content: public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption)\n    content.vb: Public Function EnumerateDirectories(searchPattern As String, searchOption As SearchOption) As IEnumerable(Of DirectoryInfo)\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: \"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\\\"System.IO.SearchOption.TopDirectoryOnly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: \"\\n<p>An enumerable collection of directories that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>searchOption</em> is not a valid <xref href=\\\"System.IO.SearchOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateDirectories(String, SearchOption)\n- uid: System.IO.DirectoryInfo.EnumerateFiles\n  commentId: M:System.IO.DirectoryInfo.EnumerateFiles\n  id: EnumerateFiles\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateFiles()\n  fullName: System.IO.DirectoryInfo.EnumerateFiles()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateFiles\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 440\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of file information in the current directory.</p>\\n\"\n  syntax:\n    content: public IEnumerable<FileInfo> EnumerateFiles()\n    content.vb: Public Function EnumerateFiles As IEnumerable(Of FileInfo)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: \"\\n<p>An enumerable collection of the files in the current directory.</p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateFiles()\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  id: EnumerateFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateFiles(String)\n  fullName: System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateFiles\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 445\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of file information that matches a search pattern.</p>\\n\"\n  syntax:\n    content: public IEnumerable<FileInfo> EnumerateFiles(string searchPattern)\n    content.vb: Public Function EnumerateFiles(searchPattern As String) As IEnumerable(Of FileInfo)\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: \"\\n<p>An enumerable collection of files that matches <em>searchPattern</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid, (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateFiles(String)\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  id: EnumerateFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateFiles(String, SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateFiles(System.String, System.IO.SearchOption)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateFiles\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 454\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</p>\\n\"\n  syntax:\n    content: public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption)\n    content.vb: Public Function EnumerateFiles(searchPattern As String, searchOption As SearchOption) As IEnumerable(Of FileInfo)\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: \"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\\\"System.IO.SearchOption.TopDirectoryOnly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: \"\\n<p>An enumerable collection of files that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>searchOption</em> is not a valid <xref href=\\\"System.IO.SearchOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateFiles(String, SearchOption)\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  id: EnumerateFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateFileSystemInfos()\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateFileSystemInfos\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 473\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of file system information in the current directory.</p>\\n\"\n  syntax:\n    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos()\n    content.vb: Public Function EnumerateFileSystemInfos As IEnumerable(Of FileSystemInfo)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: \"\\n<p>An enumerable collection of file system information in the current directory. </p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  id: EnumerateFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateFileSystemInfos(String)\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateFileSystemInfos\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 478\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of file system information that matches a specified search pattern.</p>\\n\"\n  syntax:\n    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern)\n    content.vb: Public Function EnumerateFileSystemInfos(searchPattern As String) As IEnumerable(Of FileSystemInfo)\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: \"\\n<p>An enumerable collection of file system information objects that matches <em>searchPattern</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: EnumerateFileSystemInfos(String, SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String, System.IO.SearchOption)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnumerateFileSystemInfos\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 487\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</p>\\n\"\n  syntax:\n    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption)\n    content.vb: Public Function EnumerateFileSystemInfos(searchPattern As String, searchOption As SearchOption) As IEnumerable(Of FileSystemInfo)\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: \"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\\\"System.IO.SearchOption.TopDirectoryOnly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: \"\\n<p>An enumerable collection of file system information objects that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>searchOption</em> is not a valid <xref href=\\\"System.IO.SearchOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String, SearchOption)\n- uid: System.IO.DirectoryInfo.GetDirectories\n  commentId: M:System.IO.DirectoryInfo.GetDirectories\n  id: GetDirectories\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDirectories()\n  fullName: System.IO.DirectoryInfo.GetDirectories()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDirectories\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 320\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns the subdirectories of the current directory.</p>\\n\"\n  syntax:\n    content: public DirectoryInfo[] GetDirectories()\n    content.vb: Public Function GetDirectories As DirectoryInfo()\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: \"\\n<p>An array of <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetDirectories()\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String)\n  commentId: M:System.IO.DirectoryInfo.GetDirectories(System.String)\n  id: GetDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDirectories(String)\n  fullName: System.IO.DirectoryInfo.GetDirectories(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDirectories\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 371\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an array of directories in the current <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> matching the given search criteria.</p>\\n\"\n  syntax:\n    content: public DirectoryInfo[] GetDirectories(string searchPattern)\n    content.vb: Public Function GetDirectories(searchPattern As String) As DirectoryInfo()\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: \"\\n<p>An array of type <strong>DirectoryInfo</strong> matching <em>searchPattern</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <strong>DirectoryInfo</strong> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetDirectories(String)\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  id: GetDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDirectories(String, SearchOption)\n  fullName: System.IO.DirectoryInfo.GetDirectories(System.String, System.IO.SearchOption)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDirectories\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 383\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an array of directories in the current <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories.</p>\\n\"\n  syntax:\n    content: public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption)\n    content.vb: Public Function GetDirectories(searchPattern As String, searchOption As SearchOption) As DirectoryInfo()\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: \"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\\n\"\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: \"\\n<p>An array of type <strong>DirectoryInfo</strong> matching <em>searchPattern</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>searchOption</em> is not a valid <xref href=\\\"System.IO.SearchOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path encapsulated in the <strong>DirectoryInfo</strong> object is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetDirectories(String, SearchOption)\n- uid: System.IO.DirectoryInfo.GetFiles\n  commentId: M:System.IO.DirectoryInfo.GetFiles\n  id: GetFiles\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFiles()\n  fullName: System.IO.DirectoryInfo.GetFiles()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFiles\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 314\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns a file list from the current directory.</p>\\n\"\n  syntax:\n    content: public FileInfo[] GetFiles()\n    content.vb: Public Function GetFiles As FileInfo()\n    return:\n      type: System.IO.FileInfo[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path is invalid, such as being on an unmapped drive. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetFiles()\n- uid: System.IO.DirectoryInfo.GetFiles(System.String)\n  commentId: M:System.IO.DirectoryInfo.GetFiles(System.String)\n  id: GetFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFiles(String)\n  fullName: System.IO.DirectoryInfo.GetFiles(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFiles\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 279\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns a file list from the current directory matching the given search pattern.</p>\\n\"\n  syntax:\n    content: public FileInfo[] GetFiles(string searchPattern)\n    content.vb: Public Function GetFiles(searchPattern As String) As FileInfo()\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    return:\n      type: System.IO.FileInfo[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetFiles(String)\n- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  id: GetFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFiles(String, SearchOption)\n  fullName: System.IO.DirectoryInfo.GetFiles(System.String, System.IO.SearchOption)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFiles\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 290\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</p>\\n\"\n  syntax:\n    content: public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption)\n    content.vb: Public Function GetFiles(searchPattern As String, searchOption As SearchOption) As FileInfo()\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: \"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\\n\"\n    return:\n      type: System.IO.FileInfo[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>searchOption</em> is not a valid <xref href=\\\"System.IO.SearchOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetFiles(String, SearchOption)\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos\n  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos\n  id: GetFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFileSystemInfos()\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFileSystemInfos\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 363\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns an array of strongly typed <xref href=\\\"System.IO.FileSystemInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> entries representing all the files and subdirectories in a directory.</p>\\n\"\n  syntax:\n    content: public FileSystemInfo[] GetFileSystemInfos()\n    content.vb: Public Function GetFileSystemInfos As FileSystemInfo()\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: \"\\n<p>An array of strongly typed <xref href=\\\"System.IO.FileSystemInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> entries.</p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  seealso:\n  - type: System.IO.FileSystemInfo\n    commentId: T:System.IO.FileSystemInfo\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetFileSystemInfos()\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  id: GetFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFileSystemInfos(String)\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFileSystemInfos\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 327\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Retrieves an array of strongly typed <xref href=\\\"System.IO.FileSystemInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects representing the files and subdirectories that match the specified search criteria.</p>\\n\"\n  syntax:\n    content: public FileSystemInfo[] GetFileSystemInfos(string searchPattern)\n    content.vb: Public Function GetFileSystemInfos(searchPattern As String) As FileSystemInfo()\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: \"\\n<p>An array of strongly typed <strong>FileSystemInfo</strong> objects matching the search criteria.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.IO.FileSystemInfo\n    commentId: T:System.IO.FileSystemInfo\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String)\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  id: GetFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFileSystemInfos(String, SearchOption)\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(System.String, System.IO.SearchOption)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFileSystemInfos\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 338\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Retrieves an array of <xref href=\\\"System.IO.FileSystemInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the files and subdirectories matching the specified search criteria.</p>\\n\"\n  syntax:\n    content: public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption)\n    content.vb: Public Function GetFileSystemInfos(searchPattern As String, searchOption As SearchOption) As FileSystemInfo()\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: \"\\n<p>The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \\\"*\\\", which returns all files.</p>\\n\"\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: \"\\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\\\"System.IO.SearchOption.TopDirectoryOnly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: \"\\n<p>An array of file system entries that match the search criteria.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>searchPattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>searchOption</em> is not a valid <xref href=\\\"System.IO.SearchOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String, SearchOption)\n- uid: System.IO.DirectoryInfo.MoveTo(System.String)\n  commentId: M:System.IO.DirectoryInfo.MoveTo(System.String)\n  id: MoveTo(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: MoveTo(String)\n  fullName: System.IO.DirectoryInfo.MoveTo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MoveTo\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 535\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Moves a <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance and its contents to a new path.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void MoveTo(string destDirName)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub MoveTo(destDirName As String)\n    parameters:\n    - id: destDirName\n      type: System.String\n      description: \"\\n<p>The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destDirName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>destDirName</em> is an empty string (''\\\"). </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An attempt was made to move a directory to a different volume. </p>\\n<p>-or-</p>\\n<p>\\n<em>destDirName</em> already exists.</p>\\n<p>-or-</p>\\n<p>You are not authorized to access this path.</p>\\n<p>-or- </p>\\n<p>The directory being moved and the destination directory have the same name.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The destination directory cannot be found.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DirectoryInfo.MoveTo(String)\n- uid: System.IO.DirectoryInfo.ToString\n  commentId: M:System.IO.DirectoryInfo.ToString\n  id: ToString\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.IO.DirectoryInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/IO/DirectoryInfo.cs\n    startLine: 620\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns the original path that was passed by the user.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the original path that was passed by the user.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DirectoryInfo.ToString()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IO.FileSystemInfo\n  parent: System.IO\n  isExternal: false\n  name: FileSystemInfo\n  fullName: System.IO.FileSystemInfo\n  nameWithType: FileSystemInfo\n  commentId: T:System.IO.FileSystemInfo\n- uid: System.IO.FileSystemInfo.FullPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullPath\n  fullName: System.IO.FileSystemInfo.FullPath\n  nameWithType: FileSystemInfo.FullPath\n  commentId: F:System.IO.FileSystemInfo.FullPath\n- uid: System.IO.FileSystemInfo.OriginalPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: OriginalPath\n  fullName: System.IO.FileSystemInfo.OriginalPath\n  nameWithType: FileSystemInfo.OriginalPath\n  commentId: F:System.IO.FileSystemInfo.OriginalPath\n- uid: System.IO.FileSystemInfo.Attributes\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Attributes\n  fullName: System.IO.FileSystemInfo.Attributes\n  nameWithType: FileSystemInfo.Attributes\n  commentId: P:System.IO.FileSystemInfo.Attributes\n- uid: System.IO.FileSystemInfo.CreationTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTime\n  fullName: System.IO.FileSystemInfo.CreationTime\n  nameWithType: FileSystemInfo.CreationTime\n  commentId: P:System.IO.FileSystemInfo.CreationTime\n- uid: System.IO.FileSystemInfo.CreationTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTimeUtc\n  fullName: System.IO.FileSystemInfo.CreationTimeUtc\n  nameWithType: FileSystemInfo.CreationTimeUtc\n  commentId: P:System.IO.FileSystemInfo.CreationTimeUtc\n- uid: System.IO.FileSystemInfo.Extension\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Extension\n  fullName: System.IO.FileSystemInfo.Extension\n  nameWithType: FileSystemInfo.Extension\n  commentId: P:System.IO.FileSystemInfo.Extension\n- uid: System.IO.FileSystemInfo.FullName\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullName\n  fullName: System.IO.FileSystemInfo.FullName\n  nameWithType: FileSystemInfo.FullName\n  commentId: P:System.IO.FileSystemInfo.FullName\n- uid: System.IO.FileSystemInfo.LastAccessTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTime\n  fullName: System.IO.FileSystemInfo.LastAccessTime\n  nameWithType: FileSystemInfo.LastAccessTime\n  commentId: P:System.IO.FileSystemInfo.LastAccessTime\n- uid: System.IO.FileSystemInfo.LastAccessTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTimeUtc\n  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc\n  nameWithType: FileSystemInfo.LastAccessTimeUtc\n  commentId: P:System.IO.FileSystemInfo.LastAccessTimeUtc\n- uid: System.IO.FileSystemInfo.LastWriteTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTime\n  fullName: System.IO.FileSystemInfo.LastWriteTime\n  nameWithType: FileSystemInfo.LastWriteTime\n  commentId: P:System.IO.FileSystemInfo.LastWriteTime\n- uid: System.IO.FileSystemInfo.LastWriteTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTimeUtc\n  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc\n  nameWithType: FileSystemInfo.LastWriteTimeUtc\n  commentId: P:System.IO.FileSystemInfo.LastWriteTimeUtc\n- uid: System.IO.FileSystemInfo.Refresh\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Refresh()\n  fullName: System.IO.FileSystemInfo.Refresh()\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo.Refresh\n    name: Refresh\n    fullName: System.IO.FileSystemInfo.Refresh\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.FileSystemInfo.Refresh\n    name: Refresh\n    fullName: System.IO.FileSystemInfo.Refresh\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: FileSystemInfo.Refresh()\n  commentId: M:System.IO.FileSystemInfo.Refresh\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IO.FileSystemInfo.Exists\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Exists\n  fullName: System.IO.FileSystemInfo.Exists\n  nameWithType: FileSystemInfo.Exists\n  commentId: P:System.IO.FileSystemInfo.Exists\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IO.FileSystemInfo.Name\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Name\n  fullName: System.IO.FileSystemInfo.Name\n  nameWithType: FileSystemInfo.Name\n  commentId: P:System.IO.FileSystemInfo.Name\n- uid: System.IO.DirectoryInfo\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n  nameWithType: DirectoryInfo\n  commentId: T:System.IO.DirectoryInfo\n- uid: System.IO.FileSystemInfo.Delete\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Delete()\n  fullName: System.IO.FileSystemInfo.Delete()\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo.Delete\n    name: Delete\n    fullName: System.IO.FileSystemInfo.Delete\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.FileSystemInfo.Delete\n    name: Delete\n    fullName: System.IO.FileSystemInfo.Delete\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: FileSystemInfo.Delete()\n  commentId: M:System.IO.FileSystemInfo.Delete\n- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<DirectoryInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.IO.DirectoryInfo)\n  name.vb: IEnumerable(Of DirectoryInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    fullName: System.IO.DirectoryInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    fullName: System.IO.DirectoryInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<DirectoryInfo>\n  nameWithType.vb: IEnumerable(Of DirectoryInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.IO.SearchOption\n  parent: System.IO\n  isExternal: false\n  name: SearchOption\n  fullName: System.IO.SearchOption\n  nameWithType: SearchOption\n  commentId: T:System.IO.SearchOption\n- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<FileInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.IO.FileInfo)\n  name.vb: IEnumerable(Of FileInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    fullName: System.IO.FileInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    fullName: System.IO.FileInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<FileInfo>\n  nameWithType.vb: IEnumerable(Of FileInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<FileSystemInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.IO.FileSystemInfo)\n  name.vb: IEnumerable(Of FileSystemInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    fullName: System.IO.FileSystemInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    fullName: System.IO.FileSystemInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<FileSystemInfo>\n  nameWithType.vb: IEnumerable(Of FileSystemInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n- uid: System.IO.DirectoryInfo[]\n  name: DirectoryInfo[]\n  fullName: System.IO.DirectoryInfo[]\n  fullname.vb: System.IO.DirectoryInfo()\n  name.vb: DirectoryInfo()\n  spec.csharp:\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    fullName: System.IO.DirectoryInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    fullName: System.IO.DirectoryInfo\n  - name: ()\n    fullName: ()\n  nameWithType: DirectoryInfo[]\n  nameWithType.vb: DirectoryInfo()\n- uid: System.IO.FileInfo[]\n  name: FileInfo[]\n  fullName: System.IO.FileInfo[]\n  fullname.vb: System.IO.FileInfo()\n  name.vb: FileInfo()\n  spec.csharp:\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    fullName: System.IO.FileInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    fullName: System.IO.FileInfo\n  - name: ()\n    fullName: ()\n  nameWithType: FileInfo[]\n  nameWithType.vb: FileInfo()\n- uid: System.IO.FileSystemInfo[]\n  name: FileSystemInfo[]\n  fullName: System.IO.FileSystemInfo[]\n  fullname.vb: System.IO.FileSystemInfo()\n  name.vb: FileSystemInfo()\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    fullName: System.IO.FileSystemInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    fullName: System.IO.FileSystemInfo\n  - name: ()\n    fullName: ()\n  nameWithType: FileSystemInfo[]\n  nameWithType.vb: FileSystemInfo()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.IO.PathTooLongException\n  isExternal: false\n  name: PathTooLongException\n  fullName: System.IO.PathTooLongException\n  nameWithType: PathTooLongException\n  commentId: T:System.IO.PathTooLongException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: false\n  name: DirectoryNotFoundException\n  fullName: System.IO.DirectoryNotFoundException\n  nameWithType: DirectoryNotFoundException\n  commentId: T:System.IO.DirectoryNotFoundException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}