{"nodes":[{"pos":[427,447],"content":"WaitHandleExtensions","needQuote":true,"nodes":[{"content":"WaitHandleExtensions","pos":[0,20]}]},{"pos":[1871,1900],"content":"GetSafeWaitHandle(WaitHandle)","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle(WaitHandle)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A native operating system handle.","pos":[2842,2880],"source":"\\n<p>A native operating system handle."},{"content":"&lt;/p&gt;\\n","pos":[2881,2887],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The safe wait handle that wraps the native operating system wait handle.","pos":[2976,3053],"source":"\\n<p>The safe wait handle that wraps the native operating system wait handle."},{"content":"&lt;/p&gt;\\n","pos":[3054,3060],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandle&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3179,3231],"source":"\\n<p>\\n<em>waitHandle</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3232,3238],"source":" </p>\\n"},{"pos":[4012,4057],"content":"SetSafeWaitHandle(WaitHandle, SafeWaitHandle)","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle(WaitHandle, SafeWaitHandle)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.","pos":[5055,5181],"source":"\\n<p>A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource."},{"content":"&lt;/p&gt;\\n","pos":[5182,5188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The safe handle to wrap the operating system handle.","pos":[5281,5338],"source":"\\n<p>The safe handle to wrap the operating system handle."},{"content":"&lt;/p&gt;\\n","pos":[5339,5345],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;waitHandle&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5464,5516],"source":"\\n<p>\\n<em>waitHandle</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5517,5523],"source":" </p>\\n"},{"pos":[5894,5910],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[6071,6077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6237,6247],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6342,6350],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6419,6420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6447,6448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6518,6526],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6595,6596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6623,6624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6807,6821],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6940,6946],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7013,7014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7064,7070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7130,7131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7214,7220],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7287,7288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7338,7344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7404,7405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7619,7641],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7789,7795],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7862,7863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7913,7919],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7980,7981]},{"pos":[8036,8042],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8102,8103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8200,8206],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8273,8274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8324,8330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8391,8392]},{"pos":[8447,8453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8513,8514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8759,8790],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8956,8971],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9047,9048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9098,9104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9165,9166]},{"pos":[9221,9227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9287,9288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9394,9409],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9485,9486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9536,9542],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9603,9604]},{"pos":[9659,9665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9725,9726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9956,9969],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10070,10081],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10153,10154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10181,10182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10255,10266],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10338,10339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10366,10367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10542,10551],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10644,10651],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10719,10720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10747,10748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10817,10824],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10892,10893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10920,10921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11096,11113],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11222,11237],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11313,11314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11341,11342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11419,11434],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11510,11511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11538,11539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11684,11690],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11845,11855],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[12082,12096],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[12304,12331],"content":"Microsoft.Win32.SafeHandles","needQuote":true,"nodes":[{"content":"Microsoft.Win32.SafeHandles","pos":[0,27]}]},{"pos":[12523,12544],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Threading.WaitHandleExtensions\n  commentId: T:System.Threading.WaitHandleExtensions\n  id: WaitHandleExtensions\n  parent: System.Threading\n  children:\n  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  langs:\n  - csharp\n  - vb\n  name: WaitHandleExtensions\n  fullName: System.Threading.WaitHandleExtensions\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitHandleExtensions\n    path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs\n    startLine: 11\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Threading\n  summary: \"\\n<p>Provides convenience methods to for working with a safe handle for a wait handle. </p>\\n\"\n  syntax:\n    content: public class WaitHandleExtensions\n    content.vb: Public Class WaitHandleExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: WaitHandleExtensions\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  id: GetSafeWaitHandle(System.Threading.WaitHandle)\n  isExtensionMethod: true\n  parent: System.Threading.WaitHandleExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetSafeWaitHandle(WaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSafeWaitHandle\n    path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs\n    startLine: 18\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the safe handle for a native operating system wait handle. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static SafeWaitHandle GetSafeWaitHandle(this WaitHandle waitHandle)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ExtensionAttribute>\n\n      Public Shared Function GetSafeWaitHandle(waitHandle As WaitHandle) As SafeWaitHandle\n    parameters:\n    - id: waitHandle\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A native operating system handle. </p>\\n\"\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeWaitHandle\n      description: \"\\n<p>The safe wait handle that wraps the native operating system wait handle. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>waitHandle</em> is <strong>null</strong>. </p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  id: SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  isExtensionMethod: true\n  parent: System.Threading.WaitHandleExtensions\n  langs:\n  - csharp\n  - vb\n  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetSafeWaitHandle\n    path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a safe handle for a native operating system wait handle. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void SetSafeWaitHandle(this WaitHandle waitHandle, SafeWaitHandle value)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ExtensionAttribute>\n\n      Public Shared Sub SetSafeWaitHandle(waitHandle As WaitHandle, value As SafeWaitHandle)\n    parameters:\n    - id: waitHandle\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource. </p>\\n\"\n    - id: value\n      type: Microsoft.Win32.SafeHandles.SafeWaitHandle\n      description: \"\\n<p>The safe handle to wrap the operating system handle. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>waitHandle</em> is <strong>null</strong>. </p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeWaitHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  nameWithType: SafeWaitHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeWaitHandle\n- uid: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles\n  fullName: Microsoft.Win32.SafeHandles\n  nameWithType: Microsoft.Win32.SafeHandles\n  commentId: N:Microsoft.Win32.SafeHandles\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}