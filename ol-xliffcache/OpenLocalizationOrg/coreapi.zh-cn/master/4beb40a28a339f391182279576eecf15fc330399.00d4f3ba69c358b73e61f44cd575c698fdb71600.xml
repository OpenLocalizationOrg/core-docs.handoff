{"nodes":[{"pos":[1230,1241],"content":"TraceSource","needQuote":true,"nodes":[{"content":"TraceSource","pos":[0,11]}]},{"pos":[2601,2620],"content":"TraceSource(String)","needQuote":true,"nodes":[{"content":"TraceSource(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The name of the source (typically, the name of the application).&lt;/p&gt;\\n","pos":[3461,3536],"source":"\\n<p>The name of the source (typically, the name of the application).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3655,3707],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[4292,4325],"content":"TraceSource(String, SourceLevels)","needQuote":true,"nodes":[{"content":"TraceSource(String, SourceLevels)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The name of the source, typically the name of the application.&lt;/p&gt;\\n","pos":[5315,5388],"source":"\\n<p>The name of the source, typically the name of the application.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specifies the default source level at which to trace.&lt;/p&gt;\\n","pos":[5477,5594],"source":"\\n<p>A bitwise combination of the enumeration values that specifies the default source level at which to trace.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5713,5765],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[6233,6242],"content":"Listeners","needQuote":true,"nodes":[{"content":"Listeners","pos":[0,9]}]},{"pos":[7646,7650],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The name of the trace source.&lt;/p&gt;\\n","pos":[8332,8372],"source":"\\n<p>The name of the trace source.</p>\\n"},{"pos":[8673,8679],"content":"Switch","needQuote":true,"nodes":[{"content":"Switch","pos":[0,6]}]},{"pos":[10232,10239],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[11250,11257],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[11985,12054],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[12532,12572],"content":"TraceData(TraceEventType, Int32, Object)","needQuote":true,"nodes":[{"content":"TraceData(TraceEventType, Int32, Object)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the event type of the trace data.&lt;/p&gt;\\n","pos":[13702,13791],"source":"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[13851,13897],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;The trace data.&lt;/p&gt;\\n","pos":[13960,13986],"source":"\\n<p>The trace data.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[14109,14178],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[14890,14932],"content":"TraceData(TraceEventType, Int32, Object[])","needQuote":true,"nodes":[{"content":"TraceData(TraceEventType, Int32, Object[])","pos":[0,42]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the event type of the trace data.&lt;/p&gt;\\n","pos":[16092,16181],"source":"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[16241,16287],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;An object array containing the trace data.&lt;/p&gt;\\n","pos":[16352,16405],"source":"\\n<p>An object array containing the trace data.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[16528,16597],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[17516,17549],"content":"TraceEvent(TraceEventType, Int32)","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventType, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the event type of the trace data.&lt;/p&gt;\\n","pos":[18637,18726],"source":"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[18786,18832],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[18955,19024],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[19726,19767],"content":"TraceEvent(TraceEventType, Int32, String)","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventType, Int32, String)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the event type of the trace data.&lt;/p&gt;\\n","pos":[20915,21004],"source":"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[21064,21110],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;The trace message to write.&lt;/p&gt;\\n","pos":[21176,21214],"source":"\\n<p>The trace message to write.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[21337,21406],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[22164,22215],"content":"TraceEvent(TraceEventType, Int32, String, Object[])","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventType, Int32, String, Object[])","pos":[0,51]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the event type of the trace data.&lt;/p&gt;\\n","pos":[23439,23528],"source":"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[23588,23634],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[23699,23867],"source":"\\n<p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[23932,24018],"source":"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24137,24185],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24186,24192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.","pos":[24285,24479],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format."},{"content":"&lt;/p&gt;\\n","pos":[24480,24486],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[24595,24664],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[25545,25569],"content":"TraceInformation(String)","needQuote":true,"nodes":[{"content":"TraceInformation(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The informative message to write.&lt;/p&gt;\\n","pos":[26561,26605],"source":"\\n<p>The informative message to write.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[26728,26797],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[27415,27449],"content":"TraceInformation(String, Object[])","needQuote":true,"nodes":[{"content":"TraceInformation(String, Object[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[28538,28706],"source":"\\n<p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[28771,28833],"source":"\\n<p>An array containing zero or more objects to format.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28952,29000],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29001,29007],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.","pos":[29100,29294],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format."},{"content":"&lt;/p&gt;\\n","pos":[29295,29301],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An attempt was made to trace an event during finalization.&lt;/p&gt;\\n","pos":[29410,29479],"source":"\\n<p>An attempt was made to trace an event during finalization.</p>\\n"},{"pos":[30070,30088],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[30255,30261],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30421,30431],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30526,30534],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30603,30604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30631,30632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30702,30710],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30779,30780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30807,30808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30991,31005],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31124,31130],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31197,31198],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31248,31254],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31314,31315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31398,31404],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31471,31472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31522,31528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31588,31589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31803,31825],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[31973,31979],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32046,32047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32097,32103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32164,32165]},{"pos":[32220,32226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32286,32287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32384,32390],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32457,32458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32508,32514],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32575,32576]},{"pos":[32631,32637],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32697,32698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32943,32974],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33140,33155],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33231,33232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33282,33288],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33349,33350]},{"pos":[33405,33411],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33471,33472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33578,33593],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33669,33670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33720,33726],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33787,33788]},{"pos":[33843,33849],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33909,33910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34140,34153],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34254,34265],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34337,34338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34365,34366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34439,34450],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34522,34523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34550,34551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34726,34735],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[34828,34835],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34903,34904],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34931,34932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35001,35008],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35076,35077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35104,35105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35280,35297],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[35406,35421],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35497,35498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35525,35526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35603,35618],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35694,35695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35722,35723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35868,35874],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36005,36011],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36186,36198],"content":"SourceLevels","needQuote":true,"nodes":[{"content":"SourceLevels","pos":[0,12]}]},{"pos":[36426,36449],"content":"TraceListenerCollection","needQuote":true,"nodes":[{"content":"TraceListenerCollection","pos":[0,23]}]},{"pos":[36699,36711],"content":"SourceSwitch","needQuote":true,"nodes":[{"content":"SourceSwitch","pos":[0,12]}]},{"pos":[36930,36944],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[37136,37141],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37248,37256],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[37384,37390],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[37451,37453]},{"pos":[37518,37524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37584,37586],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[37721,37742],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[37943,37960],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[38138,38161],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[38366,38381],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Diagnostics.TraceSource\n  commentId: T:System.Diagnostics.TraceSource\n  id: TraceSource\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.TraceSource.#ctor(System.String)\n  - System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)\n  - System.Diagnostics.TraceSource.Close\n  - System.Diagnostics.TraceSource.Flush\n  - System.Diagnostics.TraceSource.Listeners\n  - System.Diagnostics.TraceSource.Name\n  - System.Diagnostics.TraceSource.Switch\n  - System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.TraceSource.TraceInformation(System.String)\n  - System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])\n  langs:\n  - csharp\n  - vb\n  name: TraceSource\n  fullName: System.Diagnostics.TraceSource\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceSource\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 11\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source. </p>\\n\"\n  syntax:\n    content: public class TraceSource\n    content.vb: Public Class TraceSource\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TraceSource\n- uid: System.Diagnostics.TraceSource.#ctor(System.String)\n  commentId: M:System.Diagnostics.TraceSource.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceSource(String)\n  fullName: System.Diagnostics.TraceSource.TraceSource(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 22\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.TraceSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using the specified name for the source. </p>\\n\"\n  syntax:\n    content: public TraceSource(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the source (typically, the name of the application).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string (\\\"\\\").</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.TraceSource(String)\n- uid: System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)\n  commentId: M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)\n  id: '#ctor(System.String,System.Diagnostics.SourceLevels)'\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceSource(String, SourceLevels)\n  fullName: System.Diagnostics.TraceSource.TraceSource(System.String, System.Diagnostics.SourceLevels)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 27\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.TraceSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using the specified name for the source and the default source level at which tracing is to occur.  </p>\\n\"\n  syntax:\n    content: public TraceSource(string name, SourceLevels defaultLevel)\n    content.vb: Public Sub New(name As String, defaultLevel As SourceLevels)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the source, typically the name of the application.</p>\\n\"\n    - id: defaultLevel\n      type: System.Diagnostics.SourceLevels\n      description: \"\\n<p>A bitwise combination of the enumeration values that specifies the default source level at which to trace.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string (\\\"\\\").</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.TraceSource(String, SourceLevels)\n- uid: System.Diagnostics.TraceSource.Listeners\n  commentId: P:System.Diagnostics.TraceSource.Listeners\n  id: Listeners\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: Listeners\n  fullName: System.Diagnostics.TraceSource.Listeners\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Listeners\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 417\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the collection of trace listeners for the trace source.</p>\\n\"\n  syntax:\n    content: public TraceListenerCollection Listeners { get; }\n    content.vb: Public ReadOnly Property Listeners As TraceListenerCollection\n    parameters: []\n    return:\n      type: System.Diagnostics.TraceListenerCollection\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the active trace listeners associated with the source. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TraceSource.Listeners\n- uid: System.Diagnostics.TraceSource.Name\n  commentId: P:System.Diagnostics.TraceSource.Name\n  id: Name\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Diagnostics.TraceSource.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 409\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the name of the trace source.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the trace source.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TraceSource.Name\n- uid: System.Diagnostics.TraceSource.Switch\n  commentId: P:System.Diagnostics.TraceSource.Switch\n  id: Switch\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: Switch\n  fullName: System.Diagnostics.TraceSource.Switch\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 427\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the source switch value.</p>\\n\"\n  syntax:\n    content: public SourceSwitch Switch { get; set; }\n    content.vb: Public Property Switch As SourceSwitch\n    parameters: []\n    return:\n      type: System.Diagnostics.SourceSwitch\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.SourceSwitch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the source switch value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<xref href=\\\"System.Diagnostics.TraceSource.Switch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.Switch\n- uid: System.Diagnostics.TraceSource.Close\n  commentId: M:System.Diagnostics.TraceSource.Close\n  id: Close\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: Close()\n  fullName: System.Diagnostics.TraceSource.Close()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Close\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 94\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Closes all the trace listeners in the trace listener collection.</p>\\n\"\n  syntax:\n    content: public void Close()\n    content.vb: Public Sub Close\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.Close()\n- uid: System.Diagnostics.TraceSource.Flush\n  commentId: M:System.Diagnostics.TraceSource.Flush\n  id: Flush\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.Diagnostics.TraceSource.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Flush\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 110\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Flushes all the trace listeners in the trace listener collection.</p>\\n\"\n  syntax:\n    content: public void Flush()\n    content.vb: Public Sub Flush\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.Flush()\n- uid: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  commentId: M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceData(TraceEventType, Int32, Object)\n  fullName: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceData\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 305\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace data to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified event type, event identifier, and trace data.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceData(TraceEventType eventType, int id, object data)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceData(eventType As TraceEventType, id As Integer, data As Object)\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: data\n      type: System.Object\n      description: \"\\n<p>The trace data.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.TraceData(TraceEventType, Int32, Object)\n- uid: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  commentId: M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceData(TraceEventType, Int32, Object[])\n  fullName: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceData\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 350\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace data to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified event type, event identifier, and trace data array.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceData(TraceEventType eventType, int id, params object[] data)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceData(eventType As TraceEventType, id As Integer, ParamArray data As Object())\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: data\n      type: System.Object[]\n      description: \"\\n<p>An object array containing the trace data.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object())\n  name.vb: TraceData(TraceEventType, Int32, Object())\n  nameWithType: TraceSource.TraceData(TraceEventType, Int32, Object[])\n  nameWithType.vb: TraceSource.TraceData(TraceEventType, Int32, Object())\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  commentId: M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  id: TraceEvent(System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventType, Int32)\n  fullName: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 170\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a trace event message to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified event type and event identifier.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceEvent(TraceEventType eventType, int id)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceEvent(eventType As TraceEventType, id As Integer)\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.TraceEvent(TraceEventType, Int32)\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  commentId: M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventType, Int32, String)\n  fullName: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 215\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a trace event message to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified event type, event identifier, and message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceEvent(TraceEventType eventType, int id, string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceEvent(eventType As TraceEventType, id As Integer, message As String)\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The trace message to write.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.TraceEvent(TraceEventType, Int32, String)\n- uid: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  commentId: M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventType, Int32, String, Object[])\n  fullName: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 260\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a trace event to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified event type, event identifier, and argument array and format.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceEvent(TraceEventType eventType, int id, string format, params object[] args)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceEvent(eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the enumeration values that specifies the event type of the trace data.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object())\n  name.vb: TraceEvent(TraceEventType, Int32, String, Object())\n  nameWithType: TraceSource.TraceEvent(TraceEventType, Int32, String, Object[])\n  nameWithType.vb: TraceSource.TraceEvent(TraceEventType, Int32, String, Object())\n- uid: System.Diagnostics.TraceSource.TraceInformation(System.String)\n  commentId: M:System.Diagnostics.TraceSource.TraceInformation(System.String)\n  id: TraceInformation(System.String)\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceInformation(String)\n  fullName: System.Diagnostics.TraceSource.TraceInformation(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceInformation\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 395\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes an informational message to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceInformation(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceInformation(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>The informative message to write.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TraceSource.TraceInformation(String)\n- uid: System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])\n  commentId: M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])\n  id: TraceInformation(System.String,System.Object[])\n  parent: System.Diagnostics.TraceSource\n  langs:\n  - csharp\n  - vb\n  name: TraceInformation(String, Object[])\n  fullName: System.Diagnostics.TraceSource.TraceInformation(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceInformation\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceSource.cs\n    startLine: 402\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes an informational message to the trace listeners in the <xref href=\\\"System.Diagnostics.TraceSource.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified object array and formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public void TraceInformation(string format, params object[] args)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Sub TraceInformation(format As String, ParamArray args As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array containing zero or more objects to format.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to trace an event during finalization.</p>\\n\"\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.TraceSource.TraceInformation(System.String, System.Object())\n  name.vb: TraceInformation(String, Object())\n  nameWithType: TraceSource.TraceInformation(String, Object[])\n  nameWithType.vb: TraceSource.TraceInformation(String, Object())\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.SourceLevels\n  parent: System.Diagnostics\n  isExternal: false\n  name: SourceLevels\n  fullName: System.Diagnostics.SourceLevels\n  nameWithType: SourceLevels\n  commentId: T:System.Diagnostics.SourceLevels\n- uid: System.Diagnostics.TraceListenerCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  commentId: T:System.Diagnostics.TraceListenerCollection\n- uid: System.Diagnostics.SourceSwitch\n  parent: System.Diagnostics\n  isExternal: false\n  name: SourceSwitch\n  fullName: System.Diagnostics.SourceSwitch\n  nameWithType: SourceSwitch\n  commentId: T:System.Diagnostics.SourceSwitch\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}