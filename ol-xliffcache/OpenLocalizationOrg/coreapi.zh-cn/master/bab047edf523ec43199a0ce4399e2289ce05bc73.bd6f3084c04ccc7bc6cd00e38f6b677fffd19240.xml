{"nodes":[{"pos":[2043,2060],"content":"OrderedDictionary","needQuote":true,"nodes":[{"content":"OrderedDictionary","pos":[0,17]}]},{"pos":[4080,4099],"content":"OrderedDictionary()","needQuote":true,"nodes":[{"content":"OrderedDictionary()","pos":[0,19]}]},{"pos":[5343,5379],"content":"OrderedDictionary(IEqualityComparer)","needQuote":true,"nodes":[{"content":"OrderedDictionary(IEqualityComparer)","pos":[0,36]}]},{"pos":[7157,7181],"content":"OrderedDictionary(Int32)","needQuote":true,"nodes":[{"content":"OrderedDictionary(Int32)","pos":[0,24]}]},{"pos":[8816,8859],"content":"OrderedDictionary(Int32, IEqualityComparer)","needQuote":true,"nodes":[{"content":"OrderedDictionary(Int32, IEqualityComparer)","pos":[0,43]}]},{"pos":[10919,10924],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[12418,12428],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[14046,14057],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the value to get or set.&lt;/p&gt;\\n","pos":[14858,14917],"source":"\\n<p>The zero-based index of the value to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the item at the specified index.","pos":[14977,15027],"source":"\\n<p>The value of the item at the specified index."},{"content":"&lt;/p&gt;\\n","pos":[15028,15034],"source":" </p>\\n"},{"pos":[16320,16332],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key of the value to get or set.&lt;/p&gt;\\n","pos":[17131,17177],"source":"\\n<p>The key of the value to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The value associated with the specified key.","pos":[17237,17286],"source":"\\n<p>The value associated with the specified key."},{"content":"If the specified key is not found, attempting to get it returns &lt;strong&gt;null&lt;/strong&gt;, and attempting to set it creates a new element using the specified key.&lt;/p&gt;\\n","pos":[17287,17451],"source":" If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\\n"},{"pos":[18333,18337],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[20136,20162],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"content":"\\n&lt;p&gt;This method always returns &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21246,21307],"source":"\\n<p>This method always returns <strong>false</strong>.</p>\\n"},{"pos":[21985,22005],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[23891,23914],"content":"IDictionary.IsFixedSize","needQuote":true,"nodes":[{"content":"IDictionary.IsFixedSize","pos":[0,23]}]},{"pos":[25748,25754],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[27516,27535],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The key of the entry to add.&lt;/p&gt;\\n","pos":[28503,28542],"source":"\\n<p>The key of the entry to add.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the entry to add.","pos":[28606,28641],"source":"\\n<p>The value of the entry to add."},{"content":"This value can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28642,28688],"source":" This value can be <strong>null</strong>.</p>\\n"},{"pos":[29404,29416],"content":"AsReadOnly()","needQuote":true,"nodes":[{"content":"AsReadOnly()","pos":[0,12]}]},{"pos":[30844,30851],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[32323,32339],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[34219,34239],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[35811,35885],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"pos":[36345,36360],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[38303,38332],"content":"Insert(Int32, Object, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object, Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The zero-based index at which the element should be inserted.&lt;/p&gt;\\n","pos":[39353,39425],"source":"\\n<p>The zero-based index at which the element should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The key of the entry to add.&lt;/p&gt;\\n","pos":[39487,39526],"source":"\\n<p>The key of the entry to add.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the entry to add.","pos":[39590,39625],"source":"\\n<p>The value of the entry to add."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39626,39671],"source":" The value can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is out of range.&lt;/p&gt;\\n","pos":[39802,39846],"source":"\\n<p>\\n<em>index</em> is out of range.</p>\\n"},{"content":"\\n&lt;p&gt;This collection is read-only.&lt;/p&gt;\\n","pos":[39951,39991],"source":"\\n<p>This collection is read-only.</p>\\n"},{"pos":[40518,40532],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key of the entry to remove.&lt;/p&gt;\\n","pos":[41428,41470],"source":"\\n<p>The key of the entry to remove.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41842,41893],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[42362,42377],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based index of the entry to remove.&lt;/p&gt;\\n","pos":[43283,43338],"source":"\\n<p>The zero-based index of the entry to remove.</p>\\n"},{"pos":[44522,44549],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[46281,46311],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[46514,46520],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46725,46743],"content":"IOrderedDictionary","needQuote":true,"nodes":[{"content":"IOrderedDictionary","pos":[0,18]}]},{"pos":[47001,47012],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[47225,47236],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[47449,47460],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[47659,47669],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[47764,47772],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[47841,47842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47869,47870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47940,47948],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48017,48018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48045,48046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48229,48243],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[48362,48368],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48435,48436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48486,48492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48552,48553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48636,48642],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48709,48710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48760,48766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48826,48827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49041,49063],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49211,49217],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49284,49285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49335,49341],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49402,49403]},{"pos":[49458,49464],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49524,49525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49622,49628],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49695,49696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49746,49752],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49813,49814]},{"pos":[49869,49875],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49935,49936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50181,50212],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[50378,50393],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50469,50470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50520,50526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50587,50588]},{"pos":[50643,50649],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50709,50710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50816,50831],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50907,50908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50958,50964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51025,51026]},{"pos":[51081,51087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51147,51148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51378,51391],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[51492,51503],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51575,51576],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51603,51604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51677,51688],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51760,51761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51788,51789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51964,51973],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52066,52073],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52141,52142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52169,52170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52239,52246],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52314,52315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52342,52343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52518,52535],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[52644,52659],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52735,52736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52763,52764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52841,52856],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52932,52933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52960,52961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53256,53269],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[53386,53397],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[53456,53457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53484,53485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53566,53577],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[53636,53637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53664,53665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54020,54032],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[54165,54175],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[54242,54243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54270,54271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54360,54370],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[54437,54438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54465,54466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54807,54822],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[55026,55039],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[55101,55102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55129,55130],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55208,55224],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[55289,55290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55317,55318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55696,55713],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[55925,55940],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[56004,56005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56032,56033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56113,56131],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[56198,56199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56226,56227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56462,56468],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[56587,56605],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[56806,56830],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[57009,57020],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[57079,57080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57147,57158],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[57235,57236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57349,57360],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[57419,57420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57487,57498],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[57575,57576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57804,57813],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[58019,58042],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[58237,58247],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[58314,58315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58382,58393],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[58470,58471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58592,58602],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[58669,58670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58737,58748],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[58825,58826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59079,59097],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[59319,59345],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[59652,59665],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[59727,59728],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59795,59806],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[59883,59884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59994,60010],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[60075,60076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60143,60154],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[60231,60232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60521,60531],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[60731,60759],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[61074,61089],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[61153,61154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61221,61232],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[61309,61310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61422,61440],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[61507,61508],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61575,61586],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[61663,61664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61926,61937],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[62118,62135],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[62336,62341],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62530,62535],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[62788,62798],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[63016,63023],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[63268,63279],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[63571,63575],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[63656,63657]},{"pos":[63709,63714],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[63774,63775]},{"pos":[63894,63898],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[63978,63979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64028,64033],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64092,64093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64417,64429],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"pos":[64668,64672],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[64755,64756]},{"pos":[64809,64815],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"]","pos":[64876,64877]},{"pos":[64978,64982],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[65064,65065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65115,65121],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65181,65182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65461,65465],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[65720,65734],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[66013,66021],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[66284,66295],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[66562,66568],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[66846,66865],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"pos":[67041,67044],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[67125,67126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67176,67182],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67243,67244]},{"pos":[67299,67305],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67365,67366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67477,67480],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[67561,67562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67612,67618],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67679,67680]},{"pos":[67735,67741],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67801,67802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68071,68088],"content":"OrderedDictionary","needQuote":true,"nodes":[{"content":"OrderedDictionary","pos":[0,17]}]},{"pos":[68360,68367],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[68490,68495],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[68578,68579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68606,68607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68691,68696],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[68779,68780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68807,68808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69043,69059],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[69216,69224],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[69310,69311],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69361,69367],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69427,69428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69530,69538],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[69624,69625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69675,69681],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69741,69742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70014,70034],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[70212,70218],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[70281,70282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70331,70336],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[70375,70376]},{"pos":[70430,70435],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70494,70495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70607,70613],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[70676,70677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70726,70731],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[70770,70771]},{"pos":[70825,70830],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70889,70890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71101,71106],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[71341,71356],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[71533,71546],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[71635,71636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71663,71664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71775,71788],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[71877,71878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71905,71906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72173,72188],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[72327,72340],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[72431,72432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72459,72460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72552,72565],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[72656,72657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72684,72685],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72911,72932],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[73273,73302],"content":"Insert(Int32, Object, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object, Object)","pos":[0,29]}]},{"pos":[73549,73555],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[73637,73638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73687,73692],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73752,73753]},{"pos":[73808,73814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73875,73876]},{"pos":[73931,73937],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73997,73998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74144,74150],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[74232,74233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74282,74287],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74347,74348]},{"pos":[74403,74409],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[74470,74471]},{"pos":[74526,74532],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74592,74593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74917,74931],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[75084,75090],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[75174,75175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75225,75231],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75291,75292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75392,75398],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[75482,75483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75533,75539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75599,75600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75895,75910],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[76103,76111],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[76195,76196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76245,76250],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76309,76310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76430,76438],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[76522,76523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76572,76577],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76636,76637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76914,76929],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[77068,77081],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[77151,77152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77179,77180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77272,77285],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[77355,77356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77383,77384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77600,77611],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[77810,77831],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[78025,78052],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[78258,78279],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.Specialized.OrderedDictionary\n  commentId: T:System.Collections.Specialized.OrderedDictionary\n  id: OrderedDictionary\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.OrderedDictionary.#ctor\n  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)\n  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)\n  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  - System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)\n  - System.Collections.Specialized.OrderedDictionary.AsReadOnly\n  - System.Collections.Specialized.OrderedDictionary.Clear\n  - System.Collections.Specialized.OrderedDictionary.Contains(System.Object)\n  - System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.OrderedDictionary.Count\n  - System.Collections.Specialized.OrderedDictionary.GetEnumerator\n  - System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  - System.Collections.Specialized.OrderedDictionary.IsReadOnly\n  - System.Collections.Specialized.OrderedDictionary.Item(System.Int32)\n  - System.Collections.Specialized.OrderedDictionary.Item(System.Object)\n  - System.Collections.Specialized.OrderedDictionary.Keys\n  - System.Collections.Specialized.OrderedDictionary.Remove(System.Object)\n  - System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)\n  - System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot\n  - System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize\n  - System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Specialized.OrderedDictionary.Values\n  langs:\n  - csharp\n  - vb\n  name: OrderedDictionary\n  fullName: System.Collections.Specialized.OrderedDictionary\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderedDictionary\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 18\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Represents a collection of key/value pairs that are accessible by the key or index.</p>\\n\"\n  syntax:\n    content: 'public class OrderedDictionary : IOrderedDictionary, IDictionary, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class OrderedDictionary\n          Implements IOrderedDictionary, IDictionary, ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Specialized.IOrderedDictionary\n  - System.Collections.IDictionary\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: OrderedDictionary\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Specialized.OrderedDictionary.#ctor\n  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: OrderedDictionary()\n  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 27\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public OrderedDictionary()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.OrderedDictionary()\n- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IEqualityComparer)'\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: OrderedDictionary(IEqualityComparer)\n  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 35\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified comparer.</p>\\n\"\n  syntax:\n    content: public OrderedDictionary(IEqualityComparer comparer)\n    content.vb: Public Sub New(comparer As IEqualityComparer)\n    parameters:\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to determine whether two keys are equal.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default comparer, which is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.OrderedDictionary(IEqualityComparer)\n- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: OrderedDictionary(Int32)\n  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 31\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified initial capacity.</p>\\n\"\n  syntax:\n    content: public OrderedDictionary(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection can contain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.OrderedDictionary(Int32)\n- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: OrderedDictionary(Int32, IEqualityComparer)\n  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Int32, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 39\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified initial capacity and comparer.</p>\\n\"\n  syntax:\n    content: public OrderedDictionary(int capacity, IEqualityComparer comparer)\n    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection can contain.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to determine whether two keys are equal.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default comparer, which is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.OrderedDictionary(Int32, IEqualityComparer)\n- uid: System.Collections.Specialized.OrderedDictionary.Count\n  commentId: P:System.Collections.Specialized.OrderedDictionary.Count\n  id: Count\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Specialized.OrderedDictionary.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 59\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the number of key/values pairs contained in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of key/value pairs contained in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OrderedDictionary.Count\n- uid: System.Collections.Specialized.OrderedDictionary.IsReadOnly\n  commentId: P:System.Collections.Specialized.OrderedDictionary.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.Specialized.OrderedDictionary.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReadOnly\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 81\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    content.vb: Public ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsReadOnly\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OrderedDictionary.IsReadOnly\n- uid: System.Collections.Specialized.OrderedDictionary.Item(System.Int32)\n  commentId: P:System.Collections.Specialized.OrderedDictionary.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.Specialized.OrderedDictionary.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 153\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets the value at the specified index.</p>\\n\"\n  syntax:\n    content: public object this[int index] { get; set; }\n    content.vb: Public Property Item(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the value to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the item at the specified index. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is being set and the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.Specialized.OrderedDictionary.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Specialized.OrderedDictionary.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: OrderedDictionary.Item[Int32]\n  nameWithType.vb: OrderedDictionary.Item(Int32)\n- uid: System.Collections.Specialized.OrderedDictionary.Item(System.Object)\n  commentId: P:System.Collections.Specialized.OrderedDictionary.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Item[Object]\n  fullName: System.Collections.Specialized.OrderedDictionary.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 178\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets the value with the specified key.</p>\\n\"\n  syntax:\n    content: public object this[object key] { get; set; }\n    content.vb: Public Property Item(key As Object) As Object\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the value to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is being set and the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Item(System.Object)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Specialized.OrderedDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  nameWithType: OrderedDictionary.Item[Object]\n  nameWithType.vb: OrderedDictionary.Item(Object)\n- uid: System.Collections.Specialized.OrderedDictionary.Keys\n  commentId: P:System.Collections.Specialized.OrderedDictionary.Keys\n  id: Keys\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.Specialized.OrderedDictionary.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Keys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 103\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public ICollection Keys { get; }\n    content.vb: Public ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Keys\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OrderedDictionary.Keys\n- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 92\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread-safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This method always returns <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: OrderedDictionary.ICollection.IsSynchronized\n  nameWithType.vb: OrderedDictionary.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 138\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: OrderedDictionary.ICollection.SyncRoot\n  nameWithType.vb: OrderedDictionary.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsFixedSize\n  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsFixedSize\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 70\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IDictionary.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsFixedSize\n  nameWithType: OrderedDictionary.IDictionary.IsFixedSize\n  nameWithType.vb: OrderedDictionary.System.Collections.IDictionary.IsFixedSize\n- uid: System.Collections.Specialized.OrderedDictionary.Values\n  commentId: P:System.Collections.Specialized.OrderedDictionary.Values\n  id: Values\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Collections.Specialized.OrderedDictionary.Values\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Values\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 205\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public ICollection Values { get; }\n    content.vb: Public ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Values\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: OrderedDictionary.Values\n- uid: System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Add(Object, Object)\n  fullName: System.Collections.Specialized.OrderedDictionary.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 216\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Adds an entry with the specified key and value into the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection with the lowest available index.</p>\\n\"\n  syntax:\n    content: public void Add(object key, object value)\n    content.vb: Public Sub Add(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the entry to add.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the entry to add. This value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.Add(Object, Object)\n- uid: System.Collections.Specialized.OrderedDictionary.AsReadOnly\n  commentId: M:System.Collections.Specialized.OrderedDictionary.AsReadOnly\n  id: AsReadOnly\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: AsReadOnly()\n  fullName: System.Collections.Specialized.OrderedDictionary.AsReadOnly()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsReadOnly\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 242\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns a read-only copy of the current <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public OrderedDictionary AsReadOnly()\n    content.vb: Public Function AsReadOnly As OrderedDictionary\n    return:\n      type: System.Collections.Specialized.OrderedDictionary\n      description: \"\\n<p>A read-only copy of the current <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.AsReadOnly()\n- uid: System.Collections.Specialized.OrderedDictionary.Clear\n  commentId: M:System.Collections.Specialized.OrderedDictionary.Clear\n  id: Clear\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Specialized.OrderedDictionary.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 229\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes all elements from the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.Clear()\n- uid: System.Collections.Specialized.OrderedDictionary.Contains(System.Object)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.Specialized.OrderedDictionary.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 250\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a specific key.</p>\\n\"\n  syntax:\n    content: public bool Contains(object key)\n    content.vb: Public Function Contains(key As Object) As Boolean\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains an element with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.Contains(Object)\n- uid: System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 258\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements to a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Array array, int index)\n    content.vb: Public Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is the destination of the <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects copied from <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.CopyTo(Array, Int32)\n- uid: System.Collections.Specialized.OrderedDictionary.GetEnumerator\n  commentId: M:System.Collections.Specialized.OrderedDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.Specialized.OrderedDictionary.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 346\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that iterates through the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public virtual IDictionaryEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  implements:\n  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  - System.Collections.IDictionary.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: OrderedDictionary.GetEnumerator()\n- uid: System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  id: Insert(System.Int32,System.Object,System.Object)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Object, Object)\n  fullName: System.Collections.Specialized.OrderedDictionary.Insert(System.Int32, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 289\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Inserts a new entry into the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection with the specified key and value at the specified index.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, object key, object value)\n    content.vb: Public Sub Insert(index As Integer, key As Object, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which the element should be inserted.</p>\\n\"\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the entry to add.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the entry to add. The value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is out of range.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.Insert(Int32, Object, Object)\n- uid: System.Collections.Specialized.OrderedDictionary.Remove(System.Object)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Collections.Specialized.OrderedDictionary.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 324\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes the entry with the specified key from the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public void Remove(object key)\n    content.vb: Public Sub Remove(key As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the entry to remove.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Remove(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.Remove(Object)\n- uid: System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)\n  commentId: M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 306\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes the entry at the specified index from the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry to remove.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>- or -</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.Specialized.OrderedDictionary.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: OrderedDictionary.RemoveAt(Int32)\n- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Specialized.OrderedDictionary\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs\n    startLine: 353\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that iterates through the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.Specialized.OrderedDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: OrderedDictionary.IEnumerable.GetEnumerator()\n  nameWithType.vb: OrderedDictionary.System.Collections.IEnumerable.GetEnumerator()\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Specialized.IOrderedDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: IOrderedDictionary\n  fullName: System.Collections.Specialized.IOrderedDictionary\n  nameWithType: IOrderedDictionary\n  commentId: T:System.Collections.Specialized.IOrderedDictionary\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Specialized.IOrderedDictionary.Item[System.Int32]\n  fullname.vb: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Specialized.IOrderedDictionary.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Specialized.IOrderedDictionary.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IOrderedDictionary.Item[Int32]\n  nameWithType.vb: IOrderedDictionary.Item(Int32)\n  commentId: P:System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  fullname.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: '['\n    fullName: '['\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  nameWithType: IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  nameWithType: IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Add(Object, Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n- uid: System.Collections.Specialized.OrderedDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: OrderedDictionary\n  fullName: System.Collections.Specialized.OrderedDictionary\n  nameWithType: OrderedDictionary\n  commentId: T:System.Collections.Specialized.OrderedDictionary\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Clear()\n  commentId: M:System.Collections.IDictionary.Clear\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Contains(Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IOrderedDictionary.GetEnumerator()\n  commentId: M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.GetEnumerator()\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: true\n  name: Insert(Int32, Object, Object)\n  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32, System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n    name: Insert\n    fullName: System.Collections.Specialized.IOrderedDictionary.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n    name: Insert\n    fullName: System.Collections.Specialized.IOrderedDictionary.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IOrderedDictionary.Insert(Int32, Object, Object)\n  commentId: M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Remove(Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IOrderedDictionary.RemoveAt(Int32)\n  commentId: M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}