{"nodes":[{"pos":[1076,1091],"content":"FieldAttributes","needQuote":true,"nodes":[{"content":"FieldAttributes","pos":[0,15]}]},{"pos":[2225,2233],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[3151,3162],"content":"FamANDAssem","needQuote":true,"nodes":[{"content":"FamANDAssem","pos":[0,11]}]},{"pos":[4087,4093],"content":"Family","needQuote":true,"nodes":[{"content":"Family","pos":[0,6]}]},{"pos":[5002,5012],"content":"FamORAssem","needQuote":true,"nodes":[{"content":"FamORAssem","pos":[0,10]}]},{"pos":[5984,5999],"content":"FieldAccessMask","needQuote":true,"nodes":[{"content":"FieldAccessMask","pos":[0,15]}]},{"pos":[6923,6933],"content":"HasDefault","needQuote":true,"nodes":[{"content":"HasDefault","pos":[0,10]}]},{"pos":[7857,7872],"content":"HasFieldMarshal","needQuote":true,"nodes":[{"content":"HasFieldMarshal","pos":[0,15]}]},{"pos":[8810,8821],"content":"HasFieldRVA","needQuote":true,"nodes":[{"content":"HasFieldRVA","pos":[0,11]}]},{"pos":[9886,9894],"content":"InitOnly","needQuote":true,"nodes":[{"content":"InitOnly","pos":[0,8]}]},{"pos":[10833,10840],"content":"Literal","needQuote":true,"nodes":[{"content":"Literal","pos":[0,7]}]},{"pos":[11902,11915],"content":"NotSerialized","needQuote":true,"nodes":[{"content":"NotSerialized","pos":[0,13]}]},{"pos":[12873,12884],"content":"PinvokeImpl","needQuote":true,"nodes":[{"content":"PinvokeImpl","pos":[0,11]}]},{"pos":[13766,13773],"content":"Private","needQuote":true,"nodes":[{"content":"Private","pos":[0,7]}]},{"pos":[14690,14702],"content":"PrivateScope","needQuote":true,"nodes":[{"content":"PrivateScope","pos":[0,12]}]},{"pos":[15604,15610],"content":"Public","needQuote":true,"nodes":[{"content":"Public","pos":[0,6]}]},{"pos":[16547,16560],"content":"RTSpecialName","needQuote":true,"nodes":[{"content":"RTSpecialName","pos":[0,13]}]},{"pos":[17537,17548],"content":"SpecialName","needQuote":true,"nodes":[{"content":"SpecialName","pos":[0,11]}]},{"pos":[18481,18487],"content":"Static","needQuote":true,"nodes":[{"content":"Static","pos":[0,6]}]},{"pos":[19270,19287],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[19482,19497],"content":"FieldAttributes","needQuote":true,"nodes":[{"content":"FieldAttributes","pos":[0,15]}]}],"content":"items:\n- uid: System.Reflection.FieldAttributes\n  commentId: T:System.Reflection.FieldAttributes\n  id: FieldAttributes\n  parent: System.Reflection\n  children:\n  - System.Reflection.FieldAttributes.Assembly\n  - System.Reflection.FieldAttributes.FamANDAssem\n  - System.Reflection.FieldAttributes.Family\n  - System.Reflection.FieldAttributes.FamORAssem\n  - System.Reflection.FieldAttributes.FieldAccessMask\n  - System.Reflection.FieldAttributes.HasDefault\n  - System.Reflection.FieldAttributes.HasFieldMarshal\n  - System.Reflection.FieldAttributes.HasFieldRVA\n  - System.Reflection.FieldAttributes.InitOnly\n  - System.Reflection.FieldAttributes.Literal\n  - System.Reflection.FieldAttributes.NotSerialized\n  - System.Reflection.FieldAttributes.PinvokeImpl\n  - System.Reflection.FieldAttributes.Private\n  - System.Reflection.FieldAttributes.PrivateScope\n  - System.Reflection.FieldAttributes.Public\n  - System.Reflection.FieldAttributes.RTSpecialName\n  - System.Reflection.FieldAttributes.SpecialName\n  - System.Reflection.FieldAttributes.Static\n  langs:\n  - csharp\n  - vb\n  name: FieldAttributes\n  fullName: System.Reflection.FieldAttributes\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FieldAttributes\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 8\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies flags that describe the attributes of a field.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [Flags]\n\n      [ComVisible(true)]\n\n      public enum FieldAttributes\n    content.vb: >-\n      <Serializable>\n\n      <Flags>\n\n      <ComVisible(True)>\n\n      Public Enum FieldAttributes\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: FieldAttributes\n- uid: System.Reflection.FieldAttributes.Assembly\n  commentId: F:System.Reflection.FieldAttributes.Assembly\n  id: Assembly\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: Assembly\n  fullName: System.Reflection.FieldAttributes.Assembly\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assembly\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is accessible throughout the assembly.</p>\\n\"\n  syntax:\n    content: Assembly = 3\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.Assembly\n- uid: System.Reflection.FieldAttributes.FamANDAssem\n  commentId: F:System.Reflection.FieldAttributes.FamANDAssem\n  id: FamANDAssem\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: FamANDAssem\n  fullName: System.Reflection.FieldAttributes.FamANDAssem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FamANDAssem\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is accessible only by subtypes in this assembly.</p>\\n\"\n  syntax:\n    content: FamANDAssem = 2\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.FamANDAssem\n- uid: System.Reflection.FieldAttributes.Family\n  commentId: F:System.Reflection.FieldAttributes.Family\n  id: Family\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: Family\n  fullName: System.Reflection.FieldAttributes.Family\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Family\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 19\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is accessible only by type and subtypes.</p>\\n\"\n  syntax:\n    content: Family = 4\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.Family\n- uid: System.Reflection.FieldAttributes.FamORAssem\n  commentId: F:System.Reflection.FieldAttributes.FamORAssem\n  id: FamORAssem\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: FamORAssem\n  fullName: System.Reflection.FieldAttributes.FamORAssem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FamORAssem\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 20\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</p>\\n\"\n  syntax:\n    content: FamORAssem = 5\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.FamORAssem\n- uid: System.Reflection.FieldAttributes.FieldAccessMask\n  commentId: F:System.Reflection.FieldAttributes.FieldAccessMask\n  id: FieldAccessMask\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: FieldAccessMask\n  fullName: System.Reflection.FieldAttributes.FieldAccessMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FieldAccessMask\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 14\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies the access level of a given field.</p>\\n\"\n  syntax:\n    content: FieldAccessMask = 7\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.FieldAccessMask\n- uid: System.Reflection.FieldAttributes.HasDefault\n  commentId: F:System.Reflection.FieldAttributes.HasDefault\n  id: HasDefault\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: HasDefault\n  fullName: System.Reflection.FieldAttributes.HasDefault\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasDefault\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 39\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field has a default value.</p>\\n\"\n  syntax:\n    content: HasDefault = 32768\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.HasDefault\n- uid: System.Reflection.FieldAttributes.HasFieldMarshal\n  commentId: F:System.Reflection.FieldAttributes.HasFieldMarshal\n  id: HasFieldMarshal\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: HasFieldMarshal\n  fullName: System.Reflection.FieldAttributes.HasFieldMarshal\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasFieldMarshal\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 38\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field has marshaling information.</p>\\n\"\n  syntax:\n    content: HasFieldMarshal = 4096\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.HasFieldMarshal\n- uid: System.Reflection.FieldAttributes.HasFieldRVA\n  commentId: F:System.Reflection.FieldAttributes.HasFieldRVA\n  id: HasFieldRVA\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: HasFieldRVA\n  fullName: System.Reflection.FieldAttributes.HasFieldRVA\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasFieldRVA\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 40\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field has a relative virtual address (RVA). The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</p>\\n\"\n  syntax:\n    content: HasFieldRVA = 256\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.HasFieldRVA\n- uid: System.Reflection.FieldAttributes.InitOnly\n  commentId: F:System.Reflection.FieldAttributes.InitOnly\n  id: InitOnly\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: InitOnly\n  fullName: System.Reflection.FieldAttributes.InitOnly\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InitOnly\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 26\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is initialized only, and can be set only in the body of a constructor.</p>\\n\"\n  syntax:\n    content: InitOnly = 32\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.InitOnly\n- uid: System.Reflection.FieldAttributes.Literal\n  commentId: F:System.Reflection.FieldAttributes.Literal\n  id: Literal\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: Literal\n  fullName: System.Reflection.FieldAttributes.Literal\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Literal\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field's value is a compile-time (static or early bound) constant. Any attempt to set it throws a <xref href=\\\"System.FieldAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: Literal = 64\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.Literal\n- uid: System.Reflection.FieldAttributes.NotSerialized\n  commentId: F:System.Reflection.FieldAttributes.NotSerialized\n  id: NotSerialized\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: NotSerialized\n  fullName: System.Reflection.FieldAttributes.NotSerialized\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NotSerialized\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 28\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field does not have to be serialized when the type is remoted.</p>\\n\"\n  syntax:\n    content: NotSerialized = 128\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.NotSerialized\n- uid: System.Reflection.FieldAttributes.PinvokeImpl\n  commentId: F:System.Reflection.FieldAttributes.PinvokeImpl\n  id: PinvokeImpl\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: PinvokeImpl\n  fullName: System.Reflection.FieldAttributes.PinvokeImpl\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PinvokeImpl\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 33\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Reserved for future use.</p>\\n\"\n  syntax:\n    content: PinvokeImpl = 8192\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.PinvokeImpl\n- uid: System.Reflection.FieldAttributes.Private\n  commentId: F:System.Reflection.FieldAttributes.Private\n  id: Private\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: Private\n  fullName: System.Reflection.FieldAttributes.Private\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Private\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 16\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is accessible only by the parent type.</p>\\n\"\n  syntax:\n    content: Private = 1\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.Private\n- uid: System.Reflection.FieldAttributes.PrivateScope\n  commentId: F:System.Reflection.FieldAttributes.PrivateScope\n  id: PrivateScope\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: PrivateScope\n  fullName: System.Reflection.FieldAttributes.PrivateScope\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PrivateScope\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field cannot be referenced.</p>\\n\"\n  syntax:\n    content: PrivateScope = 0\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.PrivateScope\n- uid: System.Reflection.FieldAttributes.Public\n  commentId: F:System.Reflection.FieldAttributes.Public\n  id: Public\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: Public\n  fullName: System.Reflection.FieldAttributes.Public\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Public\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field is accessible by any member for whom this scope is visible.</p>\\n\"\n  syntax:\n    content: Public = 6\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.Public\n- uid: System.Reflection.FieldAttributes.RTSpecialName\n  commentId: F:System.Reflection.FieldAttributes.RTSpecialName\n  id: RTSpecialName\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: RTSpecialName\n  fullName: System.Reflection.FieldAttributes.RTSpecialName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RTSpecialName\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 37\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</p>\\n\"\n  syntax:\n    content: RTSpecialName = 1024\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.RTSpecialName\n- uid: System.Reflection.FieldAttributes.SpecialName\n  commentId: F:System.Reflection.FieldAttributes.SpecialName\n  id: SpecialName\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: SpecialName\n  fullName: System.Reflection.FieldAttributes.SpecialName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpecialName\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 30\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies a special method, with the name describing how the method is special.</p>\\n\"\n  syntax:\n    content: SpecialName = 512\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.SpecialName\n- uid: System.Reflection.FieldAttributes.Static\n  commentId: F:System.Reflection.FieldAttributes.Static\n  id: Static\n  parent: System.Reflection.FieldAttributes\n  langs:\n  - csharp\n  - vb\n  name: Static\n  fullName: System.Reflection.FieldAttributes.Static\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Static\n    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the field represents the defined type, or else it is per-instance.</p>\\n\"\n  syntax:\n    content: Static = 16\n    return:\n      type: System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FieldAttributes.Static\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.FieldAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: FieldAttributes\n  fullName: System.Reflection.FieldAttributes\n  nameWithType: FieldAttributes\n  commentId: T:System.Reflection.FieldAttributes\n"}