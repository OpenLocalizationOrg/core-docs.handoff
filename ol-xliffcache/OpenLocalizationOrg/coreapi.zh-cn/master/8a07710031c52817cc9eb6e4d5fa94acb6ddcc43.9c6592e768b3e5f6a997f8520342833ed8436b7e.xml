{"nodes":[{"pos":[392,412],"content":"StateChangeEventArgs","needQuote":true,"nodes":[{"content":"StateChangeEventArgs","pos":[0,20]}]},{"pos":[1977,2031],"content":"StateChangeEventArgs(ConnectionState, ConnectionState)","needQuote":true,"nodes":[{"content":"StateChangeEventArgs(ConnectionState, ConnectionState)","pos":[0,54]}]},{"pos":[3721,3733],"content":"CurrentState","needQuote":true,"nodes":[{"content":"CurrentState","pos":[0,12]}]},{"pos":[4978,4991],"content":"OriginalState","needQuote":true,"nodes":[{"content":"OriginalState","pos":[0,13]}]},{"pos":[6011,6022],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[6168,6174],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6322,6331],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[6503,6508],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[6695,6705],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6800,6808],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6877,6878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6905,6906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6976,6984],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7053,7054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7081,7082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7265,7279],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7398,7404],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7471,7472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7522,7528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7588,7589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7672,7678],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7745,7746],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7796,7802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7862,7863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8077,8099],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8247,8253],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8320,8321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8371,8377],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8438,8439]},{"pos":[8494,8500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8560,8561],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8658,8664],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8731,8732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8782,8788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8849,8850]},{"pos":[8905,8911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8971,8972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9217,9248],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9414,9429],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9505,9506],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9556,9562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9623,9624]},{"pos":[9679,9685],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9745,9746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9852,9867],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9943,9944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9994,10000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10061,10062]},{"pos":[10117,10123],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10183,10184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10414,10427],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10528,10539],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10611,10612],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10639,10640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10713,10724],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10796,10797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10824,10825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11000,11009],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11102,11109],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11177,11178],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11205,11206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11275,11282],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11350,11351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11378,11379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11554,11571],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11680,11695],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11771,11772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11799,11800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11877,11892],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11968,11969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11996,11997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12142,12148],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12298,12313],"content":"ConnectionState","needQuote":true,"nodes":[{"content":"ConnectionState","pos":[0,15]}]}],"content":"items:\n- uid: System.Data.StateChangeEventArgs\n  commentId: T:System.Data.StateChangeEventArgs\n  id: StateChangeEventArgs\n  parent: System.Data\n  children:\n  - System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)\n  - System.Data.StateChangeEventArgs.CurrentState\n  - System.Data.StateChangeEventArgs.OriginalState\n  langs:\n  - csharp\n  - vb\n  name: StateChangeEventArgs\n  fullName: System.Data.StateChangeEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StateChangeEventArgs\n    path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n    startLine: 12\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Provides data for the state change event of a .NET Framework data provider.</p>\\n\"\n  syntax:\n    content: 'public sealed class StateChangeEventArgs : EventArgs'\n    content.vb: >-\n      Public NotInheritable Class StateChangeEventArgs\n          Inherits EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: StateChangeEventArgs\n- uid: System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)\n  commentId: M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)\n  id: '#ctor(System.Data.ConnectionState,System.Data.ConnectionState)'\n  parent: System.Data.StateChangeEventArgs\n  langs:\n  - csharp\n  - vb\n  name: StateChangeEventArgs(ConnectionState, ConnectionState)\n  fullName: System.Data.StateChangeEventArgs.StateChangeEventArgs(System.Data.ConnectionState, System.Data.ConnectionState)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n    startLine: 17\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.StateChangeEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, when given the original state and the current state of the object.</p>\\n\"\n  syntax:\n    content: public StateChangeEventArgs(ConnectionState originalState, ConnectionState currentState)\n    content.vb: Public Sub New(originalState As ConnectionState, currentState As ConnectionState)\n    parameters:\n    - id: originalState\n      type: System.Data.ConnectionState\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.ConnectionState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n    - id: currentState\n      type: System.Data.ConnectionState\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.ConnectionState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StateChangeEventArgs.StateChangeEventArgs(ConnectionState, ConnectionState)\n- uid: System.Data.StateChangeEventArgs.CurrentState\n  commentId: P:System.Data.StateChangeEventArgs.CurrentState\n  id: CurrentState\n  parent: System.Data.StateChangeEventArgs\n  langs:\n  - csharp\n  - vb\n  name: CurrentState\n  fullName: System.Data.StateChangeEventArgs.CurrentState\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CurrentState\n    path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n    startLine: 23\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the new state of the connection. The connection object will be in the new state already when the event is fired.</p>\\n\"\n  syntax:\n    content: public ConnectionState CurrentState { get; }\n    content.vb: Public ReadOnly Property CurrentState As ConnectionState\n    parameters: []\n    return:\n      type: System.Data.ConnectionState\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.ConnectionState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StateChangeEventArgs.CurrentState\n- uid: System.Data.StateChangeEventArgs.OriginalState\n  commentId: P:System.Data.StateChangeEventArgs.OriginalState\n  id: OriginalState\n  parent: System.Data.StateChangeEventArgs\n  langs:\n  - csharp\n  - vb\n  name: OriginalState\n  fullName: System.Data.StateChangeEventArgs.OriginalState\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OriginalState\n    path: src/System.Data.Common/src/System/Data/StateChangeEvent.cs\n    startLine: 31\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the original state of the connection.</p>\\n\"\n  syntax:\n    content: public ConnectionState OriginalState { get; }\n    content.vb: Public ReadOnly Property OriginalState As ConnectionState\n    parameters: []\n    return:\n      type: System.Data.ConnectionState\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.ConnectionState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StateChangeEventArgs.OriginalState\nreferences:\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data.ConnectionState\n  parent: System.Data\n  isExternal: false\n  name: ConnectionState\n  fullName: System.Data.ConnectionState\n  nameWithType: ConnectionState\n  commentId: T:System.Data.ConnectionState\n"}