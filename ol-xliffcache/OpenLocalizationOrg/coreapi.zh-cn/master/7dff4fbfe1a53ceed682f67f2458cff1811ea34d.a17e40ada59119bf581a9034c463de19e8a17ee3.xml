{"nodes":[{"pos":[409,416],"content":"Capture","needQuote":true,"nodes":[{"content":"Capture","pos":[0,7]}]},{"pos":[1792,1797],"content":"Index","needQuote":true,"nodes":[{"content":"Index","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The zero-based starting position in the original string where the captured substring is found.&lt;/p&gt;\\n","pos":[2562,2667],"source":"\\n<p>The zero-based starting position in the original string where the captured substring is found.</p>\\n"},{"pos":[2989,2995],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The length of the captured substring.&lt;/p&gt;\\n","pos":[3709,3757],"source":"\\n<p>The length of the captured substring.</p>\\n"},{"pos":[4077,4082],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The substring that is captured by the match.&lt;/p&gt;\\n","pos":[4803,4858],"source":"\\n<p>The substring that is captured by the match.</p>\\n"},{"pos":[5186,5196],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The substring that was captured by the match.&lt;/p&gt;\\n","pos":[6048,6104],"source":"\\n<p>The substring that was captured by the match.</p>\\n"},{"pos":[6341,6371],"content":"System.Text.RegularExpressions","needQuote":true,"nodes":[{"content":"System.Text.RegularExpressions","pos":[0,30]}]},{"pos":[6574,6580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6753,6767],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6886,6892],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6959,6960],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7010,7016],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7076,7077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7160,7166],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7233,7234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7284,7290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7350,7351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7565,7587],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7735,7741],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7808,7809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7859,7865],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7926,7927]},{"pos":[7982,7988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8048,8049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8146,8152],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8219,8220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8270,8276],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8337,8338]},{"pos":[8393,8399],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8459,8460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8705,8736],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8902,8917],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8993,8994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9044,9050],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9111,9112]},{"pos":[9167,9173],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9233,9234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9340,9355],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9431,9432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9482,9488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9549,9550]},{"pos":[9605,9611],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9671,9672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9902,9915],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10016,10027],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10099,10100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10127,10128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10201,10212],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10284,10285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10312,10313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10488,10497],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10590,10597],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10665,10666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10693,10694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10763,10770],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10838,10839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10866,10867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11042,11059],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11168,11183],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11259,11260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11287,11288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11365,11380],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11456,11457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11484,11485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11630,11636],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11766,11771],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[11913,11919],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[12079,12089],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12184,12192],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12261,12262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12289,12290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12360,12368],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12437,12438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12465,12466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Text.RegularExpressions.Capture\n  commentId: T:System.Text.RegularExpressions.Capture\n  id: Capture\n  parent: System.Text.RegularExpressions\n  children:\n  - System.Text.RegularExpressions.Capture.Index\n  - System.Text.RegularExpressions.Capture.Length\n  - System.Text.RegularExpressions.Capture.ToString\n  - System.Text.RegularExpressions.Capture.Value\n  langs:\n  - csharp\n  - vb\n  name: Capture\n  fullName: System.Text.RegularExpressions.Capture\n  type: Class\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Capture\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 10\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Represents the results from a single successful subexpression capture. </p>\\n\"\n  syntax:\n    content: public class Capture\n    content.vb: Public Class Capture\n  seealso:\n  - type: System.Text.RegularExpressions.CaptureCollection\n    commentId: T:System.Text.RegularExpressions.CaptureCollection\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Capture\n- uid: System.Text.RegularExpressions.Capture.Index\n  commentId: P:System.Text.RegularExpressions.Capture.Index\n  id: Index\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  - vb\n  name: Index\n  fullName: System.Text.RegularExpressions.Capture.Index\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Index\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 13\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>The position in the original string where the first character of the captured substring is found.</p>\\n\"\n  syntax:\n    content: public int Index { get; }\n    content.vb: Public ReadOnly Property Index As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting position in the original string where the captured substring is found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Capture.Index\n- uid: System.Text.RegularExpressions.Capture.Length\n  commentId: P:System.Text.RegularExpressions.Capture.Length\n  id: Length\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Text.RegularExpressions.Capture.Length\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 14\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets the length of the captured substring.</p>\\n\"\n  syntax:\n    content: public int Length { get; }\n    content.vb: Public ReadOnly Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of the captured substring.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Capture.Length\n- uid: System.Text.RegularExpressions.Capture.Value\n  commentId: P:System.Text.RegularExpressions.Capture.Value\n  id: Value\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Text.RegularExpressions.Capture.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 15\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets the captured substring from the input string.</p>\\n\"\n  syntax:\n    content: public string Value { get; }\n    content.vb: Public ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The substring that is captured by the match.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Capture.Value\n- uid: System.Text.RegularExpressions.Capture.ToString\n  commentId: M:System.Text.RegularExpressions.Capture.ToString\n  id: ToString\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Text.RegularExpressions.Capture.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 16\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Retrieves the captured substring from the input string by calling the <xref href=\\\"System.Text.RegularExpressions.Capture.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The substring that was captured by the match.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Capture.ToString()\nreferences:\n- uid: System.Text.RegularExpressions\n  isExternal: false\n  name: System.Text.RegularExpressions\n  fullName: System.Text.RegularExpressions\n  commentId: N:System.Text.RegularExpressions\n  nameWithType: System.Text.RegularExpressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n"}