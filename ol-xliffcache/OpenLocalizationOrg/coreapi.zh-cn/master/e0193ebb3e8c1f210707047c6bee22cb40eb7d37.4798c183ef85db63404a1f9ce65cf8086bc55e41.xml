{"nodes":[{"pos":[839,849],"content":"RegionInfo","needQuote":true,"nodes":[{"content":"RegionInfo","pos":[0,10]}]},{"pos":[2182,2200],"content":"RegionInfo(String)","needQuote":true,"nodes":[{"content":"RegionInfo(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A string that contains a two-letter code defined in ISO 3166 for country/region.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;A string that contains the culture name for a specific culture, custom culture, or Windows-only culture.","pos":[3095,3306],"source":"\\n<p>A string that contains a two-letter code defined in ISO 3166 for country/region.</p>\\n<p>-or-</p>\\n<p>A string that contains the culture name for a specific culture, custom culture, or Windows-only culture."},{"content":"If the culture name is not in RFC 4646 format, your application should specify the entire culture name instead of just the country/region.","pos":[3307,3445]},{"content":"&lt;/p&gt;\\n","pos":[3446,3452],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3571,3623],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid country/region name or specific culture name.&lt;/p&gt;\\n","pos":[3720,3807],"source":"\\n<p>\\n<em>name</em> is not a valid country/region name or specific culture name.</p>\\n"},{"pos":[4127,4141],"content":"CurrencySymbol","needQuote":true,"nodes":[{"content":"CurrencySymbol","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The currency symbol associated with the country/region.&lt;/p&gt;\\n","pos":[4926,4992],"source":"\\n<p>The currency symbol associated with the country/region.</p>\\n"},{"pos":[5492,5505],"content":"CurrentRegion","needQuote":true,"nodes":[{"content":"CurrentRegion","pos":[0,13]}]},{"pos":[6927,6938],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The full name of the country/region in the language of the localized version of .NET Framework.&lt;/p&gt;\\n","pos":[7751,7857],"source":"\\n<p>The full name of the country/region in the language of the localized version of .NET Framework.</p>\\n"},{"pos":[8864,8875],"content":"EnglishName","needQuote":true,"nodes":[{"content":"EnglishName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The full name of the country/region in English.&lt;/p&gt;\\n","pos":[9640,9698],"source":"\\n<p>The full name of the country/region in English.</p>\\n"},{"pos":[10696,10704],"content":"IsMetric","needQuote":true,"nodes":[{"content":"IsMetric","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the country/region uses the metric system for measurements; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11431,11563],"source":"\\n<p>\\n<strong>true</strong> if the country/region uses the metric system for measurements; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11931,11948],"content":"ISOCurrencySymbol","needQuote":true,"nodes":[{"content":"ISOCurrencySymbol","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The three-character ISO 4217 currency symbol associated with the country/region.&lt;/p&gt;\\n","pos":[12770,12861],"source":"\\n<p>The three-character ISO 4217 currency symbol associated with the country/region.</p>\\n"},{"pos":[13331,13335],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[15660,15670],"content":"NativeName","needQuote":true,"nodes":[{"content":"NativeName","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The native name of the country/region formatted in the language associated with the ISO 3166 country/region code.","pos":[16531,16649],"source":"\\n<p>The native name of the country/region formatted in the language associated with the ISO 3166 country/region code."},{"content":"&lt;/p&gt;\\n","pos":[16650,16656],"source":" </p>\\n"},{"pos":[17041,17063],"content":"TwoLetterISORegionName","needQuote":true,"nodes":[{"content":"TwoLetterISORegionName","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The two-letter code defined in ISO 3166 for the country/region.&lt;/p&gt;\\n","pos":[17888,17962],"source":"\\n<p>The two-letter code defined in ISO 3166 for the country/region.</p>\\n"},{"pos":[18988,19002],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21080,21093],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22716,22726],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24156,24176],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[24349,24355],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24542,24564],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[24712,24718],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24785,24786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24836,24842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24903,24904]},{"pos":[24959,24965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25025,25026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25123,25129],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25196,25197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25247,25253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25314,25315]},{"pos":[25370,25376],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25436,25437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25682,25713],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[25879,25894],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25970,25971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26021,26027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26088,26089]},{"pos":[26144,26150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26210,26211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26317,26332],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26408,26409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26459,26465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26526,26527]},{"pos":[26582,26588],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26648,26649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26875,26884],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26977,26984],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27052,27053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27080,27081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27150,27157],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27225,27226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27253,27254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27429,27446],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27555,27570],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27646,27647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27674,27675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27752,27767],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27843,27844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27871,27872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28017,28023],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[28154,28160],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28337,28347],"content":"RegionInfo","needQuote":true,"nodes":[{"content":"RegionInfo","pos":[0,10]}]},{"pos":[28533,28540],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28716,28730],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28849,28855],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28922,28923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28973,28979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29039,29040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29123,29129],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29196,29197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29247,29253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29313,29314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29504,29517],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29618,29629],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29701,29702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29729,29730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29803,29814],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29886,29887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29914,29915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30075,30080],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30237,30247],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30342,30350],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30419,30420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30447,30448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30518,30526],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30595,30596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30623,30624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30777,30798],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[30999,31016],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Globalization.RegionInfo\n  commentId: T:System.Globalization.RegionInfo\n  id: RegionInfo\n  parent: System.Globalization\n  children:\n  - System.Globalization.RegionInfo.#ctor(System.String)\n  - System.Globalization.RegionInfo.CurrencySymbol\n  - System.Globalization.RegionInfo.CurrentRegion\n  - System.Globalization.RegionInfo.DisplayName\n  - System.Globalization.RegionInfo.EnglishName\n  - System.Globalization.RegionInfo.Equals(System.Object)\n  - System.Globalization.RegionInfo.GetHashCode\n  - System.Globalization.RegionInfo.IsMetric\n  - System.Globalization.RegionInfo.ISOCurrencySymbol\n  - System.Globalization.RegionInfo.Name\n  - System.Globalization.RegionInfo.NativeName\n  - System.Globalization.RegionInfo.ToString\n  - System.Globalization.RegionInfo.TwoLetterISORegionName\n  langs:\n  - csharp\n  - vb\n  name: RegionInfo\n  fullName: System.Globalization.RegionInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RegionInfo\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 23\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Contains information about the country/region.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class RegionInfo\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class RegionInfo\n  seealso:\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: RegionInfo\n- uid: System.Globalization.RegionInfo.#ctor(System.String)\n  commentId: M:System.Globalization.RegionInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: RegionInfo(String)\n  fullName: System.Globalization.RegionInfo.RegionInfo(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 61\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the country/region or specific culture, specified by name.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public RegionInfo(string name)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>A string that contains a two-letter code defined in ISO 3166 for country/region.</p>\\n<p>-or-</p>\\n<p>A string that contains the culture name for a specific culture, custom culture, or Windows-only culture. If the culture name is not in RFC 4646 format, your application should specify the entire culture name instead of just the country/region. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is not a valid country/region name or specific culture name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RegionInfo.RegionInfo(String)\n- uid: System.Globalization.RegionInfo.CurrencySymbol\n  commentId: P:System.Globalization.RegionInfo.CurrencySymbol\n  id: CurrencySymbol\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: CurrencySymbol\n  fullName: System.Globalization.RegionInfo.CurrencySymbol\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrencySymbol\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 560\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the currency symbol associated with the country/region.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string CurrencySymbol\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property CurrencySymbol As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The currency symbol associated with the country/region.</p>\\n\"\n  seealso:\n  - type: System.Globalization.RegionInfo.ISOCurrencySymbol\n    commentId: P:System.Globalization.RegionInfo.ISOCurrencySymbol\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.CurrencySymbol\n- uid: System.Globalization.RegionInfo.CurrentRegion\n  commentId: P:System.Globalization.RegionInfo.CurrentRegion\n  id: CurrentRegion\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: CurrentRegion\n  fullName: System.Globalization.RegionInfo.CurrentRegion\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentRegion\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 360\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the country/region used by the current thread.</p>\\n\"\n  syntax:\n    content: >-\n      public static RegionInfo CurrentRegion\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property CurrentRegion As RegionInfo\n    parameters: []\n    return:\n      type: System.Globalization.RegionInfo\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the country/region used by the current thread.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: RegionInfo.CurrentRegion\n- uid: System.Globalization.RegionInfo.DisplayName\n  commentId: P:System.Globalization.RegionInfo.DisplayName\n  id: DisplayName\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: DisplayName\n  fullName: System.Globalization.RegionInfo.DisplayName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DisplayName\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 415\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the full name of the country/region in the language of the localized version of .NET Framework.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string DisplayName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property DisplayName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The full name of the country/region in the language of the localized version of .NET Framework.</p>\\n\"\n  seealso:\n  - type: System.Globalization.RegionInfo.Name\n    commentId: P:System.Globalization.RegionInfo.Name\n  - type: System.Globalization.RegionInfo.EnglishName\n    commentId: P:System.Globalization.RegionInfo.EnglishName\n  - type: System.Globalization.RegionInfo.TwoLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.TwoLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.DisplayName\n- uid: System.Globalization.RegionInfo.EnglishName\n  commentId: P:System.Globalization.RegionInfo.EnglishName\n  id: EnglishName\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: EnglishName\n  fullName: System.Globalization.RegionInfo.EnglishName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnglishName\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 397\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the full name of the country/region in English.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string EnglishName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property EnglishName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The full name of the country/region in English.</p>\\n\"\n  seealso:\n  - type: System.Globalization.RegionInfo.Name\n    commentId: P:System.Globalization.RegionInfo.Name\n  - type: System.Globalization.RegionInfo.DisplayName\n    commentId: P:System.Globalization.RegionInfo.DisplayName\n  - type: System.Globalization.RegionInfo.TwoLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.TwoLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.EnglishName\n- uid: System.Globalization.RegionInfo.IsMetric\n  commentId: P:System.Globalization.RegionInfo.IsMetric\n  id: IsMetric\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: IsMetric\n  fullName: System.Globalization.RegionInfo.IsMetric\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsMetric\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 501\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets a value indicating whether the country/region uses the metric system for measurements.</p>\\n\"\n  syntax:\n    content: public virtual bool IsMetric { get; }\n    content.vb: Public Overridable ReadOnly Property IsMetric As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the country/region uses the metric system for measurements; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.IsMetric\n- uid: System.Globalization.RegionInfo.ISOCurrencySymbol\n  commentId: P:System.Globalization.RegionInfo.ISOCurrencySymbol\n  id: ISOCurrencySymbol\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: ISOCurrencySymbol\n  fullName: System.Globalization.RegionInfo.ISOCurrencySymbol\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ISOCurrencySymbol\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 574\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the three-character ISO 4217 currency symbol associated with the country/region.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string ISOCurrencySymbol\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property ISOCurrencySymbol As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The three-character ISO 4217 currency symbol associated with the country/region.</p>\\n\"\n  seealso:\n  - type: System.Globalization.RegionInfo.CurrencySymbol\n    commentId: P:System.Globalization.RegionInfo.CurrencySymbol\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.ISOCurrencySymbol\n- uid: System.Globalization.RegionInfo.Name\n  commentId: P:System.Globalization.RegionInfo.Name\n  id: Name\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Globalization.RegionInfo.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 383\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the name or ISO 3166 two-letter country/region code for the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; }\n    content.vb: Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value specified by the <em>name</em> parameter of the <xref href=\\\"System.Globalization.RegionInfo.#ctor(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor. The return value is in uppercase.</p>\\n<p>-or-</p>\\n<p>The two-letter code defined in ISO 3166 for the country/region specified by the <em>culture</em> parameter of the <xref href=\\\"System.Globalization.RegionInfo.#ctor(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor. The return value is in uppercase.</p>\\n\"\n  seealso:\n  - type: System.Globalization.RegionInfo.EnglishName\n    commentId: P:System.Globalization.RegionInfo.EnglishName\n  - type: System.Globalization.RegionInfo.DisplayName\n    commentId: P:System.Globalization.RegionInfo.DisplayName\n  - type: System.Globalization.RegionInfo.TwoLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.TwoLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.Name\n- uid: System.Globalization.RegionInfo.NativeName\n  commentId: P:System.Globalization.RegionInfo.NativeName\n  id: NativeName\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: NativeName\n  fullName: System.Globalization.RegionInfo.NativeName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NativeName\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 433\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the name of a country/region formatted in the native language of the country/region.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual string NativeName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property NativeName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The native name of the country/region formatted in the language associated with the ISO 3166 country/region code. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.NativeName\n- uid: System.Globalization.RegionInfo.TwoLetterISORegionName\n  commentId: P:System.Globalization.RegionInfo.TwoLetterISORegionName\n  id: TwoLetterISORegionName\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: TwoLetterISORegionName\n  fullName: System.Globalization.RegionInfo.TwoLetterISORegionName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TwoLetterISORegionName\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 450\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the two-letter code defined in ISO 3166 for the country/region.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string TwoLetterISORegionName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property TwoLetterISORegionName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The two-letter code defined in ISO 3166 for the country/region.</p>\\n\"\n  seealso:\n  - type: System.Globalization.RegionInfo.Name\n    commentId: P:System.Globalization.RegionInfo.Name\n  - type: System.Globalization.RegionInfo.EnglishName\n    commentId: P:System.Globalization.RegionInfo.EnglishName\n  - type: System.Globalization.RegionInfo.DisplayName\n    commentId: P:System.Globalization.RegionInfo.DisplayName\n  - type: System.Globalization.RegionInfo.ThreeLetterISORegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterISORegionName\n  - type: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n    commentId: P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: RegionInfo.TwoLetterISORegionName\n- uid: System.Globalization.RegionInfo.Equals(System.Object)\n  commentId: M:System.Globalization.RegionInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Globalization.RegionInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 592\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified object is the same instance as the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter is a <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and its <xref href=\\\"System.Globalization.RegionInfo.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is the same as the <xref href=\\\"System.Globalization.RegionInfo.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RegionInfo.Equals(Object)\n- uid: System.Globalization.RegionInfo.GetHashCode\n  commentId: M:System.Globalization.RegionInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Globalization.RegionInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 612\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, suitable for hashing algorithms and data structures, such as a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Globalization.RegionInfo.Equals(System.Object)\n    commentId: M:System.Globalization.RegionInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RegionInfo.GetHashCode()\n- uid: System.Globalization.RegionInfo.ToString\n  commentId: M:System.Globalization.RegionInfo.ToString\n  id: ToString\n  parent: System.Globalization.RegionInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Globalization.RegionInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Globalization/RegionInfo.cs\n    startLine: 625\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a string containing the culture name or ISO 3166 two-letter country/region codes specified for the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the culture name or ISO 3166 two-letter country/region codes defined for the current <xref href=\\\"System.Globalization.RegionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  seealso:\n  - type: System.Object.ToString\n    commentId: M:System.Object.ToString\n  - type: System.Globalization.RegionInfo.Name\n    commentId: P:System.Globalization.RegionInfo.Name\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RegionInfo.ToString()\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Globalization.RegionInfo\n  parent: System.Globalization\n  isExternal: false\n  name: RegionInfo\n  fullName: System.Globalization.RegionInfo\n  nameWithType: RegionInfo\n  commentId: T:System.Globalization.RegionInfo\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}