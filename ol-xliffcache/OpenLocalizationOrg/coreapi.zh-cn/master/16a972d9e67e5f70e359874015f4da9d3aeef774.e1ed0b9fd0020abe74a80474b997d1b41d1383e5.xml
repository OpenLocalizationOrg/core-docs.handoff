{"nodes":[{"pos":[566,579],"content":"SocketAddress","needQuote":true,"nodes":[{"content":"SocketAddress","pos":[0,13]}]},{"pos":[1817,1845],"content":"SocketAddress(AddressFamily)","needQuote":true,"nodes":[{"content":"SocketAddress(AddressFamily)","pos":[0,28]}]},{"pos":[3220,3255],"content":"SocketAddress(AddressFamily, Int32)","needQuote":true,"nodes":[{"content":"SocketAddress(AddressFamily, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The number of bytes to allocate for the underlying buffer.","pos":[4327,4390],"source":"\\n<p>The number of bytes to allocate for the underlying buffer."},{"content":"&lt;/p&gt;\\n","pos":[4391,4397],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;size&lt;/em&gt; is less than 2.","pos":[4528,4564],"source":"\\n<p>\\n<em>size</em> is less than 2."},{"content":"These 2 bytes are needed to store &lt;em&gt;family&lt;/em&gt;.","pos":[4565,4615],"source":" These 2 bytes are needed to store <em>family</em>."},{"content":"&lt;/p&gt;\\n","pos":[4616,4622],"source":" </p>\\n"},{"pos":[4917,4923],"content":"Family","needQuote":true,"nodes":[{"content":"Family","pos":[0,6]}]},{"pos":[6332,6343],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The array index element of the desired information.","pos":[7038,7094],"source":"\\n<p>The array index element of the desired information."},{"content":"&lt;/p&gt;\\n","pos":[7095,7101],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified index element in the underlying buffer.&lt;/p&gt;\\n","pos":[7159,7236],"source":"\\n<p>The value of the specified index element in the underlying buffer.</p>\\n"},{"content":"\\n&lt;p&gt;The specified index does not exist in the buffer.","pos":[7361,7415],"source":"\\n<p>The specified index does not exist in the buffer."},{"content":"&lt;/p&gt;\\n","pos":[7416,7422],"source":" </p>\\n"},{"pos":[7928,7932],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"pos":[9102,9116],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified &lt;strong&gt;Object&lt;/strong&gt; is equal to the current &lt;strong&gt;Object&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10077,10236],"source":"\\n<p>\\n<strong>true</strong> if the specified <strong>Object</strong> is equal to the current <strong>Object</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10712,10725],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11998,12008],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13006,13016],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[13159,13165],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13352,13374],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13522,13528],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13595,13596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13646,13652],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13713,13714]},{"pos":[13769,13775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13835,13836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13933,13939],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14006,14007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14057,14063],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14124,14125]},{"pos":[14180,14186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14246,14247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14492,14523],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14689,14704],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14780,14781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14831,14837],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14898,14899]},{"pos":[14954,14960],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15020,15021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15127,15142],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15218,15219],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15269,15275],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15336,15337]},{"pos":[15392,15398],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15458,15459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15685,15694],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15787,15794],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15862,15863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15890,15891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15960,15967],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16035,16036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16063,16064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16239,16256],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16365,16380],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16456,16457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16484,16485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16562,16577],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16653,16654],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16681,16682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16827,16833],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16995,17008],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[17186,17204],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[17370,17375],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17515,17519],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[17686,17700],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17819,17825],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17892,17893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17943,17949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18009,18010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18093,18099],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18166,18167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18217,18223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18283,18284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18457,18464],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18630,18643],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[18744,18755],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18827,18828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18855,18856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18929,18940],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19012,19013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19040,19041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19217,19227],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19322,19330],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19399,19400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19427,19428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19498,19506],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19575,19576],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19603,19604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19759,19765],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19914,19941],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[20150,20174],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.Net.SocketAddress\n  commentId: T:System.Net.SocketAddress\n  id: SocketAddress\n  parent: System.Net\n  children:\n  - System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  - System.Net.SocketAddress.Equals(System.Object)\n  - System.Net.SocketAddress.Family\n  - System.Net.SocketAddress.GetHashCode\n  - System.Net.SocketAddress.Item(System.Int32)\n  - System.Net.SocketAddress.Size\n  - System.Net.SocketAddress.ToString\n  langs:\n  - csharp\n  - vb\n  name: SocketAddress\n  fullName: System.Net.SocketAddress\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SocketAddress\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 240\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Stores serialized information from <xref href=\\\"System.Net.EndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> derived classes.</p>\\n\"\n  syntax:\n    content: public class SocketAddress\n    content.vb: Public Class SocketAddress\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SocketAddress\n- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: SocketAddress(AddressFamily)\n  fullName: System.Net.SocketAddress.SocketAddress(System.Net.Sockets.AddressFamily)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 242\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the given address family.</p>\\n\"\n  syntax:\n    content: public SocketAddress(AddressFamily family)\n    content.vb: Public Sub New(family As AddressFamily)\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>An <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerated value. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAddress.SocketAddress(AddressFamily)\n- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  commentId: M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  id: '#ctor(System.Net.Sockets.AddressFamily,System.Int32)'\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: SocketAddress(AddressFamily, Int32)\n  fullName: System.Net.SocketAddress.SocketAddress(System.Net.Sockets.AddressFamily, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 243\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified address family and buffer size.</p>\\n\"\n  syntax:\n    content: public SocketAddress(AddressFamily family, int size)\n    content.vb: Public Sub New(family As AddressFamily, size As Integer)\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>An <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerated value. </p>\\n\"\n    - id: size\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to allocate for the underlying buffer. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>size</em> is less than 2. These 2 bytes are needed to store <em>family</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAddress.SocketAddress(AddressFamily, Int32)\n- uid: System.Net.SocketAddress.Family\n  commentId: P:System.Net.SocketAddress.Family\n  id: Family\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: Family\n  fullName: System.Net.SocketAddress.Family\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Family\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 244\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerated value of the current <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public AddressFamily Family { get; }\n    content.vb: Public ReadOnly Property Family As AddressFamily\n    parameters: []\n    return:\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerated values.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.AddressFamily\n    commentId: T:System.Net.Sockets.AddressFamily\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAddress.Family\n- uid: System.Net.SocketAddress.Item(System.Int32)\n  commentId: P:System.Net.SocketAddress.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Net.SocketAddress.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 245\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the specified index element in the underlying buffer.</p>\\n\"\n  syntax:\n    content: public byte this[int offset] { get; set; }\n    content.vb: Public Property Item(offset As Integer) As Byte\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The array index element of the desired information. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the specified index element in the underlying buffer.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The specified index does not exist in the buffer. </p>\\n\"\n  seealso:\n  - type: System.Net.SocketAddress.Size\n    commentId: P:System.Net.SocketAddress.Size\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.SocketAddress.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: SocketAddress.Item[Int32]\n  nameWithType.vb: SocketAddress.Item(Int32)\n- uid: System.Net.SocketAddress.Size\n  commentId: P:System.Net.SocketAddress.Size\n  id: Size\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: Size\n  fullName: System.Net.SocketAddress.Size\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Size\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 246\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the underlying buffer size of the <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Size { get; }\n    content.vb: Public ReadOnly Property Size As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The underlying buffer size of the <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAddress.Size\n- uid: System.Net.SocketAddress.Equals(System.Object)\n  commentId: M:System.Net.SocketAddress.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.SocketAddress.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 247\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Determines whether the specified <strong>Object</strong> is equal to the current <strong>Object</strong>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object comparand)\n    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the current <strong>Object</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <strong>Object</strong> is equal to the current <strong>Object</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SocketAddress.Equals(Object)\n- uid: System.Net.SocketAddress.GetHashCode\n  commentId: M:System.Net.SocketAddress.GetHashCode\n  id: GetHashCode\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.SocketAddress.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 248\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SocketAddress.GetHashCode()\n- uid: System.Net.SocketAddress.ToString\n  commentId: M:System.Net.SocketAddress.ToString\n  id: ToString\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.SocketAddress.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 249\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns information about the socket address.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains information about the <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SocketAddress.ToString()\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n  commentId: T:System.Net.Sockets.AddressFamily\n  nameWithType: AddressFamily\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}