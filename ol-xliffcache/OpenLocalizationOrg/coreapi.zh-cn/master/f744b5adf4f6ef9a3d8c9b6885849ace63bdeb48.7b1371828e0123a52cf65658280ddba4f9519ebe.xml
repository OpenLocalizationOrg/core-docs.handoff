{"nodes":[{"pos":[2168,2177],"content":"Hashtable","needQuote":true,"nodes":[{"content":"Hashtable","pos":[0,9]}]},{"pos":[5021,5032],"content":"Hashtable()","needQuote":true,"nodes":[{"content":"Hashtable()","pos":[0,11]}]},{"pos":[6309,6331],"content":"Hashtable(IDictionary)","needQuote":true,"nodes":[{"content":"Hashtable(IDictionary)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7853,7896],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7897,7903],"source":" </p>\\n"},{"pos":[8677,8718],"content":"Hashtable(IDictionary, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Hashtable(IDictionary, IEqualityComparer)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11227,11270],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11271,11277],"source":" </p>\\n"},{"pos":[11924,11954],"content":"Hashtable(IDictionary, Single)","needQuote":true,"nodes":[{"content":"Hashtable(IDictionary, Single)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[13497,13621],"source":"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance."},{"content":"The result is the maximum ratio of elements to buckets.&lt;/p&gt;\\n","pos":[13622,13683],"source":" The result is the maximum ratio of elements to buckets.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13802,13845],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13846,13852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is less than 0.1.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is greater than 1.0.","pos":[13969,14078],"source":"\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0."},{"content":"&lt;/p&gt;\\n","pos":[14079,14085],"source":" </p>\\n"},{"pos":[14909,14958],"content":"Hashtable(IDictionary, Single, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Hashtable(IDictionary, Single, IEqualityComparer)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[16673,16797],"source":"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance."},{"content":"The result is the maximum ratio of elements to buckets.&lt;/p&gt;\\n","pos":[16798,16859],"source":" The result is the maximum ratio of elements to buckets.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17767,17810],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17811,17817],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is less than 0.1.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is greater than 1.0.","pos":[17934,18043],"source":"\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0."},{"content":"&lt;/p&gt;\\n","pos":[18044,18050],"source":" </p>\\n"},{"pos":[18592,18620],"content":"Hashtable(IEqualityComparer)","needQuote":true,"nodes":[{"content":"Hashtable(IEqualityComparer)","pos":[0,28]}]},{"pos":[20796,20812],"content":"Hashtable(Int32)","needQuote":true,"nodes":[{"content":"Hashtable(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[21976,22019],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[22020,22026],"source":" </p>\\n"},{"pos":[22651,22686],"content":"Hashtable(Int32, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Hashtable(Int32, IEqualityComparer)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[24819,24862],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[24863,24869],"source":" </p>\\n"},{"pos":[25367,25391],"content":"Hashtable(Int32, Single)","needQuote":true,"nodes":[{"content":"Hashtable(Int32, Single)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[26550,26674],"source":"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance."},{"content":"The result is the maximum ratio of elements to buckets.","pos":[26675,26730]},{"content":"&lt;/p&gt;\\n","pos":[26731,26737],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is less than 0.1.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is greater than 1.0.","pos":[26868,27038],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0."},{"content":"&lt;/p&gt;\\n","pos":[27039,27045],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is causing an overflow.&lt;/p&gt;\\n","pos":[27142,27196],"source":"\\n<p>\\n<em>capacity</em> is causing an overflow.</p>\\n"},{"pos":[27871,27914],"content":"Hashtable(Int32, Single, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Hashtable(Int32, Single, IEqualityComparer)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[29243,29367],"source":"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance."},{"content":"The result is the maximum ratio of elements to buckets.&lt;/p&gt;\\n","pos":[29368,29429],"source":" The result is the maximum ratio of elements to buckets.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is less than 0.1.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;loadFactor&lt;/em&gt; is greater than 1.0.","pos":[30349,30519],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0."},{"content":"&lt;/p&gt;\\n","pos":[30520,30526],"source":" </p>\\n"},{"pos":[30946,30951],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[32266,32282],"content":"EqualityComparer","needQuote":true,"nodes":[{"content":"EqualityComparer","pos":[0,16]}]},{"pos":[34314,34325],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[35736,35746],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[37155,37169],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[38956,38968],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key whose value to get or set.","pos":[39682,39721],"source":"\\n<p>The key whose value to get or set."},{"content":"&lt;/p&gt;\\n","pos":[39722,39728],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value associated with the specified key.","pos":[39788,39837],"source":"\\n<p>The value associated with the specified key."},{"content":"If the specified key is not found, attempting to get it returns &lt;strong&gt;null&lt;/strong&gt;, and attempting to set it creates a new element using the specified key.&lt;/p&gt;\\n","pos":[39838,40002],"source":" If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[40121,40166],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[40167,40173],"source":" </p>\\n"},{"pos":[41304,41308],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[42969,42977],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[44598,44604],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[46349,46368],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The key of the element to add.","pos":[47179,47214],"source":"\\n<p>The key of the element to add."},{"content":"&lt;/p&gt;\\n","pos":[47215,47221],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to add.","pos":[47285,47322],"source":"\\n<p>The value of the element to add."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt;.","pos":[47323,47362],"source":" The value can be <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47363,47369],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47488,47533],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47534,47540],"source":" </p>\\n"},{"pos":[48959,48966],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[50467,50474],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[51820,51836],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[53141,53186],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53187,53193],"source":" </p>\\n"},{"pos":[53877,53896],"content":"ContainsKey(Object)","needQuote":true,"nodes":[{"content":"ContainsKey(Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[55213,55258],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[55259,55265],"source":" </p>\\n"},{"pos":[55933,55954],"content":"ContainsValue(Object)","needQuote":true,"nodes":[{"content":"ContainsValue(Object)","pos":[0,21]}]},{"pos":[57868,57888],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[59324,59392],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[59393,59399],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[59518,59565],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[59566,59572],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arrayIndex&lt;/em&gt; is less than zero.","pos":[59689,59734],"source":"\\n<p>\\n<em>arrayIndex</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[59735,59741],"source":" </p>\\n"},{"pos":[61138,61153],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[62899,62914],"content":"GetHash(Object)","needQuote":true,"nodes":[{"content":"GetHash(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The hash code for &lt;em&gt;key&lt;/em&gt;.&lt;/p&gt;\\n","pos":[63802,63844],"source":"\\n<p>The hash code for <em>key</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[63965,64010],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[64011,64017],"source":" </p>\\n"},{"pos":[64676,64701],"content":"KeyEquals(Object, Object)","needQuote":true,"nodes":[{"content":"KeyEquals(Object, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;item&lt;/em&gt; and &lt;em&gt;key&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[66008,66122],"source":"\\n<p>\\n<strong>true</strong> if <em>item</em> and <em>key</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;item&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66241,66350],"source":"\\n<p>\\n<em>item</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66351,66357],"source":" </p>\\n"},{"pos":[67053,67067],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.","pos":[68007,68045],"source":"\\n<p>The key of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[68046,68052],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[68171,68216],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[68217,68223],"source":" </p>\\n"},{"pos":[69363,69386],"content":"Synchronized(Hashtable)","needQuote":true,"nodes":[{"content":"Synchronized(Hashtable)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;table&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[70814,70861],"source":"\\n<p>\\n<em>table</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[70862,70868],"source":" </p>\\n"},{"pos":[71538,71565],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[72951,72969],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[73136,73142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73316,73327],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[73540,73551],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[73764,73775],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[73974,73984],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[74079,74087],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[74156,74157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74184,74185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74255,74263],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[74332,74333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74360,74361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74544,74558],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[74677,74683],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74750,74751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74801,74807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74867,74868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74951,74957],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75024,75025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75075,75081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75141,75142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75356,75378],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[75526,75532],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75599,75600],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75650,75656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[75717,75718]},{"pos":[75773,75779],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75839,75840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75937,75943],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76010,76011],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76061,76067],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76128,76129]},{"pos":[76184,76190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76250,76251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76496,76527],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[76693,76708],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[76784,76785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76835,76841],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76902,76903]},{"pos":[76958,76964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77024,77025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77131,77146],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[77222,77223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77273,77279],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77340,77341]},{"pos":[77396,77402],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77462,77463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77693,77706],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[77807,77818],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[77890,77891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77918,77919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77992,78003],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[78075,78076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78103,78104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78279,78288],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[78381,78388],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[78456,78457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78484,78485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78554,78561],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[78629,78630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78657,78658],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78833,78850],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[78959,78974],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[79050,79051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79078,79079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79156,79171],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[79247,79248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79275,79276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79571,79584],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[79701,79712],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[79771,79772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79799,79800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79881,79892],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[79951,79952],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79979,79980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80335,80347],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[80480,80490],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[80557,80558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80585,80586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80675,80685],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[80752,80753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80780,80781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81122,81137],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[81341,81354],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[81416,81417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81444,81445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81523,81539],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[81604,81605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81632,81633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82011,82028],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[82240,82255],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[82319,82320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82347,82348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82428,82446],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[82513,82514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82541,82542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82777,82783],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[82948,82972],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[83151,83162],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[83221,83222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83289,83300],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[83377,83378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83491,83502],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[83561,83562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83629,83640],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[83717,83718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83946,83955],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[84161,84184],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[84379,84389],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[84456,84457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84524,84535],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84612,84613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84734,84744],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[84811,84812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84879,84890],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84967,84968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85221,85239],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[85461,85487],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[85794,85807],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[85869,85870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85937,85948],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[86025,86026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86136,86152],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[86217,86218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86285,86296],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[86373,86374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86663,86673],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[86873,86901],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[87216,87231],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[87295,87296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87363,87374],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87451,87452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87564,87582],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[87649,87650],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87717,87728],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87805,87806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88068,88079],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[88260,88277],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[88479,88485],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[88629,88634],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88823,88828],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[89082,89093],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[89314,89321],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[89520,89530],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[89803,89817],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[90106,90118],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"pos":[90357,90361],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[90444,90445]},{"pos":[90498,90504],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"]","pos":[90565,90566]},{"pos":[90667,90671],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[90753,90754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90804,90810],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90870,90871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91150,91154],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[91403,91411],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[91669,91675],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[91953,91972],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"pos":[92148,92151],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[92232,92233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92283,92289],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[92350,92351]},{"pos":[92406,92412],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92472,92473],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92584,92587],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[92668,92669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92719,92725],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[92786,92787]},{"pos":[92842,92848],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92908,92909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93165,93172],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[93295,93300],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[93383,93384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93411,93412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93496,93501],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[93584,93585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93612,93613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93848,93864],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[94021,94029],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[94115,94116],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94166,94172],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94232,94233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94335,94343],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[94429,94430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94480,94486],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94546,94547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94819,94839],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[95017,95023],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[95086,95087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95136,95141],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[95180,95181]},{"pos":[95235,95240],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95299,95300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95412,95418],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[95481,95482],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95531,95536],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[95575,95576]},{"pos":[95630,95635],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95694,95695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95906,95911],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[96107,96122],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[96261,96274],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[96365,96366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96393,96394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96486,96499],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[96590,96591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96618,96619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96845,96866],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[97142,97156],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[97309,97315],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[97399,97400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97450,97456],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97516,97517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97617,97623],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[97707,97708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97758,97764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97824,97825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98046,98055],"content":"Hashtable","needQuote":true,"nodes":[{"content":"Hashtable","pos":[0,9]}]},{"pos":[98288,98303],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[98442,98455],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[98525,98526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98553,98554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98646,98659],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[98729,98730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98757,98758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98974,98985],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[99167,99188],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[99382,99409],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[99628,99645],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[99838,99859],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[100046,100066],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[100252,100274],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]}],"content":"items:\n- uid: System.Collections.Hashtable\n  commentId: T:System.Collections.Hashtable\n  id: Hashtable\n  parent: System.Collections\n  children:\n  - System.Collections.Hashtable.#ctor\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.Add(System.Object,System.Object)\n  - System.Collections.Hashtable.Clear\n  - System.Collections.Hashtable.Clone\n  - System.Collections.Hashtable.Contains(System.Object)\n  - System.Collections.Hashtable.ContainsKey(System.Object)\n  - System.Collections.Hashtable.ContainsValue(System.Object)\n  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  - System.Collections.Hashtable.Count\n  - System.Collections.Hashtable.EqualityComparer\n  - System.Collections.Hashtable.GetEnumerator\n  - System.Collections.Hashtable.GetHash(System.Object)\n  - System.Collections.Hashtable.IsFixedSize\n  - System.Collections.Hashtable.IsReadOnly\n  - System.Collections.Hashtable.IsSynchronized\n  - System.Collections.Hashtable.Item(System.Object)\n  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)\n  - System.Collections.Hashtable.Keys\n  - System.Collections.Hashtable.Remove(System.Object)\n  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  - System.Collections.Hashtable.SyncRoot\n  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Hashtable.Values\n  langs:\n  - csharp\n  - vb\n  name: Hashtable\n  fullName: System.Collections.Hashtable\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Hashtable\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 69\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Represents a collection of key/value pairs that are organized based on the hash code of the key.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerTypeProxy(typeof (Hashtable.HashtableDebugView))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public class Hashtable : IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback, ICloneable\n    content.vb: >-\n      <DebuggerTypeProxy(GetType(Hashtable.HashtableDebugView))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public Class Hashtable\n          Implements IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback, ICloneable\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.IHashCodeProvider\n    commentId: T:System.Collections.IHashCodeProvider\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  - type: System.Collections.DictionaryEntry\n    commentId: T:System.Collections.DictionaryEntry\n  - type: System.Collections.Generic.Dictionary`2\n    commentId: T:System.Collections.Generic.Dictionary`2\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Hashtable\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Hashtable.#ctor\n  commentId: M:System.Collections.Hashtable.#ctor\n  id: '#ctor'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable()\n  fullName: System.Collections.Hashtable.Hashtable()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 247\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new, empty instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the default initial capacity, load factor, hash code provider, and comparer.</p>\\n\"\n  syntax:\n    content: public Hashtable()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable()\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)\n  id: '#ctor(System.Collections.IDictionary)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(IDictionary)\n  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 354\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</p>\\n\"\n  syntax:\n    content: public Hashtable(IDictionary d)\n    content.vb: Public Sub New(d As IDictionary)\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to copy to a new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(IDictionary)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(IDictionary, IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 369\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by copying the elements from the specified dictionary to a new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Hashtable(IDictionary d, IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(d As IDictionary, equalityComparer As IEqualityComparer)\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to copy to a new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of <xref href=\\\"System.Object.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the default comparer is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(IDictionary, IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)\n  id: '#ctor(System.Collections.IDictionary,System.Single)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(IDictionary, Single)\n  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 360\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</p>\\n\"\n  syntax:\n    content: public Hashtable(IDictionary d, float loadFactor)\n    content.vb: Public Sub New(d As IDictionary, loadFactor As Single)\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to copy to a new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: loadFactor\n      type: System.Single\n      description: \"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(IDictionary, Single)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(IDictionary, Single, IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary, System.Single, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 384\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Hashtable(IDictionary d, float loadFactor, IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(d As IDictionary, loadFactor As Single, equalityComparer As IEqualityComparer)\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to copy to a new <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: loadFactor\n      type: System.Single\n      description: \"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\\n\"\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of <xref href=\\\"System.Object.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the default comparer is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(IDictionary, Single, IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 335\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new, empty instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the default initial capacity and load factor, and the specified <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Hashtable(IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(equalityComparer As IEqualityComparer)\n    parameters:\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of <xref href=\\\"System.Object.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the default comparer is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Int32)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(Int32)\n  fullName: System.Collections.Hashtable.Hashtable(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 257\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new, empty instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</p>\\n\"\n  syntax:\n    content: public Hashtable(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of elements that the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can initially contain. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(Int32)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(Int32, IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(System.Int32, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 347\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new, empty instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified initial capacity and <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and the default load factor.</p>\\n\"\n  syntax:\n    content: public Hashtable(int capacity, IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(capacity As Integer, equalityComparer As IEqualityComparer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of elements that the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can initially contain. </p>\\n\"\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of <xref href=\\\"System.Object.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the default comparer is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(Int32, IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)\n  id: '#ctor(System.Int32,System.Single)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(Int32, Single)\n  fullName: System.Collections.Hashtable.Hashtable(System.Int32, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 271\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new, empty instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</p>\\n\"\n  syntax:\n    content: public Hashtable(int capacity, float loadFactor)\n    content.vb: Public Sub New(capacity As Integer, loadFactor As Single)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of elements that the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can initially contain. </p>\\n\"\n    - id: loadFactor\n      type: System.Single\n      description: \"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>capacity</em> is causing an overflow.</p>\\n\"\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(Int32, Single)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Hashtable(Int32, Single, IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(System.Int32, System.Single, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 323\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new, empty instance of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified initial capacity, load factor, and <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(capacity As Integer, loadFactor As Single, equalityComparer As IEqualityComparer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of elements that the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can initially contain. </p>\\n\"\n    - id: loadFactor\n      type: System.Single\n      description: \"\\n<p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\\n\"\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of <xref href=\\\"System.Object.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the default comparer is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is less than 0.1.</p>\\n<p>-or- </p>\\n<p>\\n<em>loadFactor</em> is greater than 1.0. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Hashtable.Hashtable(Int32, Single, IEqualityComparer)\n- uid: System.Collections.Hashtable.Count\n  commentId: P:System.Collections.Hashtable.Count\n  id: Count\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Hashtable.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 1127\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of key/value pairs contained in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of key/value pairs contained in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.Count\n- uid: System.Collections.Hashtable.EqualityComparer\n  commentId: P:System.Collections.Hashtable.EqualityComparer\n  id: EqualityComparer\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: EqualityComparer\n  fullName: System.Collections.Hashtable.EqualityComparer\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EqualityComparer\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 231\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use for the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected IEqualityComparer EqualityComparer { get; }\n    content.vb: Protected ReadOnly Property EqualityComparer As IEqualityComparer\n    parameters: []\n    return:\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use for the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The property is set to a value, but the hash table was created using an <xref href=\\\"System.Collections.IHashCodeProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and an <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Comparer\n    commentId: T:System.Collections.Comparer\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: Hashtable.EqualityComparer\n- uid: System.Collections.Hashtable.IsFixedSize\n  commentId: P:System.Collections.Hashtable.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: IsFixedSize\n  fullName: System.Collections.Hashtable.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFixedSize\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 807\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: public virtual bool IsFixedSize { get; }\n    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsFixedSize\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.IsFixedSize\n- uid: System.Collections.Hashtable.IsReadOnly\n  commentId: P:System.Collections.Hashtable.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.Hashtable.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 803\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsReadOnly\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.IsReadOnly\n- uid: System.Collections.Hashtable.IsSynchronized\n  commentId: P:System.Collections.Hashtable.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Collections.Hashtable.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSynchronized\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 812\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  - type: System.Collections.Hashtable.SyncRoot\n    commentId: P:System.Collections.Hashtable.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.IsSynchronized\n- uid: System.Collections.Hashtable.Item(System.Object)\n  commentId: P:System.Collections.Hashtable.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Item[Object]\n  fullName: System.Collections.Hashtable.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 642\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the value associated with the specified key.</p>\\n\"\n  syntax:\n    content: public virtual object this[object key] { get; set; }\n    content.vb: Public Overridable Property Item(key As Object) As Object\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key whose value to get or set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.Add(System.Object,System.Object)\n    commentId: M:System.Collections.Hashtable.Add(System.Object,System.Object)\n  implements:\n  - System.Collections.IDictionary.Item(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Collections.Hashtable.Item(System.Object)\n  name.vb: Item(Object)\n  nameWithType: Hashtable.Item[Object]\n  nameWithType.vb: Hashtable.Item(Object)\n- uid: System.Collections.Hashtable.Keys\n  commentId: P:System.Collections.Hashtable.Keys\n  id: Keys\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.Hashtable.Keys\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Keys\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 844\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the keys in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Keys { get; }\n    content.vb: Public Overridable ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the keys in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.Hashtable.Values\n    commentId: P:System.Collections.Hashtable.Values\n  implements:\n  - System.Collections.IDictionary.Keys\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.Keys\n- uid: System.Collections.Hashtable.SyncRoot\n  commentId: P:System.Collections.Hashtable.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Collections.Hashtable.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SyncRoot\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 1116\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.IsSynchronized\n    commentId: P:System.Collections.Hashtable.IsSynchronized\n  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.SyncRoot\n- uid: System.Collections.Hashtable.Values\n  commentId: P:System.Collections.Hashtable.Values\n  id: Values\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Collections.Hashtable.Values\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Values\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 861\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the values in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Values { get; }\n    content.vb: Public Overridable ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the values in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.Hashtable.Keys\n    commentId: P:System.Collections.Hashtable.Keys\n  implements:\n  - System.Collections.IDictionary.Values\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Hashtable.Values\n- uid: System.Collections.Hashtable.Add(System.Object,System.Object)\n  commentId: M:System.Collections.Hashtable.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Add(Object, Object)\n  fullName: System.Collections.Hashtable.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 439\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an element with the specified key and value into the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Add(object key, object value)\n    content.vb: Public Overridable Sub Add(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to add. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to add. The value can be <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An element with the same key already exists in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.Remove(System.Object)\n    commentId: M:System.Collections.Hashtable.Remove(System.Object)\n  - type: System.Collections.Hashtable.Item(System.Object)\n    commentId: P:System.Collections.Hashtable.Item(System.Object)\n  - type: System.Collections.IDictionary.Add(System.Object,System.Object)\n    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  implements:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.Add(Object, Object)\n- uid: System.Collections.Hashtable.Clear\n  commentId: M:System.Collections.Hashtable.Clear\n  id: Clear\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Hashtable.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 444\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all elements from the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public virtual void Clear()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Overridable Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary.Clear\n    commentId: M:System.Collections.IDictionary.Clear\n  implements:\n  - System.Collections.IDictionary.Clear\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.Clear()\n- uid: System.Collections.Hashtable.Clone\n  commentId: M:System.Collections.Hashtable.Clone\n  id: Clone\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Collections.Hashtable.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clone\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 473\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Creates a shallow copy of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object Clone()\n    content.vb: Public Overridable Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n    commentId: M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.Clone()\n- uid: System.Collections.Hashtable.Contains(System.Object)\n  commentId: M:System.Collections.Hashtable.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.Hashtable.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 494\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific key.</p>\\n\"\n  syntax:\n    content: public virtual bool Contains(object key)\n    content.vb: Public Overridable Function Contains(key As Object) As Boolean\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.ContainsKey(System.Object)\n    commentId: M:System.Collections.Hashtable.ContainsKey(System.Object)\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  implements:\n  - System.Collections.IDictionary.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.Contains(Object)\n- uid: System.Collections.Hashtable.ContainsKey(System.Object)\n  commentId: M:System.Collections.Hashtable.ContainsKey(System.Object)\n  id: ContainsKey(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: ContainsKey(Object)\n  fullName: System.Collections.Hashtable.ContainsKey(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContainsKey\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 501\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific key.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsKey(object key)\n    content.vb: Public Overridable Function ContainsKey(key As Object) As Boolean\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.Contains(System.Object)\n    commentId: M:System.Collections.Hashtable.Contains(System.Object)\n  - type: System.Collections.Hashtable.ContainsValue(System.Object)\n    commentId: M:System.Collections.Hashtable.ContainsValue(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.ContainsKey(Object)\n- uid: System.Collections.Hashtable.ContainsValue(System.Object)\n  commentId: M:System.Collections.Hashtable.ContainsValue(System.Object)\n  id: ContainsValue(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: ContainsValue(Object)\n  fullName: System.Collections.Hashtable.ContainsValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContainsValue\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 537\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific value.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsValue(object value)\n    content.vb: Public Overridable Function ContainsValue(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to locate in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified <em>value</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.ContainsKey(System.Object)\n    commentId: M:System.Collections.Hashtable.ContainsKey(System.Object)\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.ContainsValue(Object)\n- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.Hashtable.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 589\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements to a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array, int arrayIndex)\n    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects copied from <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: arrayIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>arrayIndex</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.Collections.DictionaryEntry\n    commentId: T:System.Collections.DictionaryEntry\n  - type: System.Collections.Hashtable.GetEnumerator\n    commentId: M:System.Collections.Hashtable.GetEnumerator\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.CopyTo(Array, Int32)\n- uid: System.Collections.Hashtable.GetEnumerator\n  commentId: M:System.Collections.Hashtable.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.Hashtable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 788\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that iterates through the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IDictionaryEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionary.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.GetEnumerator()\n- uid: System.Collections.Hashtable.GetHash(System.Object)\n  commentId: M:System.Collections.Hashtable.GetHash(System.Object)\n  id: GetHash(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: GetHash(Object)\n  fullName: System.Collections.Hashtable.GetHash(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHash\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 795\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns the hash code for the specified key.</p>\\n\"\n  syntax:\n    content: protected virtual int GetHash(object key)\n    content.vb: Protected Overridable Function GetHash(key As Object) As Integer\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which a hash code is to be returned. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for <em>key</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Collections.IHashCodeProvider\n    commentId: T:System.Collections.IHashCodeProvider\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Hashtable.GetHash(Object)\n- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)\n  commentId: M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)\n  id: KeyEquals(System.Object,System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: KeyEquals(Object, Object)\n  fullName: System.Collections.Hashtable.KeyEquals(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: KeyEquals\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 820\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Compares a specific <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with a specific key in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual bool KeyEquals(object item, object key)\n    content.vb: Protected Overridable Function KeyEquals(item As Object, key As Object) As Boolean\n    parameters:\n    - id: item\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with <em>key</em>. </p>\\n\"\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key in the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with <em>item</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> and <em>key</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>item</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Collections.IComparer.Compare(System.Object,System.Object)\n    commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Hashtable.KeyEquals(Object, Object)\n- uid: System.Collections.Hashtable.Remove(System.Object)\n  commentId: M:System.Collections.Hashtable.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Collections.Hashtable.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 1068\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element with the specified key from the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public virtual void Remove(object key)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Overridable Sub Remove(key As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.Add(System.Object,System.Object)\n    commentId: M:System.Collections.Hashtable.Add(System.Object,System.Object)\n  - type: System.Collections.IDictionary.Remove(System.Object)\n    commentId: M:System.Collections.IDictionary.Remove(System.Object)\n  implements:\n  - System.Collections.IDictionary.Remove(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Hashtable.Remove(Object)\n- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  id: Synchronized(System.Collections.Hashtable)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: Synchronized(Hashtable)\n  fullName: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Synchronized\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 1133\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns a synchronized (thread-safe) wrapper for the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true)]\n\n      public static Hashtable Synchronized(Hashtable table)\n    content.vb: >-\n      <HostProtection(Synchronization:=True)>\n\n      Public Shared Function Synchronized(table As Hashtable) As Hashtable\n    parameters:\n    - id: table\n      type: System.Collections.Hashtable\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to synchronize. </p>\\n\"\n    return:\n      type: System.Collections.Hashtable\n      description: \"\\n<p>A synchronized (thread-safe) wrapper for the <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>table</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.IsSynchronized\n    commentId: P:System.Collections.Hashtable.IsSynchronized\n  - type: System.Collections.Hashtable.SyncRoot\n    commentId: P:System.Collections.Hashtable.SyncRoot\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Hashtable.Synchronized(Hashtable)\n- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Hashtable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/mscorlib/src/System/Collections/Hashtable.cs\n    startLine: 779\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator that iterates through a collection.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to iterate through the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Hashtable.IEnumerable.GetEnumerator()\n  nameWithType.vb: Hashtable.System.Collections.IEnumerable.GetEnumerator()\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  fullname.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: '['\n    fullName: '['\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  nameWithType: IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  nameWithType: IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Add(Object, Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Clear()\n  commentId: M:System.Collections.IDictionary.Clear\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Contains(Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.GetEnumerator()\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Remove(Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  fullName: System.Collections.Hashtable\n  nameWithType: Hashtable\n  commentId: T:System.Collections.Hashtable\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n"}