{"nodes":[{"pos":[564,587],"content":"CaseInsensitiveComparer","needQuote":true,"nodes":[{"content":"CaseInsensitiveComparer","pos":[0,23]}]},{"pos":[2706,2731],"content":"CaseInsensitiveComparer()","needQuote":true,"nodes":[{"content":"CaseInsensitiveComparer()","pos":[0,25]}]},{"pos":[4363,4399],"content":"CaseInsensitiveComparer(CultureInfo)","needQuote":true,"nodes":[{"content":"CaseInsensitiveComparer(CultureInfo)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;culture&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5787,5836],"source":"\\n<p>\\n<em>culture</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5837,5843],"source":" </p>\\n"},{"pos":[6403,6410],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[8371,8387],"content":"DefaultInvariant","needQuote":true,"nodes":[{"content":"DefaultInvariant","pos":[0,16]}]},{"pos":[10445,10468],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[11375,11408],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[11409,11415],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[11475,11509],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[11510,11516],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative values of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;a&lt;/em&gt; is less than &lt;em&gt;b&lt;/em&gt;, with casing ignored.","pos":[11575,11852],"source":"\\n<p>A signed integer that indicates the relative values of <em>a</em> and <em>b</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is less than <em>b</em>, with casing ignored."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;a&lt;/em&gt; equals &lt;em&gt;b&lt;/em&gt;, with casing ignored.","pos":[11853,11959],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>a</em> equals <em>b</em>, with casing ignored."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;a&lt;/em&gt; is greater than &lt;em&gt;b&lt;/em&gt;, with casing ignored.","pos":[11960,12088],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is greater than <em>b</em>, with casing ignored."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[12089,12123],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[13099,13117],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[13284,13290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13462,13471],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[13664,13674],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13769,13777],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13846,13847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13874,13875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13945,13953],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14022,14023],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14050,14051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14234,14248],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14367,14373],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14440,14441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14491,14497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14557,14558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14641,14647],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14714,14715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14765,14771],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14831,14832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15046,15068],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15216,15222],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15289,15290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15340,15346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15407,15408]},{"pos":[15463,15469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15529,15530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15627,15633],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15700,15701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15751,15757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15818,15819]},{"pos":[15874,15880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15940,15941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16186,16217],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16383,16398],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16474,16475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16525,16531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16592,16593]},{"pos":[16648,16654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16714,16715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16821,16836],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16912,16913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16963,16969],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17030,17031]},{"pos":[17086,17092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17152,17153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17383,17396],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17497,17508],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17580,17581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17608,17609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17682,17693],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17765,17766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17793,17794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17969,17978],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18071,18078],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18146,18147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18174,18175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18244,18251],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18319,18320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18347,18348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18523,18540],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[18649,18664],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18740,18741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18768,18769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18846,18861],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18937,18938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18965,18966],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19111,19117],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19281,19292],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[19470,19490],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[19704,19727],"content":"CaseInsensitiveComparer","needQuote":true,"nodes":[{"content":"CaseInsensitiveComparer","pos":[0,23]}]},{"pos":[20020,20043],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"pos":[20223,20230],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[20313,20314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20364,20370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20431,20432]},{"pos":[20487,20493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20553,20554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20667,20674],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[20757,20758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20808,20814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20875,20876]},{"pos":[20931,20937],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20997,20998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21211,21216],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21356,21377],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[21578,21595],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.CaseInsensitiveComparer\n  commentId: T:System.Collections.CaseInsensitiveComparer\n  id: CaseInsensitiveComparer\n  parent: System.Collections\n  children:\n  - System.Collections.CaseInsensitiveComparer.#ctor\n  - System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)\n  - System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)\n  - System.Collections.CaseInsensitiveComparer.Default\n  - System.Collections.CaseInsensitiveComparer.DefaultInvariant\n  langs:\n  - csharp\n  - vb\n  name: CaseInsensitiveComparer\n  fullName: System.Collections.CaseInsensitiveComparer\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CaseInsensitiveComparer\n    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n    startLine: 18\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Compares two objects for equivalence, ignoring the case of strings.</p>\\n\"\n  syntax:\n    content: 'public class CaseInsensitiveComparer : IComparer'\n    content.vb: >-\n      Public Class CaseInsensitiveComparer\n          Implements IComparer\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.Comparer\n    commentId: T:System.Collections.Comparer\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CaseInsensitiveComparer\n- uid: System.Collections.CaseInsensitiveComparer.#ctor\n  commentId: M:System.Collections.CaseInsensitiveComparer.#ctor\n  id: '#ctor'\n  parent: System.Collections.CaseInsensitiveComparer\n  langs:\n  - csharp\n  - vb\n  name: CaseInsensitiveComparer()\n  fullName: System.Collections.CaseInsensitiveComparer.CaseInsensitiveComparer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n    startLine: 23\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the <xref href=\\\"System.Threading.Thread.CurrentCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current thread.</p>\\n\"\n  syntax:\n    content: public CaseInsensitiveComparer()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CaseInsensitiveComparer.CaseInsensitiveComparer()\n- uid: System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)\n  commentId: M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)\n  id: '#ctor(System.Globalization.CultureInfo)'\n  parent: System.Collections.CaseInsensitiveComparer\n  langs:\n  - csharp\n  - vb\n  name: CaseInsensitiveComparer(CultureInfo)\n  fullName: System.Collections.CaseInsensitiveComparer.CaseInsensitiveComparer(System.Globalization.CultureInfo)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n    startLine: 28\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public CaseInsensitiveComparer(CultureInfo culture)\n    content.vb: Public Sub New(culture As CultureInfo)\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use for the new <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>culture</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CaseInsensitiveComparer.CaseInsensitiveComparer(CultureInfo)\n- uid: System.Collections.CaseInsensitiveComparer.Default\n  commentId: P:System.Collections.CaseInsensitiveComparer.Default\n  id: Default\n  parent: System.Collections.CaseInsensitiveComparer\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Collections.CaseInsensitiveComparer.Default\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Default\n    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n    startLine: 38\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an instance of <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is associated with the <xref href=\\\"System.Threading.Thread.CurrentCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current thread and that is always available.</p>\\n\"\n  syntax:\n    content: public static CaseInsensitiveComparer Default { get; }\n    content.vb: Public Shared ReadOnly Property Default As CaseInsensitiveComparer\n    parameters: []\n    return:\n      type: System.Collections.CaseInsensitiveComparer\n      description: \"\\n<p>An instance of <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is associated with the <xref href=\\\"System.Threading.Thread.CurrentCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current thread.</p>\\n\"\n  seealso:\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CaseInsensitiveComparer.Default\n- uid: System.Collections.CaseInsensitiveComparer.DefaultInvariant\n  commentId: P:System.Collections.CaseInsensitiveComparer.DefaultInvariant\n  id: DefaultInvariant\n  parent: System.Collections.CaseInsensitiveComparer\n  langs:\n  - csharp\n  - vb\n  name: DefaultInvariant\n  fullName: System.Collections.CaseInsensitiveComparer.DefaultInvariant\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultInvariant\n    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n    startLine: 48\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an instance of <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is associated with <xref href=\\\"System.Globalization.CultureInfo.InvariantCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and that is always available.</p>\\n\"\n  syntax:\n    content: public static CaseInsensitiveComparer DefaultInvariant { get; }\n    content.vb: Public Shared ReadOnly Property DefaultInvariant As CaseInsensitiveComparer\n    parameters: []\n    return:\n      type: System.Collections.CaseInsensitiveComparer\n      description: \"\\n<p>An instance of <xref href=\\\"System.Collections.CaseInsensitiveComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is associated with <xref href=\\\"System.Globalization.CultureInfo.InvariantCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CaseInsensitiveComparer.DefaultInvariant\n- uid: System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)\n  commentId: M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)\n  id: Compare(System.Object,System.Object)\n  parent: System.Collections.CaseInsensitiveComparer\n  langs:\n  - csharp\n  - vb\n  name: Compare(Object, Object)\n  fullName: System.Collections.CaseInsensitiveComparer.Compare(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Compare\n    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs\n    startLine: 69\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\\n\"\n  syntax:\n    content: public int Compare(object a, object b)\n    content.vb: Public Function Compare(a As Object, b As Object) As Integer\n    parameters:\n    - id: a\n      type: System.Object\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: b\n      type: System.Object\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of <em>a</em> and <em>b</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is less than <em>b</em>, with casing ignored. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>a</em> equals <em>b</em>, with casing ignored. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is greater than <em>b</em>, with casing ignored. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Neither <em>a</em> nor <em>b</em> implements the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or- </p>\\n<p>\\n<em>a</em> and <em>b</em> are of different types. </p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  implements:\n  - System.Collections.IComparer.Compare(System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CaseInsensitiveComparer.Compare(Object, Object)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  fullName: System.Globalization.CultureInfo\n  nameWithType: CultureInfo\n  commentId: T:System.Globalization.CultureInfo\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Collections.CaseInsensitiveComparer\n  parent: System.Collections\n  isExternal: false\n  name: CaseInsensitiveComparer\n  fullName: System.Collections.CaseInsensitiveComparer\n  nameWithType: CaseInsensitiveComparer\n  commentId: T:System.Collections.CaseInsensitiveComparer\n- uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n  parent: System.Collections.IComparer\n  isExternal: true\n  name: Compare(Object, Object)\n  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparer.Compare(Object, Object)\n  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}