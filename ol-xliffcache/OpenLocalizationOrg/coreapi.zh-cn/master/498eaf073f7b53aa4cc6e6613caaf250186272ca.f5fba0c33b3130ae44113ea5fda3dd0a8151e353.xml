{"nodes":[{"pos":[1316,1333],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[3133,3159],"content":"CancellationToken(Boolean)","needQuote":true,"nodes":[{"content":"CancellationToken(Boolean)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The canceled state for the token.&lt;/p&gt;\\n","pos":[3923,3967],"source":"\\n<p>The canceled state for the token.</p>\\n"},{"pos":[4308,4321],"content":"CanBeCanceled","needQuote":true,"nodes":[{"content":"CanBeCanceled","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this token is capable of being in the canceled state; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5030,5156],"source":"\\n<p>\\n<strong>true</strong> if this token is capable of being in the canceled state; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5535,5558],"content":"IsCancellationRequested","needQuote":true,"nodes":[{"content":"IsCancellationRequested","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if cancellation has been requested for this token; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6300,6420],"source":"\\n<p>\\n<strong>true</strong> if cancellation has been requested for this token; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[6752,6756],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An empty cancellation token.","pos":[7537,7570],"source":"\\n<p>An empty cancellation token."},{"content":"&lt;/p&gt;\\n","pos":[7571,7577],"source":" </p>\\n"},{"pos":[7930,7940],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[9515,9529],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The other object to which to compare this instance.&lt;/p&gt;\\n","pos":[10424,10486],"source":"\\n<p>The other object to which to compare this instance.</p>\\n"},{"pos":[11992,12017],"content":"Equals(CancellationToken)","needQuote":true,"nodes":[{"content":"Equals(CancellationToken)","pos":[0,25]}]},{"pos":[13990,14003],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15494,15540],"content":"Equality(CancellationToken, CancellationToken)","needQuote":true,"nodes":[{"content":"Equality(CancellationToken, CancellationToken)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The first instance.&lt;/p&gt;\\n","pos":[16492,16522],"source":"\\n<p>The first instance.</p>\\n"},{"content":"\\n&lt;p&gt;The second instance.&lt;/p&gt;\\n","pos":[16607,16638],"source":"\\n<p>The second instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the instances are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[16699,16790],"source":"\\n<p>\\n<strong>true</strong> if the instances are equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16791,16797],"source":" </p>\\n"},{"pos":[17660,17708],"content":"Inequality(CancellationToken, CancellationToken)","needQuote":true,"nodes":[{"content":"Inequality(CancellationToken, CancellationToken)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The first instance.&lt;/p&gt;\\n","pos":[18669,18699],"source":"\\n<p>The first instance.</p>\\n"},{"content":"\\n&lt;p&gt;The second instance.&lt;/p&gt;\\n","pos":[18784,18815],"source":"\\n<p>The second instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the instances are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[18876,18971],"source":"\\n<p>\\n<strong>true</strong> if the instances are not equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18972,18978],"source":" </p>\\n"},{"pos":[19660,19676],"content":"Register(Action)","needQuote":true,"nodes":[{"content":"Register(Action)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;callback&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[21335,21374],"source":"\\n<p>\\n<em>callback</em> is null.</p>\\n"},{"pos":[21780,21805],"content":"Register(Action, Boolean)","needQuote":true,"nodes":[{"content":"Register(Action, Boolean)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;callback&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[23847,23886],"source":"\\n<p>\\n<em>callback</em> is null.</p>\\n"},{"pos":[24343,24375],"content":"Register(Action<Object>, Object)","needQuote":true,"nodes":[{"content":"Register(Action&lt;Object&gt;, Object)","pos":[0,32],"source":"Register(Action<Object>, Object)"}]},{"content":"\\n&lt;p&gt;The state to pass to the &lt;em&gt;callback&lt;/em&gt; when the delegate is invoked.","pos":[25552,25629],"source":"\\n<p>The state to pass to the <em>callback</em> when the delegate is invoked."},{"content":"This may be null.&lt;/p&gt;\\n","pos":[25630,25653],"source":" This may be null.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;callback&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[26294,26333],"source":"\\n<p>\\n<em>callback</em> is null.</p>\\n"},{"pos":[27069,27110],"content":"Register(Action<Object>, Object, Boolean)","needQuote":true,"nodes":[{"content":"Register(Action&lt;Object&gt;, Object, Boolean)","pos":[0,41],"source":"Register(Action<Object>, Object, Boolean)"}]},{"content":"\\n&lt;p&gt;The state to pass to the &lt;em&gt;callback&lt;/em&gt; when the delegate is invoked.","pos":[28373,28450],"source":"\\n<p>The state to pass to the <em>callback</em> when the delegate is invoked."},{"content":"This may be null.&lt;/p&gt;\\n","pos":[28451,28474],"source":" This may be null.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;callback&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[29420,29459],"source":"\\n<p>\\n<em>callback</em> is null.</p>\\n"},{"pos":[30121,30151],"content":"ThrowIfCancellationRequested()","needQuote":true,"nodes":[{"content":"ThrowIfCancellationRequested()","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The token has had cancellation requested.&lt;/p&gt;\\n","pos":[31019,31071],"source":"\\n<p>The token has had cancellation requested.</p>\\n"},{"pos":[31514,31530],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[31713,31723],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[31824,31832],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31883,31884],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31911,31912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31985,31993],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32044,32045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32072,32073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32276,32298],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32446,32452],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32519,32520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32570,32576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32637,32638]},{"pos":[32693,32699],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32759,32760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32857,32863],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32930,32931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32981,32987],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33048,33049]},{"pos":[33104,33110],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33170,33171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33416,33447],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33613,33628],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33704,33705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33755,33761],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33822,33823]},{"pos":[33878,33884],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33944,33945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34051,34066],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34142,34143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34193,34199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34260,34261]},{"pos":[34316,34322],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34382,34383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34609,34618],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[34711,34718],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34786,34787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34814,34815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34884,34891],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34959,34960],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34987,34988],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35144,35153],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[35307,35313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35434,35440],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[35572,35579],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35758,35775],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[35997,36007],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[36218,36232],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[36357,36363],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36412,36413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36463,36469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36529,36530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36616,36622],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36671,36672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36722,36728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36788,36789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36992,37005],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37112,37123],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37177,37178],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37205,37206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37282,37293],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37347,37348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37375,37376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37542,37547],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37689,37695],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[37883,37912],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[38171,38185],"content":"Action<Object>","needQuote":true,"nodes":[{"content":"Action&lt;Object&gt;","pos":[0,14],"source":"Action<Object>"}]},{"pos":[38353,38359],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[38419,38420],"content":"<","needQuote":true,"nodes":[]},{"pos":[38470,38476],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38604,38610],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[38671,38674]},{"pos":[38731,38737],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38797,38798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38978,38987],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[39126,39132],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[39171,39172],"content":"<","needQuote":true,"nodes":[]},{"pos":[39199,39200],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[39295,39301],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[39341,39344]},{"pos":[39378,39379],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[39406,39407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39579,39602],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[39796,39817],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[40027,40053],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]}],"content":"items:\n- uid: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  id: CancellationToken\n  parent: System.Threading\n  children:\n  - System.Threading.CancellationToken.#ctor(System.Boolean)\n  - System.Threading.CancellationToken.CanBeCanceled\n  - System.Threading.CancellationToken.Equals(System.Object)\n  - System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  - System.Threading.CancellationToken.GetHashCode\n  - System.Threading.CancellationToken.IsCancellationRequested\n  - System.Threading.CancellationToken.None\n  - System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  - System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  - System.Threading.CancellationToken.Register(System.Action)\n  - System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  - System.Threading.CancellationToken.ThrowIfCancellationRequested\n  - System.Threading.CancellationToken.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancellationToken\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 40\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Propagates notification that operations should be canceled.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerDisplay(\"IsCancellationRequested = {IsCancellationRequested}\")]\n\n      public struct CancellationToken\n    content.vb: >-\n      <ComVisible(False)>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerDisplay(\"IsCancellationRequested = {IsCancellationRequested}\")>\n\n      Public Structure CancellationToken\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: CancellationToken\n- uid: System.Threading.CancellationToken.#ctor(System.Boolean)\n  commentId: M:System.Threading.CancellationToken.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: CancellationToken(Boolean)\n  fullName: System.Threading.CancellationToken.CancellationToken(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 155\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public CancellationToken(bool canceled)\n    content.vb: Public Sub New(canceled As Boolean)\n    parameters:\n    - id: canceled\n      type: System.Boolean\n      description: \"\\n<p>The canceled state for the token.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationToken.CancellationToken(Boolean)\n- uid: System.Threading.CancellationToken.CanBeCanceled\n  commentId: P:System.Threading.CancellationToken.CanBeCanceled\n  id: CanBeCanceled\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: CanBeCanceled\n  fullName: System.Threading.CancellationToken.CanBeCanceled\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanBeCanceled\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 99\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether this token is capable of being in the canceled state. </p>\\n\"\n  syntax:\n    content: public bool CanBeCanceled { get; }\n    content.vb: Public ReadOnly Property CanBeCanceled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this token is capable of being in the canceled state; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CancellationToken.CanBeCanceled\n- uid: System.Threading.CancellationToken.IsCancellationRequested\n  commentId: P:System.Threading.CancellationToken.IsCancellationRequested\n  id: IsCancellationRequested\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: IsCancellationRequested\n  fullName: System.Threading.CancellationToken.IsCancellationRequested\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsCancellationRequested\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 83\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether cancellation has been requested for this token.</p>\\n\"\n  syntax:\n    content: public bool IsCancellationRequested { get; }\n    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if cancellation has been requested for this token; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CancellationToken.IsCancellationRequested\n- uid: System.Threading.CancellationToken.None\n  commentId: P:System.Threading.CancellationToken.None\n  id: None\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.Threading.CancellationToken.None\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: None\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 59\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Returns an empty <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static CancellationToken None { get; }\n    content.vb: Public Shared ReadOnly Property None As CancellationToken\n    parameters: []\n    return:\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>An empty cancellation token. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CancellationToken.None\n- uid: System.Threading.CancellationToken.WaitHandle\n  commentId: P:System.Threading.CancellationToken.WaitHandle\n  id: WaitHandle\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: WaitHandle\n  fullName: System.Threading.CancellationToken.WaitHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitHandle\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 117\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is signaled when the token is canceled.</p>\\n\"\n  syntax:\n    content: public WaitHandle WaitHandle { get; }\n    content.vb: Public ReadOnly Property WaitHandle As WaitHandle\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is signaled when the token is canceled.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CancellationToken.WaitHandle\n- uid: System.Threading.CancellationToken.Equals(System.Object)\n  commentId: M:System.Threading.CancellationToken.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Threading.CancellationToken.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 398\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is equal to the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object other)\n    content.vb: Public Overrides Function Equals(other As Object) As Boolean\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The other object to which to compare this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>other</em> is a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and if the two instances are equal; otherwise, <strong>false</strong>. Two tokens are equal if they are associated with the same <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or if they were both constructed from public <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructors and their <xref href=\\\"System.Threading.CancellationToken.IsCancellationRequested\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are equal.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CancellationToken.Equals(Object)\n- uid: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  id: Equals(System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Equals(CancellationToken)\n  fullName: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 362\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is equal to the specified token.</p>\\n\"\n  syntax:\n    content: public bool Equals(CancellationToken other)\n    content.vb: Public Function Equals(other As CancellationToken) As Boolean\n    parameters:\n    - id: other\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The other <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to compare this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the instances are equal; otherwise, <strong>false</strong>. Two tokens are equal if they are associated with the same <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or if they were both constructed from public <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructors and their <xref href=\\\"System.Threading.CancellationToken.IsCancellationRequested\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are equal.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationToken.Equals(CancellationToken)\n- uid: System.Threading.CancellationToken.GetHashCode\n  commentId: M:System.Threading.CancellationToken.GetHashCode\n  id: GetHashCode\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Threading.CancellationToken.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 412\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Serves as a hash function for a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CancellationToken.GetHashCode()\n- uid: System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  id: op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Equality(CancellationToken, CancellationToken)\n  fullName: System.Threading.CancellationToken.Equality(System.Threading.CancellationToken, System.Threading.CancellationToken)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 431\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CancellationToken left, CancellationToken right)\n    content.vb: Public Shared Operator =(left As CancellationToken, right As CancellationToken) As Boolean\n    parameters:\n    - id: left\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The first instance.</p>\\n\"\n    - id: right\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The second instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the instances are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CancellationToken.Equality(CancellationToken, CancellationToken)\n- uid: System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  id: op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CancellationToken, CancellationToken)\n  fullName: System.Threading.CancellationToken.Inequality(System.Threading.CancellationToken, System.Threading.CancellationToken)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 444\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CancellationToken left, CancellationToken right)\n    content.vb: Public Shared Operator <>(left As CancellationToken, right As CancellationToken) As Boolean\n    parameters:\n    - id: left\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The first instance.</p>\\n\"\n    - id: right\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The second instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the instances are not equal; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CancellationToken.Inequality(CancellationToken, CancellationToken)\n- uid: System.Threading.CancellationToken.Register(System.Action)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action)\n  id: Register(System.Action)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Register(Action)\n  fullName: System.Threading.CancellationToken.Register(System.Action)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Register\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 191\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Registers a delegate that will be called when this <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n  syntax:\n    content: public CancellationTokenRegistration Register(Action callback)\n    content.vb: Public Function Register(callback As Action) As CancellationTokenRegistration\n    parameters:\n    - id: callback\n      type: System.Action\n      description: \"\\n<p>The delegate to be executed when the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that can be used to deregister the callback.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>callback</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationToken.Register(Action)\n- uid: System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  id: Register(System.Action,System.Boolean)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Register(Action, Boolean)\n  fullName: System.Threading.CancellationToken.Register(System.Action, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Register\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 226\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Registers a delegate that will be called when this <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n  syntax:\n    content: public CancellationTokenRegistration Register(Action callback, bool useSynchronizationContext)\n    content.vb: Public Function Register(callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration\n    parameters:\n    - id: callback\n      type: System.Action\n      description: \"\\n<p>The delegate to be executed when the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n    - id: useSynchronizationContext\n      type: System.Boolean\n      description: \"\\n<p>A value that indicates whether to capture the current <xref href=\\\"System.Threading.SynchronizationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and use it when invoking the <em>callback</em>.</p>\\n\"\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that can be used to deregister the callback.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>callback</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationToken.Register(Action, Boolean)\n- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  id: Register(System.Action{System.Object},System.Object)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Register(Action<Object>, Object)\n  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Register\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 259\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Registers a delegate that will be called when this <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n  syntax:\n    content: public CancellationTokenRegistration Register(Action<object> callback, object state)\n    content.vb: Public Function Register(callback As Action(Of Object), state As Object) As CancellationTokenRegistration\n    parameters:\n    - id: callback\n      type: System.Action{System.Object}\n      description: \"\\n<p>The delegate to be executed when the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>The state to pass to the <em>callback</em> when the delegate is invoked. This may be null.</p>\\n\"\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that can be used to deregister the callback.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>callback</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object)\n  name.vb: Register(Action(Of Object), Object)\n  nameWithType: CancellationToken.Register(Action<Object>, Object)\n  nameWithType.vb: CancellationToken.Register(Action(Of Object), Object)\n- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  id: Register(System.Action{System.Object},System.Object,System.Boolean)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: Register(Action<Object>, Object, Boolean)\n  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Register\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 297\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Registers a delegate that will be called when this <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n  syntax:\n    content: public CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext)\n    content.vb: Public Function Register(callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration\n    parameters:\n    - id: callback\n      type: System.Action{System.Object}\n      description: \"\\n<p>The delegate to be executed when the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is canceled.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>The state to pass to the <em>callback</em> when the delegate is invoked. This may be null.</p>\\n\"\n    - id: useSynchronizationContext\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates whether to capture the current <xref href=\\\"System.Threading.SynchronizationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and use it when invoking the <em>callback</em>.</p>\\n\"\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that can be used to deregister the callback.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>callback</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object, System.Boolean)\n  name.vb: Register(Action(Of Object), Object, Boolean)\n  nameWithType: CancellationToken.Register(Action<Object>, Object, Boolean)\n  nameWithType.vb: CancellationToken.Register(Action(Of Object), Object, Boolean)\n- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested\n  commentId: M:System.Threading.CancellationToken.ThrowIfCancellationRequested\n  id: ThrowIfCancellationRequested\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  - vb\n  name: ThrowIfCancellationRequested()\n  fullName: System.Threading.CancellationToken.ThrowIfCancellationRequested()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ThrowIfCancellationRequested\n    path: src/mscorlib/src/System/Threading/CancellationToken.cs\n    startLine: 463\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Throws a <xref href=\\\"System.OperationCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if this token has had cancellation requested.</p>\\n\"\n  syntax:\n    content: public void ThrowIfCancellationRequested()\n    content.vb: Public Sub ThrowIfCancellationRequested\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The token has had cancellation requested.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The associated <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationToken.ThrowIfCancellationRequested()\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  fullName: System.Action\n  nameWithType: Action\n  commentId: T:System.Action\n- uid: System.Threading.CancellationTokenRegistration\n  parent: System.Threading\n  isExternal: false\n  name: CancellationTokenRegistration\n  fullName: System.Threading.CancellationTokenRegistration\n  nameWithType: CancellationTokenRegistration\n  commentId: T:System.Threading.CancellationTokenRegistration\n- uid: System.Action{System.Object}\n  parent: System\n  definition: System.Action`1\n  name: Action<Object>\n  fullName: System.Action<System.Object>\n  fullname.vb: System.Action(Of System.Object)\n  name.vb: Action(Of Object)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Object>\n  nameWithType.vb: Action(Of Object)\n  commentId: T:System.Action{System.Object}\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n  commentId: T:System.Action`1\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n"}