{"nodes":[{"pos":[1690,1699],"content":"UdpClient","needQuote":true,"nodes":[{"content":"UdpClient","pos":[0,9]}]},{"pos":[3130,3141],"content":"UdpClient()","needQuote":true,"nodes":[{"content":"UdpClient()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[3885,3934],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[3935,3980]},{"content":"&lt;/p&gt;\\n","pos":[3981,3987],"source":" </p>\\n"},{"pos":[4307,4323],"content":"UdpClient(Int32)","needQuote":true,"nodes":[{"content":"UdpClient(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The local port number from which you intend to communicate.","pos":[5098,5162],"source":"\\n<p>The local port number from which you intend to communicate."},{"content":"&lt;/p&gt;\\n","pos":[5163,5169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[5666,5715],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[5716,5761]},{"content":"&lt;/p&gt;\\n","pos":[5762,5768],"source":" </p>\\n"},{"pos":[6192,6223],"content":"UdpClient(Int32, AddressFamily)","needQuote":true,"nodes":[{"content":"UdpClient(Int32, AddressFamily)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The port on which to listen for incoming connection attempts.","pos":[7079,7145],"source":"\\n<p>The port on which to listen for incoming connection attempts."},{"content":"&lt;/p&gt;\\n","pos":[7146,7152],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[8246,8295],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[8296,8341]},{"content":"&lt;/p&gt;\\n","pos":[8342,8348],"source":" </p>\\n"},{"pos":[8715,8736],"content":"UdpClient(IPEndPoint)","needQuote":true,"nodes":[{"content":"UdpClient(IPEndPoint)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localEP&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9835,9884],"source":"\\n<p>\\n<em>localEP</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9885,9891],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[10008,10057],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[10058,10103]},{"content":"&lt;/p&gt;\\n","pos":[10104,10110],"source":" </p>\\n"},{"pos":[10582,10606],"content":"UdpClient(AddressFamily)","needQuote":true,"nodes":[{"content":"UdpClient(AddressFamily)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[12052,12101],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[12102,12147]},{"content":"&lt;/p&gt;\\n","pos":[12148,12154],"source":" </p>\\n"},{"pos":[12446,12452],"content":"Active","needQuote":true,"nodes":[{"content":"Active","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a connection is active; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13131,13227],"source":"\\n<p>\\n<strong>true</strong> if a connection is active; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13980,13989],"content":"Available","needQuote":true,"nodes":[{"content":"Available","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The number of bytes of data received from the network.&lt;/p&gt;\\n","pos":[14668,14733],"source":"\\n<p>The number of bytes of data received from the network.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while attempting to access the socket.","pos":[14864,14925],"source":"\\n<p>An error occurred while attempting to access the socket."},{"content":"See the Remarks section for more information.","pos":[14926,14971]},{"content":"&lt;/p&gt;\\n","pos":[14972,14978],"source":" </p>\\n"},{"pos":[15503,15509],"content":"Client","needQuote":true,"nodes":[{"content":"Client","pos":[0,6]}]},{"pos":[16751,16763],"content":"DontFragment","needQuote":true,"nodes":[{"content":"DontFragment","pos":[0,12]}]},{"pos":[18620,18635],"content":"EnableBroadcast","needQuote":true,"nodes":[{"content":"EnableBroadcast","pos":[0,15]}]},{"pos":[20079,20098],"content":"ExclusiveAddressUse","needQuote":true,"nodes":[{"content":"ExclusiveAddressUse","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An error occurred when attempting to access the underlying socket.&lt;/p&gt;\\n","pos":[21485,21562],"source":"\\n<p>An error occurred when attempting to access the underlying socket.</p>\\n"},{"pos":[22136,22153],"content":"MulticastLoopback","needQuote":true,"nodes":[{"content":"MulticastLoopback","pos":[0,17]}]},{"pos":[23468,23471],"content":"Ttl","needQuote":true,"nodes":[{"content":"Ttl","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The TTL value.&lt;/p&gt;\\n","pos":[24246,24271],"source":"\\n<p>The TTL value.</p>\\n"},{"pos":[24561,24570],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[25576,25592],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[26420,26557],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[26558,26564],"source":" </p>\\n"},{"pos":[26984,27013],"content":"DropMulticastGroup(IPAddress)","needQuote":true,"nodes":[{"content":"DropMulticastGroup(IPAddress)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[28232,28281],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[28282,28327]},{"content":"&lt;/p&gt;\\n","pos":[28328,28334],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;multicastAddr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28738,28799],"source":"\\n<p>\\n<em>multicastAddr</em> is <strong>null</strong>.</p>\\n"},{"pos":[29415,29451],"content":"DropMulticastGroup(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"DropMulticastGroup(IPAddress, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The local address of the multicast group to leave.&lt;/p&gt;\\n","pos":[30413,30474],"source":"\\n<p>The local address of the multicast group to leave.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[30843,30892],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[30893,30938]},{"content":"&lt;/p&gt;\\n","pos":[30939,30945],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;multicastAddr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31349,31410],"source":"\\n<p>\\n<em>multicastAddr</em> is <strong>null</strong>.</p>\\n"},{"pos":[32033,32069],"content":"JoinMulticastGroup(Int32, IPAddress)","needQuote":true,"nodes":[{"content":"JoinMulticastGroup(Int32, IPAddress)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The interface index associated with the local IP address on which to join the multicast group.&lt;/p&gt;\\n","pos":[32915,33020],"source":"\\n<p>The interface index associated with the local IP address on which to join the multicast group.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[33605,33654],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[33655,33700]},{"content":"&lt;/p&gt;\\n","pos":[33701,33707],"source":" </p>\\n"},{"pos":[34113,34142],"content":"JoinMulticastGroup(IPAddress)","needQuote":true,"nodes":[{"content":"JoinMulticastGroup(IPAddress)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[35461,35510],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[35511,35556]},{"content":"&lt;/p&gt;\\n","pos":[35557,35563],"source":" </p>\\n"},{"pos":[36478,36514],"content":"JoinMulticastGroup(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"JoinMulticastGroup(IPAddress, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The Time to Live (TTL), measured in router hops.","pos":[37614,37667],"source":"\\n<p>The Time to Live (TTL), measured in router hops."},{"content":"&lt;/p&gt;\\n","pos":[37668,37674],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The TTL provided is not between 0 and 255 &lt;/p&gt;\\n","pos":[37805,37858],"source":"\\n<p>The TTL provided is not between 0 and 255 </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[38213,38262],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[38263,38308]},{"content":"&lt;/p&gt;\\n","pos":[38309,38315],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;multicastAddr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38420,38481],"source":"\\n<p>\\n<em>multicastAddr</em> is <strong>null</strong>.</p>\\n"},{"pos":[39427,39467],"content":"JoinMulticastGroup(IPAddress, IPAddress)","needQuote":true,"nodes":[{"content":"JoinMulticastGroup(IPAddress, IPAddress)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[41038,41087],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[41088,41133]},{"content":"&lt;/p&gt;\\n","pos":[41134,41140],"source":" </p>\\n"},{"pos":[41466,41480],"content":"ReceiveAsync()","needQuote":true,"nodes":[{"content":"ReceiveAsync()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[42762,42811],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[42812,42857]},{"content":"&lt;/p&gt;\\n","pos":[42858,42864],"source":" </p>\\n"},{"pos":[43305,43341],"content":"SendAsync(Byte[], Int32, IPEndPoint)","needQuote":true,"nodes":[{"content":"SendAsync(Byte[], Int32, IPEndPoint)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The number of bytes in the datagram.&lt;/p&gt;\\n","pos":[44412,44459],"source":"\\n<p>The number of bytes in the datagram.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;dgram&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45010,45057],"source":"\\n<p>\\n<em>dgram</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45058,45064],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[45665,45714],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[45715,45760]},{"content":"&lt;/p&gt;\\n","pos":[45761,45767],"source":" </p>\\n"},{"pos":[46465,46504],"content":"SendAsync(Byte[], Int32, String, Int32)","needQuote":true,"nodes":[{"content":"SendAsync(Byte[], Int32, String, Int32)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The number of bytes in the datagram.&lt;/p&gt;\\n","pos":[47600,47647],"source":"\\n<p>The number of bytes in the datagram.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the remote host to which you intend to send the datagram.&lt;/p&gt;\\n","pos":[47714,47794],"source":"\\n<p>The name of the remote host to which you intend to send the datagram.</p>\\n"},{"content":"\\n&lt;p&gt;The remote port number with which you intend to communicate.&lt;/p&gt;\\n","pos":[47856,47927],"source":"\\n<p>The remote port number with which you intend to communicate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;dgram&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[48243,48290],"source":"\\n<p>\\n<em>dgram</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[48291,48297],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred when accessing the socket.","pos":[48902,48951],"source":"\\n<p>An error occurred when accessing the socket."},{"content":"See the Remarks section for more information.","pos":[48952,48997]},{"content":"&lt;/p&gt;\\n","pos":[48998,49004],"source":" </p>\\n"},{"pos":[49428,49446],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[49613,49619],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49769,49780],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[49955,49965],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[50060,50068],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[50137,50138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50165,50166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50236,50244],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[50313,50314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50341,50342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50525,50539],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[50658,50664],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50731,50732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50782,50788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50848,50849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50932,50938],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51005,51006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51056,51062],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51122,51123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51337,51359],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[51507,51513],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51580,51581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51631,51637],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51698,51699]},{"pos":[51754,51760],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51820,51821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51918,51924],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51991,51992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52042,52048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52109,52110]},{"pos":[52165,52171],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52231,52232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52477,52508],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[52674,52689],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[52765,52766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52816,52822],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52883,52884]},{"pos":[52939,52945],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53005,53006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53112,53127],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[53203,53204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53254,53260],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53321,53322]},{"pos":[53377,53383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53443,53444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53674,53687],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[53788,53799],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[53871,53872],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53899,53900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53973,53984],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[54056,54057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54084,54085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54260,54269],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[54362,54369],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[54437,54438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54465,54466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54535,54542],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[54610,54611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54638,54639],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54814,54831],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[54940,54955],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[55031,55032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55059,55060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55137,55152],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[55228,55229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55256,55257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55402,55408],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[55538,55543],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55716,55729],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[55910,55920],"content":"IPEndPoint","needQuote":true,"nodes":[{"content":"IPEndPoint","pos":[0,10]}]},{"pos":[56086,56093],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56265,56271],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[56439,56444],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[56611,56620],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[56723,56730],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[56782,56783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56810,56811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56885,56892],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[56944,56945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56972,56973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57147,57156],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[57298,57308],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[57542,57564],"content":"Task<UdpReceiveResult>","needQuote":true,"nodes":[{"content":"Task&lt;UdpReceiveResult&gt;","pos":[0,22],"source":"Task<UdpReceiveResult>"}]},{"pos":[57826,57830],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[57904,57905],"content":"<","needQuote":true,"nodes":[]},{"pos":[57977,57993],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[58136,58140],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[58215,58218]},{"pos":[58297,58313],"content":"UdpReceiveResult","needQuote":true,"nodes":[{"content":"UdpReceiveResult","pos":[0,16]}]},{"pos":[58374,58375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58621,58634],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[58831,58835],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[58888,58889],"content":"<","needQuote":true,"nodes":[]},{"pos":[58916,58923],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[59038,59042],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[59096,59099]},{"pos":[59133,59140],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[59173,59174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59360,59382],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[59524,59530],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[59650,59654],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[59713,59715]},{"pos":[59778,59782],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[59840,59842],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[60043,60054],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[60259,60263],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[60337,60338],"content":"<","needQuote":true,"nodes":[]},{"pos":[60387,60392],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60533,60537],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[60612,60615]},{"pos":[60671,60676],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60735,60736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60938,60944],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61093,61108],"content":"SocketException","needQuote":true,"nodes":[{"content":"SocketException","pos":[0,15]}]},{"pos":[61308,61335],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[61554,61571],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[61747,61768],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[61958,61981],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[62192,62213],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[62422,62447],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Net.Sockets.UdpClient\n  commentId: T:System.Net.Sockets.UdpClient\n  id: UdpClient\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.UdpClient.#ctor\n  - System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.UdpClient.Active\n  - System.Net.Sockets.UdpClient.Available\n  - System.Net.Sockets.UdpClient.Client\n  - System.Net.Sockets.UdpClient.Dispose\n  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  - System.Net.Sockets.UdpClient.DontFragment\n  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.EnableBroadcast\n  - System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.MulticastLoopback\n  - System.Net.Sockets.UdpClient.ReceiveAsync\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Ttl\n  langs:\n  - csharp\n  - vb\n  name: UdpClient\n  fullName: System.Net.Sockets.UdpClient\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UdpClient\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 454\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Provides User Datagram Protocol (UDP) network services.</p>\\n\"\n  syntax:\n    content: 'public class UdpClient : IDisposable'\n    content.vb: >-\n      Public Class UdpClient\n          Implements IDisposable\n  seealso:\n  - type: System.Net.Sockets.TcpClient\n    commentId: T:System.Net.Sockets.TcpClient\n  see:\n  - type: System.Net.SocketPermission\n    commentId: T:System.Net.SocketPermission\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: UdpClient\n- uid: System.Net.Sockets.UdpClient.#ctor\n  commentId: M:System.Net.Sockets.UdpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: UdpClient()\n  fullName: System.Net.Sockets.UdpClient.UdpClient()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 456\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UdpClient()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.UdpClient()\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: UdpClient(Int32)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 457\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and binds it to the local port number provided.</p>\\n\"\n  syntax:\n    content: public UdpClient(int port)\n    content.vb: Public Sub New(port As Integer)\n    parameters:\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The local port number from which you intend to communicate. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>port</em> parameter is greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.UdpClient(Int32)\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: UdpClient(Int32, AddressFamily)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Int32, System.Net.Sockets.AddressFamily)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 458\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and binds it to the local port number provided.</p>\\n\"\n  syntax:\n    content: public UdpClient(int port, AddressFamily family)\n    content.vb: Public Sub New(port As Integer, family As AddressFamily)\n    parameters:\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port on which to listen for incoming connection attempts. </p>\\n\"\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that specifies the addressing scheme of the socket. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>family</em> is not <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetwork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetworkV6\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.UdpClient(Int32, AddressFamily)\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  id: '#ctor(System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: UdpClient(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Net.IPEndPoint)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 459\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and binds it to the specified local endpoint.</p>\\n\"\n  syntax:\n    content: public UdpClient(IPEndPoint localEP)\n    content.vb: Public Sub New(localEP As IPEndPoint)\n    parameters:\n    - id: localEP\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that respresents the local endpoint to which you bind the UDP connection. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localEP</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  seealso:\n  - type: System.Net.IPEndPoint\n    commentId: T:System.Net.IPEndPoint\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.UdpClient(IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: UdpClient(AddressFamily)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Net.Sockets.AddressFamily)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 460\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UdpClient(AddressFamily family)\n    content.vb: Public Sub New(family As AddressFamily)\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that specifies the addressing scheme of the socket. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>family</em> is not <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetwork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetworkV6\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.UdpClient(AddressFamily)\n- uid: System.Net.Sockets.UdpClient.Active\n  commentId: P:System.Net.Sockets.UdpClient.Active\n  id: Active\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: Active\n  fullName: System.Net.Sockets.UdpClient.Active\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Active\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 461\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a value indicating whether a default remote host has been established.</p>\\n\"\n  syntax:\n    content: protected bool Active { get; set; }\n    content.vb: Protected Property Active As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a connection is active; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.UdpClient\n    commentId: T:System.Net.Sockets.UdpClient\n  - type: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n    commentId: M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  - type: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n    commentId: M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: UdpClient.Active\n- uid: System.Net.Sockets.UdpClient.Available\n  commentId: P:System.Net.Sockets.UdpClient.Available\n  id: Available\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: Available\n  fullName: System.Net.Sockets.UdpClient.Available\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Available\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 462\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the amount of data received from the network that is available to read.</p>\\n\"\n  syntax:\n    content: public int Available { get; }\n    content.vb: Public ReadOnly Property Available As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes of data received from the network.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred while attempting to access the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: UdpClient.Available\n- uid: System.Net.Sockets.UdpClient.Client\n  commentId: P:System.Net.Sockets.UdpClient.Client\n  id: Client\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: Client\n  fullName: System.Net.Sockets.UdpClient.Client\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Client\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 463\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the underlying network <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Socket Client { get; set; }\n    content.vb: Public Property Client As Socket\n    parameters: []\n    return:\n      type: System.Net.Sockets.Socket\n      description: \"\\n<p>The underlying Network <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.Client\n- uid: System.Net.Sockets.UdpClient.DontFragment\n  commentId: P:System.Net.Sockets.UdpClient.DontFragment\n  id: DontFragment\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: DontFragment\n  fullName: System.Net.Sockets.UdpClient.DontFragment\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DontFragment\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 464\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.</p>\\n\"\n  syntax:\n    content: public bool DontFragment { get; set; }\n    content.vb: Public Property DontFragment As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows datagram fragmentation; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This property can be set only for sockets that use the <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetwork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag or the <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetworkV6\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.DontFragment\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast\n  commentId: P:System.Net.Sockets.UdpClient.EnableBroadcast\n  id: EnableBroadcast\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: EnableBroadcast\n  fullName: System.Net.Sockets.UdpClient.EnableBroadcast\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EnableBroadcast\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 465\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> may send or receive broadcast packets.</p>\\n\"\n  syntax:\n    content: public bool EnableBroadcast { get; set; }\n    content.vb: Public Property EnableBroadcast As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows broadcast packets; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.EnableBroadcast\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  commentId: P:System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveAddressUse\n  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveAddressUse\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 466\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows only one client to use a port.</p>\\n\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    content.vb: Public Property ExclusiveAddressUse As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows only one client to use a specific port; otherwise, <strong>false</strong>. The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <strong>false</strong> for all other versions.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when attempting to access the underlying socket.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.ExclusiveAddressUse\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback\n  commentId: P:System.Net.Sockets.UdpClient.MulticastLoopback\n  id: MulticastLoopback\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: MulticastLoopback\n  fullName: System.Net.Sockets.UdpClient.MulticastLoopback\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MulticastLoopback\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 467\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether outgoing multicast packets are delivered to the sending application.</p>\\n\"\n  syntax:\n    content: public bool MulticastLoopback { get; set; }\n    content.vb: Public Property MulticastLoopback As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> receives outgoing multicast packets; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.MulticastLoopback\n- uid: System.Net.Sockets.UdpClient.Ttl\n  commentId: P:System.Net.Sockets.UdpClient.Ttl\n  id: Ttl\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: Ttl\n  fullName: System.Net.Sockets.UdpClient.Ttl\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ttl\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 468\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public short Ttl { get; set; }\n    content.vb: Public Property Ttl As Short\n    parameters: []\n    return:\n      type: System.Int16\n      description: \"\\n<p>The TTL value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.Ttl\n- uid: System.Net.Sockets.UdpClient.Dispose\n  commentId: M:System.Net.Sockets.UdpClient.Dispose\n  id: Dispose\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Net.Sockets.UdpClient.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 469\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Releases the managed and unmanaged resources used by the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.Dispose()\n- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  commentId: M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 470\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources. </p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: UdpClient.Dispose(Boolean)\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  id: DropMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: DropMulticastGroup(IPAddress)\n  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DropMulticastGroup\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 471\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Leaves a multicast group.</p>\\n\"\n  syntax:\n    content: public void DropMulticastGroup(IPAddress multicastAddr)\n    content.vb: Public Sub DropMulticastGroup(multicastAddr As IPAddress)\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the multicast group to leave. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The IP address is not compatible with the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that defines the addressing scheme of the socket. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>multicastAddr</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n    commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress)\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: DropMulticastGroup(IPAddress, Int32)\n  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DropMulticastGroup\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 472\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Leaves a multicast group.</p>\\n\"\n  syntax:\n    content: public void DropMulticastGroup(IPAddress multicastAddr, int ifindex)\n    content.vb: Public Sub DropMulticastGroup(multicastAddr As IPAddress, ifindex As Integer)\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the multicast group to leave. </p>\\n\"\n    - id: ifindex\n      type: System.Int32\n      description: \"\\n<p>The local address of the multicast group to leave.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The IP address is not compatible with the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that defines the addressing scheme of the socket. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>multicastAddr</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n    commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress, Int32)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: JoinMulticastGroup(Int32, IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32, System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: JoinMulticastGroup\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 473\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a multicast group.</p>\\n\"\n  syntax:\n    content: public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr)\n    content.vb: Public Sub JoinMulticastGroup(ifindex As Integer, multicastAddr As IPAddress)\n    parameters:\n    - id: ifindex\n      type: System.Int32\n      description: \"\\n<p>The interface index associated with the local IP address on which to join the multicast group.</p>\\n\"\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>The multicast <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the group you want to join. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.JoinMulticastGroup(Int32, IPAddress)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: JoinMulticastGroup(IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: JoinMulticastGroup\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 474\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a multicast group.</p>\\n\"\n  syntax:\n    content: public void JoinMulticastGroup(IPAddress multicastAddr)\n    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress)\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>The multicast <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the group you want to join. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The IP address is not compatible with the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that defines the addressing scheme of the socket. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n    commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: JoinMulticastGroup(IPAddress, Int32)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: JoinMulticastGroup\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 475\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a multicast group with the specified Time to Live (TTL).</p>\\n\"\n  syntax:\n    content: public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive)\n    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress, timeToLive As Integer)\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the multicast group to join. </p>\\n\"\n    - id: timeToLive\n      type: System.Int32\n      description: \"\\n<p>The Time to Live (TTL), measured in router hops. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The TTL provided is not between 0 and 255 </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>multicastAddr</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The IP address is not compatible with the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that defines the addressing scheme of the socket. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n    commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, Int32)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: JoinMulticastGroup(IPAddress, IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress, System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: JoinMulticastGroup\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 476\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a multicast group.</p>\\n\"\n  syntax:\n    content: public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress)\n    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress, localAddress As IPAddress)\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>The multicast <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the group you want to join.</p>\\n\"\n    - id: localAddress\n      type: System.Net.IPAddress\n      description: \"\\n<p>The local <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, IPAddress)\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync\n  commentId: M:System.Net.Sockets.UdpClient.ReceiveAsync\n  id: ReceiveAsync\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: ReceiveAsync()\n  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 477\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns a UDP datagram asynchronously that was sent by a remote host.</p>\\n\"\n  syntax:\n    content: public Task<UdpReceiveResult> ReceiveAsync()\n    content.vb: Public Function ReceiveAsync As Task(Of UdpReceiveResult)\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  has been closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UdpClient.ReceiveAsync()\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(Byte[], Int32, IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(System.Byte[], System.Int32, System.Net.IPEndPoint)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 478\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Sends a UDP datagram asynchronously to a remote host.</p>\\n\"\n  syntax:\n    content: public Task<int> SendAsync(byte[] datagram, int bytes, IPEndPoint endPoint)\n    content.vb: Public Function SendAsync(datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\\n\"\n    - id: bytes\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the datagram.</p>\\n\"\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the host and port to which to send the datagram.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>dgram</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already established a default remote host. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>\\n<xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.UdpClient.SendAsync(System.Byte(), System.Int32, System.Net.IPEndPoint)\n  name.vb: SendAsync(Byte(), Int32, IPEndPoint)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32, IPEndPoint)\n  nameWithType.vb: UdpClient.SendAsync(Byte(), Int32, IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(Byte[], Int32, String, Int32)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(System.Byte[], System.Int32, System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 479\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Sends a UDP datagram asynchronously to a remote host.</p>\\n\"\n  syntax:\n    content: public Task<int> SendAsync(byte[] datagram, int bytes, string hostname, int port)\n    content.vb: Public Function SendAsync(datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\\n\"\n    - id: bytes\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the datagram.</p>\\n\"\n    - id: hostname\n      type: System.String\n      description: \"\\n<p>The name of the remote host to which you intend to send the datagram.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The remote port number with which you intend to communicate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>dgram</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already established a default remote host. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.UdpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.UdpClient.SendAsync(System.Byte(), System.Int32, System.String, System.Int32)\n  name.vb: SendAsync(Byte(), Int32, String, Int32)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32, String, Int32)\n  nameWithType.vb: UdpClient.SendAsync(Byte(), Int32, String, Int32)\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n  commentId: T:System.Net.Sockets.AddressFamily\n  nameWithType: AddressFamily\n- uid: System.Net.IPEndPoint\n  isExternal: false\n  name: IPEndPoint\n  fullName: System.Net.IPEndPoint\n  commentId: T:System.Net.IPEndPoint\n  nameWithType: IPEndPoint\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  fullName: System.Net.Sockets.Socket\n  commentId: T:System.Net.Sockets.Socket\n  nameWithType: Socket\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  commentId: T:System.Int16\n  nameWithType: Int16\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<UdpReceiveResult>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.UdpReceiveResult)\n  name.vb: Task(Of UdpReceiveResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n  nameWithType: Task<UdpReceiveResult>\n  nameWithType.vb: Task(Of UdpReceiveResult)\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Net.Sockets.SocketException\n  isExternal: false\n  name: SocketException\n  fullName: System.Net.Sockets.SocketException\n  commentId: T:System.Net.Sockets.SocketException\n  nameWithType: SocketException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}