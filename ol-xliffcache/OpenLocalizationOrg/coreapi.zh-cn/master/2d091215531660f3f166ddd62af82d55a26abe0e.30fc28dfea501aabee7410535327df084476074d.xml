{"nodes":[{"pos":[5635,5644],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[7650,7660],"content":"BinarySort","needQuote":true,"nodes":[{"content":"BinarySort","pos":[0,10]}]},{"pos":[8712,8723],"content":"BinarySort2","needQuote":true,"nodes":[{"content":"BinarySort2","pos":[0,11]}]},{"pos":[9778,9788],"content":"IgnoreCase","needQuote":true,"nodes":[{"content":"IgnoreCase","pos":[0,10]}]},{"pos":[10885,10899],"content":"IgnoreKanaType","needQuote":true,"nodes":[{"content":"IgnoreKanaType","pos":[0,14]}]},{"pos":[11943,11957],"content":"IgnoreNonSpace","needQuote":true,"nodes":[{"content":"IgnoreNonSpace","pos":[0,14]}]},{"pos":[13029,13040],"content":"IgnoreWidth","needQuote":true,"nodes":[{"content":"IgnoreWidth","pos":[0,11]}]},{"pos":[15377,15420],"content":"SqlString(Int32, SqlCompareOptions, Byte[])","needQuote":true,"nodes":[{"content":"SqlString(Int32, SqlCompareOptions, Byte[])","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The data array to store.","pos":[16891,16920],"source":"\\n<p>The data array to store."},{"content":"&lt;/p&gt;\\n","pos":[16921,16927],"source":" </p>\\n"},{"pos":[17742,17794],"content":"SqlString(Int32, SqlCompareOptions, Byte[], Boolean)","needQuote":true,"nodes":[{"content":"SqlString(Int32, SqlCompareOptions, Byte[], Boolean)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The data array to store.","pos":[19256,19285],"source":"\\n<p>The data array to store."},{"content":"&lt;/p&gt;\\n","pos":[19286,19292],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if Unicode encoded.","pos":[19360,19408],"source":"\\n<p>\\n<strong>true</strong> if Unicode encoded."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[19409,19443],"source":" Otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19444,19450],"source":" </p>\\n"},{"pos":[20341,20398],"content":"SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The data array to store.","pos":[21894,21923],"source":"\\n<p>The data array to store."},{"content":"&lt;/p&gt;\\n","pos":[21924,21930],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index within the array.","pos":[21993,22034],"source":"\\n<p>The starting index within the array."},{"content":"&lt;/p&gt;\\n","pos":[22035,22041],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters from index to copy.","pos":[22104,22153],"source":"\\n<p>The number of characters from index to copy."},{"content":"&lt;/p&gt;\\n","pos":[22154,22160],"source":" </p>\\n"},{"pos":[23123,23189],"content":"SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32, Boolean)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The data array to store.","pos":[24737,24766],"source":"\\n<p>The data array to store."},{"content":"&lt;/p&gt;\\n","pos":[24767,24773],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index within the array.","pos":[24836,24877],"source":"\\n<p>The starting index within the array."},{"content":"&lt;/p&gt;\\n","pos":[24878,24884],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters from index to copy.","pos":[24947,24996],"source":"\\n<p>The number of characters from index to copy."},{"content":"&lt;/p&gt;\\n","pos":[24997,25003],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if Unicode encoded.","pos":[25071,25119],"source":"\\n<p>\\n<strong>true</strong> if Unicode encoded."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[25120,25154],"source":" Otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25155,25161],"source":" </p>\\n"},{"pos":[25888,25905],"content":"SqlString(String)","needQuote":true,"nodes":[{"content":"SqlString(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The string to store.","pos":[26707,26732],"source":"\\n<p>The string to store."},{"content":"&lt;/p&gt;\\n","pos":[26733,26739],"source":" </p>\\n"},{"pos":[27113,27137],"content":"SqlString(String, Int32)","needQuote":true,"nodes":[{"content":"SqlString(String, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The string to store.","pos":[28001,28026],"source":"\\n<p>The string to store."},{"content":"&lt;/p&gt;\\n","pos":[28027,28033],"source":" </p>\\n"},{"pos":[28765,28808],"content":"SqlString(String, Int32, SqlCompareOptions)","needQuote":true,"nodes":[{"content":"SqlString(String, Int32, SqlCompareOptions)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The string to store.","pos":[29800,29825],"source":"\\n<p>The string to store."},{"content":"&lt;/p&gt;\\n","pos":[29826,29832],"source":" </p>\\n"},{"pos":[30651,30662],"content":"CompareInfo","needQuote":true,"nodes":[{"content":"CompareInfo","pos":[0,11]}]},{"pos":[32128,32139],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[33790,33796],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[35179,35183],"content":"LCID","needQuote":true,"nodes":[{"content":"LCID","pos":[0,4]}]},{"pos":[36451,36468],"content":"SqlCompareOptions","needQuote":true,"nodes":[{"content":"SqlCompareOptions","pos":[0,17]}]},{"pos":[38171,38176],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The string that is stored.&lt;/p&gt;\\n","pos":[38971,39008],"source":"\\n<p>The string that is stored.</p>\\n"},{"pos":[39770,39795],"content":"Add(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"Add(SqlString, SqlString)","pos":[0,25]}]},{"pos":[41638,41645],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[43042,43096],"content":"CompareOptionsFromSqlCompareOptions(SqlCompareOptions)","needQuote":true,"nodes":[{"content":"CompareOptionsFromSqlCompareOptions(SqlCompareOptions)","pos":[0,54]}]},{"pos":[45274,45294],"content":"CompareTo(SqlString)","needQuote":true,"nodes":[{"content":"CompareTo(SqlString)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[46454,46688],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[46689,46783],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).","pos":[46784,46989],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[46990,47024],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[47372,47389],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[48474,48708],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[48709,48803],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) &lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[48804,49043],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n"},{"pos":[49585,49613],"content":"Concat(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"Concat(SqlString, SqlString)","pos":[0,28]}]},{"pos":[51676,51704],"content":"Equals(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"Equals(SqlString, SqlString)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[53015,53072],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[53073,53107],"source":" Otherwise, <strong>false</strong>."},{"content":"If either instance is null, then the &lt;strong&gt;SqlString&lt;/strong&gt; will be null.&lt;/p&gt;\\n","pos":[53108,53191],"source":" If either instance is null, then the <strong>SqlString</strong> will be null.</p>\\n"},{"pos":[53560,53574],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to be compared.","pos":[54507,54538],"source":"\\n<p>The object to be compared."},{"content":"&lt;/p&gt;\\n","pos":[54539,54545],"source":" </p>\\n"},{"pos":[55220,55233],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[55903,55948],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[56341,56361],"content":"GetNonUnicodeBytes()","needQuote":true,"nodes":[{"content":"GetNonUnicodeBytes()","pos":[0,20]}]},{"pos":[57656,57673],"content":"GetUnicodeBytes()","needQuote":true,"nodes":[{"content":"GetUnicodeBytes()","pos":[0,17]}]},{"pos":[59136,59169],"content":"GreaterThan(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlString, SqlString)","pos":[0,33]}]},{"pos":[61883,61923],"content":"GreaterThanOrEqual(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlString, SqlString)","pos":[0,40]}]},{"pos":[64666,64696],"content":"LessThan(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"LessThan(SqlString, SqlString)","pos":[0,30]}]},{"pos":[67380,67417],"content":"LessThanOrEqual(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlString, SqlString)","pos":[0,37]}]},{"pos":[70142,70173],"content":"NotEquals(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"NotEquals(SqlString, SqlString)","pos":[0,31]}]},{"pos":[72837,72867],"content":"Addition(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"Addition(SqlString, SqlString)","pos":[0,30]}]},{"pos":[74955,74985],"content":"Equality(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"Equality(SqlString, SqlString)","pos":[0,30]}]},{"pos":[77644,77677],"content":"Explicit(SqlBoolean to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlBoolean to SqlString)","pos":[0,33]}]},{"pos":[79897,79927],"content":"Explicit(SqlByte to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlByte to SqlString)","pos":[0,30]}]},{"pos":[82133,82167],"content":"Explicit(SqlDateTime to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlDateTime to SqlString)","pos":[0,34]}]},{"pos":[84407,84440],"content":"Explicit(SqlDecimal to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlDecimal to SqlString)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;SqlDecimal&lt;/strong&gt; structure to be converted.","pos":[85432,85495],"source":"\\n<p>The <strong>SqlDecimal</strong> structure to be converted."},{"content":"&lt;/p&gt;\\n","pos":[85496,85502],"source":" </p>\\n"},{"pos":[86538,86570],"content":"Explicit(SqlDouble to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlDouble to SqlString)","pos":[0,32]}]},{"pos":[88779,88809],"content":"Explicit(SqlGuid to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlGuid to SqlString)","pos":[0,30]}]},{"pos":[90996,91027],"content":"Explicit(SqlInt16 to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt16 to SqlString)","pos":[0,31]}]},{"pos":[93235,93266],"content":"Explicit(SqlInt32 to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt32 to SqlString)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The SqlInt32 structure to be converted.","pos":[94248,94292],"source":"\\n<p>The SqlInt32 structure to be converted."},{"content":"&lt;/p&gt;\\n","pos":[94293,94299],"source":" </p>\\n"},{"pos":[95393,95424],"content":"Explicit(SqlInt64 to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt64 to SqlString)","pos":[0,31]}]},{"pos":[97632,97663],"content":"Explicit(SqlMoney to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlMoney to SqlString)","pos":[0,31]}]},{"pos":[99867,99899],"content":"Explicit(SqlSingle to SqlString)","needQuote":true,"nodes":[{"content":"Explicit(SqlSingle to SqlString)","pos":[0,32]}]},{"pos":[102063,102092],"content":"Explicit(SqlString to String)","needQuote":true,"nodes":[{"content":"Explicit(SqlString to String)","pos":[0,29]}]},{"pos":[104234,104267],"content":"GreaterThan(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlString, SqlString)","pos":[0,33]}]},{"pos":[106982,107022],"content":"GreaterThanOrEqual(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlString, SqlString)","pos":[0,40]}]},{"pos":[109705,109734],"content":"Implicit(String to SqlString)","needQuote":true,"nodes":[{"content":"Implicit(String to SqlString)","pos":[0,29]}]},{"pos":[111746,111778],"content":"Inequality(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"Inequality(SqlString, SqlString)","pos":[0,32]}]},{"pos":[114445,114475],"content":"LessThan(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"LessThan(SqlString, SqlString)","pos":[0,30]}]},{"pos":[117168,117205],"content":"LessThanOrEqual(SqlString, SqlString)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlString, SqlString)","pos":[0,37]}]},{"pos":[119738,119752],"content":"ToSqlBoolean()","needQuote":true,"nodes":[{"content":"ToSqlBoolean()","pos":[0,14]}]},{"pos":[121104,121115],"content":"ToSqlByte()","needQuote":true,"nodes":[{"content":"ToSqlByte()","pos":[0,11]}]},{"pos":[122545,122560],"content":"ToSqlDateTime()","needQuote":true,"nodes":[{"content":"ToSqlDateTime()","pos":[0,15]}]},{"pos":[123927,123941],"content":"ToSqlDecimal()","needQuote":true,"nodes":[{"content":"ToSqlDecimal()","pos":[0,14]}]},{"pos":[125332,125345],"content":"ToSqlDouble()","needQuote":true,"nodes":[{"content":"ToSqlDouble()","pos":[0,13]}]},{"pos":[126731,126742],"content":"ToSqlGuid()","needQuote":true,"nodes":[{"content":"ToSqlGuid()","pos":[0,11]}]},{"pos":[128238,128250],"content":"ToSqlInt16()","needQuote":true,"nodes":[{"content":"ToSqlInt16()","pos":[0,12]}]},{"pos":[129631,129643],"content":"ToSqlInt32()","needQuote":true,"nodes":[{"content":"ToSqlInt32()","pos":[0,12]}]},{"pos":[131023,131035],"content":"ToSqlInt64()","needQuote":true,"nodes":[{"content":"ToSqlInt64()","pos":[0,12]}]},{"pos":[132414,132426],"content":"ToSqlMoney()","needQuote":true,"nodes":[{"content":"ToSqlMoney()","pos":[0,12]}]},{"pos":[133808,133821],"content":"ToSqlSingle()","needQuote":true,"nodes":[{"content":"ToSqlSingle()","pos":[0,13]}]},{"pos":[135205,135215],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[136474,136494],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[136698,136707],"content":"INullable","needQuote":true,"nodes":[{"content":"INullable","pos":[0,9]}]},{"pos":[136894,136905],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[137107,137129],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[137277,137283],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[137350,137351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137401,137407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[137468,137469]},{"pos":[137524,137530],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[137590,137591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137688,137694],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[137761,137762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137812,137818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[137879,137880]},{"pos":[137935,137941],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[138001,138002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138247,138278],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[138444,138459],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[138535,138536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138586,138592],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[138653,138654]},{"pos":[138709,138715],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[138775,138776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138882,138897],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[138973,138974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[139024,139030],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[139091,139092]},{"pos":[139147,139153],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[139213,139214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139440,139449],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[139542,139549],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[139617,139618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[139645,139646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139715,139722],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[139790,139791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[139818,139819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139948,139954],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[140085,140091],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[140235,140240],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[140413,140422],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[140643,140660],"content":"SqlCompareOptions","needQuote":true,"nodes":[{"content":"SqlCompareOptions","pos":[0,17]}]},{"pos":[140829,140835],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[140955,140959],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[141018,141020]},{"pos":[141083,141087],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[141145,141147],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[141281,141288],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[141436,141442],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[141620,141631],"content":"CompareInfo","needQuote":true,"nodes":[{"content":"CompareInfo","pos":[0,11]}]},{"pos":[141809,141829],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[142035,142046],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[142282,142288],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[142527,142541],"content":"CompareOptions","needQuote":true,"nodes":[{"content":"CompareOptions","pos":[0,14]}]},{"pos":[142779,142796],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[142931,142940],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[142994,142995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143045,143051],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[143111,143112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143203,143212],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[143266,143267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143317,143323],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[143383,143384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143604,143614],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[143833,143847],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[143972,143978],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[144027,144028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144078,144084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[144144,144145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144231,144237],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[144286,144287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144337,144343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[144403,144404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144585,144594],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[144773,144786],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[144893,144904],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[144958,144959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144986,144987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145063,145074],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[145128,145129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145156,145157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145353,145360],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[145569,145580],"content":"SqlDateTime","needQuote":true,"nodes":[{"content":"SqlDateTime","pos":[0,11]}]},{"pos":[145800,145810],"content":"SqlDecimal","needQuote":true,"nodes":[{"content":"SqlDecimal","pos":[0,10]}]},{"pos":[146026,146035],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[146246,146253],"content":"SqlGuid","needQuote":true,"nodes":[{"content":"SqlGuid","pos":[0,7]}]},{"pos":[146459,146467],"content":"SqlInt16","needQuote":true,"nodes":[{"content":"SqlInt16","pos":[0,8]}]},{"pos":[146676,146684],"content":"SqlInt32","needQuote":true,"nodes":[{"content":"SqlInt32","pos":[0,8]}]},{"pos":[146893,146901],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[147110,147118],"content":"SqlMoney","needQuote":true,"nodes":[{"content":"SqlMoney","pos":[0,8]}]},{"pos":[147328,147337],"content":"SqlSingle","needQuote":true,"nodes":[{"content":"SqlSingle","pos":[0,9]}]},{"pos":[147541,147551],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[147652,147660],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[147711,147712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147739,147740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147813,147821],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[147872,147873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147900,147901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[148074,148095],"content":"SqlNullValueException","needQuote":true,"nodes":[{"content":"SqlNullValueException","pos":[0,21]}]}],"content":"items:\n- uid: System.Data.SqlTypes.SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n  id: SqlString\n  parent: System.Data.SqlTypes\n  children:\n  - System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])\n  - System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)\n  - System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)\n  - System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.Data.SqlTypes.SqlString.#ctor(System.String)\n  - System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)\n  - System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)\n  - System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.BinarySort\n  - System.Data.SqlTypes.SqlString.BinarySort2\n  - System.Data.SqlTypes.SqlString.Clone\n  - System.Data.SqlTypes.SqlString.CompareInfo\n  - System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)\n  - System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.CompareTo(System.Object)\n  - System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.CultureInfo\n  - System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.Equals(System.Object)\n  - System.Data.SqlTypes.SqlString.GetHashCode\n  - System.Data.SqlTypes.SqlString.GetNonUnicodeBytes\n  - System.Data.SqlTypes.SqlString.GetUnicodeBytes\n  - System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.IgnoreCase\n  - System.Data.SqlTypes.SqlString.IgnoreKanaType\n  - System.Data.SqlTypes.SqlString.IgnoreNonSpace\n  - System.Data.SqlTypes.SqlString.IgnoreWidth\n  - System.Data.SqlTypes.SqlString.IsNull\n  - System.Data.SqlTypes.SqlString.LCID\n  - System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.Null\n  - System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String\n  - System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString\n  - System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  - System.Data.SqlTypes.SqlString.SqlCompareOptions\n  - System.Data.SqlTypes.SqlString.ToSqlBoolean\n  - System.Data.SqlTypes.SqlString.ToSqlByte\n  - System.Data.SqlTypes.SqlString.ToSqlDateTime\n  - System.Data.SqlTypes.SqlString.ToSqlDecimal\n  - System.Data.SqlTypes.SqlString.ToSqlDouble\n  - System.Data.SqlTypes.SqlString.ToSqlGuid\n  - System.Data.SqlTypes.SqlString.ToSqlInt16\n  - System.Data.SqlTypes.SqlString.ToSqlInt32\n  - System.Data.SqlTypes.SqlString.ToSqlInt64\n  - System.Data.SqlTypes.SqlString.ToSqlMoney\n  - System.Data.SqlTypes.SqlString.ToSqlSingle\n  - System.Data.SqlTypes.SqlString.ToString\n  - System.Data.SqlTypes.SqlString.Value\n  langs:\n  - csharp\n  - vb\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  type: Struct\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 35\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a variable-length stream of characters to be stored in or retrieved from the database. <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a different underlying data structure from its corresponding .NET Framework <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data type.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct SqlString : INullable, IComparable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure SqlString\n          Implements INullable, IComparable\n  seealso:\n  - type: System.Globalization.CultureInfo.CurrentCulture\n    commentId: P:System.Globalization.CultureInfo.CurrentCulture\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SqlString\n- uid: System.Data.SqlTypes.SqlString.BinarySort\n  commentId: F:System.Data.SqlTypes.SqlString.BinarySort\n  id: BinarySort\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: BinarySort\n  fullName: System.Data.SqlTypes.SqlString.BinarySort\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinarySort\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 68\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies that sorts should be based on a characters numeric value instead of its alphabetical value.</p>\\n\"\n  syntax:\n    content: public static readonly int BinarySort\n    content.vb: Public Shared ReadOnly BinarySort As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.BinarySort\n- uid: System.Data.SqlTypes.SqlString.BinarySort2\n  commentId: F:System.Data.SqlTypes.SqlString.BinarySort2\n  id: BinarySort2\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: BinarySort2\n  fullName: System.Data.SqlTypes.SqlString.BinarySort2\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinarySort2\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 71\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies that sorts should be based on a character's numeric value instead of its alphabetical value.</p>\\n\"\n  syntax:\n    content: public static readonly int BinarySort2\n    content.vb: Public Shared ReadOnly BinarySort2 As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.BinarySort2\n- uid: System.Data.SqlTypes.SqlString.IgnoreCase\n  commentId: F:System.Data.SqlTypes.SqlString.IgnoreCase\n  id: IgnoreCase\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: IgnoreCase\n  fullName: System.Data.SqlTypes.SqlString.IgnoreCase\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreCase\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 56\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies that <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> comparisons should ignore case.</p>\\n\"\n  syntax:\n    content: public static readonly int IgnoreCase\n    content.vb: Public Shared ReadOnly IgnoreCase As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.IgnoreCase\n- uid: System.Data.SqlTypes.SqlString.IgnoreKanaType\n  commentId: F:System.Data.SqlTypes.SqlString.IgnoreKanaType\n  id: IgnoreKanaType\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: IgnoreKanaType\n  fullName: System.Data.SqlTypes.SqlString.IgnoreKanaType\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreKanaType\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 65\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies that the string comparison must ignore the Kana type. </p>\\n\"\n  syntax:\n    content: public static readonly int IgnoreKanaType\n    content.vb: Public Shared ReadOnly IgnoreKanaType As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.IgnoreKanaType\n- uid: System.Data.SqlTypes.SqlString.IgnoreNonSpace\n  commentId: F:System.Data.SqlTypes.SqlString.IgnoreNonSpace\n  id: IgnoreNonSpace\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: IgnoreNonSpace\n  fullName: System.Data.SqlTypes.SqlString.IgnoreNonSpace\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreNonSpace\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 62\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies that the string comparison must ignore non-space combining characters, such as diacritics. </p>\\n\"\n  syntax:\n    content: public static readonly int IgnoreNonSpace\n    content.vb: Public Shared ReadOnly IgnoreNonSpace As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.IgnoreNonSpace\n- uid: System.Data.SqlTypes.SqlString.IgnoreWidth\n  commentId: F:System.Data.SqlTypes.SqlString.IgnoreWidth\n  id: IgnoreWidth\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: IgnoreWidth\n  fullName: System.Data.SqlTypes.SqlString.IgnoreWidth\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreWidth\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 59\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies that the string comparison must ignore the character width. </p>\\n\"\n  syntax:\n    content: public static readonly int IgnoreWidth\n    content.vb: Public Shared ReadOnly IgnoreWidth As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.IgnoreWidth\n- uid: System.Data.SqlTypes.SqlString.Null\n  commentId: F:System.Data.SqlTypes.SqlString.Null\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  fullName: System.Data.SqlTypes.SqlString.Null\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 50\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be assigned to this instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlString Null\n    content.vb: Public Shared ReadOnly Null As SqlString\n    return:\n      type: System.Data.SqlTypes.SqlString\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlString.Null\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])\n  id: '#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(Int32, SqlCompareOptions, Byte[])\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 163\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified locale id, compare options, and data.</p>\\n\"\n  syntax:\n    content: public SqlString(int lcid, SqlCompareOptions compareOptions, byte[] data)\n    content.vb: Public Sub New(lcid As Integer, compareOptions As SqlCompareOptions, data As Byte())\n    parameters:\n    - id: lcid\n      type: System.Int32\n      description: \"\\n<p>Specifies the geographical locale and language for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: compareOptions\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>Specifies the compare options for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data array to store. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte())\n  name.vb: SqlString(Int32, SqlCompareOptions, Byte())\n  nameWithType: SqlString.SqlString(Int32, SqlCompareOptions, Byte[])\n  nameWithType.vb: SqlString.SqlString(Int32, SqlCompareOptions, Byte())\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)\n  id: '#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(Int32, SqlCompareOptions, Byte[], Boolean)\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 143\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SqlString(int lcid, SqlCompareOptions compareOptions, byte[] data, bool fUnicode)\n    content.vb: Public Sub New(lcid As Integer, compareOptions As SqlCompareOptions, data As Byte(), fUnicode As Boolean)\n    parameters:\n    - id: lcid\n      type: System.Int32\n      description: \"\\n<p>Specifies the geographical locale and language for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: compareOptions\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>Specifies the compare options for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data array to store. </p>\\n\"\n    - id: fUnicode\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if Unicode encoded. Otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte(), System.Boolean)\n  name.vb: SqlString(Int32, SqlCompareOptions, Byte(), Boolean)\n  nameWithType: SqlString.SqlString(Int32, SqlCompareOptions, Byte[], Boolean)\n  nameWithType.vb: SqlString.SqlString(Int32, SqlCompareOptions, Byte(), Boolean)\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32)\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[], System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 153\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SqlString(int lcid, SqlCompareOptions compareOptions, byte[] data, int index, int count)\n    content.vb: Public Sub New(lcid As Integer, compareOptions As SqlCompareOptions, data As Byte(), index As Integer, count As Integer)\n    parameters:\n    - id: lcid\n      type: System.Int32\n      description: \"\\n<p>Specifies the geographical locale and language for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: compareOptions\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>Specifies the compare options for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data array to store. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index within the array. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters from index to copy. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte(), System.Int32, System.Int32)\n  name.vb: SqlString(Int32, SqlCompareOptions, Byte(), Int32, Int32)\n  nameWithType: SqlString.SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32)\n  nameWithType.vb: SqlString.SqlString(Int32, SqlCompareOptions, Byte(), Int32, Int32)\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32, Boolean)\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte[], System.Int32, System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 106\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SqlString(int lcid, SqlCompareOptions compareOptions, byte[] data, int index, int count, bool fUnicode)\n    content.vb: Public Sub New(lcid As Integer, compareOptions As SqlCompareOptions, data As Byte(), index As Integer, count As Integer, fUnicode As Boolean)\n    parameters:\n    - id: lcid\n      type: System.Int32\n      description: \"\\n<p>Specifies the geographical locale and language for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: compareOptions\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>Specifies the compare options for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data array to store. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting index within the array. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters from index to copy. </p>\\n\"\n    - id: fUnicode\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if Unicode encoded. Otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.SqlTypes.SqlString.SqlString(System.Int32, System.Data.SqlTypes.SqlCompareOptions, System.Byte(), System.Int32, System.Int32, System.Boolean)\n  name.vb: SqlString(Int32, SqlCompareOptions, Byte(), Int32, Int32, Boolean)\n  nameWithType: SqlString.SqlString(Int32, SqlCompareOptions, Byte[], Int32, Int32, Boolean)\n  nameWithType.vb: SqlString.SqlString(Int32, SqlCompareOptions, Byte(), Int32, Int32, Boolean)\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.String)\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(String)\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 206\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified string.</p>\\n\"\n  syntax:\n    content: public SqlString(string data)\n    content.vb: Public Sub New(data As String)\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>The string to store. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.SqlString(String)\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(String, Int32)\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.String, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 197\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified string and locale id values.</p>\\n\"\n  syntax:\n    content: public SqlString(string data, int lcid)\n    content.vb: Public Sub New(data As String, lcid As Integer)\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>The string to store. </p>\\n\"\n    - id: lcid\n      type: System.Int32\n      description: \"\\n<p>Specifies the geographical locale and language for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.SqlString(String, Int32)\n- uid: System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)\n  commentId: M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)\n  id: '#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)'\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlString(String, Int32, SqlCompareOptions)\n  fullName: System.Data.SqlTypes.SqlString.SqlString(System.String, System.Int32, System.Data.SqlTypes.SqlCompareOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 174\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified string, locale id, and compare option values.</p>\\n\"\n  syntax:\n    content: public SqlString(string data, int lcid, SqlCompareOptions compareOptions)\n    content.vb: Public Sub New(data As String, lcid As Integer, compareOptions As SqlCompareOptions)\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>The string to store. </p>\\n\"\n    - id: lcid\n      type: System.Int32\n      description: \"\\n<p>Specifies the geographical locale and language for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: compareOptions\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>Specifies the compare options for the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.SqlString(String, Int32, SqlCompareOptions)\n- uid: System.Data.SqlTypes.SqlString.CompareInfo\n  commentId: P:System.Data.SqlTypes.SqlString.CompareInfo\n  id: CompareInfo\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: CompareInfo\n  fullName: System.Data.SqlTypes.SqlString.CompareInfo\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareInfo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 296\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that defines how string comparisons should be performed for this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public CompareInfo CompareInfo { get; }\n    content.vb: Public ReadOnly Property CompareInfo As CompareInfo\n    parameters: []\n    return:\n      type: System.Globalization.CompareInfo\n      description: \"\\n<p>A <strong>CompareInfo</strong> object that defines string comparison for this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlString.CompareInfo\n- uid: System.Data.SqlTypes.SqlString.CultureInfo\n  commentId: P:System.Data.SqlTypes.SqlString.CultureInfo\n  id: CultureInfo\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: CultureInfo\n  fullName: System.Data.SqlTypes.SqlString.CultureInfo\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CultureInfo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 275\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that represents information about the culture of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public CultureInfo CultureInfo { get; }\n    content.vb: Public ReadOnly Property CultureInfo As CultureInfo\n    parameters: []\n    return:\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that describes information about the culture of this SqlString structure including the names of the culture, the writing system, and the calendar used, and also access to culture-specific objects that provide methods for common operations, such as formatting dates and sorting strings.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlString.CultureInfo\n- uid: System.Data.SqlTypes.SqlString.IsNull\n  commentId: P:System.Data.SqlTypes.SqlString.IsNull\n  id: IsNull\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: IsNull\n  fullName: System.Data.SqlTypes.SqlString.IsNull\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 236\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Indicates whether this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is null.</p>\\n\"\n  syntax:\n    content: public bool IsNull { get; }\n    content.vb: Public ReadOnly Property IsNull As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.Data.SqlTypes.SqlString.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlString.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.SqlTypes.INullable.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlString.IsNull\n- uid: System.Data.SqlTypes.SqlString.LCID\n  commentId: P:System.Data.SqlTypes.SqlString.LCID\n  id: LCID\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: LCID\n  fullName: System.Data.SqlTypes.SqlString.LCID\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LCID\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 261\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Specifies the geographical locale and language for the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public int LCID { get; }\n    content.vb: Public ReadOnly Property LCID As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The locale id for the string stored in the <xref href=\\\"System.Data.SqlTypes.SqlString.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlString.LCID\n- uid: System.Data.SqlTypes.SqlString.SqlCompareOptions\n  commentId: P:System.Data.SqlTypes.SqlString.SqlCompareOptions\n  id: SqlCompareOptions\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: SqlCompareOptions\n  fullName: System.Data.SqlTypes.SqlString.SqlCompareOptions\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlCompareOptions\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 313\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A combination of one or more of the <xref href=\\\"System.Data.SqlTypes.SqlCompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values that represent the way in which this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be compared to other <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public SqlCompareOptions SqlCompareOptions { get; }\n    content.vb: Public ReadOnly Property SqlCompareOptions As SqlCompareOptions\n    parameters: []\n    return:\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>A value specifying how this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be compared to other <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlString.SqlCompareOptions\n- uid: System.Data.SqlTypes.SqlString.Value\n  commentId: P:System.Data.SqlTypes.SqlString.Value\n  id: Value\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Data.SqlTypes.SqlString.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 247\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the string that is stored in this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. This property is read-only.</p>\\n\"\n  syntax:\n    content: public string Value { get; }\n    content.vb: Public ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string that is stored.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The value of the string is <xref href=\\\"System.Data.SqlTypes.SqlString.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlString.Value\n- uid: System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Add(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 668\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Concatenates two specified <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to create a new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SqlString Add(SqlString x, SqlString y)\n    content.vb: Public Shared Function Add(x As SqlString, y As SqlString) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the concatenated value of <em>x</em> and <em>y</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.Add(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.Clone\n  commentId: M:System.Data.SqlTypes.SqlString.Clone\n  id: Clone\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Data.SqlTypes.SqlString.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 598\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Creates a copy of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public SqlString Clone()\n    content.vb: Public Function Clone As SqlString\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in which all property values are the same as the original.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.Clone()\n- uid: System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)\n  commentId: M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)\n  id: CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: CompareOptionsFromSqlCompareOptions(SqlCompareOptions)\n  fullName: System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareOptionsFromSqlCompareOptions\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 777\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration equilvalent of the specified <xref href=\\\"System.Data.SqlTypes.SqlCompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions)\n    content.vb: Public Shared Function CompareOptionsFromSqlCompareOptions(compareOptions As SqlCompareOptions) As CompareOptions\n    parameters:\n    - id: compareOptions\n      type: System.Data.SqlTypes.SqlCompareOptions\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlCompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that describes the comparison options for this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A <strong>CompareOptions</strong> value that corresponds to the <strong>SqlCompareOptions</strong> for this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.CompareOptionsFromSqlCompareOptions(SqlCompareOptions)\n- uid: System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)\n  id: CompareTo(System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SqlString)\n  fullName: System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 970\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to the supplied <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SqlString value)\n    content.vb: Public Function CompareTo(value As SqlString) As Integer\n    parameters:\n    - id: value\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic). </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.CompareTo(SqlString)\n- uid: System.Data.SqlTypes.SqlString.CompareTo(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Data.SqlTypes.SqlString.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 959\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the supplied <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(object value)\n    content.vb: Public Function CompareTo(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.CompareTo(Object)\n- uid: System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Concat(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concat\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 663\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Concatenates the two specified <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlString Concat(SqlString x, SqlString y)\n    content.vb: Public Shared Function Concat(x As SqlString, y As SqlString) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the newly concatenated value representing the contents of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.Concat(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Equals(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 674\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Equals(SqlString x, SqlString y)\n    content.vb: Public Shared Function Equals(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>. If either instance is null, then the <strong>SqlString</strong> will be null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.Equals(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.Equals(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlString.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Data.SqlTypes.SqlString.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 999\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares the supplied object parameter to the <xref href=\\\"System.Data.SqlTypes.SqlString.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Equals will return <strong>true</strong> if the object is an instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the two are equal; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlString.Equals(Object)\n- uid: System.Data.SqlTypes.SqlString.GetHashCode\n  commentId: M:System.Data.SqlTypes.SqlString.GetHashCode\n  id: GetHashCode\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Data.SqlTypes.SqlString.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 1018\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlString.GetHashCode()\n- uid: System.Data.SqlTypes.SqlString.GetNonUnicodeBytes\n  commentId: M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes\n  id: GetNonUnicodeBytes\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GetNonUnicodeBytes()\n  fullName: System.Data.SqlTypes.SqlString.GetNonUnicodeBytes()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNonUnicodeBytes\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 366\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets an array of bytes, that contains the contents of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in ANSI format.</p>\\n\"\n  syntax:\n    content: public byte[] GetNonUnicodeBytes()\n    content.vb: Public Function GetNonUnicodeBytes As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An byte array, that contains the contents of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in ANSI format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.GetNonUnicodeBytes()\n- uid: System.Data.SqlTypes.SqlString.GetUnicodeBytes\n  commentId: M:System.Data.SqlTypes.SqlString.GetUnicodeBytes\n  id: GetUnicodeBytes\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GetUnicodeBytes()\n  fullName: System.Data.SqlTypes.SqlString.GetUnicodeBytes()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetUnicodeBytes\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 355\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets an array of bytes, that contains the contents of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in Unicode format.</p>\\n\"\n  syntax:\n    content: public byte[] GetUnicodeBytes()\n    content.vb: Public Function GetUnicodeBytes As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An byte array, that contains the contents of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in Unicode format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.GetUnicodeBytes()\n- uid: System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 692\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThan(SqlString x, SqlString y)\n    content.vb: Public Shared Function GreaterThan(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.GreaterThan(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 704\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y)\n    content.vb: Public Shared Function GreaterThanOrEqual(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.GreaterThanOrEqual(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 686\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThan(SqlString x, SqlString y)\n    content.vb: Public Shared Function LessThan(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.LessThan(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 698\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThanOrEqual(SqlString x, SqlString y)\n    content.vb: Public Shared Function LessThanOrEqual(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.LessThanOrEqual(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: NotEquals(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 680\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean NotEquals(SqlString x, SqlString y)\n    content.vb: Public Shared Function NotEquals(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.NotEquals(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Addition(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Addition(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 391\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Concatenates the two specified <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlString operator +(SqlString x, SqlString y)\n    content.vb: Public Shared Operator +(x As SqlString, y As SqlString) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the newly concatenated value representing the contents of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.Addition(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Equality(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Equality(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 613\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ==(SqlString x, SqlString y)\n    content.vb: Public Shared Operator =(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.Equality(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlBoolean to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 500\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlBoolean x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlBoolean) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlBoolean to SqlString)\n  nameWithType: SqlString.Explicit(SqlBoolean to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlBoolean to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlByte to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 509\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlByte x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlByte) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlByte to SqlString)\n  nameWithType: SqlString.Explicit(SqlByte to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlByte to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDateTime to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlDateTime to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 581\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlDateTime x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDateTime) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDateTime\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlDateTime to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlDateTime to SqlString)\n  nameWithType: SqlString.Explicit(SqlDateTime to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlDateTime to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDecimal to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 563\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlDecimal x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDecimal) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>The <strong>SqlDecimal</strong> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the string representation of the <strong>SqlDecimal</strong> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlDecimal to SqlString)\n  nameWithType: SqlString.Explicit(SqlDecimal to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlDecimal to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDouble to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 554\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlDouble x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDouble) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlDouble to SqlString)\n  nameWithType: SqlString.Explicit(SqlDouble to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlDouble to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlGuid to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlGuid to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 590\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlGuid x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlGuid) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlGuid\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose value is the string representation of the specified <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlGuid to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlGuid to SqlString)\n  nameWithType: SqlString.Explicit(SqlGuid to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlGuid to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt16 to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 518\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlInt16 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt16) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlInt16 to SqlString)\n  nameWithType: SqlString.Explicit(SqlInt16 to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlInt16 to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt32 to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 527\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlInt32 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt32) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>The SqlInt32 structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlInt32 to SqlString)\n  nameWithType: SqlString.Explicit(SqlInt32 to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlInt32 to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt64 to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 536\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlInt64 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt64) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlInt64 to SqlString)\n  nameWithType: SqlString.Explicit(SqlInt64 to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlInt64 to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlMoney to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 572\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlMoney x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlMoney) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlMoney to SqlString)\n  nameWithType: SqlString.Explicit(SqlMoney to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlMoney to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString\n  id: op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlSingle to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 545\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlString(SqlSingle x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlSingle) As SqlString\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlString)\n  name.vb: Narrowing(SqlSingle to SqlString)\n  nameWithType: SqlString.Explicit(SqlSingle to SqlString)\n  nameWithType.vb: SqlString.Narrowing(SqlSingle to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String\n  commentId: M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String\n  id: op_Explicit(System.Data.SqlTypes.SqlString)~System.String\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlString to String)\n  fullName: System.Data.SqlTypes.SqlString.Explicit(System.Data.SqlTypes.SqlString to System.String)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 337\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  syntax:\n    content: public static explicit operator string (SqlString x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlString) As String\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <strong>String</strong>, whose contents are the same as the <xref href=\\\"System.Data.SqlTypes.SqlString.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Narrowing(System.Data.SqlTypes.SqlString to System.String)\n  name.vb: Narrowing(SqlString to String)\n  nameWithType: SqlString.Explicit(SqlString to String)\n  nameWithType.vb: SqlString.Narrowing(SqlString to String)\n- uid: System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 637\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator>(SqlString x, SqlString y)\n    content.vb: Public Shared Operator>(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.GreaterThan(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 653\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator >=(SqlString x, SqlString y)\n    content.vb: Public Shared Operator >=(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.GreaterThanOrEqual(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString\n  commentId: M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString\n  id: op_Implicit(System.String)~System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Implicit(String to SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Implicit(System.String to System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 328\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlString(string x)\n    content.vb: Public Shared Widening Operator CType(x As String) As SqlString\n    parameters:\n    - id: x\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the value of the specified <strong>String</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlString.Widening(System.String to System.Data.SqlTypes.SqlString)\n  name.vb: Widening(String to SqlString)\n  nameWithType: SqlString.Implicit(String to SqlString)\n  nameWithType.vb: SqlString.Widening(String to SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.Inequality(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 621\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !=(SqlString x, SqlString y)\n    content.vb: Public Shared Operator <>(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.Inequality(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 629\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <(SqlString x, SqlString y)\n    content.vb: Public Shared Operator <(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.LessThan(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  commentId: M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlString, SqlString)\n  fullName: System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString, System.Data.SqlTypes.SqlString)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 645\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <=(SqlString x, SqlString y)\n    content.vb: Public Shared Operator <=(x As SqlString, y As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlString.LessThanOrEqual(SqlString, SqlString)\n- uid: System.Data.SqlTypes.SqlString.ToSqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlBoolean\n  id: ToSqlBoolean\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlBoolean()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlBoolean()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 711\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlBoolean ToSqlBoolean()\n    content.vb: Public Function ToSqlBoolean As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlTypes.SqlString.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is non-zero; <strong>false</strong> if zero; otherwise Null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlBoolean()\n- uid: System.Data.SqlTypes.SqlString.ToSqlByte\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlByte\n  id: ToSqlByte\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlByte()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlByte()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 716\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlByte ToSqlByte()\n    content.vb: Public Function ToSqlByte As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A new <strong>SqlByte</strong> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equals the number represented by this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlByte()\n- uid: System.Data.SqlTypes.SqlString.ToSqlDateTime\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlDateTime\n  id: ToSqlDateTime\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDateTime()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlDateTime()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDateTime\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 721\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDateTime ToSqlDateTime()\n    content.vb: Public Function ToSqlDateTime As SqlDateTime\n    return:\n      type: System.Data.SqlTypes.SqlDateTime\n      description: \"\\n<p>A new <strong>SqlDateTime</strong> structure that contains the date value represented by this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlDateTime()\n- uid: System.Data.SqlTypes.SqlString.ToSqlDecimal\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlDecimal\n  id: ToSqlDecimal\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDecimal()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 751\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDecimal ToSqlDecimal()\n    content.vb: Public Function ToSqlDecimal As SqlDecimal\n    return:\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlDecimal()\n- uid: System.Data.SqlTypes.SqlString.ToSqlDouble\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlDouble\n  id: ToSqlDouble\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDouble()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlDouble()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 726\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDouble ToSqlDouble()\n    content.vb: Public Function ToSqlDouble As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is equal to the numeric value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlDouble()\n- uid: System.Data.SqlTypes.SqlString.ToSqlGuid\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlGuid\n  id: ToSqlGuid\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlGuid()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlGuid()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlGuid\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 761\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlGuid ToSqlGuid()\n    content.vb: Public Function ToSqlGuid As SqlGuid\n    return:\n      type: System.Data.SqlTypes.SqlGuid\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlGuid.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is the <strong>Guid</strong> represented by this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlGuid()\n- uid: System.Data.SqlTypes.SqlString.ToSqlInt16\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlInt16\n  id: ToSqlInt16\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt16()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlInt16()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 731\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public SqlInt16 ToSqlInt16()\n    content.vb: Public Function ToSqlInt16 As SqlInt16\n    return:\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is equal to the numeric value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlInt16()\n- uid: System.Data.SqlTypes.SqlString.ToSqlInt32\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlInt32\n  id: ToSqlInt32\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt32()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlInt32()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 736\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt32 ToSqlInt32()\n    content.vb: Public Function ToSqlInt32 As SqlInt32\n    return:\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is equal to the numeric value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlInt32()\n- uid: System.Data.SqlTypes.SqlString.ToSqlInt64\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlInt64\n  id: ToSqlInt64\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt64()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlInt64()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 741\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt64 ToSqlInt64()\n    content.vb: Public Function ToSqlInt64 As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is equal to the numeric value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlInt64()\n- uid: System.Data.SqlTypes.SqlString.ToSqlMoney\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlMoney\n  id: ToSqlMoney\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlMoney()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlMoney()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlMoney\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 746\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlMoney ToSqlMoney()\n    content.vb: Public Function ToSqlMoney As SqlMoney\n    return:\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is equal to the numeric value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlMoney()\n- uid: System.Data.SqlTypes.SqlString.ToSqlSingle\n  commentId: M:System.Data.SqlTypes.SqlString.ToSqlSingle\n  id: ToSqlSingle\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToSqlSingle()\n  fullName: System.Data.SqlTypes.SqlString.ToSqlSingle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlSingle\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 756\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlSingle ToSqlSingle()\n    content.vb: Public Function ToSqlSingle As SqlSingle\n    return:\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is equal to the numeric value of this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>..</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlString.ToSqlSingle()\n- uid: System.Data.SqlTypes.SqlString.ToString\n  commentId: M:System.Data.SqlTypes.SqlString.ToString\n  id: ToString\n  parent: System.Data.SqlTypes.SqlString\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.SqlTypes.SqlString.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLString.cs\n    startLine: 347\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the same value as this <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlString.ToString()\nreferences:\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.INullable\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: INullable\n  fullName: System.Data.SqlTypes.INullable\n  nameWithType: INullable\n  commentId: T:System.Data.SqlTypes.INullable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  nameWithType: SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n- uid: System.Data.SqlTypes.SqlCompareOptions\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlCompareOptions\n  fullName: System.Data.SqlTypes.SqlCompareOptions\n  nameWithType: SqlCompareOptions\n  commentId: T:System.Data.SqlTypes.SqlCompareOptions\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Globalization.CompareInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CompareInfo\n  fullName: System.Globalization.CompareInfo\n  nameWithType: CompareInfo\n  commentId: T:System.Globalization.CompareInfo\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  fullName: System.Globalization.CultureInfo\n  nameWithType: CultureInfo\n  commentId: T:System.Globalization.CultureInfo\n- uid: System.Data.SqlTypes.INullable.IsNull\n  parent: System.Data.SqlTypes.INullable\n  isExternal: false\n  name: IsNull\n  fullName: System.Data.SqlTypes.INullable.IsNull\n  nameWithType: INullable.IsNull\n  commentId: P:System.Data.SqlTypes.INullable.IsNull\n- uid: System.Globalization.CompareOptions\n  parent: System.Globalization\n  isExternal: false\n  name: CompareOptions\n  fullName: System.Globalization.CompareOptions\n  nameWithType: CompareOptions\n  commentId: T:System.Globalization.CompareOptions\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  nameWithType: SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n- uid: System.Data.SqlTypes.SqlDateTime\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDateTime\n  fullName: System.Data.SqlTypes.SqlDateTime\n  nameWithType: SqlDateTime\n  commentId: T:System.Data.SqlTypes.SqlDateTime\n- uid: System.Data.SqlTypes.SqlDecimal\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDecimal\n  fullName: System.Data.SqlTypes.SqlDecimal\n  nameWithType: SqlDecimal\n  commentId: T:System.Data.SqlTypes.SqlDecimal\n- uid: System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  nameWithType: SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n- uid: System.Data.SqlTypes.SqlGuid\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlGuid\n  fullName: System.Data.SqlTypes.SqlGuid\n  nameWithType: SqlGuid\n  commentId: T:System.Data.SqlTypes.SqlGuid\n- uid: System.Data.SqlTypes.SqlInt16\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt16\n  fullName: System.Data.SqlTypes.SqlInt16\n  nameWithType: SqlInt16\n  commentId: T:System.Data.SqlTypes.SqlInt16\n- uid: System.Data.SqlTypes.SqlInt32\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt32\n  fullName: System.Data.SqlTypes.SqlInt32\n  nameWithType: SqlInt32\n  commentId: T:System.Data.SqlTypes.SqlInt32\n- uid: System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  nameWithType: SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n- uid: System.Data.SqlTypes.SqlMoney\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlMoney\n  fullName: System.Data.SqlTypes.SqlMoney\n  nameWithType: SqlMoney\n  commentId: T:System.Data.SqlTypes.SqlMoney\n- uid: System.Data.SqlTypes.SqlSingle\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlSingle\n  fullName: System.Data.SqlTypes.SqlSingle\n  nameWithType: SqlSingle\n  commentId: T:System.Data.SqlTypes.SqlSingle\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Data.SqlTypes.SqlNullValueException\n  isExternal: false\n  name: SqlNullValueException\n  fullName: System.Data.SqlTypes.SqlNullValueException\n  nameWithType: SqlNullValueException\n  commentId: T:System.Data.SqlTypes.SqlNullValueException\n"}