{"nodes":[{"pos":[740,760],"content":"StackFrameExtensions","needQuote":true,"nodes":[{"content":"StackFrameExtensions","pos":[0,20]}]},{"pos":[2163,2193],"content":"GetNativeImageBase(StackFrame)","needQuote":true,"nodes":[{"content":"GetNativeImageBase(StackFrame)","pos":[0,30]}]},{"pos":[3563,3586],"content":"GetNativeIP(StackFrame)","needQuote":true,"nodes":[{"content":"GetNativeIP(StackFrame)","pos":[0,23]}]},{"pos":[4921,4944],"content":"HasILOffset(StackFrame)","needQuote":true,"nodes":[{"content":"HasILOffset(StackFrame)","pos":[0,23]}]},{"pos":[6257,6278],"content":"HasMethod(StackFrame)","needQuote":true,"nodes":[{"content":"HasMethod(StackFrame)","pos":[0,21]}]},{"pos":[7596,7622],"content":"HasNativeImage(StackFrame)","needQuote":true,"nodes":[{"content":"HasNativeImage(StackFrame)","pos":[0,26]}]},{"pos":[8950,8971],"content":"HasSource(StackFrame)","needQuote":true,"nodes":[{"content":"HasSource(StackFrame)","pos":[0,21]}]},{"pos":[9998,10016],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[10183,10189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10349,10359],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10488,10496],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10599,10600],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10647,10648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10738,10746],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10849,10850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10897,10898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11067,11081],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11238,11244],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11343,11344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11414,11420],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11505,11506],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11609,11615],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11714,11715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11785,11791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11876,11877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12073,12095],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12289,12295],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12394,12395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12465,12471],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12557,12558]},{"pos":[12636,12642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12727,12728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12845,12851],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12950,12951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13021,13027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13113,13114]},{"pos":[13192,13198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13283,13284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13503,13534],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13755,13770],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13887,13888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13958,13964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14050,14051]},{"pos":[14129,14135],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14220,14221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14347,14362],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14479,14480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14550,14556],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14642,14643]},{"pos":[14721,14727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14812,14813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15008,15021],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15159,15170],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15279,15280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15327,15328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15421,15432],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15541,15542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15589,15590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15748,15757],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15883,15890],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15991,15992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16039,16040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16129,16136],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16237,16238],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16285,16286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16448,16465],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16615,16630],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16747,16748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16795,16796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16893,16908],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17025,17026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17073,17074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17198,17204],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17363,17373],"content":"StackFrame","needQuote":true,"nodes":[{"content":"StackFrame","pos":[0,10]}]},{"pos":[17554,17560],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[17706,17713],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Diagnostics.StackFrameExtensions\n  commentId: T:System.Diagnostics.StackFrameExtensions\n  id: StackFrameExtensions\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)\n  - System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)\n  - System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)\n  - System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)\n  - System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)\n  - System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)\n  langs:\n  - csharp\n  - vb\n  name: StackFrameExtensions\n  nameWithType: StackFrameExtensions\n  fullName: System.Diagnostics.StackFrameExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.CoreCLR.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StackFrameExtensions\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.CoreCLR.cs\n    startLine: 8\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public class StackFrameExtensions\n    content.vb: Public Class StackFrameExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)\n  commentId: M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)\n  id: GetNativeImageBase(System.Diagnostics.StackFrame)\n  isExtensionMethod: true\n  parent: System.Diagnostics.StackFrameExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetNativeImageBase(StackFrame)\n  nameWithType: StackFrameExtensions.GetNativeImageBase(StackFrame)\n  fullName: System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.CoreCLR.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNativeImageBase\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.CoreCLR.cs\n    startLine: 15\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public static IntPtr GetNativeImageBase(this StackFrame stackFrame)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetNativeImageBase(stackFrame As StackFrame) As IntPtr\n    parameters:\n    - id: stackFrame\n      type: System.Diagnostics.StackFrame\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)\n  commentId: M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)\n  id: GetNativeIP(System.Diagnostics.StackFrame)\n  isExtensionMethod: true\n  parent: System.Diagnostics.StackFrameExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetNativeIP(StackFrame)\n  nameWithType: StackFrameExtensions.GetNativeIP(StackFrame)\n  fullName: System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.CoreCLR.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNativeIP\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.CoreCLR.cs\n    startLine: 10\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public static IntPtr GetNativeIP(this StackFrame stackFrame)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetNativeIP(stackFrame As StackFrame) As IntPtr\n    parameters:\n    - id: stackFrame\n      type: System.Diagnostics.StackFrame\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)\n  commentId: M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)\n  id: HasILOffset(System.Diagnostics.StackFrame)\n  isExtensionMethod: true\n  parent: System.Diagnostics.StackFrameExtensions\n  langs:\n  - csharp\n  - vb\n  name: HasILOffset(StackFrame)\n  nameWithType: StackFrameExtensions.HasILOffset(StackFrame)\n  fullName: System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasILOffset\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n    startLine: 20\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public static bool HasILOffset(this StackFrame stackFrame)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function HasILOffset(stackFrame As StackFrame) As Boolean\n    parameters:\n    - id: stackFrame\n      type: System.Diagnostics.StackFrame\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)\n  commentId: M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)\n  id: HasMethod(System.Diagnostics.StackFrame)\n  isExtensionMethod: true\n  parent: System.Diagnostics.StackFrameExtensions\n  langs:\n  - csharp\n  - vb\n  name: HasMethod(StackFrame)\n  nameWithType: StackFrameExtensions.HasMethod(StackFrame)\n  fullName: System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasMethod\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n    startLine: 15\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public static bool HasMethod(this StackFrame stackFrame)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function HasMethod(stackFrame As StackFrame) As Boolean\n    parameters:\n    - id: stackFrame\n      type: System.Diagnostics.StackFrame\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)\n  commentId: M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)\n  id: HasNativeImage(System.Diagnostics.StackFrame)\n  isExtensionMethod: true\n  parent: System.Diagnostics.StackFrameExtensions\n  langs:\n  - csharp\n  - vb\n  name: HasNativeImage(StackFrame)\n  nameWithType: StackFrameExtensions.HasNativeImage(StackFrame)\n  fullName: System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasNativeImage\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n    startLine: 10\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public static bool HasNativeImage(this StackFrame stackFrame)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function HasNativeImage(stackFrame As StackFrame) As Boolean\n    parameters:\n    - id: stackFrame\n      type: System.Diagnostics.StackFrame\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)\n  commentId: M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)\n  id: HasSource(System.Diagnostics.StackFrame)\n  isExtensionMethod: true\n  parent: System.Diagnostics.StackFrameExtensions\n  langs:\n  - csharp\n  - vb\n  name: HasSource(StackFrame)\n  nameWithType: StackFrameExtensions.HasSource(StackFrame)\n  fullName: System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasSource\n    path: src/System.Diagnostics.StackTrace/src/System/Diagnostics/StackFrameExtensions.cs\n    startLine: 25\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  syntax:\n    content: public static bool HasSource(this StackFrame stackFrame)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function HasSource(stackFrame As StackFrame) As Boolean\n    parameters:\n    - id: stackFrame\n      type: System.Diagnostics.StackFrame\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  nameWithType: System.Diagnostics\n  fullName: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n  commentId: N:System\n- uid: System.Diagnostics.StackFrame\n  parent: System.Diagnostics\n  isExternal: false\n  name: StackFrame\n  nameWithType: StackFrame\n  fullName: System.Diagnostics.StackFrame\n  commentId: T:System.Diagnostics.StackFrame\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n"}