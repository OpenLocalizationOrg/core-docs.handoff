{"nodes":[{"pos":[1052,1063],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[2567,2586],"content":"CngProvider(String)","needQuote":true,"nodes":[{"content":"CngProvider(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The name of the key storage provider (KSP) to initialize.&lt;/p&gt;\\n","pos":[3438,3506],"source":"\\n<p>The name of the key storage provider (KSP) to initialize.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;provider&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3625,3693],"source":"\\n<p>The <em>provider</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;provider&lt;/em&gt; parameter length is 0 (zero).&lt;/p&gt;\\n","pos":[3790,3852],"source":"\\n<p>The <em>provider</em> parameter length is 0 (zero).</p>\\n"},{"pos":[4267,4303],"content":"MicrosoftSmartCardKeyStorageProvider","needQuote":true,"nodes":[{"content":"MicrosoftSmartCardKeyStorageProvider","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that specifies the Microsoft Smart Card Key Storage Provider.&lt;/p&gt;\\n","pos":[5336,5418],"source":"\\n<p>An object that specifies the Microsoft Smart Card Key Storage Provider.</p>\\n"},{"pos":[5890,5925],"content":"MicrosoftSoftwareKeyStorageProvider","needQuote":true,"nodes":[{"content":"MicrosoftSoftwareKeyStorageProvider","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An object that specifies the Microsoft Software Key Storage Provider.&lt;/p&gt;\\n","pos":[6952,7032],"source":"\\n<p>An object that specifies the Microsoft Software Key Storage Provider.</p>\\n"},{"pos":[7422,7430],"content":"Provider","needQuote":true,"nodes":[{"content":"Provider","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The embedded KSP name.&lt;/p&gt;\\n","pos":[8307,8340],"source":"\\n<p>The embedded KSP name.</p>\\n"},{"pos":[8720,8734],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[10633,10652],"content":"Equals(CngProvider)","needQuote":true,"nodes":[{"content":"Equals(CngProvider)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;other&lt;/em&gt; parameter specifies the same key storage provider (KSP) as the current object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11902,12072],"source":"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same key storage provider (KSP) as the current object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12539,12552],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash value of the embedded KSP name.&lt;/p&gt;\\n","pos":[13449,13500],"source":"\\n<p>The hash value of the embedded KSP name.</p>\\n"},{"pos":[14150,14184],"content":"Equality(CngProvider, CngProvider)","needQuote":true,"nodes":[{"content":"Equality(CngProvider, CngProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An object that specifies a KSP.&lt;/p&gt;\\n","pos":[15239,15281],"source":"\\n<p>An object that specifies a KSP.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[15372,15479],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects represent the same KSP; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15540,15652],"source":"\\n<p>\\n<strong>true</strong> if the two objects represent the same KSP; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16284,16320],"content":"Inequality(CngProvider, CngProvider)","needQuote":true,"nodes":[{"content":"Inequality(CngProvider, CngProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that specifies a KSP.&lt;/p&gt;\\n","pos":[17389,17431],"source":"\\n<p>An object that specifies a KSP.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[17522,17629],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects do not represent the same KSP; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17690,17809],"source":"\\n<p>\\n<strong>true</strong> if the two objects do not represent the same KSP; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18179,18189],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The embedded KSP name.&lt;/p&gt;\\n","pos":[19050,19083],"source":"\\n<p>The embedded KSP name.</p>\\n"},{"pos":[19322,19350],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[19547,19553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19758,19781],"content":"IEquatable<CngProvider>","needQuote":true,"nodes":[{"content":"IEquatable&lt;CngProvider&gt;","pos":[0,23],"source":"IEquatable<CngProvider>"}]},{"pos":[20024,20034],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[20098,20099],"content":"<","needQuote":true,"nodes":[]},{"pos":[20176,20187],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[20325,20335],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[20400,20403]},{"pos":[20487,20498],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[20564,20565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20851,20873],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[21021,21027],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21094,21095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21145,21151],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21212,21213]},{"pos":[21268,21274],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21334,21335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21432,21438],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21505,21506],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21556,21562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21623,21624]},{"pos":[21679,21685],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21745,21746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21991,22022],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[22188,22203],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22279,22280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22330,22336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22397,22398]},{"pos":[22453,22459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22519,22520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22626,22641],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22717,22718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22768,22774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22835,22836]},{"pos":[22891,22897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22957,22958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23184,23193],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23286,23293],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23361,23362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23389,23390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23459,23466],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23534,23535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23562,23563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23738,23755],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23864,23879],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23955,23956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23983,23984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24061,24076],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24152,24153],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24180,24181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24326,24332],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24452,24465],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[24620,24630],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[24673,24674],"content":"<","needQuote":true,"nodes":[]},{"pos":[24701,24702],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24801,24811],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[24855,24858]},{"pos":[24892,24893],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24920,24921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25105,25111],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25305,25316],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[25548,25562],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[25681,25687],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25754,25755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25805,25811],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25871,25872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25955,25961],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26028,26029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26079,26085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26145,26146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26319,26326],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26647,26666],"content":"Equals(CngProvider)","needQuote":true,"nodes":[{"content":"Equals(CngProvider)","pos":[0,19]}]},{"pos":[26980,26986],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27099,27100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27177,27188],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[27254,27255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27333,27339],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27455,27456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27533,27544],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[27610,27611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27944,27953],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[28111,28117],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28170,28171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28198,28199],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28226,28227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28305,28311],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28367,28368],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28395,28396],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28423,28424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28657,28670],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28771,28782],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28854,28855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28882,28883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28956,28967],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29039,29040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29067,29068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29228,29233],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29390,29400],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[29495,29503],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[29572,29573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29600,29601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29671,29679],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[29748,29749],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29776,29777],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29930,29951],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[30152,30169],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.CngProvider\n  commentId: T:System.Security.Cryptography.CngProvider\n  id: CngProvider\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CngProvider.#ctor(System.String)\n  - System.Security.Cryptography.CngProvider.Equals(System.Object)\n  - System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngProvider.GetHashCode\n  - System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider\n  - System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider\n  - System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngProvider.Provider\n  - System.Security.Cryptography.CngProvider.ToString\n  langs:\n  - csharp\n  - vb\n  name: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CngProvider\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 221\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encapsulates the name of a key storage provider (KSP) for use with Cryptography Next Generation (CNG) objects.</p>\\n\"\n  syntax:\n    content: 'public sealed class CngProvider : IEquatable<CngProvider>'\n    content.vb: >-\n      Public NotInheritable Class CngProvider\n          Implements IEquatable(Of CngProvider)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngProvider}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CngProvider\n- uid: System.Security.Cryptography.CngProvider.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.CngProvider.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: CngProvider(String)\n  fullName: System.Security.Cryptography.CngProvider.CngProvider(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 223\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CngProvider(string provider)\n    content.vb: Public Sub New(provider As String)\n    parameters:\n    - id: provider\n      type: System.String\n      description: \"\\n<p>The name of the key storage provider (KSP) to initialize.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>provider</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>provider</em> parameter length is 0 (zero).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngProvider.CngProvider(String)\n- uid: System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider\n  commentId: P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider\n  id: MicrosoftSmartCardKeyStorageProvider\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: MicrosoftSmartCardKeyStorageProvider\n  fullName: System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MicrosoftSmartCardKeyStorageProvider\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 224\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Microsoft Smart Card Key Storage Provider.</p>\\n\"\n  syntax:\n    content: public static CngProvider MicrosoftSmartCardKeyStorageProvider { get; }\n    content.vb: Public Shared ReadOnly Property MicrosoftSmartCardKeyStorageProvider As CngProvider\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>An object that specifies the Microsoft Smart Card Key Storage Provider.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngProvider.MicrosoftSmartCardKeyStorageProvider\n- uid: System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider\n  commentId: P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider\n  id: MicrosoftSoftwareKeyStorageProvider\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: MicrosoftSoftwareKeyStorageProvider\n  fullName: System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MicrosoftSoftwareKeyStorageProvider\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 225\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Microsoft Software Key Storage Provider.</p>\\n\"\n  syntax:\n    content: public static CngProvider MicrosoftSoftwareKeyStorageProvider { get; }\n    content.vb: Public Shared ReadOnly Property MicrosoftSoftwareKeyStorageProvider As CngProvider\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>An object that specifies the Microsoft Software Key Storage Provider.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngProvider.MicrosoftSoftwareKeyStorageProvider\n- uid: System.Security.Cryptography.CngProvider.Provider\n  commentId: P:System.Security.Cryptography.CngProvider.Provider\n  id: Provider\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: Provider\n  fullName: System.Security.Cryptography.CngProvider.Provider\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Provider\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 226\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the key storage provider (KSP) that the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public string Provider { get; }\n    content.vb: Public ReadOnly Property Provider As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded KSP name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngProvider.Provider\n- uid: System.Security.Cryptography.CngProvider.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.CngProvider.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.CngProvider.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 227\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified object to the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the same key storage provider(KSP) as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngProvider.Equals(Object)\n- uid: System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)\n  id: Equals(System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: Equals(CngProvider)\n  fullName: System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 228\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(CngProvider other)\n    content.vb: Public Function Equals(other As CngProvider) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same key storage provider (KSP) as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngProvider}.Equals(System.Security.Cryptography.CngProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngProvider.Equals(CngProvider)\n- uid: System.Security.Cryptography.CngProvider.GetHashCode\n  commentId: M:System.Security.Cryptography.CngProvider.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.CngProvider.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 229\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a hash value for the name of the key storage provider (KSP) that is embedded in the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash value of the embedded KSP name.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngProvider.GetHashCode()\n- uid: System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  id: op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: Equality(CngProvider, CngProvider)\n  fullName: System.Security.Cryptography.CngProvider.Equality(System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngProvider)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 230\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects specify the same key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CngProvider left, CngProvider right)\n    content.vb: Public Shared Operator =(left As CngProvider, right As CngProvider) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>An object that specifies a KSP.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects represent the same KSP; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngProvider.Equality(CngProvider, CngProvider)\n- uid: System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  id: op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CngProvider, CngProvider)\n  fullName: System.Security.Cryptography.CngProvider.Inequality(System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngProvider)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 231\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects do not represent the same key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CngProvider left, CngProvider right)\n    content.vb: Public Shared Operator <>(left As CngProvider, right As CngProvider) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>An object that specifies a KSP.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects do not represent the same KSP; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngProvider.Inequality(CngProvider, CngProvider)\n- uid: System.Security.Cryptography.CngProvider.ToString\n  commentId: M:System.Security.Cryptography.CngProvider.ToString\n  id: ToString\n  parent: System.Security.Cryptography.CngProvider\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.CngProvider.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 232\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the key storage provider (KSP) that the current <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded KSP name.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngProvider.ToString()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Security.Cryptography.CngProvider}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<CngProvider>\n  fullName: System.IEquatable<System.Security.Cryptography.CngProvider>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProvider)\n  name.vb: IEquatable(Of CngProvider)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.CngProvider\n    name: CngProvider\n    fullName: System.Security.Cryptography.CngProvider\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.CngProvider\n    name: CngProvider\n    fullName: System.Security.Cryptography.CngProvider\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.CngProvider}\n  nameWithType: IEquatable<CngProvider>\n  nameWithType.vb: IEquatable(Of CngProvider)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n  commentId: T:System.Security.Cryptography.CngProvider\n  nameWithType: CngProvider\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Security.Cryptography.CngProvider}.Equals(System.Security.Cryptography.CngProvider)\n  parent: System.IEquatable{System.Security.Cryptography.CngProvider}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(CngProvider)\n  fullName: System.IEquatable<System.Security.Cryptography.CngProvider>.Equals(System.Security.Cryptography.CngProvider)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProvider).Equals(System.Security.Cryptography.CngProvider)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.CngProvider>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngProvider\n    name: CngProvider\n    fullName: System.Security.Cryptography.CngProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.CngProvider).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngProvider\n    name: CngProvider\n    fullName: System.Security.Cryptography.CngProvider\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.CngProvider}.Equals(System.Security.Cryptography.CngProvider)\n  nameWithType: IEquatable<CngProvider>.Equals(CngProvider)\n  nameWithType.vb: IEquatable(Of CngProvider).Equals(CngProvider)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}