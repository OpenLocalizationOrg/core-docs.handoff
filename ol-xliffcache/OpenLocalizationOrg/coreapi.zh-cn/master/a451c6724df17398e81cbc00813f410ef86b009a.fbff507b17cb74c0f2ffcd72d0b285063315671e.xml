{"nodes":[{"pos":[338,346],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[1727,1763],"content":"Compare<T>(Nullable<T>, Nullable<T>)","needQuote":true,"nodes":[{"content":"Compare&lt;T&gt;(Nullable&lt;T&gt;, Nullable&lt;T&gt;)","pos":[0,36],"source":"Compare<T>(Nullable<T>, Nullable<T>)"}]},{"content":"\\n&lt;p&gt;The underlying value type of the &lt;em&gt;n1&lt;/em&gt; and &lt;em&gt;n2&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[2929,3012],"source":"\\n<p>The underlying value type of the <em>n1</em> and <em>n2</em> parameters.</p>\\n"},{"pos":[6170,6205],"content":"Equals<T>(Nullable<T>, Nullable<T>)","needQuote":true,"nodes":[{"content":"Equals&lt;T&gt;(Nullable&lt;T&gt;, Nullable&lt;T&gt;)","pos":[0,35],"source":"Equals<T>(Nullable<T>, Nullable<T>)"}]},{"content":"\\n&lt;p&gt;The underlying value type of the &lt;em&gt;n1&lt;/em&gt; and &lt;em&gt;n2&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[7374,7457],"source":"\\n<p>The underlying value type of the <em>n1</em> and <em>n2</em> parameters.</p>\\n"},{"pos":[9707,9730],"content":"GetUnderlyingType(Type)","needQuote":true,"nodes":[{"content":"GetUnderlyingType(Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The type argument of the &lt;em&gt;nullableType&lt;/em&gt; parameter, if the &lt;em&gt;nullableType&lt;/em&gt; parameter is a closed generic nullable type; otherwise, &lt;strong&gt;null&lt;/strong&gt;.","pos":[10629,10799],"source":"\\n<p>The type argument of the <em>nullableType</em> parameter, if the <em>nullableType</em> parameter is a closed generic nullable type; otherwise, <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10800,10806],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;nullableType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10925,10985],"source":"\\n<p>\\n<em>nullableType</em> is <strong>null</strong>.</p>\\n"},{"pos":[11170,11176],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11307,11313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11473,11483],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11578,11586],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11655,11656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11683,11684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11754,11762],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11831,11832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11859,11860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12043,12057],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12176,12182],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12249,12250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12300,12306],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12366,12367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12450,12456],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12523,12524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12574,12580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12640,12641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12855,12877],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13025,13031],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13098,13099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13149,13155],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13216,13217]},{"pos":[13272,13278],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13338,13339],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13436,13442],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13509,13510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13560,13566],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13627,13628]},{"pos":[13683,13689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13749,13750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13995,14026],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14192,14207],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14283,14284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14334,14340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14401,14402]},{"pos":[14457,14463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14523,14524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14630,14645],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14721,14722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14772,14778],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14839,14840]},{"pos":[14895,14901],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14961,14962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15192,15205],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15306,15317],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15389,15390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15417,15418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15491,15502],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15574,15575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15602,15603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15778,15787],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15880,15887],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15955,15956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15983,15984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16053,16060],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16128,16129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16156,16157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16332,16349],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16458,16473],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16549,16550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16577,16578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16655,16670],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16746,16747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16774,16775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16963,16974],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[17121,17129],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[17170,17171],"content":"<","needQuote":true,"nodes":[]},{"pos":[17198,17199],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17296,17304],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[17346,17349]},{"pos":[17383,17384],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[17411,17412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17592,17597],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17743,17754],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[17901,17909],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[17950,17951],"content":"<","needQuote":true,"nodes":[]},{"pos":[17978,17979],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18076,18084],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[18126,18129]},{"pos":[18163,18164],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18191,18192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18371,18378],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18524,18528],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[18665,18686],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Nullable\n  commentId: T:System.Nullable\n  id: Nullable\n  parent: System\n  children:\n  - System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})\n  - System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})\n  - System.Nullable.GetUnderlyingType(System.Type)\n  langs:\n  - csharp\n  - vb\n  name: Nullable\n  fullName: System.Nullable\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Nullable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Nullable\n    path: src/mscorlib/src/System/Nullable.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Supports a value type that can be assigned <strong>null</strong>. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class Nullable\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class Nullable\n  seealso:\n  - type: System.Nullable`1\n    commentId: T:System.Nullable`1\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Nullable\n- uid: System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})\n  commentId: M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})\n  id: Compare``1(System.Nullable{``0},System.Nullable{``0})\n  parent: System.Nullable\n  langs:\n  - csharp\n  - vb\n  name: Compare<T>(Nullable<T>, Nullable<T>)\n  fullName: System.Nullable.Compare<T>(System.Nullable<T>, System.Nullable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Nullable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Nullable.cs\n    startLine: 106\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the relative values of two <xref href=\\\"System.Nullable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static int Compare<T>(T? n1, T? n2)where T : struct\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function Compare(Of T As Structure)(n1 As T?, n2 As T?) As Integer\n    parameters:\n    - id: n1\n      type: System.Nullable{{T}}\n      description: \"\\n<p>A <xref href=\\\"System.Nullable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: n2\n      type: System.Nullable{{T}}\n      description: \"\\n<p>A <xref href=\\\"System.Nullable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The underlying value type of the <em>n1</em> and <em>n2</em> parameters.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that indicates the relative values of the <em>n1</em> and <em>n2</em> parameters.</p>\\n<p>Return Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n1</em> is <strong>false</strong>, and the <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n2</em> is <strong>true</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>true</strong>, and the value of the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n1</em> is less than the value of the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n2</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>true</strong>, and the value of the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n1</em> is equal to the value of the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n2</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n1</em> is <strong>true</strong>, and the <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n2</em> is <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>true</strong>, and the value of the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n1</em> is greater than the value of the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for <em>n2</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Nullable.Compare(Of T)(System.Nullable(Of T), System.Nullable(Of T))\n  name.vb: Compare(Of T)(Nullable(Of T), Nullable(Of T))\n  nameWithType: Nullable.Compare<T>(Nullable<T>, Nullable<T>)\n  nameWithType.vb: Nullable.Compare(Of T)(Nullable(Of T), Nullable(Of T))\n- uid: System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})\n  commentId: M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})\n  id: Equals``1(System.Nullable{``0},System.Nullable{``0})\n  parent: System.Nullable\n  langs:\n  - csharp\n  - vb\n  name: Equals<T>(Nullable<T>, Nullable<T>)\n  fullName: System.Nullable.Equals<T>(System.Nullable<T>, System.Nullable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Nullable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Nullable.cs\n    startLine: 117\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two specified <xref href=\\\"System.Nullable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static bool Equals<T>(T? n1, T? n2)where T : struct\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function Equals(Of T As Structure)(n1 As T?, n2 As T?) As Boolean\n    parameters:\n    - id: n1\n      type: System.Nullable{{T}}\n      description: \"\\n<p>A <xref href=\\\"System.Nullable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: n2\n      type: System.Nullable{{T}}\n      description: \"\\n<p>A <xref href=\\\"System.Nullable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The underlying value type of the <em>n1</em> and <em>n2</em> parameters.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>n1</em> parameter is equal to the <em>n2</em> parameter; otherwise, <strong>false</strong>. </p>\\n<p>The return value depends on the <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the two parameters that are compared.</p>\\n<p>Return Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>\\n<strong>true</strong>\\n</p>\\n</td><td>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>false</strong>. </p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>true</strong>, and the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the parameters are equal.</p>\\n</td></tr><tr><td>\\n<p>\\n<strong>false</strong>\\n</p>\\n</td><td>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>true</strong> for one parameter and <strong>false</strong> for the other parameter.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Nullable`1.HasValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties for <em>n1</em> and <em>n2</em> are <strong>true</strong>, and the <xref href=\\\"System.Nullable`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the parameters are unequal.</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Nullable.Equals(Of T)(System.Nullable(Of T), System.Nullable(Of T))\n  name.vb: Equals(Of T)(Nullable(Of T), Nullable(Of T))\n  nameWithType: Nullable.Equals<T>(Nullable<T>, Nullable<T>)\n  nameWithType.vb: Nullable.Equals(Of T)(Nullable(Of T), Nullable(Of T))\n- uid: System.Nullable.GetUnderlyingType(System.Type)\n  commentId: M:System.Nullable.GetUnderlyingType(System.Type)\n  id: GetUnderlyingType(System.Type)\n  parent: System.Nullable\n  langs:\n  - csharp\n  - vb\n  name: GetUnderlyingType(Type)\n  fullName: System.Nullable.GetUnderlyingType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Nullable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnderlyingType\n    path: src/mscorlib/src/System/Nullable.cs\n    startLine: 130\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the underlying type argument of the specified nullable type.</p>\\n\"\n  syntax:\n    content: public static Type GetUnderlyingType(Type nullableType)\n    content.vb: Public Shared Function GetUnderlyingType(nullableType As Type) As Type\n    parameters:\n    - id: nullableType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes a closed generic nullable type. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type argument of the <em>nullableType</em> parameter, if the <em>nullableType</em> parameter is a closed generic nullable type; otherwise, <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>nullableType</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Nullable.GetUnderlyingType(Type)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Nullable{{T}}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n  commentId: T:System.Nullable{``0}\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n  commentId: T:System.Nullable`1\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}