{"nodes":[{"pos":[7651,7657],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[9700,9705],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[10809,10822],"content":"String(Char*)","needQuote":true,"nodes":[{"content":"String(Char*)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A pointer to a null-terminated array of Unicode characters.","pos":[11633,11697],"source":"\\n<p>A pointer to a null-terminated array of Unicode characters."},{"content":"&lt;/p&gt;\\n","pos":[11698,11704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current process does not have read access to all the addressed characters.&lt;/p&gt;\\n","pos":[11835,11924],"source":"\\n<p>The current process does not have read access to all the addressed characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; specifies an array that contains an invalid Unicode character, or &lt;em&gt;value&lt;/em&gt; specifies an address less than 64000.&lt;/p&gt;\\n","pos":[12021,12167],"source":"\\n<p>\\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> specifies an address less than 64000.</p>\\n"},{"pos":[12940,12967],"content":"String(Char*, Int32, Int32)","needQuote":true,"nodes":[{"content":"String(Char*, Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A pointer to an array of Unicode characters.","pos":[13939,13988],"source":"\\n<p>A pointer to an array of Unicode characters."},{"content":"&lt;/p&gt;\\n","pos":[13989,13995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[14063,14112],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[14113,14119],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters within &lt;em&gt;value&lt;/em&gt; to use.","pos":[14183,14242],"source":"\\n<p>The number of characters within <em>value</em> to use."},{"content":"&lt;/p&gt;\\n","pos":[14243,14249],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero, &lt;em&gt;value&lt;/em&gt; + &lt;em&gt;startIndex&lt;/em&gt; cause a pointer overflow, or the current process does not have read access to all the addressed characters.&lt;/p&gt;\\n","pos":[14380,14595],"source":"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero, <em>value</em> + <em>startIndex</em> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; specifies an array that contains an invalid Unicode character, or &lt;em&gt;value&lt;/em&gt; + &lt;em&gt;startIndex&lt;/em&gt; specifies an address less than 64000.&lt;/p&gt;\\n","pos":[14692,14860],"source":"\\n<p>\\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> + <em>startIndex</em> specifies an address less than 64000.</p>\\n"},{"pos":[15605,15624],"content":"String(Char, Int32)","needQuote":true,"nodes":[{"content":"String(Char, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A Unicode character.","pos":[16424,16449],"source":"\\n<p>A Unicode character."},{"content":"&lt;/p&gt;\\n","pos":[16450,16456],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of times &lt;em&gt;c&lt;/em&gt; occurs.","pos":[16519,16562],"source":"\\n<p>The number of times <em>c</em> occurs."},{"content":"&lt;/p&gt;\\n","pos":[16563,16569],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[16700,16740],"source":"\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[16741,16747],"source":" </p>\\n"},{"pos":[17030,17044],"content":"String(Char[])","needQuote":true,"nodes":[{"content":"String(Char[])","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An array of Unicode characters.","pos":[17785,17821],"source":"\\n<p>An array of Unicode characters."},{"content":"&lt;/p&gt;\\n","pos":[17822,17828],"source":" </p>\\n"},{"pos":[18302,18330],"content":"String(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"String(Char[], Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An array of Unicode characters.","pos":[19232,19268],"source":"\\n<p>An array of Unicode characters."},{"content":"&lt;/p&gt;\\n","pos":[19269,19275],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[19343,19392],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[19393,19399],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters within &lt;em&gt;value&lt;/em&gt; to use.","pos":[19463,19522],"source":"\\n<p>The number of characters within <em>value</em> to use."},{"content":"&lt;/p&gt;\\n","pos":[19523,19529],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19648,19695],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19696,19702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The sum of &lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; is greater than the number of elements in &lt;em&gt;value&lt;/em&gt;.","pos":[19819,20014],"source":"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the number of elements in <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[20015,20021],"source":" </p>\\n"},{"pos":[20482,20494],"content":"Chars[Int32]","needQuote":true,"nodes":[{"content":"Chars[Int32]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A position in the current string.","pos":[21307,21345],"source":"\\n<p>A position in the current string."},{"content":"&lt;/p&gt;\\n","pos":[21346,21352],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object at position &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21410,21459],"source":"\\n<p>The object at position <em>index</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than or equal to the length of this object or less than zero.","pos":[21584,21678],"source":"\\n<p>\\n<em>index</em> is greater than or equal to the length of this object or less than zero."},{"content":"&lt;/p&gt;\\n","pos":[21679,21685],"source":" </p>\\n"},{"pos":[22469,22475],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The number of characters in the current string.&lt;/p&gt;\\n","pos":[23099,23157],"source":"\\n<p>The number of characters in the current string.</p>\\n"},{"pos":[23675,23719],"content":"Compare(String, Int32, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Compare(String, Int32, String, Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The first string to use in the comparison.","pos":[24672,24719],"source":"\\n<p>The first string to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[24720,24726],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the substring within &lt;em&gt;strA&lt;/em&gt;.","pos":[24790,24846],"source":"\\n<p>The position of the substring within <em>strA</em>."},{"content":"&lt;/p&gt;\\n","pos":[24847,24853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to use in the comparison.","pos":[24916,24964],"source":"\\n<p>The second string to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[24965,24971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the substring within &lt;em&gt;strB&lt;/em&gt;.","pos":[25035,25091],"source":"\\n<p>The position of the substring within <em>strB</em>."},{"content":"&lt;/p&gt;\\n","pos":[25092,25098],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters in the substrings to compare.","pos":[25162,25229],"source":"\\n<p>The maximum number of characters in the substrings to compare."},{"content":"&lt;/p&gt;\\n","pos":[25230,25236],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substring in &lt;em&gt;strA&lt;/em&gt; precedes the substring in &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[25295,25578],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substrings occur in the same position in the sort order, or &lt;em&gt;length&lt;/em&gt; is zero.","pos":[25579,25721],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The substrings occur in the same position in the sort order, or <em>length</em> is zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substring in &lt;em&gt;strA&lt;/em&gt; follows the substring in &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[25722,25877],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> follows the substring in <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[25878,25912],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[27434,27496],"content":"Compare(String, Int32, String, Int32, Int32, StringComparison)","needQuote":true,"nodes":[{"content":"Compare(String, Int32, String, Int32, Int32, StringComparison)","pos":[0,62]}]},{"content":"\\n&lt;p&gt;The first string to use in the comparison.","pos":[28649,28696],"source":"\\n<p>The first string to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[28697,28703],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position of the substring within &lt;em&gt;strA&lt;/em&gt;.","pos":[28767,28823],"source":"\\n<p>The position of the substring within <em>strA</em>."},{"content":"&lt;/p&gt;\\n","pos":[28824,28830],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to use in the comparison.&lt;/p&gt;\\n","pos":[28893,28947],"source":"\\n<p>The second string to use in the comparison.</p>\\n"},{"content":"\\n&lt;p&gt;The position of the substring within &lt;em&gt;strB&lt;/em&gt;.","pos":[29011,29067],"source":"\\n<p>The position of the substring within <em>strB</em>."},{"content":"&lt;/p&gt;\\n","pos":[29068,29074],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters in the substrings to compare.","pos":[29138,29205],"source":"\\n<p>The maximum number of characters in the substrings to compare."},{"content":"&lt;/p&gt;\\n","pos":[29206,29212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules to use in the comparison.","pos":[29295,29380],"source":"\\n<p>One of the enumeration values that specifies the rules to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[29381,29387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that indicates the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substring in &lt;em&gt;strA&lt;/em&gt; precedes the substring in &lt;em&gt;strB&lt;/em&gt; in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substrings occur in the same position in the sort order, or the &lt;em&gt;length&lt;/em&gt; parameter is zero.","pos":[29446,29889],"source":"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order.</p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The substrings occur in the same position in the sort order, or the <em>length</em> parameter is zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substring in &lt;em&gt;strA&lt;/em&gt; follllows the substring in &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[29890,30047],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> follllows the substring in <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[30048,30082],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[31667,31690],"content":"Compare(String, String)","needQuote":true,"nodes":[{"content":"Compare(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[32494,32527],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[32528,32534],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[32597,32631],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[32632,32638],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that indicates the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; precedes &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[32697,32952],"source":"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> precedes <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; occurs in the same position as &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[32953,33086],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; follows &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[33087,33210],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> follows <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[33211,33245],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[33957,33989],"content":"Compare(String, String, Boolean)","needQuote":true,"nodes":[{"content":"Compare(String, String, Boolean)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[34883,34916],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[34917,34923],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[34986,35020],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[35021,35027],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore case during the comparison; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35097,35204],"source":"\\n<p>\\n<strong>true</strong> to ignore case during the comparison; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that indicates the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; precedes &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[35263,35518],"source":"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> precedes <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; occurs in the same position as &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[35519,35652],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; follows &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[35653,35776],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> follows <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[35777,35811],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[36800,36841],"content":"Compare(String, String, StringComparison)","needQuote":true,"nodes":[{"content":"Compare(String, String, StringComparison)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The first string to compare.&lt;/p&gt;\\n","pos":[37844,37883],"source":"\\n<p>The first string to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[37946,37980],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[37981,37987],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules to use in the comparison.","pos":[38070,38155],"source":"\\n<p>One of the enumeration values that specifies the rules to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[38156,38162],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that indicates the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; precedes &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[38221,38476],"source":"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> precedes <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; is in the same position as &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[38477,38606],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> is in the same position as <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; follows &lt;em&gt;strB&lt;/em&gt; in the sort order.","pos":[38607,38730],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> follows <em>strB</em> in the sort order."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[38731,38765],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[40148,40199],"content":"CompareOrdinal(String, Int32, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"CompareOrdinal(String, Int32, String, Int32, Int32)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The first string to use in the comparison.","pos":[41331,41378],"source":"\\n<p>The first string to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[41379,41385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the substring in &lt;em&gt;strA&lt;/em&gt;.","pos":[41449,41507],"source":"\\n<p>The starting index of the substring in <em>strA</em>."},{"content":"&lt;/p&gt;\\n","pos":[41508,41514],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to use in the comparison.","pos":[41577,41625],"source":"\\n<p>The second string to use in the comparison."},{"content":"&lt;/p&gt;\\n","pos":[41626,41632],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index of the substring in &lt;em&gt;strB&lt;/em&gt;.","pos":[41696,41754],"source":"\\n<p>The starting index of the substring in <em>strB</em>."},{"content":"&lt;/p&gt;\\n","pos":[41755,41761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters in the substrings to compare.","pos":[41825,41892],"source":"\\n<p>The maximum number of characters in the substrings to compare."},{"content":"&lt;/p&gt;\\n","pos":[41893,41899],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that indicates the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Condition&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substring in &lt;em&gt;strA&lt;/em&gt; is less than the substring in &lt;em&gt;strB&lt;/em&gt;.","pos":[41958,42229],"source":"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value</p>\\n<p>Condition</p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> is less than the substring in <em>strB</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substrings are equal, or &lt;em&gt;length&lt;/em&gt; is zero.","pos":[42230,42337],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The substrings are equal, or <em>length</em> is zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The substring in &lt;em&gt;strA&lt;/em&gt; is greater than the substring in &lt;em&gt;strB&lt;/em&gt;.","pos":[42338,42483],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> is greater than the substring in <em>strB</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[42484,42518],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[43827,43857],"content":"CompareOrdinal(String, String)","needQuote":true,"nodes":[{"content":"CompareOrdinal(String, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[44758,44791],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[44792,44798],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[44861,44895],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[44896,44902],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that indicates the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; is less than &lt;em&gt;strB&lt;/em&gt;.","pos":[44961,45188],"source":"\\n<p>An integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value</p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> is less than <em>strB</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; and &lt;em&gt;strB&lt;/em&gt; are equal.","pos":[45189,45287],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> and <em>strB</em> are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;strA&lt;/em&gt; is greater than &lt;em&gt;strB&lt;/em&gt;.","pos":[45288,45401],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> is greater than <em>strB</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[45402,45436],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[46060,46077],"content":"CompareTo(String)","needQuote":true,"nodes":[{"content":"CompareTo(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The string to compare with this instance.","pos":[46897,46943],"source":"\\n<p>The string to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[46944,46950],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the &lt;em&gt;strB&lt;/em&gt; parameter.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;strB&lt;/em&gt;.","pos":[47009,47314],"source":"\\n<p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <em>strB</em> parameter.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance precedes <em>strB</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance has the same position in the sort order as &lt;em&gt;strB&lt;/em&gt;.","pos":[47315,47440],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance has the same position in the sort order as <em>strB</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;strB&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;strB&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47441,47608],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance follows <em>strB</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>strB</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[47609,47643],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[48405,48432],"content":"Concat(IEnumerable<String>)","needQuote":true,"nodes":[{"content":"Concat(IEnumerable&lt;String&gt;)","pos":[0,27],"source":"Concat(IEnumerable<String>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50074,50122],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50123,50129],"source":" </p>\\n"},{"pos":[50636,50650],"content":"Concat(Object)","needQuote":true,"nodes":[{"content":"Concat(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to represent, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[51280,51335],"source":"\\n<p>The object to represent, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[51336,51342],"source":" </p>\\n"},{"pos":[52131,52153],"content":"Concat(Object, Object)","needQuote":true,"nodes":[{"content":"Concat(Object, Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The first object to concatenate.","pos":[52835,52872],"source":"\\n<p>The first object to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[52873,52879],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to concatenate.","pos":[52942,52980],"source":"\\n<p>The second object to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[52981,52987],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenated string representations of the values of &lt;em&gt;arg0&lt;/em&gt; and &lt;em&gt;arg1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[53047,53147],"source":"\\n<p>The concatenated string representations of the values of <em>arg0</em> and <em>arg1</em>.</p>\\n"},{"pos":[53733,53763],"content":"Concat(Object, Object, Object)","needQuote":true,"nodes":[{"content":"Concat(Object, Object, Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first object to concatenate.","pos":[54491,54528],"source":"\\n<p>The first object to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[54529,54535],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to concatenate.","pos":[54598,54636],"source":"\\n<p>The second object to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[54637,54643],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to concatenate.","pos":[54706,54743],"source":"\\n<p>The third object to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[54744,54750],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenated string representations of the values of &lt;em&gt;arg0&lt;/em&gt;, &lt;em&gt;arg1&lt;/em&gt;, and &lt;em&gt;arg2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[54810,54926],"source":"\\n<p>The concatenated string representations of the values of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\\n"},{"pos":[55442,55458],"content":"Concat(Object[])","needQuote":true,"nodes":[{"content":"Concat(Object[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An object array that contains the elements to concatenate.","pos":[56286,56349],"source":"\\n<p>An object array that contains the elements to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[56350,56356],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenated string representations of the values of the elements in &lt;em&gt;args&lt;/em&gt;.&lt;/p&gt;\\n","pos":[56416,56514],"source":"\\n<p>The concatenated string representations of the values of the elements in <em>args</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;args&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[56633,56679],"source":"\\n<p>\\n<em>args</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[56680,56686],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Out of memory.&lt;/p&gt;\\n","pos":[56789,56814],"source":"\\n<p>Out of memory.</p>\\n"},{"pos":[57476,57498],"content":"Concat(String, String)","needQuote":true,"nodes":[{"content":"Concat(String, String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The first string to concatenate.","pos":[58307,58344],"source":"\\n<p>The first string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[58345,58351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to concatenate.","pos":[58414,58452],"source":"\\n<p>The second string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[58453,58459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenation of &lt;em&gt;str0&lt;/em&gt; and &lt;em&gt;str1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[58519,58583],"source":"\\n<p>The concatenation of <em>str0</em> and <em>str1</em>.</p>\\n"},{"pos":[59114,59144],"content":"Concat(String, String, String)","needQuote":true,"nodes":[{"content":"Concat(String, String, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first string to concatenate.","pos":[59999,60036],"source":"\\n<p>The first string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[60037,60043],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to concatenate.","pos":[60106,60144],"source":"\\n<p>The second string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[60145,60151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third string to concatenate.","pos":[60214,60251],"source":"\\n<p>The third string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[60252,60258],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenation of &lt;em&gt;str0&lt;/em&gt;, &lt;em&gt;str1&lt;/em&gt;, and &lt;em&gt;str2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60318,60398],"source":"\\n<p>The concatenation of <em>str0</em>, <em>str1</em>, and <em>str2</em>.</p>\\n"},{"pos":[60979,61017],"content":"Concat(String, String, String, String)","needQuote":true,"nodes":[{"content":"Concat(String, String, String, String)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The first string to concatenate.","pos":[61915,61952],"source":"\\n<p>The first string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[61953,61959],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to concatenate.","pos":[62022,62060],"source":"\\n<p>The second string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[62061,62067],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third string to concatenate.","pos":[62130,62167],"source":"\\n<p>The third string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[62168,62174],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The fourth string to concatenate.","pos":[62237,62275],"source":"\\n<p>The fourth string to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[62276,62282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenation of &lt;em&gt;str0&lt;/em&gt;, &lt;em&gt;str1&lt;/em&gt;, &lt;em&gt;str2&lt;/em&gt;, and &lt;em&gt;str3&lt;/em&gt;.&lt;/p&gt;\\n","pos":[62342,62437],"source":"\\n<p>The concatenation of <em>str0</em>, <em>str1</em>, <em>str2</em>, and <em>str3</em>.</p>\\n"},{"pos":[62906,62922],"content":"Concat(String[])","needQuote":true,"nodes":[{"content":"Concat(String[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An array of string instances.","pos":[63726,63760],"source":"\\n<p>An array of string instances."},{"content":"&lt;/p&gt;\\n","pos":[63761,63767],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The concatenated elements of &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;\\n","pos":[63827,63883],"source":"\\n<p>The concatenated elements of <em>values</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[64002,64050],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[64051,64057],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Out of memory.&lt;/p&gt;\\n","pos":[64160,64185],"source":"\\n<p>Out of memory.</p>\\n"},{"pos":[64849,64874],"content":"Concat<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Concat&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,25],"source":"Concat<T>(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The type of the members of &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;\\n","pos":[65977,66031],"source":"\\n<p>The type of the members of <em>values</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The concatenated members in &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;\\n","pos":[66091,66146],"source":"\\n<p>The concatenated members in <em>values</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66265,66313],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66314,66320],"source":" </p>\\n"},{"pos":[66827,66843],"content":"Contains(String)","needQuote":true,"nodes":[{"content":"Contains(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[67495,67519],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[67520,67526],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[67883,67930],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67931,67937],"source":" </p>\\n"},{"pos":[68552,68587],"content":"CopyTo(Int32, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Int32, Char[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The index of the first character in this instance to copy.","pos":[69530,69593],"source":"\\n<p>The index of the first character in this instance to copy."},{"content":"&lt;/p&gt;\\n","pos":[69594,69600],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of Unicode characters to which characters in this instance are copied.","pos":[69670,69754],"source":"\\n<p>An array of Unicode characters to which characters in this instance are copied."},{"content":"&lt;/p&gt;\\n","pos":[69755,69761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index in &lt;em&gt;destination&lt;/em&gt; at which the copy operation begins.","pos":[69835,69909],"source":"\\n<p>The index in <em>destination</em> at which the copy operation begins."},{"content":"&lt;/p&gt;\\n","pos":[69910,69916],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in this instance to copy to &lt;em&gt;destination&lt;/em&gt;.","pos":[69979,70058],"source":"\\n<p>The number of characters in this instance to copy to <em>destination</em>."},{"content":"&lt;/p&gt;\\n","pos":[70059,70065],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[70184,70237],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[70238,70244],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt;, &lt;em&gt;destinationIndex&lt;/em&gt;, or &lt;em&gt;count&lt;/em&gt; is negative &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt; does not identify a position in the current instance.","pos":[70361,70546],"source":"\\n<p>\\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em> is negative </p>\\n<p>-or- </p>\\n<p>\\n<em>sourceIndex</em> does not identify a position in the current instance."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationIndex&lt;/em&gt; does not identify a valid index in the &lt;em&gt;destination&lt;/em&gt; array.","pos":[70547,70663],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> does not identify a valid index in the <em>destination</em> array."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is greater than the length of the substring from &lt;em&gt;startIndex&lt;/em&gt; to the end of this instance &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is greater than the length of the subarray from &lt;em&gt;destinationIndex&lt;/em&gt; to the end of the &lt;em&gt;destination&lt;/em&gt; array.","pos":[70664,70959],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of the substring from <em>startIndex</em> to the end of this instance </p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is greater than the length of the subarray from <em>destinationIndex</em> to the end of the <em>destination</em> array."},{"content":"&lt;/p&gt;\\n","pos":[70960,70966],"source":" </p>\\n"},{"pos":[71817,71833],"content":"EndsWith(String)","needQuote":true,"nodes":[{"content":"EndsWith(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string to compare to the substring at the end of this instance.","pos":[72482,72554],"source":"\\n<p>The string to compare to the substring at the end of this instance."},{"content":"&lt;/p&gt;\\n","pos":[72555,72561],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; matches the end of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[72622,72743],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> matches the end of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[72862,72909],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[72910,72916],"source":" </p>\\n"},{"pos":[73522,73556],"content":"EndsWith(String, StringComparison)","needQuote":true,"nodes":[{"content":"EndsWith(String, StringComparison)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The string to compare to the substring at the end of this instance.","pos":[74483,74555],"source":"\\n<p>The string to compare to the substring at the end of this instance."},{"content":"&lt;/p&gt;\\n","pos":[74556,74562],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that determines how this string and &lt;em&gt;value&lt;/em&gt; are compared.","pos":[74645,74744],"source":"\\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared."},{"content":"&lt;/p&gt;\\n","pos":[74745,74751],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;value&lt;/em&gt; parameter matches the end of this string; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[74812,74945],"source":"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter matches the end of this string; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[75064,75111],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[75112,75118],"source":" </p>\\n"},{"pos":[75736,75750],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The string to compare to this instance.","pos":[76671,76715],"source":"\\n<p>The string to compare to this instance."},{"content":"&lt;/p&gt;\\n","pos":[76716,76722],"source":" </p>\\n"},{"pos":[77642,77656],"content":"Equals(String)","needQuote":true,"nodes":[{"content":"Equals(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The string to compare to this instance.","pos":[78540,78584],"source":"\\n<p>The string to compare to this instance."},{"content":"&lt;/p&gt;\\n","pos":[78585,78591],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of the &lt;em&gt;value&lt;/em&gt; parameter is the same as the value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[78652,78803],"source":"\\n<p>\\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as the value of this instance; otherwise, <strong>false</strong>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, the method returns &lt;strong&gt;false&lt;/strong&gt;.","pos":[78804,78890],"source":" If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[78891,78897],"source":" </p>\\n"},{"pos":[79445,79467],"content":"Equals(String, String)","needQuote":true,"nodes":[{"content":"Equals(String, String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The first string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[80202,80261],"source":"\\n<p>The first string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[80262,80268],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[80328,80388],"source":"\\n<p>The second string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[80389,80395],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;a&lt;/em&gt; is the same as the value of &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[80456,80586],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>."},{"content":"If both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;, the method returns &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80587,80695],"source":" If both <em>a</em> and <em>b</em> are <strong>null</strong>, the method returns <strong>true</strong>.</p>\\n"},{"pos":[81272,81312],"content":"Equals(String, String, StringComparison)","needQuote":true,"nodes":[{"content":"Equals(String, String, StringComparison)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The first string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[82299,82358],"source":"\\n<p>The first string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[82359,82365],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[82425,82485],"source":"\\n<p>The second string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[82486,82492],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the comparison.","pos":[82575,82654],"source":"\\n<p>One of the enumeration values that specifies the rules for the comparison."},{"content":"&lt;/p&gt;\\n","pos":[82655,82661],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of the &lt;em&gt;a&lt;/em&gt; parameter is equal to the value of the &lt;em&gt;b&lt;/em&gt; parameter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82722,82883],"source":"\\n<p>\\n<strong>true</strong> if the value of the <em>a</em> parameter is equal to the value of the <em>b</em> parameter; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[83684,83716],"content":"Equals(String, StringComparison)","needQuote":true,"nodes":[{"content":"Equals(String, StringComparison)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The string to compare to this instance.&lt;/p&gt;\\n","pos":[84676,84726],"source":"\\n<p>The string to compare to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies how the strings will be compared.","pos":[84809,84892],"source":"\\n<p>One of the enumeration values that specifies how the strings will be compared."},{"content":"&lt;/p&gt;\\n","pos":[84893,84899],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of the &lt;em&gt;value&lt;/em&gt; parameter is the same as this string; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[84960,85102],"source":"\\n<p>\\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as this string; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[85912,85951],"content":"Format(IFormatProvider, String, Object)","needQuote":true,"nodes":[{"content":"Format(IFormatProvider, String, Object)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[86842,86911],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[86912,86918],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string.","pos":[86983,87014],"source":"\\n<p>A composite format string."},{"content":"&lt;/p&gt;\\n","pos":[87015,87021],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object to format.","pos":[87084,87110],"source":"\\n<p>The object to format."},{"content":"&lt;/p&gt;\\n","pos":[87111,87117],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which the format item or items have been replaced by the string representation of &lt;em&gt;arg0&lt;/em&gt;.","pos":[87177,87307],"source":"\\n<p>A copy of <em>format</em> in which the format item or items have been replaced by the string representation of <em>arg0</em>."},{"content":"&lt;/p&gt;\\n","pos":[87308,87314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; or &lt;em&gt;arg0&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[87433,87498],"source":"\\n<p>\\n<em>format</em> or <em>arg0</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[87499,87505],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than zero, or greater than or equal to one.","pos":[87598,87733],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to one."},{"content":"&lt;/p&gt;\\n","pos":[87734,87740],"source":" </p>\\n"},{"pos":[88219,88266],"content":"Format(IFormatProvider, String, Object, Object)","needQuote":true,"nodes":[{"content":"Format(IFormatProvider, String, Object, Object)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[89189,89258],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[89259,89265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string.","pos":[89330,89361],"source":"\\n<p>A composite format string."},{"content":"&lt;/p&gt;\\n","pos":[89362,89368],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[89431,89463],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[89464,89470],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[89533,89566],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[89567,89573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which format items are replaced by the string representations of &lt;em&gt;arg0&lt;/em&gt; and &lt;em&gt;arg1&lt;/em&gt;.","pos":[89633,89764],"source":"\\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>."},{"content":"&lt;/p&gt;\\n","pos":[89765,89771],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt;, &lt;em&gt;arg0&lt;/em&gt;, or &lt;em&gt;arg1&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[89890,89971],"source":"\\n<p>\\n<em>format</em>, <em>arg0</em>, or <em>arg1</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[89972,89978],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than zero, or greater than or equal to two.","pos":[90071,90206],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to two."},{"content":"&lt;/p&gt;\\n","pos":[90207,90213],"source":" </p>\\n"},{"pos":[90742,90797],"content":"Format(IFormatProvider, String, Object, Object, Object)","needQuote":true,"nodes":[{"content":"Format(IFormatProvider, String, Object, Object, Object)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[91768,91837],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[91838,91844],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string.","pos":[91909,91940],"source":"\\n<p>A composite format string."},{"content":"&lt;/p&gt;\\n","pos":[91941,91947],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[92010,92042],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[92043,92049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[92112,92145],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[92146,92152],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to format.","pos":[92215,92247],"source":"\\n<p>The third object to format."},{"content":"&lt;/p&gt;\\n","pos":[92248,92254],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which the format items have been replaced by the string representations of &lt;em&gt;arg0&lt;/em&gt;, &lt;em&gt;arg1&lt;/em&gt;, and &lt;em&gt;arg2&lt;/em&gt;.","pos":[92314,92471],"source":"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>."},{"content":"&lt;/p&gt;\\n","pos":[92472,92478],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt;, &lt;em&gt;arg0&lt;/em&gt;, &lt;em&gt;arg1&lt;/em&gt;, or &lt;em&gt;arg2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[92597,92693],"source":"\\n<p>\\n<em>format</em>, <em>arg0</em>, <em>arg1</em>, or <em>arg2</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[92694,92700],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than zero, or greater than or equal to three.","pos":[92793,92930],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to three."},{"content":"&lt;/p&gt;\\n","pos":[92931,92937],"source":" </p>\\n"},{"pos":[93396,93437],"content":"Format(IFormatProvider, String, Object[])","needQuote":true,"nodes":[{"content":"Format(IFormatProvider, String, Object[])","pos":[0,41]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[94362,94431],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[94432,94438],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string.","pos":[94503,94534],"source":"\\n<p>A composite format string."},{"content":"&lt;/p&gt;\\n","pos":[94535,94541],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object array that contains zero or more objects to format.","pos":[94606,94672],"source":"\\n<p>An object array that contains zero or more objects to format."},{"content":"&lt;/p&gt;\\n","pos":[94673,94679],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which the format items have been replaced by the string representation of the corresponding objects in &lt;em&gt;args&lt;/em&gt;.&lt;/p&gt;\\n","pos":[94739,94896],"source":"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; or &lt;em&gt;args&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[95015,95080],"source":"\\n<p>\\n<em>format</em> or <em>args</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[95081,95087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than zero, or greater than or equal to the length of the &lt;em&gt;args&lt;/em&gt; array.","pos":[95180,95349],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array."},{"content":"&lt;/p&gt;\\n","pos":[95350,95356],"source":" </p>\\n"},{"pos":[96308,96330],"content":"Format(String, Object)","needQuote":true,"nodes":[{"content":"Format(String, Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A composite format string.","pos":[97062,97093],"source":"\\n<p>A composite format string."},{"content":"&lt;/p&gt;\\n","pos":[97094,97100],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object to format.","pos":[97163,97189],"source":"\\n<p>The object to format."},{"content":"&lt;/p&gt;\\n","pos":[97190,97196],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which any format items are replaced by the string representation of &lt;em&gt;arg0&lt;/em&gt;.&lt;/p&gt;\\n","pos":[97256,97378],"source":"\\n<p>A copy of <em>format</em> in which any format items are replaced by the string representation of <em>arg0</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[97497,97545],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[97546,97552],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The format item in &lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is not zero.","pos":[97645,97758],"source":"\\n<p>The format item in <em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is not zero."},{"content":"&lt;/p&gt;\\n","pos":[97759,97765],"source":" </p>\\n"},{"pos":[98158,98188],"content":"Format(String, Object, Object)","needQuote":true,"nodes":[{"content":"Format(String, Object, Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A composite format string.","pos":[98959,98990],"source":"\\n<p>A composite format string."},{"content":"&lt;/p&gt;\\n","pos":[98991,98997],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[99060,99092],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[99093,99099],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[99162,99195],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[99196,99202],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which format items are replaced by the string representations of &lt;em&gt;arg0&lt;/em&gt; and &lt;em&gt;arg1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[99262,99399],"source":"\\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[99518,99566],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[99567,99573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is not zero or one.","pos":[99666,99769],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is not zero or one."},{"content":"&lt;/p&gt;\\n","pos":[99770,99776],"source":" </p>\\n"},{"pos":[100219,100257],"content":"Format(String, Object, Object, Object)","needQuote":true,"nodes":[{"content":"Format(String, Object, Object, Object)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;A composite format string.&lt;/p&gt;\\n","pos":[101074,101111],"source":"\\n<p>A composite format string.</p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[101174,101206],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[101207,101213],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[101276,101309],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[101310,101316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to format.","pos":[101379,101411],"source":"\\n<p>The third object to format."},{"content":"&lt;/p&gt;\\n","pos":[101412,101418],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which the format items have been replaced by the string representations of &lt;em&gt;arg0&lt;/em&gt;, &lt;em&gt;arg1&lt;/em&gt;, and &lt;em&gt;arg2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[101478,101641],"source":"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[101760,101808],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[101809,101815],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than zero, or greater than two.","pos":[101908,102031],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than two."},{"content":"&lt;/p&gt;\\n","pos":[102032,102038],"source":" </p>\\n"},{"pos":[102411,102435],"content":"Format(String, Object[])","needQuote":true,"nodes":[{"content":"Format(String, Object[])","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A composite format string.&lt;/p&gt;\\n","pos":[103207,103244],"source":"\\n<p>A composite format string.</p>\\n"},{"content":"\\n&lt;p&gt;An object array that contains zero or more objects to format.","pos":[103309,103375],"source":"\\n<p>An object array that contains zero or more objects to format."},{"content":"&lt;/p&gt;\\n","pos":[103376,103382],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A copy of &lt;em&gt;format&lt;/em&gt; in which the format items have been replaced by the string representation of the corresponding objects in &lt;em&gt;args&lt;/em&gt;.&lt;/p&gt;\\n","pos":[103442,103599],"source":"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; or &lt;em&gt;args&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[103718,103783],"source":"\\n<p>\\n<em>format</em> or <em>args</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[103784,103790],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than zero, or greater than or equal to the length of the &lt;em&gt;args&lt;/em&gt; array.","pos":[103883,104052],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array."},{"content":"&lt;/p&gt;\\n","pos":[104053,104059],"source":" </p>\\n"},{"pos":[104495,104508],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[105309,105354],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[105786,105799],"content":"IndexOf(Char)","needQuote":true,"nodes":[{"content":"IndexOf(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A Unicode character to seek.","pos":[106458,106491],"source":"\\n<p>A Unicode character to seek."},{"content":"&lt;/p&gt;\\n","pos":[106492,106498],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of &lt;em&gt;value&lt;/em&gt; if that character is found, or -1 if it is not.&lt;/p&gt;\\n","pos":[106557,106663],"source":"\\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\\n"},{"pos":[107366,107386],"content":"IndexOf(Char, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(Char, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A Unicode character to seek.","pos":[108151,108184],"source":"\\n<p>A Unicode character to seek."},{"content":"&lt;/p&gt;\\n","pos":[108185,108191],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[108259,108293],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[108294,108300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of &lt;em&gt;value&lt;/em&gt; from the start of the string if that character is found, or -1 if it is not.&lt;/p&gt;\\n","pos":[108359,108494],"source":"\\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than 0 (zero) or greater than the length of the string.","pos":[108625,108715],"source":"\\n<p>\\n<em>startIndex</em> is less than 0 (zero) or greater than the length of the string."},{"content":"&lt;/p&gt;\\n","pos":[108716,108722],"source":" </p>\\n"},{"pos":[109524,109551],"content":"IndexOf(Char, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(Char, Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A Unicode character to seek.","pos":[110486,110519],"source":"\\n<p>A Unicode character to seek."},{"content":"&lt;/p&gt;\\n","pos":[110520,110526],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[110594,110628],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[110629,110635],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[110698,110748],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[110749,110755],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of &lt;em&gt;value&lt;/em&gt; from the start of the string if that character is found, or -1 if it is not.&lt;/p&gt;\\n","pos":[110814,110949],"source":"\\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; or &lt;em&gt;startIndex&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than the length of this string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is greater than the length of this string minus &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[111080,111337],"source":"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the length of this string.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\\n"},{"pos":[112074,112089],"content":"IndexOf(String)","needQuote":true,"nodes":[{"content":"IndexOf(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[112747,112771],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[112772,112778],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[113184,113231],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[113232,113238],"source":" </p>\\n"},{"pos":[114044,114066],"content":"IndexOf(String, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[114830,114854],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[114855,114861],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[114929,114963],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[114964,114970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[115433,115480],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[115481,115487],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than 0 (zero) or greater than the length of this string.&lt;/p&gt;\\n","pos":[115604,115701],"source":"\\n<p>\\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string.</p>\\n"},{"pos":[116553,116582],"content":"IndexOf(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(String, Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[117444,117468],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[117469,117475],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[117543,117577],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[117578,117584],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[117647,117697],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[117698,117704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[118167,118214],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[118215,118221],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; or &lt;em&gt;startIndex&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than the length of this string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is greater than the length of this string minus &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[118338,118595],"source":"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the length of this string.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\\n"},{"pos":[119526,119573],"content":"IndexOf(String, Int32, Int32, StringComparison)","needQuote":true,"nodes":[{"content":"IndexOf(String, Int32, Int32, StringComparison)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[120763,120787],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[120788,120794],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[120862,120896],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[120897,120903],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[120966,121016],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[121017,121023],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the search.","pos":[121106,121181],"source":"\\n<p>One of the enumeration values that specifies the rules for the search."},{"content":"&lt;/p&gt;\\n","pos":[121182,121188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[121665,121712],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[121713,121719],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; or &lt;em&gt;startIndex&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than the length of this instance.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is greater than the length of this string minus &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121836,122095],"source":"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the length of this instance.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\\n"},{"pos":[122760,122800],"content":"IndexOf(String, Int32, StringComparison)","needQuote":true,"nodes":[{"content":"IndexOf(String, Int32, StringComparison)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[123810,123834],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[123835,123841],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[123909,123943],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[123944,123950],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the search.","pos":[124033,124108],"source":"\\n<p>One of the enumeration values that specifies the rules for the search."},{"content":"&lt;/p&gt;\\n","pos":[124109,124115],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[124592,124639],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[124640,124646],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than 0 (zero) or greater than the length of this string.","pos":[124763,124854],"source":"\\n<p>\\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string."},{"content":"&lt;/p&gt;\\n","pos":[124855,124861],"source":" </p>\\n"},{"pos":[125480,125513],"content":"IndexOf(String, StringComparison)","needQuote":true,"nodes":[{"content":"IndexOf(String, StringComparison)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[126418,126442],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[126443,126449],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the search.","pos":[126532,126607],"source":"\\n<p>One of the enumeration values that specifies the rules for the search."},{"content":"&lt;/p&gt;\\n","pos":[126608,126614],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[127023,127070],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[127071,127077],"source":" </p>\\n"},{"pos":[127626,127644],"content":"IndexOfAny(Char[])","needQuote":true,"nodes":[{"content":"IndexOfAny(Char[])","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A Unicode character array containing one or more characters to seek.","pos":[128350,128423],"source":"\\n<p>A Unicode character array containing one or more characters to seek."},{"content":"&lt;/p&gt;\\n","pos":[128424,128430],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of the first occurrence in this instance where any character in &lt;em&gt;anyOf&lt;/em&gt; was found; -1 if no character in &lt;em&gt;anyOf&lt;/em&gt; was found.&lt;/p&gt;\\n","pos":[128489,128667],"source":"\\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;anyOf&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[128786,128833],"source":"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[128834,128840],"source":" </p>\\n"},{"pos":[129632,129657],"content":"IndexOfAny(Char[], Int32)","needQuote":true,"nodes":[{"content":"IndexOfAny(Char[], Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A Unicode character array containing one or more characters to seek.","pos":[130469,130542],"source":"\\n<p>A Unicode character array containing one or more characters to seek."},{"content":"&lt;/p&gt;\\n","pos":[130543,130549],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[130617,130651],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[130652,130658],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of the first occurrence in this instance where any character in &lt;em&gt;anyOf&lt;/em&gt; was found; -1 if no character in &lt;em&gt;anyOf&lt;/em&gt; was found.&lt;/p&gt;\\n","pos":[130717,130895],"source":"\\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;anyOf&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[131014,131061],"source":"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[131062,131068],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than the number of characters in this instance.","pos":[131185,131327],"source":"\\n<p>\\n<em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the number of characters in this instance."},{"content":"&lt;/p&gt;\\n","pos":[131328,131334],"source":" </p>\\n"},{"pos":[132357,132389],"content":"IndexOfAny(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOfAny(Char[], Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A Unicode character array containing one or more characters to seek.","pos":[133323,133396],"source":"\\n<p>A Unicode character array containing one or more characters to seek."},{"content":"&lt;/p&gt;\\n","pos":[133397,133403],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[133471,133505],"source":"\\n<p>The search starting position."},{"content":"&lt;/p&gt;\\n","pos":[133506,133512],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[133575,133625],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[133626,133632],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of the first occurrence in this instance where any character in &lt;em&gt;anyOf&lt;/em&gt; was found; -1 if no character in &lt;em&gt;anyOf&lt;/em&gt; was found.&lt;/p&gt;\\n","pos":[133691,133869],"source":"\\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;anyOf&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[133988,134035],"source":"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[134036,134042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; or &lt;em&gt;startIndex&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; + &lt;em&gt;startIndex&lt;/em&gt; is greater than the number of characters in this instance.","pos":[134159,134336],"source":"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> + <em>startIndex</em> is greater than the number of characters in this instance."},{"content":"&lt;/p&gt;\\n","pos":[134337,134343],"source":" </p>\\n"},{"pos":[135350,135371],"content":"Insert(Int32, String)","needQuote":true,"nodes":[{"content":"Insert(Int32, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The zero-based index position of the insertion.","pos":[136176,136228],"source":"\\n<p>The zero-based index position of the insertion."},{"content":"&lt;/p&gt;\\n","pos":[136229,136235],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to insert.","pos":[136299,136325],"source":"\\n<p>The string to insert."},{"content":"&lt;/p&gt;\\n","pos":[136326,136332],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this instance, but with &lt;em&gt;value&lt;/em&gt; inserted at position &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[136392,136518],"source":"\\n<p>A new string that is equivalent to this instance, but with <em>value</em> inserted at position <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[136637,136684],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[136685,136691],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is negative or greater than the length of this instance.","pos":[136808,136891],"source":"\\n<p>\\n<em>startIndex</em> is negative or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[136892,136898],"source":" </p>\\n"},{"pos":[138336,138357],"content":"IsNullOrEmpty(String)","needQuote":true,"nodes":[{"content":"IsNullOrEmpty(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The string to test.","pos":[139116,139140],"source":"\\n<p>The string to test."},{"content":"&lt;/p&gt;\\n","pos":[139141,139147],"source":" </p>\\n"},{"pos":[139839,139865],"content":"IsNullOrWhiteSpace(String)","needQuote":true,"nodes":[{"content":"IsNullOrWhiteSpace(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The string to test.&lt;/p&gt;\\n","pos":[140600,140630],"source":"\\n<p>The string to test.</p>\\n"},{"pos":[141529,141562],"content":"Join(String, IEnumerable<String>)","needQuote":true,"nodes":[{"content":"Join(String, IEnumerable&lt;String&gt;)","pos":[0,33],"source":"Join(String, IEnumerable<String>)"}]},{"content":"\\n&lt;p&gt;The string to use as a separator.&lt;em&gt;separator&lt;/em&gt; is included in the returned string only if &lt;em&gt;values&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[142617,142765],"source":"\\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\\n"},{"content":"\\n&lt;p&gt;A collection that contains the strings to concatenate.&lt;/p&gt;\\n","pos":[142870,142935],"source":"\\n<p>A collection that contains the strings to concatenate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[143360,143408],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[143409,143415],"source":" </p>\\n"},{"pos":[144103,144125],"content":"Join(String, Object[])","needQuote":true,"nodes":[{"content":"Join(String, Object[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The string to use as a separator.&lt;em&gt;separator&lt;/em&gt; is included in the returned string only if &lt;em&gt;values&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[144944,145092],"source":"\\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the elements to concatenate.&lt;/p&gt;\\n","pos":[145159,145221],"source":"\\n<p>An array that contains the elements to concatenate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[145650,145698],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[145699,145705],"source":" </p>\\n"},{"pos":[146313,146335],"content":"Join(String, String[])","needQuote":true,"nodes":[{"content":"Join(String, String[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The string to use as a separator.","pos":[147084,147122],"source":"\\n<p>The string to use as a separator."},{"content":"&lt;em&gt;separator&lt;/em&gt; is included in the returned string only if &lt;em&gt;value&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[147123,147232],"source":" <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the elements to concatenate.","pos":[147298,147354],"source":"\\n<p>An array that contains the elements to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[147355,147361],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[147788,147835],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[147836,147842],"source":" </p>\\n"},{"pos":[148530,148566],"content":"Join(String, String[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Join(String, String[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The string to use as a separator.","pos":[149478,149516],"source":"\\n<p>The string to use as a separator."},{"content":"&lt;em&gt;separator&lt;/em&gt; is included in the returned string only if &lt;em&gt;value&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[149517,149626],"source":" <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the elements to concatenate.","pos":[149692,149748],"source":"\\n<p>An array that contains the elements to concatenate."},{"content":"&lt;/p&gt;\\n","pos":[149749,149755],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first element in &lt;em&gt;value&lt;/em&gt; to use.","pos":[149823,149871],"source":"\\n<p>The first element in <em>value</em> to use."},{"content":"&lt;/p&gt;\\n","pos":[149872,149878],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements of &lt;em&gt;value&lt;/em&gt; to use.","pos":[149941,149994],"source":"\\n<p>The number of elements of <em>value</em> to use."},{"content":"&lt;/p&gt;\\n","pos":[149995,150001],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[150599,150646],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[150647,150653],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than 0.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; plus &lt;em&gt;count&lt;/em&gt; is greater than the number of elements in &lt;em&gt;value&lt;/em&gt;.","pos":[150770,150952],"source":"\\n<p>\\n<em>startIndex</em> or <em>count</em> is less than 0.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>count</em> is greater than the number of elements in <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[150953,150959],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Out of memory.&lt;/p&gt;\\n","pos":[151062,151087],"source":"\\n<p>Out of memory.</p>\\n"},{"pos":[151858,151889],"content":"Join<T>(String, IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Join&lt;T&gt;(String, IEnumerable&lt;T&gt;)","pos":[0,31],"source":"Join<T>(String, IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The string to use as a separator.&lt;em&gt;separator&lt;/em&gt; is included in the returned string only if &lt;em&gt;values&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[152739,152887],"source":"\\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\\n"},{"content":"\\n&lt;p&gt;A collection that contains the objects to concatenate.&lt;/p&gt;\\n","pos":[152982,153047],"source":"\\n<p>A collection that contains the objects to concatenate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the members of &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;\\n","pos":[153101,153155],"source":"\\n<p>The type of the members of <em>values</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[153580,153628],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[153629,153635],"source":" </p>\\n"},{"pos":[154284,154301],"content":"LastIndexOf(Char)","needQuote":true,"nodes":[{"content":"LastIndexOf(Char)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Unicode character to seek.","pos":[154988,155023],"source":"\\n<p>The Unicode character to seek."},{"content":"&lt;/p&gt;\\n","pos":[155024,155030],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index position of &lt;em&gt;value&lt;/em&gt; if that character is found, or -1 if it is not.&lt;/p&gt;\\n","pos":[155089,155195],"source":"\\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\\n"},{"pos":[155906,155930],"content":"LastIndexOf(Char, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(Char, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The Unicode character to seek.","pos":[156780,156815],"source":"\\n<p>The Unicode character to seek."},{"content":"&lt;/p&gt;\\n","pos":[156816,156822],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position of the search.","pos":[156890,156931],"source":"\\n<p>The starting position of the search."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[156932,157021],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"pos":[158473,158504],"content":"LastIndexOf(Char, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(Char, Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The Unicode character to seek.","pos":[159538,159573],"source":"\\n<p>The Unicode character to seek."},{"content":"&lt;/p&gt;\\n","pos":[159574,159580],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position of the search.","pos":[159648,159689],"source":"\\n<p>The starting position of the search."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[159690,159779],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[159842,159892],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[159893,159899],"source":" </p>\\n"},{"pos":[161488,161507],"content":"LastIndexOf(String)","needQuote":true,"nodes":[{"content":"LastIndexOf(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[162191,162215],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[162216,162222],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[162676,162723],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[162724,162730],"source":" </p>\\n"},{"pos":[163451,163477],"content":"LastIndexOf(String, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[164324,164348],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[164349,164355],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[164423,164457],"source":"\\n<p>The search starting position."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[164458,164547],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[165160,165207],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[165208,165214],"source":" </p>\\n"},{"pos":[166512,166545],"content":"LastIndexOf(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Int32, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[167481,167505],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[167506,167512],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[167580,167614],"source":"\\n<p>The search starting position."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[167615,167704],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[167767,167817],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[167818,167824],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[168437,168484],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[168485,168491],"source":" </p>\\n"},{"pos":[170470,170521],"content":"LastIndexOf(String, Int32, Int32, StringComparison)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Int32, Int32, StringComparison)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[171728,171752],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[171753,171759],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[171827,171861],"source":"\\n<p>The search starting position."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[171862,171951],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[172014,172064],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[172065,172071],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the search.","pos":[172154,172229],"source":"\\n<p>One of the enumeration values that specifies the rules for the search."},{"content":"&lt;/p&gt;\\n","pos":[172230,172236],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[172863,172910],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[172911,172917],"source":" </p>\\n"},{"pos":[174732,174776],"content":"LastIndexOf(String, Int32, StringComparison)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Int32, StringComparison)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[175884,175908],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[175909,175915],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[175983,176017],"source":"\\n<p>The search starting position."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[176018,176107],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the search.","pos":[176190,176265],"source":"\\n<p>One of the enumeration values that specifies the rules for the search."},{"content":"&lt;/p&gt;\\n","pos":[176266,176272],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[176899,176946],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[176947,176953],"source":" </p>\\n"},{"pos":[178119,178156],"content":"LastIndexOf(String, StringComparison)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, StringComparison)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to seek.","pos":[179078,179102],"source":"\\n<p>The string to seek."},{"content":"&lt;/p&gt;\\n","pos":[179103,179109],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the rules for the search.","pos":[179192,179267],"source":"\\n<p>One of the enumeration values that specifies the rules for the search."},{"content":"&lt;/p&gt;\\n","pos":[179268,179274],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[179742,179789],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[179790,179796],"source":" </p>\\n"},{"pos":[180361,180383],"content":"LastIndexOfAny(Char[])","needQuote":true,"nodes":[{"content":"LastIndexOfAny(Char[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A Unicode character array containing one or more characters to seek.","pos":[181108,181181],"source":"\\n<p>A Unicode character array containing one or more characters to seek."},{"content":"&lt;/p&gt;\\n","pos":[181182,181188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index position of the last occurrence in this instance where any character in &lt;em&gt;anyOf&lt;/em&gt; was found; -1 if no character in &lt;em&gt;anyOf&lt;/em&gt; was found.&lt;/p&gt;\\n","pos":[181247,181413],"source":"\\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;anyOf&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[181532,181579],"source":"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[181580,181586],"source":" </p>\\n"},{"pos":[182555,182584],"content":"LastIndexOfAny(Char[], Int32)","needQuote":true,"nodes":[{"content":"LastIndexOfAny(Char[], Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A Unicode character array containing one or more characters to seek.","pos":[183472,183545],"source":"\\n<p>A Unicode character array containing one or more characters to seek."},{"content":"&lt;/p&gt;\\n","pos":[183546,183552],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[183620,183654],"source":"\\n<p>The search starting position."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[183655,183744],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;anyOf&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[184202,184249],"source":"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[184250,184256],"source":" </p>\\n"},{"pos":[185623,185659],"content":"LastIndexOfAny(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOfAny(Char[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A Unicode character array containing one or more characters to seek.","pos":[186656,186729],"source":"\\n<p>A Unicode character array containing one or more characters to seek."},{"content":"&lt;/p&gt;\\n","pos":[186730,186736],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The search starting position.","pos":[186804,186838],"source":"\\n<p>The search starting position."},{"content":"The search proceeds from &lt;em&gt;startIndex&lt;/em&gt; toward the beginning of this instance.&lt;/p&gt;\\n","pos":[186839,186928],"source":" The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;The number of character positions to examine.","pos":[186991,187041],"source":"\\n<p>The number of character positions to examine."},{"content":"&lt;/p&gt;\\n","pos":[187042,187048],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;anyOf&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[187506,187553],"source":"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[187554,187560],"source":" </p>\\n"},{"pos":[189100,189124],"content":"Equality(String, String)","needQuote":true,"nodes":[{"content":"Equality(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[189794,189853],"source":"\\n<p>The first string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[189854,189860],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[189920,189980],"source":"\\n<p>The second string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[189981,189987],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;a&lt;/em&gt; is the same as the value of &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[190048,190184],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[190558,190584],"content":"Inequality(String, String)","needQuote":true,"nodes":[{"content":"Inequality(String, String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[191261,191320],"source":"\\n<p>The first string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[191321,191327],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[191387,191447],"source":"\\n<p>The second string to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[191448,191454],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;a&lt;/em&gt; is different from the value of &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[191515,191654],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is different from the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[191967,191981],"content":"PadLeft(Int32)","needQuote":true,"nodes":[{"content":"PadLeft(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[192699,192836],"source":"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters."},{"content":"&lt;/p&gt;\\n","pos":[192837,192843],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of &lt;em&gt;totalWidth&lt;/em&gt;.","pos":[192903,193071],"source":"\\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <em>totalWidth</em>."},{"content":"However, if &lt;em&gt;totalWidth&lt;/em&gt; is less than the length of this instance, the method returns a reference to the existing instance.","pos":[193072,193202],"source":" However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If &lt;em&gt;totalWidth&lt;/em&gt; is equal to the length of this instance, the method returns a new string that is identical to this instance.&lt;/p&gt;\\n","pos":[193203,193340],"source":" If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;totalWidth&lt;/em&gt; is less than zero.","pos":[193471,193516],"source":"\\n<p>\\n<em>totalWidth</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[193517,193523],"source":" </p>\\n"},{"pos":[194098,194118],"content":"PadLeft(Int32, Char)","needQuote":true,"nodes":[{"content":"PadLeft(Int32, Char)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[194989,195126],"source":"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters."},{"content":"&lt;/p&gt;\\n","pos":[195127,195133],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode padding character.","pos":[195201,195234],"source":"\\n<p>A Unicode padding character."},{"content":"&lt;/p&gt;\\n","pos":[195235,195241],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this instance, but right-aligned and padded on the left with as many &lt;em&gt;paddingChar&lt;/em&gt; characters as needed to create a length of &lt;em&gt;totalWidth&lt;/em&gt;.","pos":[195301,195494],"source":"\\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>."},{"content":"However, if &lt;em&gt;totalWidth&lt;/em&gt; is less than the length of this instance, the method returns a reference to the existing instance.","pos":[195495,195625],"source":" However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If &lt;em&gt;totalWidth&lt;/em&gt; is equal to the length of this instance, the method returns a new string that is identical to this instance.&lt;/p&gt;\\n","pos":[195626,195763],"source":" If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;totalWidth&lt;/em&gt; is less than zero.","pos":[195894,195939],"source":"\\n<p>\\n<em>totalWidth</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[195940,195946],"source":" </p>\\n"},{"pos":[196545,196560],"content":"PadRight(Int32)","needQuote":true,"nodes":[{"content":"PadRight(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[197280,197417],"source":"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters."},{"content":"&lt;/p&gt;\\n","pos":[197418,197424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of &lt;em&gt;totalWidth&lt;/em&gt;.","pos":[197484,197652],"source":"\\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <em>totalWidth</em>."},{"content":"However, if &lt;em&gt;totalWidth&lt;/em&gt; is less than the length of this instance, the method returns a reference to the existing instance.","pos":[197653,197783],"source":" However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If &lt;em&gt;totalWidth&lt;/em&gt; is equal to the length of this instance, the method returns a new string that is identical to this instance.&lt;/p&gt;\\n","pos":[197784,197921],"source":" If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;totalWidth&lt;/em&gt; is less than zero.","pos":[198052,198097],"source":"\\n<p>\\n<em>totalWidth</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[198098,198104],"source":" </p>\\n"},{"pos":[198681,198702],"content":"PadRight(Int32, Char)","needQuote":true,"nodes":[{"content":"PadRight(Int32, Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.","pos":[199575,199712],"source":"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters."},{"content":"&lt;/p&gt;\\n","pos":[199713,199719],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode padding character.","pos":[199787,199820],"source":"\\n<p>A Unicode padding character."},{"content":"&lt;/p&gt;\\n","pos":[199821,199827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this instance, but left-aligned and padded on the right with as many &lt;em&gt;paddingChar&lt;/em&gt; characters as needed to create a length of &lt;em&gt;totalWidth&lt;/em&gt;.","pos":[199887,200080],"source":"\\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>."},{"content":"However, if &lt;em&gt;totalWidth&lt;/em&gt; is less than the length of this instance, the method returns a reference to the existing instance.","pos":[200081,200211],"source":" However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance."},{"content":"If &lt;em&gt;totalWidth&lt;/em&gt; is equal to the length of this instance, the method returns a new string that is identical to this instance.&lt;/p&gt;\\n","pos":[200212,200349],"source":" If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;totalWidth&lt;/em&gt; is less than zero.","pos":[200480,200525],"source":"\\n<p>\\n<em>totalWidth</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[200526,200532],"source":" </p>\\n"},{"pos":[201124,201137],"content":"Remove(Int32)","needQuote":true,"nodes":[{"content":"Remove(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The zero-based position to begin deleting characters.","pos":[201878,201936],"source":"\\n<p>The zero-based position to begin deleting characters."},{"content":"&lt;/p&gt;\\n","pos":[201937,201943],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this string except for the removed characters.&lt;/p&gt;\\n","pos":[202003,202095],"source":"\\n<p>A new string that is equivalent to this string except for the removed characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; specifies a position that is not within this string.","pos":[202226,202368],"source":"\\n<p>\\n<em>startIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> specifies a position that is not within this string."},{"content":"&lt;/p&gt;\\n","pos":[202369,202375],"source":" </p>\\n"},{"pos":[203520,203540],"content":"Remove(Int32, Int32)","needQuote":true,"nodes":[{"content":"Remove(Int32, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based position to begin deleting characters.","pos":[204373,204431],"source":"\\n<p>The zero-based position to begin deleting characters."},{"content":"&lt;/p&gt;\\n","pos":[204432,204438],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to delete.","pos":[204501,204541],"source":"\\n<p>The number of characters to delete."},{"content":"&lt;/p&gt;\\n","pos":[204542,204548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is equivalent to this instance except for the removed characters.&lt;/p&gt;\\n","pos":[204608,204702],"source":"\\n<p>A new string that is equivalent to this instance except for the removed characters.</p>\\n"},{"content":"\\n&lt;p&gt;Either &lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; plus &lt;em&gt;count&lt;/em&gt; specify a position outside this instance.","pos":[204833,205007],"source":"\\n<p>Either <em>startIndex</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>count</em> specify a position outside this instance."},{"content":"&lt;/p&gt;\\n","pos":[205008,205014],"source":" </p>\\n"},{"pos":[206163,206182],"content":"Replace(Char, Char)","needQuote":true,"nodes":[{"content":"Replace(Char, Char)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The Unicode character to be replaced.","pos":[207018,207060],"source":"\\n<p>The Unicode character to be replaced."},{"content":"&lt;/p&gt;\\n","pos":[207061,207067],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Unicode character to replace all occurrences of &lt;em&gt;oldChar&lt;/em&gt;.","pos":[207131,207205],"source":"\\n<p>The Unicode character to replace all occurrences of <em>oldChar</em>."},{"content":"&lt;/p&gt;\\n","pos":[207206,207212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string that is equivalent to this instance except that all instances of &lt;em&gt;oldChar&lt;/em&gt; are replaced with &lt;em&gt;newChar&lt;/em&gt;.","pos":[207272,207403],"source":"\\n<p>A string that is equivalent to this instance except that all instances of <em>oldChar</em> are replaced with <em>newChar</em>."},{"content":"If &lt;em&gt;oldChar&lt;/em&gt; is not found in the current instance, the method returns the current instance unchanged.","pos":[207404,207512],"source":" If <em>oldChar</em> is not found in the current instance, the method returns the current instance unchanged."},{"content":"&lt;/p&gt;\\n","pos":[207513,207519],"source":" </p>\\n"},{"pos":[208679,208702],"content":"Replace(String, String)","needQuote":true,"nodes":[{"content":"Replace(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to be replaced.","pos":[209464,209495],"source":"\\n<p>The string to be replaced."},{"content":"&lt;/p&gt;\\n","pos":[209496,209502],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to replace all occurrences of &lt;em&gt;oldValue&lt;/em&gt;.","pos":[209569,209633],"source":"\\n<p>The string to replace all occurrences of <em>oldValue</em>."},{"content":"&lt;/p&gt;\\n","pos":[209634,209640],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string that is equivalent to the current string except that all instances of &lt;em&gt;oldValue&lt;/em&gt; are replaced with &lt;em&gt;newValue&lt;/em&gt;.","pos":[209700,209838],"source":"\\n<p>A string that is equivalent to the current string except that all instances of <em>oldValue</em> are replaced with <em>newValue</em>."},{"content":"If &lt;em&gt;oldValue&lt;/em&gt; is not found in the current instance, the method returns the current instance unchanged.","pos":[209839,209948],"source":" If <em>oldValue</em> is not found in the current instance, the method returns the current instance unchanged."},{"content":"&lt;/p&gt;\\n","pos":[209949,209955],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;oldValue&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[210074,210124],"source":"\\n<p>\\n<em>oldValue</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[210125,210131],"source":" </p>\\n"},{"pos":[211352,211365],"content":"Split(Char[])","needQuote":true,"nodes":[{"content":"Split(Char[])","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A character array that delimits the substrings in this string, an empty array that contains no delimiters, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[212034,212171],"source":"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[212172,212178],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements contain the substrings from this instance that are delimited by one or more characters in &lt;em&gt;separator&lt;/em&gt;.","pos":[212240,212378],"source":"\\n<p>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <em>separator</em>."},{"content":"For more information, see the Remarks section.&lt;/p&gt;\\n","pos":[212379,212431],"source":" For more information, see the Remarks section.</p>\\n"},{"pos":[213715,213735],"content":"Split(Char[], Int32)","needQuote":true,"nodes":[{"content":"Split(Char[], Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A character array that delimits the substrings in this string, an empty array that contains no delimiters, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[214501,214638],"source":"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[214639,214645],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of substrings to return.","pos":[214708,214756],"source":"\\n<p>The maximum number of substrings to return."},{"content":"&lt;/p&gt;\\n","pos":[214757,214763],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements contain the substrings in this instance that are delimited by one or more characters in &lt;em&gt;separator&lt;/em&gt;.","pos":[214825,214961],"source":"\\n<p>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <em>separator</em>."},{"content":"For more information, see the Remarks section.&lt;/p&gt;\\n","pos":[214962,215014],"source":" For more information, see the Remarks section.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is negative.","pos":[215145,215179],"source":"\\n<p>\\n<em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[215180,215186],"source":" </p>\\n"},{"pos":[216689,216729],"content":"Split(Char[], Int32, StringSplitOptions)","needQuote":true,"nodes":[{"content":"Split(Char[], Int32, StringSplitOptions)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;A character array that delimits the substrings in this string, an empty array that contains no delimiters, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[217592,217729],"source":"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[217730,217736],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of substrings to return.","pos":[217799,217847],"source":"\\n<p>The maximum number of substrings to return."},{"content":"&lt;/p&gt;\\n","pos":[217848,217854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements contain the substrings in this string that are delimited by one or more characters in &lt;em&gt;separator&lt;/em&gt;.","pos":[218315,218449],"source":"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>."},{"content":"For more information, see the Remarks section.&lt;/p&gt;\\n","pos":[218450,218502],"source":" For more information, see the Remarks section.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is negative.","pos":[218633,218667],"source":"\\n<p>\\n<em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[218668,218674],"source":" </p>\\n"},{"pos":[219502,219535],"content":"Split(Char[], StringSplitOptions)","needQuote":true,"nodes":[{"content":"Split(Char[], StringSplitOptions)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A character array that delimits the substrings in this string, an empty array that contains no delimiters, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[220404,220541],"source":"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[220542,220548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements contain the substrings in this string that are delimited by one or more characters in &lt;em&gt;separator&lt;/em&gt;.","pos":[221009,221143],"source":"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>."},{"content":"For more information, see the Remarks section.&lt;/p&gt;\\n","pos":[221144,221196],"source":" For more information, see the Remarks section.</p>\\n"},{"pos":[222048,222090],"content":"Split(String[], Int32, StringSplitOptions)","needQuote":true,"nodes":[{"content":"Split(String[], Int32, StringSplitOptions)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;A string array that delimits the substrings in this string, an empty array that contains no delimiters, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[223027,223161],"source":"\\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[223162,223168],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of substrings to return.","pos":[223231,223279],"source":"\\n<p>The maximum number of substrings to return."},{"content":"&lt;/p&gt;\\n","pos":[223280,223286],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements contain the substrings in this string that are delimited by one or more strings in &lt;em&gt;separator&lt;/em&gt;.","pos":[223747,223878],"source":"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>."},{"content":"For more information, see the Remarks section.&lt;/p&gt;\\n","pos":[223879,223931],"source":" For more information, see the Remarks section.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is negative.","pos":[224062,224096],"source":"\\n<p>\\n<em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[224097,224103],"source":" </p>\\n"},{"pos":[224945,224980],"content":"Split(String[], StringSplitOptions)","needQuote":true,"nodes":[{"content":"Split(String[], StringSplitOptions)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;A string array that delimits the substrings in this string, an empty array that contains no delimiters, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[225854,225988],"source":"\\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[225989,225995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements contain the substrings in this string that are delimited by one or more strings in &lt;em&gt;separator&lt;/em&gt;.","pos":[226456,226587],"source":"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>."},{"content":"For more information, see the Remarks section.&lt;/p&gt;\\n","pos":[226588,226640],"source":" For more information, see the Remarks section.</p>\\n"},{"pos":[227392,227410],"content":"StartsWith(String)","needQuote":true,"nodes":[{"content":"StartsWith(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The string to compare.","pos":[228073,228100],"source":"\\n<p>The string to compare."},{"content":"&lt;/p&gt;\\n","pos":[228101,228107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; matches the beginning of this string; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[228168,228293],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> matches the beginning of this string; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[228412,228459],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[228460,228466],"source":" </p>\\n"},{"pos":[228947,228983],"content":"StartsWith(String, StringComparison)","needQuote":true,"nodes":[{"content":"StartsWith(String, StringComparison)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The string to compare.","pos":[229924,229951],"source":"\\n<p>The string to compare."},{"content":"&lt;/p&gt;\\n","pos":[229952,229958],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that determines how this string and &lt;em&gt;value&lt;/em&gt; are compared.","pos":[230041,230140],"source":"\\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared."},{"content":"&lt;/p&gt;\\n","pos":[230141,230147],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this instance begins with &lt;em&gt;value&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[230208,230322],"source":"\\n<p>\\n<strong>true</strong> if this instance begins with <em>value</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[230441,230488],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[230489,230495],"source":" </p>\\n"},{"pos":[231121,231137],"content":"Substring(Int32)","needQuote":true,"nodes":[{"content":"Substring(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based starting character position of a substring in this instance.","pos":[231858,231938],"source":"\\n<p>The zero-based starting character position of a substring in this instance."},{"content":"&lt;/p&gt;\\n","pos":[231939,231945],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[232391,232480],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[232481,232487],"source":" </p>\\n"},{"pos":[233664,233687],"content":"Substring(Int32, Int32)","needQuote":true,"nodes":[{"content":"Substring(Int32, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The zero-based starting character position of a substring in this instance.","pos":[234519,234599],"source":"\\n<p>The zero-based starting character position of a substring in this instance."},{"content":"&lt;/p&gt;\\n","pos":[234600,234606],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the substring.","pos":[234670,234717],"source":"\\n<p>The number of characters in the substring."},{"content":"&lt;/p&gt;\\n","pos":[234718,234724],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; plus &lt;em&gt;length&lt;/em&gt; indicates a position not within this instance.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero.","pos":[235224,235400],"source":"\\n<p>\\n<em>startIndex</em> plus <em>length</em> indicates a position not within this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[235401,235407],"source":" </p>\\n"},{"pos":[236128,236155],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An enumerator that can be used to iterate through the current string.&lt;/p&gt;\\n","pos":[236976,237056],"source":"\\n<p>An enumerator that can be used to iterate through the current string.</p>\\n"},{"pos":[237564,237593],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[238709,238735],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[239820,239859],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[240722,240759],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[242011,242047],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[242889,242958],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[242959,242965],"source":" </p>\\n"},{"pos":[244345,244381],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[245223,245292],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[245293,245299],"source":" </p>\\n"},{"pos":[246039,246079],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[246949,247018],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[247019,247025],"source":" </p>\\n"},{"pos":[247777,247816],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[248682,248751],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[248752,248758],"source":" </p>\\n"},{"pos":[250165,250203],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[251061,251130],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[251131,251137],"source":" </p>\\n"},{"pos":[252534,252571],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[253421,253490],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[253491,253497],"source":" </p>\\n"},{"pos":[254886,254923],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[255773,255842],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[255843,255849],"source":" </p>\\n"},{"pos":[256580,256617],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[257465,257534],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[257535,257541],"source":" </p>\\n"},{"pos":[258272,258309],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[259159,259228],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[259229,259235],"source":" </p>\\n"},{"pos":[260628,260666],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[261523,261592],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[261593,261599],"source":" </p>\\n"},{"pos":[262338,262376],"content":"IConvertible.ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToString(IFormatProvider)","pos":[0,38]}]},{"pos":[263669,263711],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The type of the returned object.","pos":[264592,264629],"source":"\\n<p>The type of the returned object."},{"content":"&lt;/p&gt;\\n","pos":[264630,264636],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.&lt;/p&gt;\\n","pos":[264712,264787],"source":"\\n<p>An object that provides culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[265093,265145],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[266013,266051],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[266909,266978],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[266979,266985],"source":" </p>\\n"},{"pos":[268384,268422],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[269280,269349],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[269350,269356],"source":" </p>\\n"},{"pos":[270749,270787],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[271643,271712],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[271713,271719],"source":" </p>\\n"},{"pos":[272321,272334],"content":"ToCharArray()","needQuote":true,"nodes":[{"content":"ToCharArray()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A Unicode character array whose elements are the individual characters of this instance.","pos":[273000,273093],"source":"\\n<p>A Unicode character array whose elements are the individual characters of this instance."},{"content":"If this instance is an empty string, the returned array is empty and has a zero length.&lt;/p&gt;\\n","pos":[273094,273187],"source":" If this instance is an empty string, the returned array is empty and has a zero length.</p>\\n"},{"pos":[273631,273656],"content":"ToCharArray(Int32, Int32)","needQuote":true,"nodes":[{"content":"ToCharArray(Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The starting position of a substring in this instance.","pos":[274464,274523],"source":"\\n<p>The starting position of a substring in this instance."},{"content":"&lt;/p&gt;\\n","pos":[274524,274530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the substring in this instance.","pos":[274594,274644],"source":"\\n<p>The length of the substring in this instance."},{"content":"&lt;/p&gt;\\n","pos":[274645,274651],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character array whose elements are the &lt;em&gt;length&lt;/em&gt; number of characters in this instance starting from character position &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[274711,274878],"source":"\\n<p>A Unicode character array whose elements are the <em>length</em> number of characters in this instance starting from character position <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; plus &lt;em&gt;length&lt;/em&gt; is greater than the length of this instance.","pos":[275009,275183],"source":"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>length</em> is greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[275184,275190],"source":" </p>\\n"},{"pos":[275606,275615],"content":"ToLower()","needQuote":true,"nodes":[{"content":"ToLower()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A string in lowercase.&lt;/p&gt;\\n","pos":[276172,276205],"source":"\\n<p>A string in lowercase.</p>\\n"},{"pos":[276724,276742],"content":"ToLowerInvariant()","needQuote":true,"nodes":[{"content":"ToLowerInvariant()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The lowercase equivalent of the current string.&lt;/p&gt;\\n","pos":[277457,277515],"source":"\\n<p>The lowercase equivalent of the current string.</p>\\n"},{"pos":[278196,278206],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The current string.&lt;/p&gt;\\n","pos":[278867,278897],"source":"\\n<p>The current string.</p>\\n"},{"pos":[279272,279281],"content":"ToUpper()","needQuote":true,"nodes":[{"content":"ToUpper()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The uppercase equivalent of the current string.&lt;/p&gt;\\n","pos":[279838,279896],"source":"\\n<p>The uppercase equivalent of the current string.</p>\\n"},{"pos":[280415,280433],"content":"ToUpperInvariant()","needQuote":true,"nodes":[{"content":"ToUpperInvariant()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The uppercase equivalent of the current string.&lt;/p&gt;\\n","pos":[281148,281206],"source":"\\n<p>The uppercase equivalent of the current string.</p>\\n"},{"pos":[281736,281742],"content":"Trim()","needQuote":true,"nodes":[{"content":"Trim()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The string that remains after all white-space characters are removed from the start and end of the current string.","pos":[282388,282507],"source":"\\n<p>The string that remains after all white-space characters are removed from the start and end of the current string."},{"content":"If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","pos":[282508,282617]},{"content":"&lt;/p&gt;\\n","pos":[282618,282624],"source":" </p>\\n"},{"pos":[283209,283221],"content":"Trim(Char[])","needQuote":true,"nodes":[{"content":"Trim(Char[])","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An array of Unicode characters to remove, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[283993,284065],"source":"\\n<p>An array of Unicode characters to remove, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[284066,284072],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string that remains after all occurrences of the characters in the &lt;em&gt;trimChars&lt;/em&gt; parameter are removed from the start and end of the current string.","pos":[284132,284294],"source":"\\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the start and end of the current string."},{"content":"If &lt;em&gt;trimChars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or an empty array, white-space characters are removed instead.","pos":[284295,284404],"source":" If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead."},{"content":"If no characters can be trimmed from the current instance, the method returns the current instance unchanged.&lt;/p&gt;\\n","pos":[284405,284520],"source":" If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\\n"},{"pos":[285283,285298],"content":"TrimEnd(Char[])","needQuote":true,"nodes":[{"content":"TrimEnd(Char[])","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An array of Unicode characters to remove, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[286070,286142],"source":"\\n<p>An array of Unicode characters to remove, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[286143,286149],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string that remains after all occurrences of the characters in the &lt;em&gt;trimChars&lt;/em&gt; parameter are removed from the end of the current string.","pos":[286209,286361],"source":"\\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the end of the current string."},{"content":"If &lt;em&gt;trimChars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or an empty array, Unicode white-space characters are removed instead.","pos":[286362,286479],"source":" If <em>trimChars</em> is <strong>null</strong> or an empty array, Unicode white-space characters are removed instead."},{"content":"If no characters can be trimmed from the current instance, the method returns the current instance unchanged.","pos":[286480,286589]},{"content":"&lt;/p&gt;\\n","pos":[286590,286596],"source":" </p>\\n"},{"pos":[287371,287388],"content":"TrimStart(Char[])","needQuote":true,"nodes":[{"content":"TrimStart(Char[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An array of Unicode characters to remove, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[288167,288239],"source":"\\n<p>An array of Unicode characters to remove, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[288240,288246],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string that remains after all occurrences of characters in the &lt;em&gt;trimChars&lt;/em&gt; parameter are removed from the start of the current string.","pos":[288306,288456],"source":"\\n<p>The string that remains after all occurrences of characters in the <em>trimChars</em> parameter are removed from the start of the current string."},{"content":"If &lt;em&gt;trimChars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or an empty array, white-space characters are removed instead.&lt;/p&gt;\\n","pos":[288457,288572],"source":" If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead.</p>\\n"},{"pos":[289215,289221],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[289352,289358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[289596,289613],"content":"IEnumerable<Char>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Char&gt;","pos":[0,17],"source":"IEnumerable<Char>"}]},{"pos":[289855,289866],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[289930,289931],"content":"<","needQuote":true,"nodes":[]},{"pos":[289979,289983],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[290134,290145],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[290210,290213]},{"pos":[290268,290272],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[290330,290331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[290584,290595],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[290784,290795],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[290990,291009],"content":"IComparable<String>","needQuote":true,"nodes":[{"content":"IComparable&lt;String&gt;","pos":[0,19],"source":"IComparable<String>"}]},{"pos":[291197,291208],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[291252,291253],"content":"<","needQuote":true,"nodes":[]},{"pos":[291303,291309],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[291442,291453],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[291498,291501]},{"pos":[291558,291564],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[291624,291625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[291841,291853],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[292049,292067],"content":"IEquatable<String>","needQuote":true,"nodes":[{"content":"IEquatable&lt;String&gt;","pos":[0,18],"source":"IEquatable<String>"}]},{"pos":[292251,292261],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[292304,292305],"content":"<","needQuote":true,"nodes":[]},{"pos":[292355,292361],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[292493,292503],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[292547,292550]},{"pos":[292607,292613],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[292673,292674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[292923,292945],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[293093,293099],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[293166,293167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[293217,293223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[293284,293285]},{"pos":[293340,293346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[293406,293407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[293504,293510],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[293577,293578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[293628,293634],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[293695,293696]},{"pos":[293751,293757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[293817,293818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[294063,294094],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[294260,294275],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[294351,294352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[294402,294408],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[294469,294470]},{"pos":[294525,294531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[294591,294592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[294698,294713],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[294789,294790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[294840,294846],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[294907,294908]},{"pos":[294963,294969],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[295029,295030],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[295256,295265],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[295358,295365],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[295433,295434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[295461,295462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[295531,295538],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[295606,295607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[295634,295635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[295810,295827],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[295936,295951],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[296027,296028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[296055,296056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[296133,296148],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[296224,296225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[296252,296253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[296432,296446],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[296665,296676],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[296740,296741],"content":"<","needQuote":true,"nodes":[]},{"pos":[296768,296769],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[296889,296900],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[296965,296968]},{"pos":[297002,297003],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[297030,297031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[297234,297260],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[297439,297457],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[297614,297628],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[297787,297798],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[297842,297843],"content":"<","needQuote":true,"nodes":[]},{"pos":[297870,297871],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[297971,297982],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[298027,298030]},{"pos":[298064,298065],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[298092,298093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[298269,298282],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[298437,298447],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[298490,298491],"content":"<","needQuote":true,"nodes":[]},{"pos":[298518,298519],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[298618,298628],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[298672,298675]},{"pos":[298709,298710],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[298737,298738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[298922,298928],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[299035,299040],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[299112,299116],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[299238,299242],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[299409,299414],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[299554,299558],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[299660,299666],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[299786,299790],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[299849,299851]},{"pos":[299914,299918],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[299976,299978],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[300121,300137],"content":"StringComparison","needQuote":true,"nodes":[{"content":"StringComparison","pos":[0,16]}]},{"pos":[300313,300320],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[300569,300586],"content":"CompareTo(String)","needQuote":true,"nodes":[{"content":"CompareTo(String)","pos":[0,17]}]},{"pos":[300804,300813],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[300882,300883],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[300933,300939],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[300999,301000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[301082,301091],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[301163,301164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[301214,301220],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[301280,301281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[301556,301568],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[301738,301747],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[301804,301805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[301832,301833],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[301860,301861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[301943,301952],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[302012,302013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[302040,302041],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[302068,302069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[302391,302410],"content":"IEnumerable<String>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;String&gt;","pos":[0,19],"source":"IEnumerable<String>"}]},{"pos":[302658,302669],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[302733,302734],"content":"<","needQuote":true,"nodes":[]},{"pos":[302784,302790],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[302943,302954],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[303019,303022]},{"pos":[303079,303085],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[303145,303146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[303341,303349],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[303477,303483],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[303544,303546]},{"pos":[303611,303617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[303677,303679],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[303781,303789],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[303917,303923],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[303984,303986]},{"pos":[304051,304057],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[304117,304119],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[304341,304355],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[304574,304585],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[304649,304650],"content":"<","needQuote":true,"nodes":[]},{"pos":[304677,304678],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[304798,304809],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[304874,304877]},{"pos":[304911,304912],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[304939,304940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[305177,305191],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[305310,305316],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[305383,305384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[305434,305440],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[305500,305501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[305584,305590],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[305657,305658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[305708,305714],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[305774,305775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[306039,306053],"content":"Equals(String)","needQuote":true,"nodes":[{"content":"Equals(String)","pos":[0,14]}]},{"pos":[306259,306265],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[306330,306331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[306381,306387],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[306447,306448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[306526,306532],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[306600,306601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[306651,306657],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[306717,306718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[306977,306986],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[307144,307150],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[307203,307204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[307231,307232],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[307259,307260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[307338,307344],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[307400,307401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[307428,307429],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[307456,307457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[307681,307696],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[307886,307899],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[308000,308011],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[308083,308084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[308111,308112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[308185,308196],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[308268,308269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[308296,308297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[308470,308488],"content":"StringSplitOptions","needQuote":true,"nodes":[{"content":"StringSplitOptions","pos":[0,18]}]},{"pos":[308724,308739],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[308878,308891],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[308961,308962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[308989,308990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[309082,309095],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[309165,309166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[309193,309194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[309410,309421],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[309646,309663],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[309798,309807],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[309861,309862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[309912,309918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[309978,309979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[310070,310079],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[310133,310134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[310184,310190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[310250,310251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[310470,310483],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[310596,310607],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[310664,310665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[310692,310693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[310772,310783],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[310840,310841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[310868,310869],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[311044,311052],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[311256,311282],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[311437,311446],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[311501,311502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[311561,311576],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[311624,311625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[311726,311735],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[311790,311791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[311850,311865],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[311913,311914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[312172,312195],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[312344,312350],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[312402,312403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[312462,312477],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[312525,312526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[312624,312630],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[312682,312683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[312742,312757],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[312805,312806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[313006,313010],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[313199,313222],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[313371,313377],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[313429,313430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[313489,313504],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[313552,313553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[313651,313657],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[313709,313710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[313769,313784],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[313832,313833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[314089,314116],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[314273,314283],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[314339,314340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[314399,314414],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[314462,314463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[314565,314575],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[314631,314632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[314691,314706],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[314754,314755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[314967,314975],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[315179,315205],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[315360,315369],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[315424,315425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[315484,315499],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[315547,315548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[315649,315658],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[315713,315714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[315773,315788],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[315836,315837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[316046,316053],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[316253,316278],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[316431,316439],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[316493,316494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[316553,316568],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[316616,316617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[316717,316725],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[316779,316780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[316839,316854],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[316902,316903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[317109,317115],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[317311,317335],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[317486,317493],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[317546,317547],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[317606,317621],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[317669,317670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[317769,317776],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[317829,317830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[317889,317904],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[317952,317953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[318156,318161],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[318354,318378],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[318529,318536],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[318589,318590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[318649,318664],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[318712,318713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[318812,318819],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[318872,318873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[318932,318947],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[318995,318996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[319251,319275],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[319426,319433],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[319486,319487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[319546,319561],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[319609,319610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[319709,319716],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[319769,319770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[319829,319844],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[319892,319893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[320096,320101],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[320294,320318],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[320469,320476],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[320529,320530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[320589,320604],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[320652,320653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[320752,320759],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[320812,320813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[320872,320887],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[320935,320936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[321139,321144],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[321338,321363],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[321516,321524],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[321578,321579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[321638,321653],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[321701,321702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[321802,321810],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[321864,321865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[321924,321939],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[321987,321988],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[322194,322200],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[322397,322422],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[322575,322583],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[322637,322638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[322697,322712],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[322760,322761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[322861,322869],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[322923,322924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[322983,322998],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[323046,323047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[323315,323344],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[323518,323524],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[323576,323577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[323625,323629],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[323667,323668]},{"pos":[323732,323747],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[323795,323796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[323906,323912],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[323964,323965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[324013,324017],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[324055,324056]},{"pos":[324120,324135],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[324183,324184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[324402,324406],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[324597,324622],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[324775,324783],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[324837,324838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[324897,324912],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[324960,324961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[325061,325069],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[325123,325124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[325183,325198],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[325246,325247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[325453,325459],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[325656,325681],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[325834,325842],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[325896,325897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[325956,325971],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[326019,326020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[326120,326128],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[326182,326183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[326242,326257],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[326305,326306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[326512,326518],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[326715,326740],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[326893,326901],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[326955,326956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[327015,327030],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[327078,327079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[327179,327187],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[327241,327242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[327301,327316],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[327364,327365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[327571,327577],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[327737,327747],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[327842,327850],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[327919,327920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[327947,327948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[328018,328026],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[328095,328096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[328123,328124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[328283,328310],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[328529,328546],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[328722,328743],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[328934,328958],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[329172,329193],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[329380,329400],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[329596,329611],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[329777,329794],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[329969,329989],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.String\n  commentId: T:System.String\n  id: String\n  parent: System\n  children:\n  - System.String.#ctor(System.Char*)\n  - System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  - System.String.#ctor(System.Char,System.Int32)\n  - System.String.#ctor(System.Char[])\n  - System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  - System.String.Chars(System.Int32)\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  - System.String.Compare(System.String,System.String)\n  - System.String.Compare(System.String,System.String,System.Boolean)\n  - System.String.Compare(System.String,System.String,System.StringComparison)\n  - System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  - System.String.CompareOrdinal(System.String,System.String)\n  - System.String.CompareTo(System.String)\n  - System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  - System.String.Concat(System.Object)\n  - System.String.Concat(System.Object,System.Object)\n  - System.String.Concat(System.Object,System.Object,System.Object)\n  - System.String.Concat(System.Object[])\n  - System.String.Concat(System.String,System.String)\n  - System.String.Concat(System.String,System.String,System.String)\n  - System.String.Concat(System.String,System.String,System.String,System.String)\n  - System.String.Concat(System.String[])\n  - System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  - System.String.Contains(System.String)\n  - System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  - System.String.Empty\n  - System.String.EndsWith(System.String)\n  - System.String.EndsWith(System.String,System.StringComparison)\n  - System.String.Equals(System.Object)\n  - System.String.Equals(System.String)\n  - System.String.Equals(System.String,System.String)\n  - System.String.Equals(System.String,System.String,System.StringComparison)\n  - System.String.Equals(System.String,System.StringComparison)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  - System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  - System.String.Format(System.String,System.Object)\n  - System.String.Format(System.String,System.Object,System.Object)\n  - System.String.Format(System.String,System.Object,System.Object,System.Object)\n  - System.String.Format(System.String,System.Object[])\n  - System.String.GetHashCode\n  - System.String.IndexOf(System.Char)\n  - System.String.IndexOf(System.Char,System.Int32)\n  - System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  - System.String.IndexOf(System.String)\n  - System.String.IndexOf(System.String,System.Int32)\n  - System.String.IndexOf(System.String,System.Int32,System.Int32)\n  - System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  - System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  - System.String.IndexOf(System.String,System.StringComparison)\n  - System.String.IndexOfAny(System.Char[])\n  - System.String.IndexOfAny(System.Char[],System.Int32)\n  - System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  - System.String.Insert(System.Int32,System.String)\n  - System.String.IsNullOrEmpty(System.String)\n  - System.String.IsNullOrWhiteSpace(System.String)\n  - System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  - System.String.Join(System.String,System.Object[])\n  - System.String.Join(System.String,System.String[])\n  - System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  - System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  - System.String.LastIndexOf(System.Char)\n  - System.String.LastIndexOf(System.Char,System.Int32)\n  - System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  - System.String.LastIndexOf(System.String)\n  - System.String.LastIndexOf(System.String,System.Int32)\n  - System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  - System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  - System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  - System.String.LastIndexOf(System.String,System.StringComparison)\n  - System.String.LastIndexOfAny(System.Char[])\n  - System.String.LastIndexOfAny(System.Char[],System.Int32)\n  - System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  - System.String.Length\n  - System.String.op_Equality(System.String,System.String)\n  - System.String.op_Inequality(System.String,System.String)\n  - System.String.PadLeft(System.Int32)\n  - System.String.PadLeft(System.Int32,System.Char)\n  - System.String.PadRight(System.Int32)\n  - System.String.PadRight(System.Int32,System.Char)\n  - System.String.Remove(System.Int32)\n  - System.String.Remove(System.Int32,System.Int32)\n  - System.String.Replace(System.Char,System.Char)\n  - System.String.Replace(System.String,System.String)\n  - System.String.Split(System.Char[])\n  - System.String.Split(System.Char[],System.Int32)\n  - System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  - System.String.Split(System.Char[],System.StringSplitOptions)\n  - System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  - System.String.Split(System.String[],System.StringSplitOptions)\n  - System.String.StartsWith(System.String)\n  - System.String.StartsWith(System.String,System.StringComparison)\n  - System.String.Substring(System.Int32)\n  - System.String.Substring(System.Int32,System.Int32)\n  - System.String.System#Collections#IEnumerable#GetEnumerator\n  - System.String.System#IComparable#CompareTo(System.Object)\n  - System.String.System#IConvertible#GetTypeCode\n  - System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.String.System#IConvertible#ToString(System.IFormatProvider)\n  - System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.String.ToCharArray\n  - System.String.ToCharArray(System.Int32,System.Int32)\n  - System.String.ToLower\n  - System.String.ToLowerInvariant\n  - System.String.ToString\n  - System.String.ToUpper\n  - System.String.ToUpperInvariant\n  - System.String.Trim\n  - System.String.Trim(System.Char[])\n  - System.String.TrimEnd(System.Char[])\n  - System.String.TrimStart(System.Char[])\n  langs:\n  - csharp\n  - vb\n  name: String\n  fullName: System.String\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: String\n    path: src/mscorlib/src/System/String.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents text as a sequence of UTF-16 code units.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public sealed class String : IComparable, ICloneable, IConvertible, IComparable<string>, IEnumerable<char>, IEnumerable, IEquatable<string>\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public NotInheritable Class String\n          Implements IComparable, ICloneable, IConvertible, IComparable(Of String), IEnumerable(Of Char), IEnumerable, IEquatable(Of String)\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.ICloneable\n    commentId: T:System.ICloneable\n  - type: System.IConvertible\n    commentId: T:System.IConvertible\n  - type: System.Collections.IEnumerable\n    commentId: T:System.Collections.IEnumerable\n  - type: System.Text.StringBuilder\n    commentId: T:System.Text.StringBuilder\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEnumerable{System.Char}\n  - System.Collections.IEnumerable\n  - System.IComparable\n  - System.IComparable{System.String}\n  - System.IConvertible\n  - System.IEquatable{System.String}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: String\n- uid: System.String.Empty\n  commentId: F:System.String.Empty\n  id: Empty\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.String.Empty\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Empty\n    path: src/mscorlib/src/System/String.cs\n    startLine: 71\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the empty string. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly string Empty\n    content.vb: Public Shared ReadOnly Empty As String\n    return:\n      type: System.String\n  seealso:\n  - type: System.String.IsNullOrEmpty(System.String)\n    commentId: M:System.String.IsNullOrEmpty(System.String)\n  - type: System.String.IsNullOrWhiteSpace(System.String)\n    commentId: M:System.String.IsNullOrWhiteSpace(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: String.Empty\n- uid: System.String.#ctor(System.Char*)\n  commentId: M:System.String.#ctor(System.Char*)\n  id: '#ctor(System.Char*)'\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: String(Char*)\n  fullName: System.String.String(System.Char*)\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public String(char *value)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(value As Char *)\n    parameters:\n    - id: value\n      type: System.Char*\n      description: \"\\n<p>A pointer to a null-terminated array of Unicode characters. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current process does not have read access to all the addressed characters.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> specifies an address less than 64000.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.String(Char*)\n- uid: System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  commentId: M:System.String.#ctor(System.Char*,System.Int32,System.Int32)\n  id: '#ctor(System.Char*,System.Int32,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: String(Char*, Int32, Int32)\n  fullName: System.String.String(System.Char*, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public String(char *value, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(value As Char *, startIndex As Integer, length As Integer)\n    parameters:\n    - id: value\n      type: System.Char*\n      description: \"\\n<p>A pointer to an array of Unicode characters. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters within <em>value</em> to use. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero, <em>value</em> + <em>startIndex</em> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> + <em>startIndex</em> specifies an address less than 64000.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.String(Char*, Int32, Int32)\n- uid: System.String.#ctor(System.Char,System.Int32)\n  commentId: M:System.String.#ctor(System.Char,System.Int32)\n  id: '#ctor(System.Char,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: String(Char, Int32)\n  fullName: System.String.String(System.Char, System.Int32)\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to the value indicated by a specified Unicode character repeated a specified number of times.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public String(char c, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(c As Char, count As Integer)\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>A Unicode character. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of times <em>c</em> occurs. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.String(Char, Int32)\n- uid: System.String.#ctor(System.Char[])\n  commentId: M:System.String.#ctor(System.Char[])\n  id: '#ctor(System.Char[])'\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: String(Char[])\n  fullName: System.String.String(System.Char[])\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to the value indicated by an array of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public String(char[] value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(value As Char())\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: \"\\n<p>An array of Unicode characters. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.String(System.Char())\n  name.vb: String(Char())\n  nameWithType: String.String(Char[])\n  nameWithType.vb: String.String(Char())\n- uid: System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.#ctor(System.Char[],System.Int32,System.Int32)\n  id: '#ctor(System.Char[],System.Int32,System.Int32)'\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: String(Char[], Int32, Int32)\n  fullName: System.String.String(System.Char[], System.Int32, System.Int32)\n  type: Constructor\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public String(char[] value, int startIndex, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub New(value As Char(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: \"\\n<p>An array of Unicode characters. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters within <em>value</em> to use. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the number of elements in <em>value</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.String(System.Char(), System.Int32, System.Int32)\n  name.vb: String(Char(), Int32, Int32)\n  nameWithType: String.String(Char[], Int32, Int32)\n  nameWithType.vb: String.String(Char(), Int32, Int32)\n- uid: System.String.Chars(System.Int32)\n  commentId: P:System.String.Chars(System.Int32)\n  id: Chars(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Chars[Int32]\n  fullName: System.String.Chars[System.Int32]\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at a specified position in the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [IndexerName(\"Chars\")]\n\n      public char this[int index]\n\n      {\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: >-\n      <IndexerName(\"Chars\")>\n\n      Public ReadOnly Property Chars(index As Integer) As Char\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A position in the current string. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The object at position <em>index</em>.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is greater than or equal to the length of this object or less than zero. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.GetEnumerator\n    commentId: M:System.String.GetEnumerator\n  - type: System.Int32\n    commentId: T:System.Int32\n  attributes:\n  - type: System.Runtime.CompilerServices.IndexerNameAttribute\n    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: Chars\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.String.Chars(System.Int32)\n  name.vb: Chars(Int32)\n  nameWithType: String.Chars[Int32]\n  nameWithType.vb: String.Chars(Int32)\n- uid: System.String.Length\n  commentId: P:System.String.Length\n  id: Length\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.String.Length\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of characters in the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      public int Length\n\n      {\n          [SecuritySafeCritical]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public ReadOnly Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the current string.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: String.Length\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, Int32, String, Int32, Int32)\n  fullName: System.String.Compare(System.String, System.Int32, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1929\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares substrings of two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects and returns an integer that indicates their relative position in the sort order.</p>\\n\"\n  syntax:\n    content: public static int Compare(string strA, int indexA, string strB, int indexB, int length)\n    content.vb: Public Shared Function Compare(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to use in the comparison. </p>\\n\"\n    - id: indexA\n      type: System.Int32\n      description: \"\\n<p>The position of the substring within <em>strA</em>. </p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to use in the comparison. </p>\\n\"\n    - id: indexB\n      type: System.Int32\n      description: \"\\n<p>The position of the substring within <em>strB</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters in the substrings to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The substrings occur in the same position in the sort order, or <em>length</em> is zero. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> follows the substring in <em>strB</em> in the sort order. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>indexA</em> is greater than <em>strA</em>.<xref href=\\\"System.String.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>indexB</em> is greater than <em>strB</em>.<xref href=\\\"System.String.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\\n<p>-or-</p>\\n<p>Either <em>indexA</em> or <em>indexB</em> is <strong>null</strong>, and <em>length</em> is greater than zero.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32)\n- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, Int32, String, Int32, Int32, StringComparison)\n  fullName: System.String.Compare(System.String, System.Int32, System.String, System.Int32, System.Int32, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2040\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares substrings of two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Compare(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to use in the comparison. </p>\\n\"\n    - id: indexA\n      type: System.Int32\n      description: \"\\n<p>The position of the substring within <em>strA</em>. </p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to use in the comparison.</p>\\n\"\n    - id: indexB\n      type: System.Int32\n      description: \"\\n<p>The position of the substring within <em>strB</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters in the substrings to compare. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules to use in the comparison. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order.</p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The substrings occur in the same position in the sort order, or the <em>length</em> parameter is zero. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> follllows the substring in <em>strB</em> in the sort order. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>indexA</em> is greater than <em>strA</em>.<xref href=\\\"System.String.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>indexB</em> is greater than <em>strB</em>.<xref href=\\\"System.String.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\\n<p>-or-</p>\\n<p>Either <em>indexA</em> or <em>indexB</em> is <strong>null</strong>, and <em>length</em> is greater than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Compare(String, Int32, String, Int32, Int32, StringComparison)\n- uid: System.String.Compare(System.String,System.String)\n  commentId: M:System.String.Compare(System.String,System.String)\n  id: Compare(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, String)\n  fullName: System.String.Compare(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1802\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects and returns an integer that indicates their relative position in the sort order.</p>\\n\"\n  syntax:\n    content: public static int Compare(string strA, string strB)\n    content.vb: Public Shared Function Compare(strA As String, strB As String) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Compare(String, String)\n- uid: System.String.Compare(System.String,System.String,System.Boolean)\n  commentId: M:System.String.Compare(System.String,System.String,System.Boolean)\n  id: Compare(System.String,System.String,System.Boolean)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, String, Boolean)\n  fullName: System.String.Compare(System.String, System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1813\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\\n\"\n  syntax:\n    content: public static int Compare(string strA, string strB, bool ignoreCase)\n    content.vb: Public Shared Function Compare(strA As String, strB As String, ignoreCase As Boolean) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore case during the comparison; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Compare(String, String, Boolean)\n- uid: System.String.Compare(System.String,System.String,System.StringComparison)\n  commentId: M:System.String.Compare(System.String,System.String,System.StringComparison)\n  id: Compare(System.String,System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, String, StringComparison)\n  fullName: System.String.Compare(System.String, System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1825\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int Compare(string strA, string strB, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Compare(strA As String, strB As String, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to compare.</p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules to use in the comparison. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> is in the same position as <em>strB</em> in the sort order. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Compare(String, String, StringComparison)\n- uid: System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  id: CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: CompareOrdinal(String, Int32, String, Int32, Int32)\n  fullName: System.String.CompareOrdinal(System.String, System.Int32, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareOrdinal\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2187\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares substrings of two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in each substring. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareOrdinal(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to use in the comparison. </p>\\n\"\n    - id: indexA\n      type: System.Int32\n      description: \"\\n<p>The starting index of the substring in <em>strA</em>. </p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to use in the comparison. </p>\\n\"\n    - id: indexB\n      type: System.Int32\n      description: \"\\n<p>The starting index of the substring in <em>strB</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters in the substrings to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value</p>\\n<p>Condition</p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> is less than the substring in <em>strB</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The substrings are equal, or <em>length</em> is zero. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The substring in <em>strA</em> is greater than the substring in <em>strB</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>strA</em> is not <strong>null</strong> and <em>indexA</em> is greater than <em>strA</em>.<xref href=\\\"System.String.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>strB</em> is not <strong>null</strong> and<em>indexB</em> is greater than <em>strB</em>.<xref href=\\\"System.String.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\\n\"\n  seealso:\n  - type: System.String.Compare(System.String,System.String)\n    commentId: M:System.String.Compare(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.CompareOrdinal(String, Int32, String, Int32, Int32)\n- uid: System.String.CompareOrdinal(System.String,System.String)\n  commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  id: CompareOrdinal(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: CompareOrdinal(String, String)\n  fullName: System.String.CompareOrdinal(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareOrdinal\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2160\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in each string.</p>\\n\"\n  syntax:\n    content: public static int CompareOrdinal(string strA, string strB)\n    content.vb: Public Shared Function CompareOrdinal(strA As String, strB As String) As Integer\n    parameters:\n    - id: strA\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that indicates the lexical relationship between the two comparands.</p>\\n<p>Value</p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> is less than <em>strB</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> and <em>strB</em> are equal. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>strA</em> is greater than <em>strB</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Compare(System.String,System.String)\n    commentId: M:System.String.Compare(System.String,System.String)\n  - type: System.String.CompareTo(System.Object)\n    commentId: M:System.String.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.CompareOrdinal(String, String)\n- uid: System.String.CompareTo(System.String)\n  commentId: M:System.String.CompareTo(System.String)\n  id: CompareTo(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(String)\n  fullName: System.String.CompareTo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2149\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance with a specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string. </p>\\n\"\n  syntax:\n    content: public int CompareTo(string strB)\n    content.vb: Public Function CompareTo(strB As String) As Integer\n    parameters:\n    - id: strB\n      type: System.String\n      description: \"\\n<p>The string to compare with this instance. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <em>strB</em> parameter.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance precedes <em>strB</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance has the same position in the sort order as <em>strB</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance follows <em>strB</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>strB</em> is <strong>null</strong>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.String.Compare(System.String,System.String)\n    commentId: M:System.String.Compare(System.String,System.String)\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  implements:\n  - System.IComparable{System.String}.CompareTo(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.CompareTo(String)\n- uid: System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  commentId: M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\n  id: Concat(System.Collections.Generic.IEnumerable{System.String})\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(IEnumerable<String>)\n  fullName: System.String.Concat(System.Collections.Generic.IEnumerable<System.String>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3352\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the members of a constructed <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection of type <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static string Concat(IEnumerable<string> values)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function Concat(values As IEnumerable(Of String)) As String\n    parameters:\n    - id: values\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: \"\\n<p>A collection object that implements <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and whose generic type argument is <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated strings in <em>values</em>, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>values</em> is an empty <strong>IEnumerable(Of String)</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Concat(System.Collections.Generic.IEnumerable(Of System.String))\n  name.vb: Concat(IEnumerable(Of String))\n  nameWithType: String.Concat(IEnumerable<String>)\n  nameWithType.vb: String.Concat(IEnumerable(Of String))\n- uid: System.String.Concat(System.Object)\n  commentId: M:System.String.Concat(System.Object)\n  id: Concat(System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(Object)\n  fullName: System.String.Concat(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3221\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates the string  representation of a specified object.</p>\\n\"\n  syntax:\n    content: public static string Concat(object arg0)\n    content.vb: Public Shared Function Concat(arg0 As Object) As String\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The object to represent, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of <em>arg0</em>, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>arg0</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Concat(Object)\n- uid: System.String.Concat(System.Object,System.Object)\n  commentId: M:System.String.Concat(System.Object,System.Object)\n  id: Concat(System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(Object, Object)\n  fullName: System.String.Concat(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3232\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the string representations of two specified objects.</p>\\n\"\n  syntax:\n    content: public static string Concat(object arg0, object arg1)\n    content.vb: Public Shared Function Concat(arg0 As Object, arg1 As Object) As String\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to concatenate. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated string representations of the values of <em>arg0</em> and <em>arg1</em>.</p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Concat(Object, Object)\n- uid: System.String.Concat(System.Object,System.Object,System.Object)\n  commentId: M:System.String.Concat(System.Object,System.Object,System.Object)\n  id: Concat(System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(Object, Object, Object)\n  fullName: System.String.Concat(System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3247\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the string representations of three specified objects.</p>\\n\"\n  syntax:\n    content: public static string Concat(object arg0, object arg1, object arg2)\n    content.vb: Public Shared Function Concat(arg0 As Object, arg1 As Object, arg2 As Object) As String\n    parameters:\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to concatenate. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to concatenate. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated string representations of the values of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Concat(Object, Object, Object)\n- uid: System.String.Concat(System.Object[])\n  commentId: M:System.String.Concat(System.Object[])\n  id: Concat(System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(Object[])\n  fullName: System.String.Concat(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3297\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the string representations of the elements in a specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string Concat(params object[] args)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Concat(ParamArray args As Object()) As String\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains the elements to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated string representations of the values of the elements in <em>args</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>args</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Out of memory.</p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Concat(System.Object())\n  name.vb: Concat(Object())\n  nameWithType: String.Concat(Object[])\n  nameWithType.vb: String.Concat(Object())\n- uid: System.String.Concat(System.String,System.String)\n  commentId: M:System.String.Concat(System.String,System.String)\n  id: Concat(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(String, String)\n  fullName: System.String.Concat(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3369\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates two specified instances of <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string Concat(string str0, string str1)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Concat(str0 As String, str1 As String) As String\n    parameters:\n    - id: str0\n      type: System.String\n      description: \"\\n<p>The first string to concatenate. </p>\\n\"\n    - id: str1\n      type: System.String\n      description: \"\\n<p>The second string to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenation of <em>str0</em> and <em>str1</em>.</p>\\n\"\n  seealso:\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Concat(String, String)\n- uid: System.String.Concat(System.String,System.String,System.String)\n  commentId: M:System.String.Concat(System.String,System.String,System.String)\n  id: Concat(System.String,System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(String, String, String)\n  fullName: System.String.Concat(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3398\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates three specified instances of <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string Concat(string str0, string str1, string str2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Concat(str0 As String, str1 As String, str2 As String) As String\n    parameters:\n    - id: str0\n      type: System.String\n      description: \"\\n<p>The first string to concatenate. </p>\\n\"\n    - id: str1\n      type: System.String\n      description: \"\\n<p>The second string to concatenate. </p>\\n\"\n    - id: str2\n      type: System.String\n      description: \"\\n<p>The third string to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenation of <em>str0</em>, <em>str1</em>, and <em>str2</em>.</p>\\n\"\n  seealso:\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Concat(String, String, String)\n- uid: System.String.Concat(System.String,System.String,System.String,System.String)\n  commentId: M:System.String.Concat(System.String,System.String,System.String,System.String)\n  id: Concat(System.String,System.String,System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(String, String, String, String)\n  fullName: System.String.Concat(System.String, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3432\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates four specified instances of <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string Concat(string str0, string str1, string str2, string str3)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Concat(str0 As String, str1 As String, str2 As String, str3 As String) As String\n    parameters:\n    - id: str0\n      type: System.String\n      description: \"\\n<p>The first string to concatenate. </p>\\n\"\n    - id: str1\n      type: System.String\n      description: \"\\n<p>The second string to concatenate. </p>\\n\"\n    - id: str2\n      type: System.String\n      description: \"\\n<p>The third string to concatenate. </p>\\n\"\n    - id: str3\n      type: System.String\n      description: \"\\n<p>The fourth string to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenation of <em>str0</em>, <em>str1</em>, <em>str2</em>, and <em>str3</em>.</p>\\n\"\n  seealso:\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Concat(String, String, String, String)\n- uid: System.String.Concat(System.String[])\n  commentId: M:System.String.Concat(System.String[])\n  id: Concat(System.String[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat(String[])\n  fullName: System.String.Concat(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3473\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the elements of a specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string Concat(params string[] values)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Concat(ParamArray values As String()) As String\n    parameters:\n    - id: values\n      type: System.String[]\n      description: \"\\n<p>An array of string instances. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated elements of <em>values</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Out of memory.</p>\\n\"\n  seealso:\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Concat(System.String())\n  name.vb: Concat(String())\n  nameWithType: String.Concat(String[])\n  nameWithType.vb: String.Concat(String())\n- uid: System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Concat<T>(IEnumerable<T>)\n  fullName: System.String.Concat<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Concat\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3331\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the members of an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static string Concat<T>(IEnumerable<T> values)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function Concat(Of T)(values As IEnumerable(Of T)) As String\n    parameters:\n    - id: values\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection object that implements the <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the members of <em>values</em>.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated members in <em>values</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Concat(Of T)(IEnumerable(Of T))\n  nameWithType: String.Concat<T>(IEnumerable<T>)\n  nameWithType.vb: String.Concat(Of T)(IEnumerable(Of T))\n- uid: System.String.Contains(System.String)\n  commentId: M:System.String.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Contains(String)\n  fullName: System.String.Contains(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2202\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether a specified substring occurs within this string.</p>\\n\"\n  syntax:\n    content: public bool Contains(string value)\n    content.vb: Public Function Contains(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter occurs within this string, or if <em>value</em> is the empty string (\\\"\\\"); otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.LastIndexOf(System.String)\n    commentId: M:System.String.LastIndexOf(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Contains(String)\n- uid: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Int32, Char[], Int32, Int32)\n  fullName: System.String.CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/String.cs\n    startLine: 744\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub CopyTo(sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)\n    parameters:\n    - id: sourceIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character in this instance to copy. </p>\\n\"\n    - id: destination\n      type: System.Char[]\n      description: \"\\n<p>An array of Unicode characters to which characters in this instance are copied. </p>\\n\"\n    - id: destinationIndex\n      type: System.Int32\n      description: \"\\n<p>The index in <em>destination</em> at which the copy operation begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters in this instance to copy to <em>destination</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em> is negative </p>\\n<p>-or- </p>\\n<p>\\n<em>sourceIndex</em> does not identify a position in the current instance. </p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> does not identify a valid index in the <em>destination</em> array. </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of the substring from <em>startIndex</em> to the end of this instance </p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is greater than the length of the subarray from <em>destinationIndex</em> to the end of the <em>destination</em> array. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.CopyTo(System.Int32, System.Char(), System.Int32, System.Int32)\n  name.vb: CopyTo(Int32, Char(), Int32, Int32)\n  nameWithType: String.CopyTo(Int32, Char[], Int32, Int32)\n  nameWithType.vb: String.CopyTo(Int32, Char(), Int32, Int32)\n- uid: System.String.EndsWith(System.String)\n  commentId: M:System.String.EndsWith(System.String)\n  id: EndsWith(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: EndsWith(String)\n  fullName: System.String.EndsWith(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EndsWith\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2212\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the end of this string instance matches the specified string.</p>\\n\"\n  syntax:\n    content: public bool EndsWith(string value)\n    content.vb: Public Function EndsWith(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to compare to the substring at the end of this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> matches the end of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.StartsWith(System.String)\n    commentId: M:System.String.StartsWith(System.String)\n  - type: System.String.Compare(System.String,System.String)\n    commentId: M:System.String.Compare(System.String,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.EndsWith(String)\n- uid: System.String.EndsWith(System.String,System.StringComparison)\n  commentId: M:System.String.EndsWith(System.String,System.StringComparison)\n  id: EndsWith(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: EndsWith(String, StringComparison)\n  fullName: System.String.EndsWith(System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EndsWith\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2217\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public bool EndsWith(string value, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Function EndsWith(value As String, comparisonType As StringComparison) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to compare to the substring at the end of this instance. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter matches the end of this string; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.StringComparison\n    commentId: T:System.StringComparison\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.EndsWith(String, StringComparison)\n- uid: System.String.Equals(System.Object)\n  commentId: M:System.String.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.String.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/String.cs\n    startLine: 553\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether this instance and a specified object, which must also be a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, have the same value.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The string to compare to this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and its value is the same as this instance; otherwise, <strong>false</strong>.  If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: String.Equals(Object)\n- uid: System.String.Equals(System.String)\n  commentId: M:System.String.Equals(System.String)\n  id: Equals(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Equals(String)\n  fullName: System.String.Equals(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/String.cs\n    startLine: 573\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether this instance and another specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have the same value.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public bool Equals(string value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Function Equals(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to compare to this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as the value of this instance; otherwise, <strong>false</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  implements:\n  - System.IEquatable{System.String}.Equals(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Equals(String)\n- uid: System.String.Equals(System.String,System.String)\n  commentId: M:System.String.Equals(System.String,System.String)\n  id: Equals(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Equals(String, String)\n  fullName: System.String.Equals(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/String.cs\n    startLine: 652\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have the same value.</p>\\n\"\n  syntax:\n    content: public static bool Equals(string a, string b)\n    content.vb: Public Shared Function Equals(a As String, b As String) As Boolean\n    parameters:\n    - id: a\n      type: System.String\n      description: \"\\n<p>The first string to compare, or <strong>null</strong>. </p>\\n\"\n    - id: b\n      type: System.String\n      description: \"\\n<p>The second string to compare, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>. If both <em>a</em> and <em>b</em> are <strong>null</strong>, the method returns <strong>true</strong>.</p>\\n\"\n  seealso:\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Equals(String, String)\n- uid: System.String.Equals(System.String,System.String,System.StringComparison)\n  commentId: M:System.String.Equals(System.String,System.String,System.StringComparison)\n  id: Equals(System.String,System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Equals(String, String, StringComparison)\n  fullName: System.String.Equals(System.String, System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/String.cs\n    startLine: 665\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool Equals(string a, string b, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Equals(a As String, b As String, comparisonType As StringComparison) As Boolean\n    parameters:\n    - id: a\n      type: System.String\n      description: \"\\n<p>The first string to compare, or <strong>null</strong>. </p>\\n\"\n    - id: b\n      type: System.String\n      description: \"\\n<p>The second string to compare, or <strong>null</strong>. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the comparison. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <em>a</em> parameter is equal to the value of the <em>b</em> parameter; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Equals(String, String, StringComparison)\n- uid: System.String.Equals(System.String,System.StringComparison)\n  commentId: M:System.String.Equals(System.String,System.StringComparison)\n  id: Equals(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Equals(String, StringComparison)\n  fullName: System.String.Equals(System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/String.cs\n    startLine: 596\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether this string and a specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public bool Equals(string value, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Equals(value As String, comparisonType As StringComparison) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to compare to this instance.</p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies how the strings will be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as this string; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.String.CompareOrdinal(System.String,System.String)\n    commentId: M:System.String.CompareOrdinal(System.String,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Equals(String, StringComparison)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object)\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object)\n  id: Format(System.IFormatProvider,System.String,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(IFormatProvider, String, Object)\n  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3164\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information. </p>\\n\"\n  syntax:\n    content: public static string Format(IFormatProvider provider, string format, object arg0)\n    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string. </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The object to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which the format item or items have been replaced by the string representation of <em>arg0</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> or <em>arg0</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to one. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Format(IFormatProvider, String, Object)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  id: Format(System.IFormatProvider,System.String,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(IFormatProvider, String, Object, Object)\n  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3169\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string Format(IFormatProvider provider, string format, object arg0, object arg1)\n    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string. </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em>, <em>arg0</em>, or <em>arg1</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to two. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Format(IFormatProvider, String, Object, Object)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  id: Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(IFormatProvider, String, Object, Object, Object)\n  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3174\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information. </p>\\n\"\n  syntax:\n    content: public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2)\n    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string. </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em>, <em>arg0</em>, <em>arg1</em>, or <em>arg2</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to three. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Format(IFormatProvider, String, Object, Object, Object)\n- uid: System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object[])\n  id: Format(System.IFormatProvider,System.String,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(IFormatProvider, String, Object[])\n  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3179\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string Format(IFormatProvider provider, string format, params object[] args)\n    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, ParamArray args As Object()) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string. </p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains zero or more objects to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array. </p>\\n\"\n  seealso:\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  - type: System.ICustomFormatter\n    commentId: T:System.ICustomFormatter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  - type: System.Globalization.NumberFormatInfo\n    commentId: T:System.Globalization.NumberFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Format(System.IFormatProvider, System.String, System.Object())\n  name.vb: Format(IFormatProvider, String, Object())\n  nameWithType: String.Format(IFormatProvider, String, Object[])\n  nameWithType.vb: String.Format(IFormatProvider, String, Object())\n- uid: System.String.Format(System.String,System.Object)\n  commentId: M:System.String.Format(System.String,System.Object)\n  id: Format(System.String,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(String, Object)\n  fullName: System.String.Format(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3136\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces one or more format items in a specified string with the string representation of a specified object.</p>\\n\"\n  syntax:\n    content: public static string Format(string format, object arg0)\n    content.vb: Public Shared Function Format(format As String, arg0 As Object) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string. </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The object to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which any format items are replaced by the string representation of <em>arg0</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The format item in <em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is not zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Format(String, Object)\n- uid: System.String.Format(System.String,System.Object,System.Object)\n  commentId: M:System.String.Format(System.String,System.Object,System.Object)\n  id: Format(System.String,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(String, Object, Object)\n  fullName: System.String.Format(System.String, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3141\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format items in a specified string with the string representation of two specified objects.</p>\\n\"\n  syntax:\n    content: public static string Format(string format, object arg0, object arg1)\n    content.vb: Public Shared Function Format(format As String, arg0 As Object, arg1 As Object) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string. </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is not zero or one. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Format(String, Object, Object)\n- uid: System.String.Format(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.String.Format(System.String,System.Object,System.Object,System.Object)\n  id: Format(System.String,System.Object,System.Object,System.Object)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(String, Object, Object, Object)\n  fullName: System.String.Format(System.String, System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3146\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format items in a specified string with the string representation of three specified objects.</p>\\n\"\n  syntax:\n    content: public static string Format(string format, object arg0, object arg1, object arg2)\n    content.vb: Public Shared Function Format(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string.</p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than two. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Format(String, Object, Object, Object)\n- uid: System.String.Format(System.String,System.Object[])\n  commentId: M:System.String.Format(System.String,System.Object[])\n  id: Format(System.String,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Format(String, Object[])\n  fullName: System.String.Format(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3151\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</p>\\n\"\n  syntax:\n    content: public static string Format(string format, params object[] args)\n    content.vb: Public Shared Function Format(format As String, ParamArray args As Object()) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains zero or more objects to format. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Format(System.String, System.Object())\n  name.vb: Format(String, Object())\n  nameWithType: String.Format(String, Object[])\n  nameWithType.vb: String.Format(String, Object())\n- uid: System.String.GetHashCode\n  commentId: M:System.String.GetHashCode\n  id: GetHashCode\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.String.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/String.cs\n    startLine: 854\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: String.GetHashCode()\n- uid: System.String.IndexOf(System.Char)\n  commentId: M:System.String.IndexOf(System.Char)\n  id: IndexOf(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Char)\n  fullName: System.String.IndexOf(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2299\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</p>\\n\"\n  syntax:\n    content: public int IndexOf(char value)\n    content.vb: Public Function IndexOf(value As Char) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>A Unicode character to seek. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(Char)\n- uid: System.String.IndexOf(System.Char,System.Int32)\n  commentId: M:System.String.IndexOf(System.Char,System.Int32)\n  id: IndexOf(System.Char,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Char, Int32)\n  fullName: System.String.IndexOf(System.Char, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2304\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</p>\\n\"\n  syntax:\n    content: public int IndexOf(char value, int startIndex)\n    content.vb: Public Function IndexOf(value As Char, startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>A Unicode character to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than 0 (zero) or greater than the length of the string. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(Char, Int32)\n- uid: System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  commentId: M:System.String.IndexOf(System.Char,System.Int32,System.Int32)\n  id: IndexOf(System.Char,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Char, Int32, Int32)\n  fullName: System.String.IndexOf(System.Char, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2309\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int IndexOf(char value, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function IndexOf(value As Char, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>A Unicode character to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the length of this string.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(Char, Int32, Int32)\n- uid: System.String.IndexOf(System.String)\n  commentId: M:System.String.IndexOf(System.String)\n  id: IndexOf(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String)\n  fullName: System.String.IndexOf(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2376\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance.</p>\\n\"\n  syntax:\n    content: public int IndexOf(string value)\n    content.vb: Public Function IndexOf(value As String) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is 0.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(String)\n- uid: System.String.IndexOf(System.String,System.Int32)\n  commentId: M:System.String.IndexOf(System.String,System.Int32)\n  id: IndexOf(System.String,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Int32)\n  fullName: System.String.IndexOf(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2385\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</p>\\n\"\n  syntax:\n    content: public int IndexOf(string value, int startIndex)\n    content.vb: Public Function IndexOf(value As String, startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(String, Int32)\n- uid: System.String.IndexOf(System.String,System.Int32,System.Int32)\n  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32)\n  id: IndexOf(System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Int32, Int32)\n  fullName: System.String.IndexOf(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2394\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\\n\"\n  syntax:\n    content: public int IndexOf(string value, int startIndex, int count)\n    content.vb: Public Function IndexOf(value As String, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the length of this string.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(String, Int32, Int32)\n- uid: System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  id: IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Int32, Int32, StringComparison)\n  fullName: System.String.IndexOf(System.String, System.Int32, System.Int32, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2418\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function IndexOf(value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of the <em>value</em> parameter from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the length of this instance.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a valid <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(String, Int32, Int32, StringComparison)\n- uid: System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  commentId: M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)\n  id: IndexOf(System.String,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Int32, StringComparison)\n  fullName: System.String.IndexOf(System.String, System.Int32, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2413\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</p>\\n\"\n  syntax:\n    content: public int IndexOf(string value, int startIndex, StringComparison comparisonType)\n    content.vb: Public Function IndexOf(value As String, startIndex As Integer, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of the <em>value</em> parameter from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a valid <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(String, Int32, StringComparison)\n- uid: System.String.IndexOf(System.String,System.StringComparison)\n  commentId: M:System.String.IndexOf(System.String,System.StringComparison)\n  id: IndexOf(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, StringComparison)\n  fullName: System.String.IndexOf(System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2408\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. A parameter specifies the type of search to use for the specified string.</p>\\n\"\n  syntax:\n    content: public int IndexOf(string value, StringComparison comparisonType)\n    content.vb: Public Function IndexOf(value As String, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index position of the <em>value</em> parameter if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is 0.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a valid <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.IndexOf(String, StringComparison)\n- uid: System.String.IndexOfAny(System.Char[])\n  commentId: M:System.String.IndexOfAny(System.Char[])\n  id: IndexOfAny(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOfAny(Char[])\n  fullName: System.String.IndexOfAny(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOfAny\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2355\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</p>\\n\"\n  syntax:\n    content: public int IndexOfAny(char[] anyOf)\n    content.vb: Public Function IndexOfAny(anyOf As Char()) As Integer\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array containing one or more characters to seek. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.IndexOfAny(System.Char())\n  name.vb: IndexOfAny(Char())\n  nameWithType: String.IndexOfAny(Char[])\n  nameWithType.vb: String.IndexOfAny(Char())\n- uid: System.String.IndexOfAny(System.Char[],System.Int32)\n  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32)\n  id: IndexOfAny(System.Char[],System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOfAny(Char[], Int32)\n  fullName: System.String.IndexOfAny(System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOfAny\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2360\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</p>\\n\"\n  syntax:\n    content: public int IndexOfAny(char[] anyOf, int startIndex)\n    content.vb: Public Function IndexOfAny(anyOf As Char(), startIndex As Integer) As Integer\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array containing one or more characters to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is greater than the number of characters in this instance. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.IndexOfAny(System.Char(), System.Int32)\n  name.vb: IndexOfAny(Char(), Int32)\n  nameWithType: String.IndexOfAny(Char[], Int32)\n  nameWithType.vb: String.IndexOfAny(Char(), Int32)\n- uid: System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)\n  id: IndexOfAny(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IndexOfAny(Char[], Int32, Int32)\n  fullName: System.String.IndexOfAny(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public int IndexOfAny(char[] anyOf, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Function IndexOfAny(anyOf As Char(), startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array containing one or more characters to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> + <em>startIndex</em> is greater than the number of characters in this instance. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.IndexOfAny(System.Char(), System.Int32, System.Int32)\n  name.vb: IndexOfAny(Char(), Int32, Int32)\n  nameWithType: String.IndexOfAny(Char[], Int32, Int32)\n  nameWithType.vb: String.IndexOfAny(Char(), Int32, Int32)\n- uid: System.String.Insert(System.Int32,System.String)\n  commentId: M:System.String.Insert(System.Int32,System.String)\n  id: Insert(System.Int32,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, String)\n  fullName: System.String.Insert(System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2953\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string in which a specified string is inserted at a specified index position in this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string Insert(int startIndex, string value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Insert(startIndex As Integer, value As String) As String\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of the insertion. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to insert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this instance, but with <em>value</em> inserted at position <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is negative or greater than the length of this instance. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n    commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Insert(Int32, String)\n- uid: System.String.IsNullOrEmpty(System.String)\n  commentId: M:System.String.IsNullOrEmpty(System.String)\n  id: IsNullOrEmpty(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IsNullOrEmpty(String)\n  fullName: System.String.IsNullOrEmpty(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNullOrEmpty\n    path: src/mscorlib/src/System/String.cs\n    startLine: 818\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified string is <strong>null</strong> or an <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> string.</p>\\n\"\n  syntax:\n    content: public static bool IsNullOrEmpty(string value)\n    content.vb: Public Shared Function IsNullOrEmpty(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to test. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter is <strong>null</strong> or an empty string (\\\"\\\"); otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.String.IsNullOrWhiteSpace(System.String)\n    commentId: M:System.String.IsNullOrWhiteSpace(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.IsNullOrEmpty(String)\n- uid: System.String.IsNullOrWhiteSpace(System.String)\n  commentId: M:System.String.IsNullOrWhiteSpace(System.String)\n  id: IsNullOrWhiteSpace(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IsNullOrWhiteSpace(String)\n  fullName: System.String.IsNullOrWhiteSpace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNullOrWhiteSpace\n    path: src/mscorlib/src/System/String.cs\n    startLine: 823\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether a specified string is <strong>null</strong>, empty, or consists only of white-space characters.</p>\\n\"\n  syntax:\n    content: public static bool IsNullOrWhiteSpace(string value)\n    content.vb: Public Shared Function IsNullOrWhiteSpace(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to test.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or if <em>value</em> consists exclusively of white-space characters. </p>\\n\"\n  seealso:\n  - type: System.String.IsNullOrEmpty(System.String)\n    commentId: M:System.String.IsNullOrEmpty(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.IsNullOrWhiteSpace(String)\n- uid: System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  commentId: M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  id: Join(System.String,System.Collections.Generic.IEnumerable{System.String})\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Join(String, IEnumerable<String>)\n  fullName: System.String.Join(System.String, System.Collections.Generic.IEnumerable<System.String>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/String.cs\n    startLine: 140\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the members of a constructed <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection of type <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using the specified separator between each member.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static string Join(string separator, IEnumerable<string> values)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function Join(separator As String, values As IEnumerable(Of String)) As String\n    parameters:\n    - id: separator\n      type: System.String\n      description: \"\\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\\n\"\n    - id: values\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: \"\\n<p>A collection that contains the strings to concatenate.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that consists of the members of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> has no members, the method returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Join(System.String, System.Collections.Generic.IEnumerable(Of System.String))\n  name.vb: Join(String, IEnumerable(Of String))\n  nameWithType: String.Join(String, IEnumerable<String>)\n  nameWithType.vb: String.Join(String, IEnumerable(Of String))\n- uid: System.String.Join(System.String,System.Object[])\n  commentId: M:System.String.Join(System.String,System.Object[])\n  id: Join(System.String,System.Object[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Join(String, Object[])\n  fullName: System.String.Join(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/String.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the elements of an object array, using the specified separator between each element.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static string Join(string separator, params object[] values)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function Join(separator As String, ParamArray values As Object()) As String\n    parameters:\n    - id: separator\n      type: System.String\n      description: \"\\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\\n\"\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array that contains the elements to concatenate.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that consists of the elements of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> is an empty array, the method returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Join(System.String, System.Object())\n  name.vb: Join(String, Object())\n  nameWithType: String.Join(String, Object[])\n  nameWithType.vb: String.Join(String, Object())\n- uid: System.String.Join(System.String,System.String[])\n  commentId: M:System.String.Join(System.String,System.String[])\n  id: Join(System.String,System.String[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Join(String, String[])\n  fullName: System.String.Join(System.String, System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/String.cs\n    startLine: 79\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates all the elements of a string array, using the specified separator between each element. </p>\\n\"\n  syntax:\n    content: public static string Join(string separator, params string[] value)\n    content.vb: Public Shared Function Join(separator As String, ParamArray value As String()) As String\n    parameters:\n    - id: separator\n      type: System.String\n      description: \"\\n<p>The string to use as a separator. <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\\n\"\n    - id: value\n      type: System.String[]\n      description: \"\\n<p>An array that contains the elements to concatenate. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that consists of the elements in <em>value</em> delimited by the <em>separator</em> string. If <em>value</em> is an empty array, the method returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Join(System.String, System.String())\n  name.vb: Join(String, String())\n  nameWithType: String.Join(String, String[])\n  nameWithType.vb: String.Join(String, String())\n- uid: System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  commentId: M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)\n  id: Join(System.String,System.String[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Join(String, String[], Int32, Int32)\n  fullName: System.String.Join(System.String, System.String[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/String.cs\n    startLine: 183\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the specified elements of a string array, using the specified separator between each element. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string Join(string separator, string[] value, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Join(separator As String, value As String(), startIndex As Integer, count As Integer) As String\n    parameters:\n    - id: separator\n      type: System.String\n      description: \"\\n<p>The string to use as a separator. <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\\n\"\n    - id: value\n      type: System.String[]\n      description: \"\\n<p>An array that contains the elements to concatenate. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The first element in <em>value</em> to use. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements of <em>value</em> to use. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that consists of the strings in <em>value</em> delimited by the <em>separator</em> string. </p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>count</em> is zero, <em>value</em> has no elements, or <em>separator</em> and all the elements of <em>value</em> are <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>count</em> is less than 0.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>count</em> is greater than the number of elements in <em>value</em>. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Out of memory.</p>\\n\"\n  seealso:\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Join(System.String, System.String(), System.Int32, System.Int32)\n  name.vb: Join(String, String(), Int32, Int32)\n  nameWithType: String.Join(String, String[], Int32, Int32)\n  nameWithType.vb: String.Join(String, String(), Int32, Int32)\n- uid: System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  id: Join``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Join<T>(String, IEnumerable<T>)\n  fullName: System.String.Join<T>(System.String, System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/String.cs\n    startLine: 108\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the members of a collection, using the specified separator between each member.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static string Join<T>(string separator, IEnumerable<T> values)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function Join(Of T)(separator As String, values As IEnumerable(Of T)) As String\n    parameters:\n    - id: separator\n      type: System.String\n      description: \"\\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\\n\"\n    - id: values\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>A collection that contains the objects to concatenate.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the members of <em>values</em>.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that consists of the members of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> has no members, the method returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.String.Join(Of T)(System.String, System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Join(Of T)(String, IEnumerable(Of T))\n  nameWithType: String.Join<T>(String, IEnumerable<T>)\n  nameWithType.vb: String.Join(Of T)(String, IEnumerable(Of T))\n- uid: System.String.LastIndexOf(System.Char)\n  commentId: M:System.String.LastIndexOf(System.Char)\n  id: LastIndexOf(System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Char)\n  fullName: System.String.LastIndexOf(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2464\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(char value)\n    content.vb: Public Function LastIndexOf(value As Char) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to seek. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(Char)\n- uid: System.String.LastIndexOf(System.Char,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.Char,System.Int32)\n  id: LastIndexOf(System.Char,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Char, Int32)\n  fullName: System.String.LastIndexOf(System.Char, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2469\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(char value, int startIndex)\n    content.vb: Public Function LastIndexOf(value As Char, startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position of the search. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is less than zero or greater than or equal to the length of this instance.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(Char, Int32)\n- uid: System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\n  id: LastIndexOf(System.Char,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Char, Int32, Int32)\n  fullName: System.String.LastIndexOf(System.Char, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2474\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int LastIndexOf(char value, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function LastIndexOf(value As Char, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position of the search. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is less than zero or greater than or equal to the length of this instance.</p>\\n<p>-or-</p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> - <em>count</em> + 1 is less than zero.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(Char, Int32, Int32)\n- uid: System.String.LastIndexOf(System.String)\n  commentId: M:System.String.LastIndexOf(System.String)\n  id: LastIndexOf(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String)\n  fullName: System.String.LastIndexOf(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2549\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(string value)\n    content.vb: Public Function LastIndexOf(value As String) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is the last index position in this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(String)\n- uid: System.String.LastIndexOf(System.String,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32)\n  id: LastIndexOf(System.String,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Int32)\n  fullName: System.String.LastIndexOf(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2554\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(string value, int startIndex)\n    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is less than zero or greater than the length of the current instance. </p>\\n<p>-or-</p>\\n<p>The current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is less than -1 or greater than zero.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(String, Int32)\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)\n  id: LastIndexOf(System.String,System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Int32, Int32)\n  fullName: System.String.LastIndexOf(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2559\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(string value, int startIndex, int count)\n    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative.</p>\\n<p>-or-</p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is greater than the length of this instance.</p>\\n<p>-or-</p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> - <em>count</em>+ 1 specifies a position that is not within this instance. </p>\\n<p>-or-</p>\\n<p>The current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>start</em> is less than -1 or greater than zero. </p>\\n<p>-or-</p>\\n<p>The current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>count</em> is greater than 1. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOfAny(System.Char[])\n    commentId: M:System.String.LastIndexOfAny(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(String, Int32, Int32)\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  id: LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Int32, Int32, StringComparison)\n  fullName: System.String.LastIndexOf(System.String, System.Int32, System.Int32, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2579\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function LastIndexOf(value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative.</p>\\n<p>-or-</p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is greater than the length of this instance.</p>\\n<p>-or-</p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> + 1 - <em>count</em> specifies a position that is not within this instance. </p>\\n<p>-or-</p>\\n<p>The current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>start</em> is less than -1 or greater than zero. </p>\\n<p>-or-</p>\\n<p>The current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>count</em> is greater than 1. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a valid <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(String, Int32, Int32, StringComparison)\n- uid: System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\n  id: LastIndexOf(System.String,System.Int32,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Int32, StringComparison)\n  fullName: System.String.LastIndexOf(System.String, System.Int32, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2574\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(string value, int startIndex, StringComparison comparisonType)\n    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is less than zero or greater than the length of the current instance. </p>\\n<p>-or-</p>\\n<p>The current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> is less than -1 or greater than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a valid <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(String, Int32, StringComparison)\n- uid: System.String.LastIndexOf(System.String,System.StringComparison)\n  commentId: M:System.String.LastIndexOf(System.String,System.StringComparison)\n  id: LastIndexOf(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, StringComparison)\n  fullName: System.String.LastIndexOf(System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2569\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. A parameter specifies the type of search to use for the specified string.</p>\\n\"\n  syntax:\n    content: public int LastIndexOf(string value, StringComparison comparisonType)\n    content.vb: Public Function LastIndexOf(value As String, comparisonType As StringComparison) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to seek. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that specifies the rules for the search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the return value is the last index position in this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a valid <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.LastIndexOf(String, StringComparison)\n- uid: System.String.LastIndexOfAny(System.Char[])\n  commentId: M:System.String.LastIndexOfAny(System.Char[])\n  id: LastIndexOfAny(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOfAny(Char[])\n  fullName: System.String.LastIndexOfAny(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOfAny\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2528\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</p>\\n\"\n  syntax:\n    content: public int LastIndexOfAny(char[] anyOf)\n    content.vb: Public Function LastIndexOfAny(anyOf As Char()) As Integer\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array containing one or more characters to seek. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.LastIndexOfAny(System.Char())\n  name.vb: LastIndexOfAny(Char())\n  nameWithType: String.LastIndexOfAny(Char[])\n  nameWithType.vb: String.LastIndexOfAny(Char())\n- uid: System.String.LastIndexOfAny(System.Char[],System.Int32)\n  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32)\n  id: LastIndexOfAny(System.Char[],System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOfAny(Char[], Int32)\n  fullName: System.String.LastIndexOfAny(System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOfAny\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2533\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\\n\"\n  syntax:\n    content: public int LastIndexOfAny(char[] anyOf, int startIndex)\n    content.vb: Public Function LastIndexOfAny(anyOf As Char(), startIndex As Integer) As Integer\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array containing one or more characters to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> specifies a position that is not within this instance. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.LastIndexOfAny(System.Char(), System.Int32)\n  name.vb: LastIndexOfAny(Char(), Int32)\n  nameWithType: String.LastIndexOfAny(Char[], Int32)\n  nameWithType.vb: String.LastIndexOfAny(Char(), Int32)\n- uid: System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  id: LastIndexOfAny(System.Char[],System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOfAny(Char[], Int32, Int32)\n  fullName: System.String.LastIndexOfAny(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public int LastIndexOfAny(char[] anyOf, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Function LastIndexOfAny(anyOf As Char(), startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: anyOf\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array containing one or more characters to seek. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of character positions to examine. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found or if the current instance equals <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>anyOf</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>count</em> or <em>startIndex</em> is negative.</p>\\n<p>-or- </p>\\n<p>The current instance does not equal <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <em>startIndex</em> minus <em>count</em> + 1 is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.String.IndexOfAny(System.Char[])\n    commentId: M:System.String.IndexOfAny(System.Char[])\n  - type: System.String.LastIndexOf(System.Char)\n    commentId: M:System.String.LastIndexOf(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.LastIndexOfAny(System.Char(), System.Int32, System.Int32)\n  name.vb: LastIndexOfAny(Char(), Int32, Int32)\n  nameWithType: String.LastIndexOfAny(Char[], Int32, Int32)\n  nameWithType.vb: String.LastIndexOfAny(Char(), Int32, Int32)\n- uid: System.String.op_Equality(System.String,System.String)\n  commentId: M:System.String.op_Equality(System.String,System.String)\n  id: op_Equality(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Equality(String, String)\n  fullName: System.String.Equality(System.String, System.String)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/String.cs\n    startLine: 721\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified strings have the same value.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(string a, string b)\n    content.vb: Public Shared Operator =(a As String, b As String) As Boolean\n    parameters:\n    - id: a\n      type: System.String\n      description: \"\\n<p>The first string to compare, or <strong>null</strong>. </p>\\n\"\n    - id: b\n      type: System.String\n      description: \"\\n<p>The second string to compare, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Equality(String, String)\n- uid: System.String.op_Inequality(System.String,System.String)\n  commentId: M:System.String.op_Inequality(System.String,System.String)\n  id: op_Inequality(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Inequality(String, String)\n  fullName: System.String.Inequality(System.String, System.String)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/String.cs\n    startLine: 725\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified strings have different values.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(string a, string b)\n    content.vb: Public Shared Operator <>(a As String, b As String) As Boolean\n    parameters:\n    - id: a\n      type: System.String\n      description: \"\\n<p>The first string to compare, or <strong>null</strong>. </p>\\n\"\n    - id: b\n      type: System.String\n      description: \"\\n<p>The second string to compare, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is different from the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: String.Inequality(String, String)\n- uid: System.String.PadLeft(System.Int32)\n  commentId: M:System.String.PadLeft(System.Int32)\n  id: PadLeft(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: PadLeft(Int32)\n  fullName: System.String.PadLeft(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PadLeft\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2638\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</p>\\n\"\n  syntax:\n    content: public string PadLeft(int totalWidth)\n    content.vb: Public Function PadLeft(totalWidth As Integer) As String\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>totalWidth</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.PadRight(System.Int32)\n    commentId: M:System.String.PadRight(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.PadLeft(Int32)\n- uid: System.String.PadLeft(System.Int32,System.Char)\n  commentId: M:System.String.PadLeft(System.Int32,System.Char)\n  id: PadLeft(System.Int32,System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: PadLeft(Int32, Char)\n  fullName: System.String.PadLeft(System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PadLeft\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2643\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string PadLeft(int totalWidth, char paddingChar)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function PadLeft(totalWidth As Integer, paddingChar As Char) As String\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\\n\"\n    - id: paddingChar\n      type: System.Char\n      description: \"\\n<p>A Unicode padding character. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>totalWidth</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.PadRight(System.Int32)\n    commentId: M:System.String.PadRight(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.PadLeft(Int32, Char)\n- uid: System.String.PadRight(System.Int32)\n  commentId: M:System.String.PadRight(System.Int32)\n  id: PadRight(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: PadRight(Int32)\n  fullName: System.String.PadRight(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PadRight\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2668\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</p>\\n\"\n  syntax:\n    content: public string PadRight(int totalWidth)\n    content.vb: Public Function PadRight(totalWidth As Integer) As String\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>totalWidth</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.PadLeft(System.Int32)\n    commentId: M:System.String.PadLeft(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.PadRight(Int32)\n- uid: System.String.PadRight(System.Int32,System.Char)\n  commentId: M:System.String.PadRight(System.Int32,System.Char)\n  id: PadRight(System.Int32,System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: PadRight(Int32, Char)\n  fullName: System.String.PadRight(System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PadRight\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2673\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string PadRight(int totalWidth, char paddingChar)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function PadRight(totalWidth As Integer, paddingChar As Char) As String\n    parameters:\n    - id: totalWidth\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\\n\"\n    - id: paddingChar\n      type: System.Char\n      description: \"\\n<p>A Unicode padding character. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>totalWidth</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.PadLeft(System.Int32)\n    commentId: M:System.String.PadLeft(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.PadRight(Int32, Char)\n- uid: System.String.Remove(System.Int32)\n  commentId: M:System.String.Remove(System.Int32)\n  id: Remove(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Remove(Int32)\n  fullName: System.String.Remove(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3119\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</p>\\n\"\n  syntax:\n    content: public string Remove(int startIndex)\n    content.vb: Public Function Remove(startIndex As Integer) As String\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based position to begin deleting characters. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this string except for the removed characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> specifies a position that is not within this string. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Remove(Int32)\n- uid: System.String.Remove(System.Int32,System.Int32)\n  commentId: M:System.String.Remove(System.Int32,System.Int32)\n  id: Remove(System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Remove(Int32, Int32)\n  fullName: System.String.Remove(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3081\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string Remove(int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Remove(startIndex As Integer, count As Integer) As String\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based position to begin deleting characters. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to delete. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is equivalent to this instance except for the removed characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Either <em>startIndex</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>count</em> specify a position outside this instance. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Remove(Int32, Int32)\n- uid: System.String.Replace(System.Char,System.Char)\n  commentId: M:System.String.Replace(System.Char,System.Char)\n  id: Replace(System.Char,System.Char)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Replace(Char, Char)\n  fullName: System.String.Replace(System.Char, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Replace\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2995\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string Replace(char oldChar, char newChar)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Replace(oldChar As Char, newChar As Char) As String\n    parameters:\n    - id: oldChar\n      type: System.Char\n      description: \"\\n<p>The Unicode character to be replaced. </p>\\n\"\n    - id: newChar\n      type: System.Char\n      description: \"\\n<p>The Unicode character to replace all occurrences of <em>oldChar</em>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that is equivalent to this instance except that all instances of <em>oldChar</em> are replaced with <em>newChar</em>. If <em>oldChar</em> is not found in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Replace(Char, Char)\n- uid: System.String.Replace(System.String,System.String)\n  commentId: M:System.String.Replace(System.String,System.String)\n  id: Replace(System.String,System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String)\n  fullName: System.String.Replace(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Replace\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3070\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</p>\\n\"\n  syntax:\n    content: public string Replace(string oldValue, string newValue)\n    content.vb: Public Function Replace(oldValue As String, newValue As String) As String\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: \"\\n<p>The string to be replaced. </p>\\n\"\n    - id: newValue\n      type: System.String\n      description: \"\\n<p>The string to replace all occurrences of <em>oldValue</em>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that is equivalent to the current string except that all instances of <em>oldValue</em> are replaced with <em>newValue</em>. If <em>oldValue</em> is not found in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>oldValue</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>oldValue</em> is the empty string (\\\"\\\"). </p>\\n\"\n  seealso:\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Replace(String, String)\n- uid: System.String.Split(System.Char[])\n  commentId: M:System.String.Split(System.Char[])\n  id: Split(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Split(Char[])\n  fullName: System.String.Split(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Split\n    path: src/mscorlib/src/System/String.cs\n    startLine: 995\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Splits a string into substrings that are based on the characters in an array. </p>\\n\"\n  syntax:\n    content: public string[] Split(params char[] separator)\n    content.vb: Public Function Split(ParamArray separator As Char()) As String()\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: \"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Split(System.Char())\n  name.vb: Split(Char())\n  nameWithType: String.Split(Char[])\n  nameWithType.vb: String.Split(Char())\n- uid: System.String.Split(System.Char[],System.Int32)\n  commentId: M:System.String.Split(System.Char[],System.Int32)\n  id: Split(System.Char[],System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Split(Char[], Int32)\n  fullName: System.String.Split(System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Split\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1011\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</p>\\n\"\n  syntax:\n    content: public string[] Split(char[] separator, int count)\n    content.vb: Public Function Split(separator As Char(), count As Integer) As String()\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: \"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of substrings to return. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Substring(System.Int32)\n    commentId: M:System.String.Substring(System.Int32)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Split(System.Char(), System.Int32)\n  name.vb: Split(Char(), Int32)\n  nameWithType: String.Split(Char[], Int32)\n  nameWithType.vb: String.Split(Char(), Int32)\n- uid: System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)\n  id: Split(System.Char[],System.Int32,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Split(Char[], Int32, StringSplitOptions)\n  fullName: System.String.Split(System.Char[], System.Int32, System.StringSplitOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Split\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1022\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Splits a string into a maximum number of substrings based on the characters in an array.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public string[] Split(char[] separator, int count, StringSplitOptions options)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Function Split(separator As Char(), count As Integer, options As StringSplitOptions) As String()\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: \"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of substrings to return. </p>\\n\"\n    - id: options\n      type: System.StringSplitOptions\n      description: \"\\n<p>\\n<xref href=\\\"System.StringSplitOptions.RemoveEmptyEntries\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to omit empty array elements from the array returned; or <xref href=\\\"System.StringSplitOptions.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to include empty array elements in the array returned. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> is not one of the <xref href=\\\"System.StringSplitOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Split(System.Char(), System.Int32, System.StringSplitOptions)\n  name.vb: Split(Char(), Int32, StringSplitOptions)\n  nameWithType: String.Split(Char[], Int32, StringSplitOptions)\n  nameWithType.vb: String.Split(Char(), Int32, StringSplitOptions)\n- uid: System.String.Split(System.Char[],System.StringSplitOptions)\n  commentId: M:System.String.Split(System.Char[],System.StringSplitOptions)\n  id: Split(System.Char[],System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Split(Char[], StringSplitOptions)\n  fullName: System.String.Split(System.Char[], System.StringSplitOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Split\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1016\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public string[] Split(char[] separator, StringSplitOptions options)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Function Split(separator As Char(), options As StringSplitOptions) As String()\n    parameters:\n    - id: separator\n      type: System.Char[]\n      description: \"\\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\\n\"\n    - id: options\n      type: System.StringSplitOptions\n      description: \"\\n<p>\\n<xref href=\\\"System.StringSplitOptions.RemoveEmptyEntries\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to omit empty array elements from the array returned; or <xref href=\\\"System.StringSplitOptions.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to include empty array elements in the array returned. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> is not one of the <xref href=\\\"System.StringSplitOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Split(System.Char(), System.StringSplitOptions)\n  name.vb: Split(Char(), StringSplitOptions)\n  nameWithType: String.Split(Char[], StringSplitOptions)\n  nameWithType.vb: String.Split(Char(), StringSplitOptions)\n- uid: System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  commentId: M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\n  id: Split(System.String[],System.Int32,System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Split(String[], Int32, StringSplitOptions)\n  fullName: System.String.Split(System.String[], System.Int32, System.StringSplitOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Split\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1083\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public string[] Split(string[] separator, int count, StringSplitOptions options)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Function Split(separator As String(), count As Integer, options As StringSplitOptions) As String()\n    parameters:\n    - id: separator\n      type: System.String[]\n      description: \"\\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of substrings to return. </p>\\n\"\n    - id: options\n      type: System.StringSplitOptions\n      description: \"\\n<p>\\n<xref href=\\\"System.StringSplitOptions.RemoveEmptyEntries\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to omit empty array elements from the array returned; or <xref href=\\\"System.StringSplitOptions.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to include empty array elements in the array returned. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>. For more information, see the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> is not one of the <xref href=\\\"System.StringSplitOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Split(System.String(), System.Int32, System.StringSplitOptions)\n  name.vb: Split(String(), Int32, StringSplitOptions)\n  nameWithType: String.Split(String[], Int32, StringSplitOptions)\n  nameWithType.vb: String.Split(String(), Int32, StringSplitOptions)\n- uid: System.String.Split(System.String[],System.StringSplitOptions)\n  commentId: M:System.String.Split(System.String[],System.StringSplitOptions)\n  id: Split(System.String[],System.StringSplitOptions)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Split(String[], StringSplitOptions)\n  fullName: System.String.Split(System.String[], System.StringSplitOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Split\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1077\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public string[] Split(string[] separator, StringSplitOptions options)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Function Split(separator As String(), options As StringSplitOptions) As String()\n    parameters:\n    - id: separator\n      type: System.String[]\n      description: \"\\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\\n\"\n    - id: options\n      type: System.StringSplitOptions\n      description: \"\\n<p>\\n<xref href=\\\"System.StringSplitOptions.RemoveEmptyEntries\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to omit empty array elements from the array returned; or <xref href=\\\"System.StringSplitOptions.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to include empty array elements in the array returned. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>. For more information, see the Remarks section.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> is not one of the <xref href=\\\"System.StringSplitOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Split(System.String(), System.StringSplitOptions)\n  name.vb: Split(String(), StringSplitOptions)\n  nameWithType: String.Split(String[], StringSplitOptions)\n  nameWithType.vb: String.Split(String(), StringSplitOptions)\n- uid: System.String.StartsWith(System.String)\n  commentId: M:System.String.StartsWith(System.String)\n  id: StartsWith(System.String)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: StartsWith(String)\n  fullName: System.String.StartsWith(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartsWith\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2700\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the beginning of this string instance matches the specified string.</p>\\n\"\n  syntax:\n    content: public bool StartsWith(string value)\n    content.vb: Public Function StartsWith(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> matches the beginning of this string; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.EndsWith(System.String)\n    commentId: M:System.String.EndsWith(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.StartsWith(String)\n- uid: System.String.StartsWith(System.String,System.StringComparison)\n  commentId: M:System.String.StartsWith(System.String,System.StringComparison)\n  id: StartsWith(System.String,System.StringComparison)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: StartsWith(String, StringComparison)\n  fullName: System.String.StartsWith(System.String, System.StringComparison)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartsWith\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2709\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public bool StartsWith(string value, StringComparison comparisonType)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Function StartsWith(value As String, comparisonType As StringComparison) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to compare. </p>\\n\"\n    - id: comparisonType\n      type: System.StringComparison\n      description: \"\\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this instance begins with <em>value</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparisonType</em> is not a <xref href=\\\"System.StringComparison\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.StringComparison\n    commentId: T:System.StringComparison\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.StartsWith(String, StringComparison)\n- uid: System.String.Substring(System.Int32)\n  commentId: M:System.String.Substring(System.Int32)\n  id: Substring(System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Substring(Int32)\n  fullName: System.String.Substring(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Substring\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1300\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</p>\\n\"\n  syntax:\n    content: public string Substring(int startIndex)\n    content.vb: Public Function Substring(startIndex As Integer) As String\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting character position of a substring in this instance. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that is equivalent to the substring that begins at <em>startIndex</em> in this instance, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>startIndex</em> is equal to the length of this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.String.Concat(System.Object)\n    commentId: M:System.String.Concat(System.Object)\n  - type: System.String.Insert(System.Int32,System.String)\n    commentId: M:System.String.Insert(System.Int32,System.String)\n  - type: System.String.Join(System.String,System.String[])\n    commentId: M:System.String.Join(System.String,System.String[])\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Split(System.Char[])\n    commentId: M:System.String.Split(System.Char[])\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Substring(Int32)\n- uid: System.String.Substring(System.Int32,System.Int32)\n  commentId: M:System.String.Substring(System.Int32,System.Int32)\n  id: Substring(System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Substring(Int32, Int32)\n  fullName: System.String.Substring(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Substring\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1306\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string Substring(int startIndex, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Substring(startIndex As Integer, length As Integer) As String\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting character position of a substring in this instance. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the substring. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that is equivalent to the substring of length <em>length</em> that begins at <em>startIndex</em> in this instance, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>startIndex</em> is equal to the length of this instance and <em>length</em> is zero.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> plus <em>length</em> indicates a position not within this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.String.Remove(System.Int32,System.Int32)\n    commentId: M:System.String.Remove(System.Int32,System.Int32)\n  - type: System.String.Replace(System.Char,System.Char)\n    commentId: M:System.String.Replace(System.Char,System.Char)\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Substring(Int32, Int32)\n- uid: System.String.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.String.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.String.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3680\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an enumerator that iterates through the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator that can be used to iterate through the current string.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: String.IEnumerable.GetEnumerator()\n  nameWithType.vb: String.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.String.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.String.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.String.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1595\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: String.IComparable.CompareTo(Object)\n  nameWithType.vb: String.System.IComparable.CompareTo(Object)\n- uid: System.String.System#IConvertible#GetTypeCode\n  commentId: M:System.String.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.String.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1596\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: String.IConvertible.GetTypeCode()\n  nameWithType.vb: String.System.IConvertible.GetTypeCode()\n- uid: System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3570\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToBoolean(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the current string is <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; <strong>false</strong> if the value of the current string is <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current string is not <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: String.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3585\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: String.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3575\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToChar(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The character at index 0 in the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: String.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3635\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDateTime(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: String.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3630\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDecimal(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> greater. </p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: String.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3625\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDouble(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: String.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3590\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3600\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3610\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: String.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3580\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: String.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3620\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSingle(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: String.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.String.System#IConvertible#ToString(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToString(System.IFormatProvider)\n  id: System#IConvertible#ToString(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToString(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.ToString\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1608\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: string IConvertible.ToString(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n    return:\n      type: System.String\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  name.vb: System.IConvertible.ToString(IFormatProvider)\n  nameWithType: String.IConvertible.ToString(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToString(IFormatProvider)\n- uid: System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.String.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3640\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the returned object. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be converted to the type specified by the <em>type</em> parameter. </p>\\n\"\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: String.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3595\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3605\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object cannot be parsed. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a number greater <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.String.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/String.cs\n    startLine: 3615\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The converted value of the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: String.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: String.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.String.ToCharArray\n  commentId: M:System.String.ToCharArray\n  id: ToCharArray\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToCharArray()\n  fullName: System.String.ToCharArray()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToCharArray\n    path: src/mscorlib/src/System/String.cs\n    startLine: 769\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies the characters in this instance to a Unicode character array. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public char[] ToCharArray()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToCharArray As Char()\n    return:\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Array\n    commentId: T:System.Array\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.ToCharArray()\n- uid: System.String.ToCharArray(System.Int32,System.Int32)\n  commentId: M:System.String.ToCharArray(System.Int32,System.Int32)\n  id: ToCharArray(System.Int32,System.Int32)\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToCharArray(Int32, Int32)\n  fullName: System.String.ToCharArray(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToCharArray\n    path: src/mscorlib/src/System/String.cs\n    startLine: 791\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies the characters in a specified substring in this instance to a Unicode character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public char[] ToCharArray(int startIndex, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToCharArray(startIndex As Integer, length As Integer) As Char()\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position of a substring in this instance. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The length of the substring in this instance. </p>\\n\"\n    return:\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array whose elements are the <em>length</em> number of characters in this instance starting from character position <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>length</em> is greater than the length of this instance. </p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.ToCharArray(Int32, Int32)\n- uid: System.String.ToLower\n  commentId: M:System.String.ToLower\n  id: ToLower\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToLower()\n  fullName: System.String.ToLower()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLower\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2788\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a copy of this string converted to lowercase.</p>\\n\"\n  syntax:\n    content: public string ToLower()\n    content.vb: Public Function ToLower As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string in lowercase.</p>\\n\"\n  seealso:\n  - type: System.String.ToLowerInvariant\n    commentId: M:System.String.ToLowerInvariant\n  - type: System.String.ToUpper\n    commentId: M:System.String.ToUpper\n  - type: System.String.ToUpperInvariant\n    commentId: M:System.String.ToUpperInvariant\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.ToLower()\n- uid: System.String.ToLowerInvariant\n  commentId: M:System.String.ToLowerInvariant\n  id: ToLowerInvariant\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToLowerInvariant()\n  fullName: System.String.ToLowerInvariant()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLowerInvariant\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2807\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a copy of this <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object converted to lowercase using the casing rules of the invariant culture.</p>\\n\"\n  syntax:\n    content: public string ToLowerInvariant()\n    content.vb: Public Function ToLowerInvariant As String\n    return:\n      type: System.String\n      description: \"\\n<p>The lowercase equivalent of the current string.</p>\\n\"\n  seealso:\n  - type: System.String.ToUpperInvariant\n    commentId: M:System.String.ToUpperInvariant\n  - type: System.String.ToLower(System.Globalization.CultureInfo)\n    commentId: M:System.String.ToLower(System.Globalization.CultureInfo)\n  - type: System.String.ToLower\n    commentId: M:System.String.ToLower\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.ToLowerInvariant()\n- uid: System.String.ToString\n  commentId: M:System.String.ToString\n  id: ToString\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.String.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2845\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns this instance of <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The current string.</p>\\n\"\n  overridden: System.Object.ToString\n  seealso:\n  - type: System.String.Clone\n    commentId: M:System.String.Clone\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: String.ToString()\n- uid: System.String.ToUpper\n  commentId: M:System.String.ToUpper\n  id: ToUpper\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToUpper()\n  fullName: System.String.ToUpper()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUpper\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2815\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a copy of this string converted to uppercase.</p>\\n\"\n  syntax:\n    content: public string ToUpper()\n    content.vb: Public Function ToUpper As String\n    return:\n      type: System.String\n      description: \"\\n<p>The uppercase equivalent of the current string.</p>\\n\"\n  seealso:\n  - type: System.String.ToLower\n    commentId: M:System.String.ToLower\n  - type: System.String.ToLowerInvariant\n    commentId: M:System.String.ToLowerInvariant\n  - type: System.String.ToUpperInvariant\n    commentId: M:System.String.ToUpperInvariant\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.ToUpper()\n- uid: System.String.ToUpperInvariant\n  commentId: M:System.String.ToUpperInvariant\n  id: ToUpperInvariant\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: ToUpperInvariant()\n  fullName: System.String.ToUpperInvariant()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUpperInvariant\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2836\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a copy of this <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object converted to uppercase using the casing rules of the invariant culture.</p>\\n\"\n  syntax:\n    content: public string ToUpperInvariant()\n    content.vb: Public Function ToUpperInvariant As String\n    return:\n      type: System.String\n      description: \"\\n<p>The uppercase equivalent of the current string.</p>\\n\"\n  seealso:\n  - type: System.String.ToLowerInvariant\n    commentId: M:System.String.ToLowerInvariant\n  - type: System.String.ToUpper\n    commentId: M:System.String.ToUpper\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.ToUpperInvariant()\n- uid: System.String.Trim\n  commentId: M:System.String.Trim\n  id: Trim\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Trim()\n  fullName: System.String.Trim()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Trim\n    path: src/mscorlib/src/System/String.cs\n    startLine: 2868\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all leading and trailing white-space characters from the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Trim()\n    content.vb: Public Function Trim As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </p>\\n\"\n  seealso:\n  - type: System.String.TrimEnd(System.Char[])\n    commentId: M:System.String.TrimEnd(System.Char[])\n  - type: System.String.TrimStart(System.Char[])\n    commentId: M:System.String.TrimStart(System.Char[])\n  - type: System.Char.IsWhiteSpace(System.Char)\n    commentId: M:System.Char.IsWhiteSpace(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: String.Trim()\n- uid: System.String.Trim(System.Char[])\n  commentId: M:System.String.Trim(System.Char[])\n  id: Trim(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: Trim(Char[])\n  fullName: System.String.Trim(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Trim\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1355\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Trim(params char[] trimChars)\n    content.vb: Public Function Trim(ParamArray trimChars As Char()) As String\n    parameters:\n    - id: trimChars\n      type: System.Char[]\n      description: \"\\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the start and end of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.TrimEnd(System.Char[])\n    commentId: M:System.String.TrimEnd(System.Char[])\n  - type: System.String.TrimStart(System.Char[])\n    commentId: M:System.String.TrimStart(System.Char[])\n  - type: System.Char.IsWhiteSpace(System.Char)\n    commentId: M:System.Char.IsWhiteSpace(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.Trim(System.Char())\n  name.vb: Trim(Char())\n  nameWithType: String.Trim(Char[])\n  nameWithType.vb: String.Trim(Char())\n- uid: System.String.TrimEnd(System.Char[])\n  commentId: M:System.String.TrimEnd(System.Char[])\n  id: TrimEnd(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: TrimEnd(Char[])\n  fullName: System.String.TrimEnd(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TrimEnd\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1373\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all trailing occurrences of a set of characters specified in an array from the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string TrimEnd(params char[] trimChars)\n    content.vb: Public Function TrimEnd(ParamArray trimChars As Char()) As String\n    parameters:\n    - id: trimChars\n      type: System.Char[]\n      description: \"\\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the end of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  - type: System.String.TrimStart(System.Char[])\n    commentId: M:System.String.TrimStart(System.Char[])\n  - type: System.Char.IsWhiteSpace(System.Char)\n    commentId: M:System.Char.IsWhiteSpace(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.TrimEnd(System.Char())\n  name.vb: TrimEnd(Char())\n  nameWithType: String.TrimEnd(Char[])\n  nameWithType.vb: String.TrimEnd(Char())\n- uid: System.String.TrimStart(System.Char[])\n  commentId: M:System.String.TrimStart(System.Char[])\n  id: TrimStart(System.Char[])\n  parent: System.String\n  langs:\n  - csharp\n  - vb\n  name: TrimStart(Char[])\n  fullName: System.String.TrimStart(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/String.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TrimStart\n    path: src/mscorlib/src/System/String.cs\n    startLine: 1364\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all leading occurrences of a set of characters specified in an array from the current <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string TrimStart(params char[] trimChars)\n    content.vb: Public Function TrimStart(ParamArray trimChars As Char()) As String\n    parameters:\n    - id: trimChars\n      type: System.Char[]\n      description: \"\\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string that remains after all occurrences of characters in the <em>trimChars</em> parameter are removed from the start of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String.Trim(System.Char[])\n    commentId: M:System.String.Trim(System.Char[])\n  - type: System.String.TrimEnd(System.Char[])\n    commentId: M:System.String.TrimEnd(System.Char[])\n  - type: System.Char.IsWhiteSpace(System.Char)\n    commentId: M:System.Char.IsWhiteSpace(System.Char)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.String.TrimStart(System.Char())\n  name.vb: TrimStart(Char())\n  nameWithType: String.TrimStart(Char[])\n  nameWithType.vb: String.TrimStart(Char())\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEnumerable{System.Char}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Char>\n  fullName: System.Collections.Generic.IEnumerable<System.Char>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Char)\n  name.vb: IEnumerable(Of Char)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Char>\n  nameWithType.vb: IEnumerable(Of Char)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Char}\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.String}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<String>\n  fullName: System.IComparable<System.String>\n  fullname.vb: System.IComparable(Of System.String)\n  name.vb: IComparable(Of String)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<String>\n  nameWithType.vb: IComparable(Of String)\n  commentId: T:System.IComparable{System.String}\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IEquatable{System.String}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<String>\n  fullName: System.IEquatable<System.String>\n  fullname.vb: System.IEquatable(Of System.String)\n  name.vb: IEquatable(Of String)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<String>\n  nameWithType.vb: IEquatable(Of String)\n  commentId: T:System.IEquatable{System.String}\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.StringComparison\n  parent: System\n  isExternal: false\n  name: StringComparison\n  fullName: System.StringComparison\n  nameWithType: StringComparison\n  commentId: T:System.StringComparison\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IComparable{System.String}.CompareTo(System.String)\n  parent: System.IComparable{System.String}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(String)\n  fullName: System.IComparable<System.String>.CompareTo(System.String)\n  fullname.vb: System.IComparable(Of System.String).CompareTo(System.String)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.String>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.String).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<String>.CompareTo(String)\n  nameWithType.vb: IComparable(Of String).CompareTo(String)\n  commentId: M:System.IComparable{System.String}.CompareTo(System.String)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)\n  name.vb: IEnumerable(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<String>\n  nameWithType.vb: IEnumerable(Of String)\n  commentId: T:System.Collections.Generic.IEnumerable{System.String}\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.IEquatable{System.String}.Equals(System.String)\n  parent: System.IEquatable{System.String}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(String)\n  fullName: System.IEquatable<System.String>.Equals(System.String)\n  fullname.vb: System.IEquatable(Of System.String).Equals(System.String)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.String>.Equals\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.String).Equals\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<String>.Equals(String)\n  nameWithType.vb: IEquatable(Of String).Equals(String)\n  commentId: M:System.IEquatable{System.String}.Equals(System.String)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.StringSplitOptions\n  parent: System\n  isExternal: false\n  name: StringSplitOptions\n  fullName: System.StringSplitOptions\n  nameWithType: StringSplitOptions\n  commentId: T:System.StringSplitOptions\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}