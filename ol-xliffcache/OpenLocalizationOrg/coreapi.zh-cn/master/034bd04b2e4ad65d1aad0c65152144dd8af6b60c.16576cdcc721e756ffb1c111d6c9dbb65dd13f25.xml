{"nodes":[{"pos":[1197,1213],"content":"StringDictionary","needQuote":true,"nodes":[{"content":"StringDictionary","pos":[0,16]}]},{"pos":[3120,3138],"content":"StringDictionary()","needQuote":true,"nodes":[{"content":"StringDictionary()","pos":[0,18]}]},{"pos":[4255,4260],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[5775,5789],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[7402,7414],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key whose value to get or set.","pos":[8240,8279],"source":"\\n<p>The key whose value to get or set."},{"content":"&lt;/p&gt;\\n","pos":[8280,8286],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value associated with the specified key.","pos":[8346,8395],"source":"\\n<p>The value associated with the specified key."},{"content":"If the specified key is not found, Get returns &lt;strong&gt;null&lt;/strong&gt;, and Set creates a new entry with the specified key.&lt;/p&gt;\\n","pos":[8396,8523],"source":" If the specified key is not found, Get returns <strong>null</strong>, and Set creates a new entry with the specified key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8642,8693],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"pos":[9231,9235],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[10767,10775],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[12321,12327],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[13946,13965],"content":"Add(String, String)","needQuote":true,"nodes":[{"content":"Add(String, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The key of the entry to add.","pos":[14906,14939],"source":"\\n<p>The key of the entry to add."},{"content":"&lt;/p&gt;\\n","pos":[14940,14946],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the entry to add.","pos":[15010,15045],"source":"\\n<p>The value of the entry to add."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt;.","pos":[15046,15085],"source":" The value can be <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15086,15092],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[15211,15256],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15257,15263],"source":" </p>\\n"},{"pos":[16325,16332],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[17775,17794],"content":"ContainsKey(String)","needQuote":true,"nodes":[{"content":"ContainsKey(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The key is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19274,19312],"source":"\\n<p>The key is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19313,19319],"source":" </p>\\n"},{"pos":[19764,19785],"content":"ContainsValue(String)","needQuote":true,"nodes":[{"content":"ContainsValue(String)","pos":[0,21]}]},{"pos":[21670,21690],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The index in the array where copying begins.","pos":[22970,23019],"source":"\\n<p>The index in the array where copying begins."},{"content":"&lt;/p&gt;\\n","pos":[23020,23026],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[23537,23584],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[23585,23591],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than the lower bound of &lt;em&gt;array&lt;/em&gt;.","pos":[23708,23777],"source":"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>."},{"content":"&lt;/p&gt;\\n","pos":[23778,23784],"source":" </p>\\n"},{"pos":[24185,24200],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[25657,25671],"content":"Remove(String)","needQuote":true,"nodes":[{"content":"Remove(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key of the entry to remove.","pos":[26482,26518],"source":"\\n<p>The key of the entry to remove."},{"content":"&lt;/p&gt;\\n","pos":[26519,26525],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26644,26682],"source":"\\n<p>The key is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26683,26689],"source":" </p>\\n"},{"pos":[27345,27375],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[27578,27584],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27758,27769],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27968,27978],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28073,28081],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28150,28151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28178,28179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28249,28257],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28326,28327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28354,28355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28538,28552],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28671,28677],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28744,28745],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28795,28801],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28861,28862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28945,28951],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29018,29019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29069,29075],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29135,29136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29350,29372],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29520,29526],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29593,29594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29644,29650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29711,29712]},{"pos":[29767,29773],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29833,29834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29931,29937],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30004,30005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30055,30061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30122,30123]},{"pos":[30178,30184],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30244,30245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30490,30521],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30687,30702],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30778,30779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30829,30835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30896,30897]},{"pos":[30952,30958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31018,31019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31125,31140],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31216,31217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31267,31273],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31334,31335]},{"pos":[31390,31396],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31456,31457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31687,31700],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31801,31812],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31884,31885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31912,31913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31986,31997],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32069,32070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32097,32098],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32273,32282],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32375,32382],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32450,32451],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32478,32479],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32548,32555],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32623,32624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32651,32652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32827,32844],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32953,32968],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33044,33045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33072,33073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33150,33165],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33241,33242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33269,33270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33565,33578],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[33695,33706],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[33765,33766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33793,33794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33875,33886],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[33945,33946],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33973,33974],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34329,34341],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[34474,34484],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34551,34552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34579,34580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34669,34679],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34746,34747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34774,34775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35116,35131],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[35335,35348],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[35410,35411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35438,35439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35517,35533],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[35598,35599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35626,35627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36005,36022],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[36234,36249],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[36313,36314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36341,36342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36422,36440],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[36507,36508],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36535,36536],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36771,36777],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36896,36914],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[37115,37139],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[37318,37329],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37388,37389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37456,37467],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37544,37545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37658,37669],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37728,37729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37796,37807],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37884,37885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38113,38122],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[38328,38351],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[38546,38556],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38623,38624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38691,38702],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38779,38780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38901,38911],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38978,38979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39046,39057],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39134,39135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39388,39406],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[39628,39654],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[39961,39974],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[40036,40037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40104,40115],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40192,40193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40303,40319],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[40384,40385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40452,40463],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40540,40541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40830,40840],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[41040,41068],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[41383,41398],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[41462,41463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41530,41541],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41618,41619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41731,41749],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[41816,41817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41884,41895],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41972,41973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42235,42246],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[42391,42396],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42539,42546],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42694,42700],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[42874,42885],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[43068,43073],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[43270,43285],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[43424,43437],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[43507,43508],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43535,43536],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43628,43641],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[43711,43712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43739,43740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43956,43967],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[44149,44170],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[44371,44388],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[44581,44602],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[44796,44823],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Collections.Specialized.StringDictionary\n  commentId: T:System.Collections.Specialized.StringDictionary\n  id: StringDictionary\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.StringDictionary.#ctor\n  - System.Collections.Specialized.StringDictionary.Add(System.String,System.String)\n  - System.Collections.Specialized.StringDictionary.Clear\n  - System.Collections.Specialized.StringDictionary.ContainsKey(System.String)\n  - System.Collections.Specialized.StringDictionary.ContainsValue(System.String)\n  - System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.StringDictionary.Count\n  - System.Collections.Specialized.StringDictionary.GetEnumerator\n  - System.Collections.Specialized.StringDictionary.IsSynchronized\n  - System.Collections.Specialized.StringDictionary.Item(System.String)\n  - System.Collections.Specialized.StringDictionary.Keys\n  - System.Collections.Specialized.StringDictionary.Remove(System.String)\n  - System.Collections.Specialized.StringDictionary.SyncRoot\n  - System.Collections.Specialized.StringDictionary.Values\n  langs:\n  - csharp\n  - vb\n  name: StringDictionary\n  fullName: System.Collections.Specialized.StringDictionary\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StringDictionary\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 13\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Implements a hash table with the key and the value strongly typed to be strings rather than objects.</p>\\n\"\n  syntax:\n    content: 'public class StringDictionary : IEnumerable'\n    content.vb: >-\n      Public Class StringDictionary\n          Implements IEnumerable\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: StringDictionary\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Specialized.StringDictionary.#ctor\n  commentId: M:System.Collections.Specialized.StringDictionary.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: StringDictionary()\n  fullName: System.Collections.Specialized.StringDictionary.StringDictionary()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 28\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public StringDictionary()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringDictionary.StringDictionary()\n- uid: System.Collections.Specialized.StringDictionary.Count\n  commentId: P:System.Collections.Specialized.StringDictionary.Count\n  id: Count\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Specialized.StringDictionary.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 35\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the number of key/value pairs in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of key/value pairs in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>Retrieving the value of this property is an O(1) operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StringDictionary.Count\n- uid: System.Collections.Specialized.StringDictionary.IsSynchronized\n  commentId: P:System.Collections.Specialized.StringDictionary.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Collections.Specialized.StringDictionary.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSynchronized\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 48\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StringDictionary.IsSynchronized\n- uid: System.Collections.Specialized.StringDictionary.Item(System.String)\n  commentId: P:System.Collections.Specialized.StringDictionary.Item(System.String)\n  id: Item(System.String)\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Collections.Specialized.StringDictionary.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 59\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets the value associated with the specified key.</p>\\n\"\n  syntax:\n    content: public virtual string this[string key] { get; set; }\n    content.vb: Public Overridable Property Item(key As String) As String\n    parameters:\n    - id: key\n      type: System.String\n      description: \"\\n<p>The key whose value to get or set. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value associated with the specified key. If the specified key is not found, Get returns <strong>null</strong>, and Set creates a new entry with the specified key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Collections.Specialized.StringDictionary.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: StringDictionary.Item[String]\n  nameWithType.vb: StringDictionary.Item(String)\n- uid: System.Collections.Specialized.StringDictionary.Keys\n  commentId: P:System.Collections.Specialized.StringDictionary.Keys\n  id: Keys\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.Specialized.StringDictionary.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Keys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 84\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a collection of keys in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Keys { get; }\n    content.vb: Public Overridable ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the keys in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StringDictionary.Keys\n- uid: System.Collections.Specialized.StringDictionary.SyncRoot\n  commentId: P:System.Collections.Specialized.StringDictionary.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Collections.Specialized.StringDictionary.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SyncRoot\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 96\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to synchronize access to the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StringDictionary.SyncRoot\n- uid: System.Collections.Specialized.StringDictionary.Values\n  commentId: P:System.Collections.Specialized.StringDictionary.Values\n  id: Values\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Collections.Specialized.StringDictionary.Values\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Values\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 107\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a collection of values in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Values { get; }\n    content.vb: Public Overridable ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the values in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StringDictionary.Values\n- uid: System.Collections.Specialized.StringDictionary.Add(System.String,System.String)\n  commentId: M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)\n  id: Add(System.String,System.String)\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Add(String, String)\n  fullName: System.Collections.Specialized.StringDictionary.Add(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 118\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Adds an entry with the specified key and value into the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Add(string key, string value)\n    content.vb: Public Overridable Sub Add(key As String, value As String)\n    parameters:\n    - id: key\n      type: System.String\n      description: \"\\n<p>The key of the entry to add. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the entry to add. The value can be <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An entry with the same key already exists in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.StringDictionary.Remove(System.String)\n    commentId: M:System.Collections.Specialized.StringDictionary.Remove(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.Add(String, String)\n- uid: System.Collections.Specialized.StringDictionary.Clear\n  commentId: M:System.Collections.Specialized.StringDictionary.Clear\n  id: Clear\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Specialized.StringDictionary.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 131\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes all entries from the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.Clear()\n- uid: System.Collections.Specialized.StringDictionary.ContainsKey(System.String)\n  commentId: M:System.Collections.Specialized.StringDictionary.ContainsKey(System.String)\n  id: ContainsKey(System.String)\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: ContainsKey(String)\n  fullName: System.Collections.Specialized.StringDictionary.ContainsKey(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContainsKey\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 139\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines if the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific key.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsKey(string key)\n    content.vb: Public Overridable Function ContainsKey(key As String) As Boolean\n    parameters:\n    - id: key\n      type: System.String\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an entry with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The key is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.ContainsKey(String)\n- uid: System.Collections.Specialized.StringDictionary.ContainsValue(System.String)\n  commentId: M:System.Collections.Specialized.StringDictionary.ContainsValue(System.String)\n  id: ContainsValue(System.String)\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: ContainsValue(String)\n  fullName: System.Collections.Specialized.StringDictionary.ContainsValue(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContainsValue\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 152\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines if the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific value.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsValue(string value)\n    content.vb: Public Overridable Function ContainsValue(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value to locate in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified value; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.ContainsValue(String)\n- uid: System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.Specialized.StringDictionary.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 161\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the string dictionary values to a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array, int index)\n    content.vb: Public Overridable Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the values copied from the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index in the array where copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of <em>array</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than the lower bound of <em>array</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.CopyTo(Array, Int32)\n- uid: System.Collections.Specialized.StringDictionary.GetEnumerator\n  commentId: M:System.Collections.Specialized.StringDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.Specialized.StringDictionary.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 169\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns an enumerator that iterates through the string dictionary.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that iterates through the string dictionary.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.GetEnumerator()\n- uid: System.Collections.Specialized.StringDictionary.Remove(System.String)\n  commentId: M:System.Collections.Specialized.StringDictionary.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Collections.Specialized.StringDictionary\n  langs:\n  - csharp\n  - vb\n  name: Remove(String)\n  fullName: System.Collections.Specialized.StringDictionary.Remove(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringDictionary.cs\n    startLine: 177\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes the entry with the specified key from the string dictionary.</p>\\n\"\n  syntax:\n    content: public virtual void Remove(string key)\n    content.vb: Public Overridable Sub Remove(key As String)\n    parameters:\n    - id: key\n      type: System.String\n      description: \"\\n<p>The key of the entry to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The key is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.StringDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.StringDictionary.Add(System.String,System.String)\n    commentId: M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: StringDictionary.Remove(String)\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}