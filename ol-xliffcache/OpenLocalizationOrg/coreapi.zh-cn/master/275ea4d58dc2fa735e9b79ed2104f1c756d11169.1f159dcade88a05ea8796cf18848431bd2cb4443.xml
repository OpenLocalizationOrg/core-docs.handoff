{"nodes":[{"pos":[969,987],"content":"SendPacketsElement","needQuote":true,"nodes":[{"content":"SendPacketsElement","pos":[0,18]}]},{"pos":[2683,2709],"content":"SendPacketsElement(Byte[])","needQuote":true,"nodes":[{"content":"SendPacketsElement(Byte[])","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;buffer&lt;/em&gt; parameter cannot be null&lt;/p&gt;\\n","pos":[3830,3885],"source":"\\n<p>The <em>buffer</em> parameter cannot be null</p>\\n"},{"pos":[4965,5005],"content":"SendPacketsElement(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"SendPacketsElement(Byte[], Int32, Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The offset, in bytes, from the beginning of the &lt;em&gt;buffer&lt;/em&gt; to the location in the &lt;em&gt;buffer&lt;/em&gt; to start sending the data specified in the &lt;em&gt;buffer&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[6185,6368],"source":"\\n<p>The offset, in bytes, from the beginning of the <em>buffer</em> to the location in the <em>buffer</em> to start sending the data specified in the <em>buffer</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to send starting from the &lt;em&gt;offset&lt;/em&gt; parameter.","pos":[6431,6508],"source":"\\n<p>The number of bytes to send starting from the <em>offset</em> parameter."},{"content":"If &lt;em&gt;count&lt;/em&gt; is zero, no bytes are sent.&lt;/p&gt;\\n","pos":[6509,6560],"source":" If <em>count</em> is zero, no bytes are sent.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;buffer&lt;/em&gt; parameter cannot be null&lt;/p&gt;\\n","pos":[6679,6734],"source":"\\n<p>The <em>buffer</em> parameter cannot be null</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; parameters must be greater than or equal to zero.","pos":[6851,6944],"source":"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; must be less than the size of the buffer&lt;/p&gt;\\n","pos":[6945,7039],"source":" </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the buffer</p>\\n"},{"pos":[8331,8380],"content":"SendPacketsElement(Byte[], Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"SendPacketsElement(Byte[], Int32, Int32, Boolean)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The offset, in bytes, from the beginning of the &lt;em&gt;buffer&lt;/em&gt; to the location in the &lt;em&gt;buffer&lt;/em&gt; to start sending the data specified in the &lt;em&gt;buffer&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[9745,9928],"source":"\\n<p>The offset, in bytes, from the beginning of the <em>buffer</em> to the location in the <em>buffer</em> to start sending the data specified in the <em>buffer</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The number bytes to send starting from the &lt;em&gt;offset&lt;/em&gt; parameter.","pos":[9991,10065],"source":"\\n<p>The number bytes to send starting from the <em>offset</em> parameter."},{"content":"If &lt;em&gt;count&lt;/em&gt; is zero, no bytes are sent.&lt;/p&gt;\\n","pos":[10066,10117],"source":" If <em>count</em> is zero, no bytes are sent.</p>\\n"},{"content":"\\n&lt;p&gt;A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport.","pos":[10188,10352],"source":"\\n<p>A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport."},{"content":"This flag is used for granular control of the content of each message on a datagram or message-oriented socket.","pos":[10353,10464]},{"content":"&lt;/p&gt;\\n","pos":[10465,10471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;buffer&lt;/em&gt; parameter cannot be null&lt;/p&gt;\\n","pos":[10590,10645],"source":"\\n<p>The <em>buffer</em> parameter cannot be null</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; parameters must be greater than or equal to zero.","pos":[10762,10855],"source":"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; must be less than the size of the buffer&lt;/p&gt;\\n","pos":[10856,10950],"source":" </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the buffer</p>\\n"},{"pos":[12162,12188],"content":"SendPacketsElement(String)","needQuote":true,"nodes":[{"content":"SendPacketsElement(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;filepath&lt;/em&gt; parameter cannot be null&lt;/p&gt;\\n","pos":[13327,13384],"source":"\\n<p>The <em>filepath</em> parameter cannot be null</p>\\n"},{"pos":[14274,14314],"content":"SendPacketsElement(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"SendPacketsElement(String, Int32, Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the &lt;em&gt;filepath&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[15514,15677],"source":"\\n<p>The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the <em>filepath</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to send starting from the &lt;em&gt;offset&lt;/em&gt; parameter.","pos":[15740,15817],"source":"\\n<p>The number of bytes to send starting from the <em>offset</em> parameter."},{"content":"If &lt;em&gt;count&lt;/em&gt; is zero, the entire file is sent.","pos":[15818,15869],"source":" If <em>count</em> is zero, the entire file is sent."},{"content":"&lt;/p&gt;\\n","pos":[15870,15876],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;filepath&lt;/em&gt; parameter cannot be null&lt;/p&gt;\\n","pos":[15995,16052],"source":"\\n<p>The <em>filepath</em> parameter cannot be null</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; parameters must be greater than or equal to zero.","pos":[16169,16262],"source":"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; must be less than the size of the file indicated by the &lt;em&gt;filepath&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[16263,16401],"source":" </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the file indicated by the <em>filepath</em> parameter.</p>\\n"},{"pos":[17447,17496],"content":"SendPacketsElement(String, Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"SendPacketsElement(String, Int32, Int32, Boolean)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the &lt;em&gt;filepath&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[18888,19051],"source":"\\n<p>The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the <em>filepath</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to send starting from the &lt;em&gt;offset&lt;/em&gt; parameter.","pos":[19114,19191],"source":"\\n<p>The number of bytes to send starting from the <em>offset</em> parameter."},{"content":"If &lt;em&gt;count&lt;/em&gt; is zero, the entire file is sent.&lt;/p&gt;\\n","pos":[19192,19249],"source":" If <em>count</em> is zero, the entire file is sent.</p>\\n"},{"content":"\\n&lt;p&gt;A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport.","pos":[19320,19484],"source":"\\n<p>A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport."},{"content":"This flag is used for granular control of the content of each message on a datagram or message-oriented socket.&lt;/p&gt;\\n","pos":[19485,19602],"source":" This flag is used for granular control of the content of each message on a datagram or message-oriented socket.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;filepath&lt;/em&gt; parameter cannot be null&lt;/p&gt;\\n","pos":[19721,19778],"source":"\\n<p>The <em>filepath</em> parameter cannot be null</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; parameters must be greater than or equal to zero.","pos":[19895,19988],"source":"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; must be less than the size of the file indicated by the &lt;em&gt;filepath&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[19989,20127],"source":" </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the file indicated by the <em>filepath</em> parameter.</p>\\n"},{"pos":[21015,21021],"content":"Buffer","needQuote":true,"nodes":[{"content":"Buffer","pos":[0,6]}]},{"pos":[22334,22339],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[23513,23524],"content":"EndOfPacket","needQuote":true,"nodes":[{"content":"EndOfPacket","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A Boolean value that indicates if this element should not be combined with the next element in a single send request.&lt;/p&gt;\\n","pos":[24309,24437],"source":"\\n<p>A Boolean value that indicates if this element should not be combined with the next element in a single send request.</p>\\n"},{"pos":[24779,24787],"content":"FilePath","needQuote":true,"nodes":[{"content":"FilePath","pos":[0,8]}]},{"pos":[26137,26143],"content":"Offset","needQuote":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.&lt;/p&gt;\\n","pos":[26881,27024],"source":"\\n<p>The offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.</p>\\n"},{"pos":[27213,27231],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[27398,27404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27564,27574],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27669,27677],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27746,27747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27774,27775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27845,27853],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27922,27923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27950,27951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28134,28148],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28267,28273],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28340,28341],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28391,28397],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28457,28458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28541,28547],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28614,28615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28665,28671],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28731,28732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28946,28968],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29116,29122],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29189,29190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29240,29246],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29307,29308]},{"pos":[29363,29369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29429,29430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29527,29533],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29600,29601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29651,29657],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29718,29719]},{"pos":[29774,29780],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29840,29841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30086,30117],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30283,30298],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30374,30375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30425,30431],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30492,30493]},{"pos":[30548,30554],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30614,30615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30721,30736],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30812,30813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30863,30869],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30930,30931]},{"pos":[30986,30992],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31052,31053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31283,31296],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31397,31408],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31480,31481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31508,31509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31582,31593],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31665,31666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31693,31694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31869,31878],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31971,31978],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32046,32047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32074,32075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32144,32151],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32219,32220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32247,32248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32423,32440],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32549,32564],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32640,32641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32668,32669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32746,32761],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32837,32838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32865,32866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33011,33017],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33111,33117],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[33237,33241],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[33300,33302]},{"pos":[33365,33369],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33427,33429],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33561,33566],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33709,33716],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[33864,33870],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34013,34034],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[34228,34255],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.Sockets.SendPacketsElement\n  commentId: T:System.Net.Sockets.SendPacketsElement\n  id: SendPacketsElement\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])\n  - System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.Net.Sockets.SendPacketsElement.#ctor(System.String)\n  - System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)\n  - System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)\n  - System.Net.Sockets.SendPacketsElement.Buffer\n  - System.Net.Sockets.SendPacketsElement.Count\n  - System.Net.Sockets.SendPacketsElement.EndOfPacket\n  - System.Net.Sockets.SendPacketsElement.FilePath\n  - System.Net.Sockets.SendPacketsElement.Offset\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement\n  fullName: System.Net.Sockets.SendPacketsElement\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPacketsElement\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 144\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Represents an element in a <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public class SendPacketsElement\n    content.vb: Public Class SendPacketsElement\n  seealso:\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SendPacketsElement\n- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])\n  commentId: M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement(Byte[])\n  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 146\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified buffer.</p>\\n\"\n  syntax:\n    content: public SendPacketsElement(byte[] buffer)\n    content.vb: Public Sub New(buffer As Byte())\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A byte array of data to send using the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>buffer</em> parameter cannot be null</p>\\n\"\n  seealso:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte())\n  name.vb: SendPacketsElement(Byte())\n  nameWithType: SendPacketsElement.SendPacketsElement(Byte[])\n  nameWithType.vb: SendPacketsElement.SendPacketsElement(Byte())\n- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32)'\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement(Byte[], Int32, Int32)\n  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte[], System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 147\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified buffer, buffer offset, and count.</p>\\n\"\n  syntax:\n    content: public SendPacketsElement(byte[] buffer, int offset, int count)\n    content.vb: Public Sub New(buffer As Byte(), offset As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A byte array of data to send using the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, from the beginning of the <em>buffer</em> to the location in the <em>buffer</em> to start sending the data specified in the <em>buffer</em> parameter.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to send starting from the <em>offset</em> parameter. If <em>count</em> is zero, no bytes are sent.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>buffer</em> parameter cannot be null</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero. </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the buffer</p>\\n\"\n  seealso:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte(), System.Int32, System.Int32)\n  name.vb: SendPacketsElement(Byte(), Int32, Int32)\n  nameWithType: SendPacketsElement.SendPacketsElement(Byte[], Int32, Int32)\n  nameWithType.vb: SendPacketsElement.SendPacketsElement(Byte(), Int32, Int32)\n- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)'\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement(Byte[], Int32, Int32, Boolean)\n  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte[], System.Int32, System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 148\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified buffer, buffer offset, and count with an option to combine this element with the next element in a single send request from the sockets layer to the transport. </p>\\n\"\n  syntax:\n    content: public SendPacketsElement(byte[] buffer, int offset, int count, bool endOfPacket)\n    content.vb: Public Sub New(buffer As Byte(), offset As Integer, count As Integer, endOfPacket As Boolean)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A byte array of data to send using the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, from the beginning of the <em>buffer</em> to the location in the <em>buffer</em> to start sending the data specified in the <em>buffer</em> parameter.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number bytes to send starting from the <em>offset</em> parameter. If <em>count</em> is zero, no bytes are sent.</p>\\n\"\n    - id: endOfPacket\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport. This flag is used for granular control of the content of each message on a datagram or message-oriented socket. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>buffer</em> parameter cannot be null</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero. </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the buffer</p>\\n\"\n  seealso:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte(), System.Int32, System.Int32, System.Boolean)\n  name.vb: SendPacketsElement(Byte(), Int32, Int32, Boolean)\n  nameWithType: SendPacketsElement.SendPacketsElement(Byte[], Int32, Int32, Boolean)\n  nameWithType.vb: SendPacketsElement.SendPacketsElement(Byte(), Int32, Int32, Boolean)\n- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.String)\n  commentId: M:System.Net.Sockets.SendPacketsElement.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement(String)\n  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 149\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified file.</p>\\n\"\n  syntax:\n    content: public SendPacketsElement(string filepath)\n    content.vb: Public Sub New(filepath As String)\n    parameters:\n    - id: filepath\n      type: System.String\n      description: \"\\n<p>The filename of the file to be transmitted using the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>filepath</em> parameter cannot be null</p>\\n\"\n  seealso:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SendPacketsElement.SendPacketsElement(String)\n- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)\n  commentId: M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Int32,System.Int32)'\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement(String, Int32, Int32)\n  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.String, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 150\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified filename path, offset, and count.</p>\\n\"\n  syntax:\n    content: public SendPacketsElement(string filepath, int offset, int count)\n    content.vb: Public Sub New(filepath As String, offset As Integer, count As Integer)\n    parameters:\n    - id: filepath\n      type: System.String\n      description: \"\\n<p>The filename of the file to be transmitted using the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the <em>filepath</em> parameter.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to send starting from the <em>offset</em> parameter. If <em>count</em> is zero, the entire file is sent. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>filepath</em> parameter cannot be null</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero. </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the file indicated by the <em>filepath</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SendPacketsElement.SendPacketsElement(String, Int32, Int32)\n- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)\n  id: '#ctor(System.String,System.Int32,System.Int32,System.Boolean)'\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElement(String, Int32, Int32, Boolean)\n  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.String, System.Int32, System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 151\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified filename path, buffer offset, and count with an option to combine this element with the next element in a single send request from the sockets layer to the transport. </p>\\n\"\n  syntax:\n    content: public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket)\n    content.vb: Public Sub New(filepath As String, offset As Integer, count As Integer, endOfPacket As Boolean)\n    parameters:\n    - id: filepath\n      type: System.String\n      description: \"\\n<p>The filename of the file to be transmitted using the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the <em>filepath</em> parameter.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to send starting from the <em>offset</em> parameter. If <em>count</em> is zero, the entire file is sent.</p>\\n\"\n    - id: endOfPacket\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport. This flag is used for granular control of the content of each message on a datagram or message-oriented socket.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>filepath</em> parameter cannot be null</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>offset</em> and <em>count</em> parameters must be greater than or equal to zero. </p>\\n<p>The <em>offset</em> and <em>count</em> must be less than the size of the file indicated by the <em>filepath</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SendPacketsElement.SendPacketsElement(String, Int32, Int32, Boolean)\n- uid: System.Net.Sockets.SendPacketsElement.Buffer\n  commentId: P:System.Net.Sockets.SendPacketsElement.Buffer\n  id: Buffer\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: Buffer\n  fullName: System.Net.Sockets.SendPacketsElement.Buffer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Buffer\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 152\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the buffer to be sent if the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class was initialized with a <em>buffer</em> parameter.</p>\\n\"\n  syntax:\n    content: public byte[] Buffer { get; }\n    content.vb: Public ReadOnly Property Buffer As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The byte buffer to send if the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class was initialized with a <em>buffer</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SendPacketsElement.Buffer\n- uid: System.Net.Sockets.SendPacketsElement.Count\n  commentId: P:System.Net.Sockets.SendPacketsElement.Count\n  id: Count\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Net.Sockets.SendPacketsElement.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 153\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the count of bytes to be sent. </p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The count of bytes to send if the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class was initialized with a <em>count</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SendPacketsElement.Count\n- uid: System.Net.Sockets.SendPacketsElement.EndOfPacket\n  commentId: P:System.Net.Sockets.SendPacketsElement.EndOfPacket\n  id: EndOfPacket\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: EndOfPacket\n  fullName: System.Net.Sockets.SendPacketsElement.EndOfPacket\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EndOfPacket\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 154\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets a Boolean value that indicates if this element should not be combined with the next element in a single send request from the sockets layer to the transport.</p>\\n\"\n  syntax:\n    content: public bool EndOfPacket { get; }\n    content.vb: Public ReadOnly Property EndOfPacket As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates if this element should not be combined with the next element in a single send request.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SendPacketsElement.EndOfPacket\n- uid: System.Net.Sockets.SendPacketsElement.FilePath\n  commentId: P:System.Net.Sockets.SendPacketsElement.FilePath\n  id: FilePath\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: FilePath\n  fullName: System.Net.Sockets.SendPacketsElement.FilePath\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FilePath\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 155\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the filename of the file to send if the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class was initialized with a <em>filepath</em> parameter.</p>\\n\"\n  syntax:\n    content: public string FilePath { get; }\n    content.vb: Public ReadOnly Property FilePath As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The filename of the file to send if the <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class was initialized with a <em>filepath</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SendPacketsElement.FilePath\n- uid: System.Net.Sockets.SendPacketsElement.Offset\n  commentId: P:System.Net.Sockets.SendPacketsElement.Offset\n  id: Offset\n  parent: System.Net.Sockets.SendPacketsElement\n  langs:\n  - csharp\n  - vb\n  name: Offset\n  fullName: System.Net.Sockets.SendPacketsElement.Offset\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Offset\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 156\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data. </p>\\n\"\n  syntax:\n    content: public int Offset { get; }\n    content.vb: Public ReadOnly Property Offset As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SendPacketsElement.Offset\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}